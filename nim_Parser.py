# Generated from nim_Parser.g4 by ANTLR 4.7.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3s")
        buf.write("\u0474\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\4j\tj\4k\tk\4l\tl\3\2\3\2\3\3\3\3\3\4\3\4\3")
        buf.write("\5\3\5\3\6\3\6\3\7\3\7\3\b\3\b\3\b\3\b\5\b\u00e9\n\b\3")
        buf.write("\t\3\t\3\n\3\n\3\13\3\13\3\f\3\f\3\f\3\f\5\f\u00f5\n\f")
        buf.write("\3\r\3\r\3\16\3\16\3\17\3\17\3\20\3\20\3\21\3\21\3\21")
        buf.write("\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\5\21\u010a\n")
        buf.write("\21\3\22\3\22\3\23\3\23\3\23\7\23\u0111\n\23\f\23\16\23")
        buf.write("\u0114\13\23\3\24\3\24\3\24\7\24\u0119\n\24\f\24\16\24")
        buf.write("\u011c\13\24\3\25\3\25\3\25\7\25\u0121\n\25\f\25\16\25")
        buf.write("\u0124\13\25\3\26\3\26\3\26\7\26\u0129\n\26\f\26\16\26")
        buf.write("\u012c\13\26\3\27\3\27\3\27\7\27\u0131\n\27\f\27\16\27")
        buf.write("\u0134\13\27\3\30\3\30\3\30\7\30\u0139\n\30\f\30\16\30")
        buf.write("\u013c\13\30\3\31\3\31\3\31\7\31\u0141\n\31\f\31\16\31")
        buf.write("\u0144\13\31\3\32\3\32\3\32\7\32\u0149\n\32\f\32\16\32")
        buf.write("\u014c\13\32\3\33\3\33\3\33\7\33\u0151\n\33\f\33\16\33")
        buf.write("\u0154\13\33\3\34\3\34\3\34\7\34\u0159\n\34\f\34\16\34")
        buf.write("\u015c\13\34\3\35\3\35\3\36\3\36\3\37\3\37\3\37\3\37\3")
        buf.write("\37\5\37\u0167\n\37\3 \3 \3 \3 \3 \3 \3 \3 \7 \u0171\n")
        buf.write(" \f \16 \u0174\13 \5 \u0176\n \3!\3!\3!\5!\u017b\n!\3")
        buf.write("\"\3\"\3\"\3\"\7\"\u0181\n\"\f\"\16\"\u0184\13\"\3\"\3")
        buf.write("\"\3#\3#\3#\3#\7#\u018c\n#\f#\16#\u018f\13#\3#\3#\3$\3")
        buf.write("$\3$\5$\u0196\n$\3%\3%\3%\3&\3&\3&\5&\u019e\n&\3&\3&\3")
        buf.write("&\5&\u01a3\n&\3\'\3\'\3\'\3\'\7\'\u01a9\n\'\f\'\16\'\u01ac")
        buf.write("\13\'\3\'\3\'\3\'\3\'\3\'\5\'\u01b3\n\'\3\'\3\'\3\'\3")
        buf.write("\'\3\'\3\'\5\'\u01bb\n\'\3(\3(\3(\3(\7(\u01c1\n(\f(\16")
        buf.write("(\u01c4\13(\3(\3(\7(\u01c8\n(\f(\16(\u01cb\13(\3(\6(\u01ce")
        buf.write("\n(\r(\16(\u01cf\5(\u01d2\n(\5(\u01d4\n(\3)\3)\3)\3)\5")
        buf.write(")\u01da\n)\3)\3)\3)\3)\3)\3)\6)\u01e2\n)\r)\16)\u01e3")
        buf.write("\3)\3)\6)\u01e8\n)\r)\16)\u01e9\5)\u01ec\n)\5)\u01ee\n")
        buf.write(")\3*\3*\3*\3*\3+\3+\3+\3+\7+\u01f8\n+\f+\16+\u01fb\13")
        buf.write("+\3,\3,\3,\3,\3-\3-\3-\3-\3-\3-\3-\3-\5-\u0209\n-\3.\3")
        buf.write(".\3/\3/\5/\u020f\n/\3\60\3\60\5\60\u0213\n\60\3\61\3\61")
        buf.write("\3\61\3\61\3\61\3\61\3\61\3\61\3\61\5\61\u021e\n\61\7")
        buf.write("\61\u0220\n\61\f\61\16\61\u0223\13\61\3\61\3\61\3\61\3")
        buf.write("\61\3\61\3\61\3\61\5\61\u022c\n\61\3\62\3\62\3\62\3\62")
        buf.write("\3\62\3\62\3\62\5\62\u0235\n\62\3\63\3\63\3\63\3\63\3")
        buf.write("\63\3\63\3\63\5\63\u023e\n\63\3\64\3\64\3\64\3\65\3\65")
        buf.write("\5\65\u0245\n\65\3\65\3\65\3\66\3\66\3\66\7\66\u024c\n")
        buf.write("\66\f\66\16\66\u024f\13\66\3\67\3\67\3\67\3\67\3\67\6")
        buf.write("\67\u0256\n\67\r\67\16\67\u0257\3\67\3\67\3\67\5\67\u025d")
        buf.write("\n\67\38\68\u0260\n8\r8\168\u0261\38\38\38\38\68\u0268")
        buf.write("\n8\r8\168\u0269\38\38\38\58\u026f\n8\58\u0271\n8\39\3")
        buf.write("9\39\39\39\39\39\59\u027a\n9\3:\3:\3:\3:\3:\6:\u0281\n")
        buf.write(":\r:\16:\u0282\3:\5:\u0286\n:\3:\3:\3:\6:\u028b\n:\r:")
        buf.write("\16:\u028c\3:\5:\u0290\n:\5:\u0292\n:\3;\3;\3;\3<\3<\3")
        buf.write("<\7<\u029a\n<\f<\16<\u029d\13<\3=\3=\3=\3=\3=\3=\3=\6")
        buf.write("=\u02a6\n=\r=\16=\u02a7\3=\3=\3=\5=\u02ad\n=\3>\3>\5>")
        buf.write("\u02b1\n>\3>\3>\3?\3?\3?\3?\3?\6?\u02ba\n?\r?\16?\u02bb")
        buf.write("\3?\5?\u02bf\n?\3?\3?\3?\6?\u02c4\n?\r?\16?\u02c5\3?\5")
        buf.write("?\u02c9\n?\5?\u02cb\n?\3@\3@\3@\3@\6@\u02d1\n@\r@\16@")
        buf.write("\u02d2\3@\5@\u02d6\n@\3@\3@\3@\6@\u02db\n@\r@\16@\u02dc")
        buf.write("\3@\5@\u02e0\n@\5@\u02e2\n@\3A\3A\3A\3A\3A\5A\u02e9\n")
        buf.write("A\3A\3A\7A\u02ed\nA\fA\16A\u02f0\13A\3A\5A\u02f3\nA\3")
        buf.write("A\3A\3A\7A\u02f8\nA\fA\16A\u02fb\13A\3A\3A\5A\u02ff\n")
        buf.write("A\3A\3A\3A\7A\u0304\nA\fA\16A\u0307\13A\3A\5A\u030a\n")
        buf.write("A\5A\u030c\nA\3B\3B\3B\3B\3C\3C\3C\3C\3C\3C\3C\3C\5C\u031a")
        buf.write("\nC\3D\3D\3E\3E\3E\5E\u0321\nE\3F\3F\3F\5F\u0326\nF\3")
        buf.write("G\3G\3H\3H\3H\3H\5H\u032e\nH\3I\3I\3I\3I\5I\u0334\nI\3")
        buf.write("I\3I\3J\3J\5J\u033a\nJ\3K\3K\3K\3L\3L\5L\u0341\nL\3L\3")
        buf.write("L\3L\3L\5L\u0347\nL\3M\3M\3M\3M\3M\5M\u034e\nM\3N\3N\5")
        buf.write("N\u0352\nN\3N\3N\3N\3N\6N\u0358\nN\rN\16N\u0359\3N\3N")
        buf.write("\5N\u035e\nN\3O\3O\3O\3O\7O\u0364\nO\fO\16O\u0367\13O")
        buf.write("\3O\3O\3P\3P\3P\3P\3Q\3Q\3R\3R\3R\3R\7R\u0375\nR\fR\16")
        buf.write("R\u0378\13R\3R\3R\3S\3S\3T\5T\u037f\nT\3T\3T\3T\3T\6T")
        buf.write("\u0385\nT\rT\16T\u0386\3T\3T\5T\u038b\nT\3U\3U\3U\3U\3")
        buf.write("V\3V\3W\3W\3X\3X\3X\3X\3Y\3Y\3Y\3Y\7Y\u039d\nY\fY\16Y")
        buf.write("\u03a0\13Y\3Y\3Y\3Z\3Z\5Z\u03a6\nZ\3Z\3Z\3Z\3Z\6Z\u03ac")
        buf.write("\nZ\rZ\16Z\u03ad\3Z\3Z\5Z\u03b2\nZ\3[\3[\3[\3[\3\\\3\\")
        buf.write("\3]\6]\u03bb\n]\r]\16]\u03bc\3]\3]\6]\u03c1\n]\r]\16]")
        buf.write("\u03c2\3]\3]\5]\u03c7\n]\3^\6^\u03ca\n^\r^\16^\u03cb\3")
        buf.write("^\3^\6^\u03d0\n^\r^\16^\u03d1\3^\3^\5^\u03d6\n^\3_\3_")
        buf.write("\3_\3_\3_\3_\3_\6_\u03df\n_\r_\16_\u03e0\3_\3_\5_\u03e5")
        buf.write("\n_\3`\3`\5`\u03e9\n`\3a\3a\3a\3a\7a\u03ef\na\fa\16a\u03f2")
        buf.write("\13a\3a\3a\3a\3a\3a\5a\u03f9\na\3a\3a\5a\u03fd\na\3a\3")
        buf.write("a\3a\3a\3a\5a\u0404\na\3b\3b\3b\7b\u0409\nb\fb\16b\u040c")
        buf.write("\13b\3b\3b\5b\u0410\nb\3b\3b\3b\3b\3b\3b\5b\u0418\nb\3")
        buf.write("c\3c\5c\u041c\nc\3d\3d\3d\7d\u0421\nd\fd\16d\u0424\13")
        buf.write("d\3d\5d\u0427\nd\3d\3d\3d\3d\3d\3d\5d\u042f\nd\5d\u0431")
        buf.write("\nd\3d\3d\3d\3d\3d\3d\5d\u0439\nd\5d\u043b\nd\3e\3e\5")
        buf.write("e\u043f\ne\3f\3f\3f\3f\3f\3f\5f\u0447\nf\3g\3g\3g\3g\3")
        buf.write("g\3g\3g\3g\3g\3g\3g\3g\3g\3g\3g\3g\3g\3g\3g\3g\5g\u045d")
        buf.write("\ng\3h\3h\3h\3i\3i\3i\3i\3j\3j\3k\3k\5k\u046a\nk\3k\7")
        buf.write("k\u046d\nk\fk\16k\u0470\13k\3l\3l\3l\2\2m\2\4\6\b\n\f")
        buf.write("\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64\668:<>@")
        buf.write("BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086")
        buf.write("\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098")
        buf.write("\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa")
        buf.write("\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc")
        buf.write("\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce")
        buf.write("\u00d0\u00d2\u00d4\u00d6\2\f\3\3mm\5\2\'\'++KK\t\2\')")
        buf.write("\678<<>>DDOOUU\4\2\27\27\35\35\4\2\30\32!!\4\2\33\33&")
        buf.write("&\5\2QQYbdj\3\2kl\4\2\25\25\27\27\4\2\t\t\25\25\2\u04b4")
        buf.write("\2\u00d8\3\2\2\2\4\u00da\3\2\2\2\6\u00dc\3\2\2\2\b\u00de")
        buf.write("\3\2\2\2\n\u00e0\3\2\2\2\f\u00e2\3\2\2\2\16\u00e8\3\2")
        buf.write("\2\2\20\u00ea\3\2\2\2\22\u00ec\3\2\2\2\24\u00ee\3\2\2")
        buf.write("\2\26\u00f4\3\2\2\2\30\u00f6\3\2\2\2\32\u00f8\3\2\2\2")
        buf.write("\34\u00fa\3\2\2\2\36\u00fc\3\2\2\2 \u0109\3\2\2\2\"\u010b")
        buf.write("\3\2\2\2$\u010d\3\2\2\2&\u0115\3\2\2\2(\u011d\3\2\2\2")
        buf.write("*\u0125\3\2\2\2,\u012d\3\2\2\2.\u0135\3\2\2\2\60\u013d")
        buf.write("\3\2\2\2\62\u0145\3\2\2\2\64\u014d\3\2\2\2\66\u0155\3")
        buf.write("\2\2\28\u015d\3\2\2\2:\u015f\3\2\2\2<\u0166\3\2\2\2>\u0175")
        buf.write("\3\2\2\2@\u0177\3\2\2\2B\u017c\3\2\2\2D\u0187\3\2\2\2")
        buf.write("F\u0195\3\2\2\2H\u0197\3\2\2\2J\u01a2\3\2\2\2L\u01ba\3")
        buf.write("\2\2\2N\u01d3\3\2\2\2P\u01ed\3\2\2\2R\u01ef\3\2\2\2T\u01f3")
        buf.write("\3\2\2\2V\u01fc\3\2\2\2X\u0200\3\2\2\2Z\u020a\3\2\2\2")
        buf.write("\\\u020e\3\2\2\2^\u0212\3\2\2\2`\u0214\3\2\2\2b\u022d")
        buf.write("\3\2\2\2d\u0236\3\2\2\2f\u023f\3\2\2\2h\u0242\3\2\2\2")
        buf.write("j\u0248\3\2\2\2l\u0250\3\2\2\2n\u025f\3\2\2\2p\u0272\3")
        buf.write("\2\2\2r\u027b\3\2\2\2t\u0293\3\2\2\2v\u0296\3\2\2\2x\u029e")
        buf.write("\3\2\2\2z\u02ae\3\2\2\2|\u02b4\3\2\2\2~\u02cc\3\2\2\2")
        buf.write("\u0080\u02e8\3\2\2\2\u0082\u030d\3\2\2\2\u0084\u0311\3")
        buf.write("\2\2\2\u0086\u031b\3\2\2\2\u0088\u0320\3\2\2\2\u008a\u0325")
        buf.write("\3\2\2\2\u008c\u0327\3\2\2\2\u008e\u032d\3\2\2\2\u0090")
        buf.write("\u032f\3\2\2\2\u0092\u0337\3\2\2\2\u0094\u033b\3\2\2\2")
        buf.write("\u0096\u0346\3\2\2\2\u0098\u0348\3\2\2\2\u009a\u0351\3")
        buf.write("\2\2\2\u009c\u035f\3\2\2\2\u009e\u036a\3\2\2\2\u00a0\u036e")
        buf.write("\3\2\2\2\u00a2\u0370\3\2\2\2\u00a4\u037b\3\2\2\2\u00a6")
        buf.write("\u037e\3\2\2\2\u00a8\u038c\3\2\2\2\u00aa\u0390\3\2\2\2")
        buf.write("\u00ac\u0392\3\2\2\2\u00ae\u0394\3\2\2\2\u00b0\u0398\3")
        buf.write("\2\2\2\u00b2\u03a5\3\2\2\2\u00b4\u03b3\3\2\2\2\u00b6\u03b7")
        buf.write("\3\2\2\2\u00b8\u03c6\3\2\2\2\u00ba\u03d5\3\2\2\2\u00bc")
        buf.write("\u03e4\3\2\2\2\u00be\u03e6\3\2\2\2\u00c0\u03ea\3\2\2\2")
        buf.write("\u00c2\u0405\3\2\2\2\u00c4\u0419\3\2\2\2\u00c6\u041d\3")
        buf.write("\2\2\2\u00c8\u043e\3\2\2\2\u00ca\u0446\3\2\2\2\u00cc\u045c")
        buf.write("\3\2\2\2\u00ce\u045e\3\2\2\2\u00d0\u0461\3\2\2\2\u00d2")
        buf.write("\u0465\3\2\2\2\u00d4\u0467\3\2\2\2\u00d6\u0471\3\2\2\2")
        buf.write("\u00d8\u00d9\7q\2\2\u00d9\3\3\2\2\2\u00da\u00db\t\2\2")
        buf.write("\2\u00db\5\3\2\2\2\u00dc\u00dd\t\3\2\2\u00dd\7\3\2\2\2")
        buf.write("\u00de\u00df\t\4\2\2\u00df\t\3\2\2\2\u00e0\u00e1\7\34")
        buf.write("\2\2\u00e1\13\3\2\2\2\u00e2\u00e3\t\5\2\2\u00e3\r\3\2")
        buf.write("\2\2\u00e4\u00e9\7\36\2\2\u00e5\u00e6\7\25\2\2\u00e6\u00e9")
        buf.write("\7\25\2\2\u00e7\u00e9\7\25\2\2\u00e8\u00e4\3\2\2\2\u00e8")
        buf.write("\u00e5\3\2\2\2\u00e8\u00e7\3\2\2\2\u00e9\17\3\2\2\2\u00ea")
        buf.write("\u00eb\7\37\2\2\u00eb\21\3\2\2\2\u00ec\u00ed\7 \2\2\u00ed")
        buf.write("\23\3\2\2\2\u00ee\u00ef\t\6\2\2\u00ef\25\3\2\2\2\u00f0")
        buf.write("\u00f5\7\"\2\2\u00f1\u00f2\7\26\2\2\u00f2\u00f5\7\26\2")
        buf.write("\2\u00f3\u00f5\7\26\2\2\u00f4\u00f0\3\2\2\2\u00f4\u00f1")
        buf.write("\3\2\2\2\u00f4\u00f3\3\2\2\2\u00f5\27\3\2\2\2\u00f6\u00f7")
        buf.write("\7#\2\2\u00f7\31\3\2\2\2\u00f8\u00f9\7$\2\2\u00f9\33\3")
        buf.write("\2\2\2\u00fa\u00fb\7%\2\2\u00fb\35\3\2\2\2\u00fc\u00fd")
        buf.write("\t\7\2\2\u00fd\37\3\2\2\2\u00fe\u010a\5\n\6\2\u00ff\u010a")
        buf.write("\5\f\7\2\u0100\u010a\5\16\b\2\u0101\u010a\5\20\t\2\u0102")
        buf.write("\u010a\5\22\n\2\u0103\u010a\5\24\13\2\u0104\u010a\5\26")
        buf.write("\f\2\u0105\u010a\5\30\r\2\u0106\u010a\5\32\16\2\u0107")
        buf.write("\u010a\5\34\17\2\u0108\u010a\5\36\20\2\u0109\u00fe\3\2")
        buf.write("\2\2\u0109\u00ff\3\2\2\2\u0109\u0100\3\2\2\2\u0109\u0101")
        buf.write("\3\2\2\2\u0109\u0102\3\2\2\2\u0109\u0103\3\2\2\2\u0109")
        buf.write("\u0104\3\2\2\2\u0109\u0105\3\2\2\2\u0109\u0106\3\2\2\2")
        buf.write("\u0109\u0107\3\2\2\2\u0109\u0108\3\2\2\2\u010a!\3\2\2")
        buf.write("\2\u010b\u010c\5 \21\2\u010c#\3\2\2\2\u010d\u0112\5&\24")
        buf.write("\2\u010e\u010f\7\35\2\2\u010f\u0111\5&\24\2\u0110\u010e")
        buf.write("\3\2\2\2\u0111\u0114\3\2\2\2\u0112\u0110\3\2\2\2\u0112")
        buf.write("\u0113\3\2\2\2\u0113%\3\2\2\2\u0114\u0112\3\2\2\2\u0115")
        buf.write("\u011a\5(\25\2\u0116\u0117\7\36\2\2\u0117\u0119\5(\25")
        buf.write("\2\u0118\u0116\3\2\2\2\u0119\u011c\3\2\2\2\u011a\u0118")
        buf.write("\3\2\2\2\u011a\u011b\3\2\2\2\u011b\'\3\2\2\2\u011c\u011a")
        buf.write("\3\2\2\2\u011d\u0122\5*\26\2\u011e\u011f\7\37\2\2\u011f")
        buf.write("\u0121\5*\26\2\u0120\u011e\3\2\2\2\u0121\u0124\3\2\2\2")
        buf.write("\u0122\u0120\3\2\2\2\u0122\u0123\3\2\2\2\u0123)\3\2\2")
        buf.write("\2\u0124\u0122\3\2\2\2\u0125\u012a\5,\27\2\u0126\u0127")
        buf.write("\7 \2\2\u0127\u0129\5,\27\2\u0128\u0126\3\2\2\2\u0129")
        buf.write("\u012c\3\2\2\2\u012a\u0128\3\2\2\2\u012a\u012b\3\2\2\2")
        buf.write("\u012b+\3\2\2\2\u012c\u012a\3\2\2\2\u012d\u0132\5.\30")
        buf.write("\2\u012e\u012f\7!\2\2\u012f\u0131\5.\30\2\u0130\u012e")
        buf.write("\3\2\2\2\u0131\u0134\3\2\2\2\u0132\u0130\3\2\2\2\u0132")
        buf.write("\u0133\3\2\2\2\u0133-\3\2\2\2\u0134\u0132\3\2\2\2\u0135")
        buf.write("\u013a\5\60\31\2\u0136\u0137\7\"\2\2\u0137\u0139\5\60")
        buf.write("\31\2\u0138\u0136\3\2\2\2\u0139\u013c\3\2\2\2\u013a\u0138")
        buf.write("\3\2\2\2\u013a\u013b\3\2\2\2\u013b/\3\2\2\2\u013c\u013a")
        buf.write("\3\2\2\2\u013d\u0142\5\62\32\2\u013e\u013f\7#\2\2\u013f")
        buf.write("\u0141\5\62\32\2\u0140\u013e\3\2\2\2\u0141\u0144\3\2\2")
        buf.write("\2\u0142\u0140\3\2\2\2\u0142\u0143\3\2\2\2\u0143\61\3")
        buf.write("\2\2\2\u0144\u0142\3\2\2\2\u0145\u014a\5\64\33\2\u0146")
        buf.write("\u0147\7$\2\2\u0147\u0149\5\64\33\2\u0148\u0146\3\2\2")
        buf.write("\2\u0149\u014c\3\2\2\2\u014a\u0148\3\2\2\2\u014a\u014b")
        buf.write("\3\2\2\2\u014b\63\3\2\2\2\u014c\u014a\3\2\2\2\u014d\u0152")
        buf.write("\5\66\34\2\u014e\u014f\7%\2\2\u014f\u0151\5\66\34\2\u0150")
        buf.write("\u014e\3\2\2\2\u0151\u0154\3\2\2\2\u0152\u0150\3\2\2\2")
        buf.write("\u0152\u0153\3\2\2\2\u0153\65\3\2\2\2\u0154\u0152\3\2")
        buf.write("\2\2\u0155\u015a\5N(\2\u0156\u0157\7&\2\2\u0157\u0159")
        buf.write("\5N(\2\u0158\u0156\3\2\2\2\u0159\u015c\3\2\2\2\u015a\u0158")
        buf.write("\3\2\2\2\u015a\u015b\3\2\2\2\u015b\67\3\2\2\2\u015c\u015a")
        buf.write("\3\2\2\2\u015d\u015e\t\b\2\2\u015e9\3\2\2\2\u015f\u0160")
        buf.write("\t\t\2\2\u0160;\3\2\2\2\u0161\u0167\5> \2\u0162\u0163")
        buf.write("\7W\2\2\u0163\u0164\5> \2\u0164\u0165\7W\2\2\u0165\u0167")
        buf.write("\3\2\2\2\u0166\u0161\3\2\2\2\u0166\u0162\3\2\2\2\u0167")
        buf.write("=\3\2\2\2\u0168\u0176\7X\2\2\u0169\u0176\58\35\2\u016a")
        buf.write("\u0171\5 \21\2\u016b\u0171\7\n\2\2\u016c\u0171\7\13\2")
        buf.write("\2\u016d\u0171\7\16\2\2\u016e\u0171\7\17\2\2\u016f\u0171")
        buf.write("\7\27\2\2\u0170\u016a\3\2\2\2\u0170\u016b\3\2\2\2\u0170")
        buf.write("\u016c\3\2\2\2\u0170\u016d\3\2\2\2\u0170\u016e\3\2\2\2")
        buf.write("\u0170\u016f\3\2\2\2\u0171\u0174\3\2\2\2\u0172\u0170\3")
        buf.write("\2\2\2\u0172\u0173\3\2\2\2\u0173\u0176\3\2\2\2\u0174\u0172")
        buf.write("\3\2\2\2\u0175\u0168\3\2\2\2\u0175\u0169\3\2\2\2\u0175")
        buf.write("\u0172\3\2\2\2\u0176?\3\2\2\2\u0177\u017a\5\\/\2\u0178")
        buf.write("\u0179\t\n\2\2\u0179\u017b\5\\/\2\u017a\u0178\3\2\2\2")
        buf.write("\u017a\u017b\3\2\2\2\u017bA\3\2\2\2\u017c\u017d\7\16\2")
        buf.write("\2\u017d\u0182\5@!\2\u017e\u017f\7\b\2\2\u017f\u0181\5")
        buf.write("@!\2\u0180\u017e\3\2\2\2\u0181\u0184\3\2\2\2\u0182\u0180")
        buf.write("\3\2\2\2\u0182\u0183\3\2\2\2\u0183\u0185\3\2\2\2\u0184")
        buf.write("\u0182\3\2\2\2\u0185\u0186\7\17\2\2\u0186C\3\2\2\2\u0187")
        buf.write("\u0188\7\n\2\2\u0188\u018d\5@!\2\u0189\u018a\7\b\2\2\u018a")
        buf.write("\u018c\5@!\2\u018b\u0189\3\2\2\2\u018c\u018f\3\2\2\2\u018d")
        buf.write("\u018b\3\2\2\2\u018d\u018e\3\2\2\2\u018e\u0190\3\2\2\2")
        buf.write("\u018f\u018d\3\2\2\2\u0190\u0191\7\13\2\2\u0191E\3\2\2")
        buf.write("\2\u0192\u0196\5:\36\2\u0193\u0196\5<\37\2\u0194\u0196")
        buf.write("\5B\"\2\u0195\u0192\3\2\2\2\u0195\u0193\3\2\2\2\u0195")
        buf.write("\u0194\3\2\2\2\u0196G\3\2\2\2\u0197\u0198\7\33\2\2\u0198")
        buf.write("\u0199\5F$\2\u0199I\3\2\2\2\u019a\u019d\7X\2\2\u019b\u019e")
        buf.write("\5B\"\2\u019c\u019e\5D#\2\u019d\u019b\3\2\2\2\u019d\u019c")
        buf.write("\3\2\2\2\u019d\u019e\3\2\2\2\u019e\u01a3\3\2\2\2\u019f")
        buf.write("\u01a3\58\35\2\u01a0\u01a3\5:\36\2\u01a1\u01a3\5H%\2\u01a2")
        buf.write("\u019a\3\2\2\2\u01a2\u019f\3\2\2\2\u01a2\u01a0\3\2\2\2")
        buf.write("\u01a2\u01a1\3\2\2\2\u01a3K\3\2\2\2\u01a4\u01a5\7\n\2")
        buf.write("\2\u01a5\u01aa\5@!\2\u01a6\u01a7\7\b\2\2\u01a7\u01a9\5")
        buf.write("@!\2\u01a8\u01a6\3\2\2\2\u01a9\u01ac\3\2\2\2\u01aa\u01a8")
        buf.write("\3\2\2\2\u01aa\u01ab\3\2\2\2\u01ab\u01ad\3\2\2\2\u01ac")
        buf.write("\u01aa\3\2\2\2\u01ad\u01ae\7\13\2\2\u01ae\u01bb\3\2\2")
        buf.write("\2\u01af\u01b0\7\26\2\2\u01b0\u01b2\5<\37\2\u01b1\u01b3")
        buf.write("\5:\36\2\u01b2\u01b1\3\2\2\2\u01b2\u01b3\3\2\2\2\u01b3")
        buf.write("\u01bb\3\2\2\2\u01b4\u01b5\7\16\2\2\u01b5\u01b6\5j\66")
        buf.write("\2\u01b6\u01b7\7\17\2\2\u01b7\u01bb\3\2\2\2\u01b8\u01b9")
        buf.write("\6\'\2\2\u01b9\u01bb\5\u008eH\2\u01ba\u01a4\3\2\2\2\u01ba")
        buf.write("\u01af\3\2\2\2\u01ba\u01b4\3\2\2\2\u01ba\u01b8\3\2\2\2")
        buf.write("\u01bbM\3\2\2\2\u01bc\u01bd\5\6\4\2\u01bd\u01be\5$\23")
        buf.write("\2\u01be\u01d4\3\2\2\2\u01bf\u01c1\5\"\22\2\u01c0\u01bf")
        buf.write("\3\2\2\2\u01c1\u01c4\3\2\2\2\u01c2\u01c0\3\2\2\2\u01c2")
        buf.write("\u01c3\3\2\2\2\u01c3\u01d1\3\2\2\2\u01c4\u01c2\3\2\2\2")
        buf.write("\u01c5\u01c9\5F$\2\u01c6\u01c8\5L\'\2\u01c7\u01c6\3\2")
        buf.write("\2\2\u01c8\u01cb\3\2\2\2\u01c9\u01c7\3\2\2\2\u01c9\u01ca")
        buf.write("\3\2\2\2\u01ca\u01d2\3\2\2\2\u01cb\u01c9\3\2\2\2\u01cc")
        buf.write("\u01ce\5L\'\2\u01cd\u01cc\3\2\2\2\u01ce\u01cf\3\2\2\2")
        buf.write("\u01cf\u01cd\3\2\2\2\u01cf\u01d0\3\2\2\2\u01d0\u01d2\3")
        buf.write("\2\2\2\u01d1\u01c5\3\2\2\2\u01d1\u01cd\3\2\2\2\u01d2\u01d4")
        buf.write("\3\2\2\2\u01d3\u01bc\3\2\2\2\u01d3\u01c2\3\2\2\2\u01d4")
        buf.write("O\3\2\2\2\u01d5\u01d6\6)\3\2\u01d6\u01d9\5\u00c8e\2\u01d7")
        buf.write("\u01d8\7\t\2\2\u01d8\u01da\5\u00c8e\2\u01d9\u01d7\3\2")
        buf.write("\2\2\u01d9\u01da\3\2\2\2\u01da\u01ee\3\2\2\2\u01db\u01ee")
        buf.write("\5\u008eH\2\u01dc\u01dd\t\n\2\2\u01dd\u01de\5\u008eH\2")
        buf.write("\u01de\u01eb\3\2\2\2\u01df\u01e0\7\b\2\2\u01e0\u01e2\5")
        buf.write("@!\2\u01e1\u01df\3\2\2\2\u01e2\u01e3\3\2\2\2\u01e3\u01e1")
        buf.write("\3\2\2\2\u01e3\u01e4\3\2\2\2\u01e4\u01ec\3\2\2\2\u01e5")
        buf.write("\u01e7\7\t\2\2\u01e6\u01e8\5\u00c8e\2\u01e7\u01e6\3\2")
        buf.write("\2\2\u01e8\u01e9\3\2\2\2\u01e9\u01e7\3\2\2\2\u01e9\u01ea")
        buf.write("\3\2\2\2\u01ea\u01ec\3\2\2\2\u01eb\u01e1\3\2\2\2\u01eb")
        buf.write("\u01e5\3\2\2\2\u01ec\u01ee\3\2\2\2\u01ed\u01d5\3\2\2\2")
        buf.write("\u01ed\u01db\3\2\2\2\u01ed\u01dc\3\2\2\2\u01eeQ\3\2\2")
        buf.write("\2\u01ef\u01f0\7\n\2\2\u01f0\u01f1\5P)\2\u01f1\u01f2\7")
        buf.write("\13\2\2\u01f2S\3\2\2\2\u01f3\u01f4\7G\2\2\u01f4\u01f9")
        buf.write("\7X\2\2\u01f5\u01f6\7\b\2\2\u01f6\u01f8\7X\2\2\u01f7\u01f5")
        buf.write("\3\2\2\2\u01f8\u01fb\3\2\2\2\u01f9\u01f7\3\2\2\2\u01f9")
        buf.write("\u01fa\3\2\2\2\u01faU\3\2\2\2\u01fb\u01f9\3\2\2\2\u01fc")
        buf.write("\u01fd\7H\2\2\u01fd\u01fe\7X\2\2\u01fe\u01ff\5T+\2\u01ff")
        buf.write("W\3\2\2\2\u0200\u0201\7O\2\2\u0201\u0202\5<\37\2\u0202")
        buf.write("\u0208\7\25\2\2\u0203\u0209\5\u00d2j\2\u0204\u0205\5\2")
        buf.write("\2\2\u0205\u0206\5\u00d2j\2\u0206\u0207\5\4\3\2\u0207")
        buf.write("\u0209\3\2\2\2\u0208\u0203\3\2\2\2\u0208\u0204\3\2\2\2")
        buf.write("\u0209Y\3\2\2\2\u020a\u020b\5x=\2\u020b[\3\2\2\2\u020c")
        buf.write("\u020f\5$\23\2\u020d\u020f\5\u008eH\2\u020e\u020c\3\2")
        buf.write("\2\2\u020e\u020d\3\2\2\2\u020f]\3\2\2\2\u0210\u0213\5")
        buf.write("\u00d2j\2\u0211\u0213\5\u00d0i\2\u0212\u0210\3\2\2\2\u0212")
        buf.write("\u0211\3\2\2\2\u0213_\3\2\2\2\u0214\u0221\5\\/\2\u0215")
        buf.write("\u0216\79\2\2\u0216\u0217\5\\/\2\u0217\u021d\7\25\2\2")
        buf.write("\u0218\u0219\5\2\2\2\u0219\u021a\5\\/\2\u021a\u021b\5")
        buf.write("\4\3\2\u021b\u021e\3\2\2\2\u021c\u021e\5\\/\2\u021d\u0218")
        buf.write("\3\2\2\2\u021d\u021c\3\2\2\2\u021e\u0220\3\2\2\2\u021f")
        buf.write("\u0215\3\2\2\2\u0220\u0223\3\2\2\2\u0221\u021f\3\2\2\2")
        buf.write("\u0221\u0222\3\2\2\2\u0222\u0224\3\2\2\2\u0223\u0221\3")
        buf.write("\2\2\2\u0224\u0225\7:\2\2\u0225\u022b\7\25\2\2\u0226\u0227")
        buf.write("\5\2\2\2\u0227\u0228\5\\/\2\u0228\u0229\5\4\3\2\u0229")
        buf.write("\u022c\3\2\2\2\u022a\u022c\5\\/\2\u022b\u0226\3\2\2\2")
        buf.write("\u022b\u022a\3\2\2\2\u022ca\3\2\2\2\u022d\u022e\5\\/\2")
        buf.write("\u022e\u0234\7\25\2\2\u022f\u0230\5\2\2\2\u0230\u0231")
        buf.write("\5`\61\2\u0231\u0232\5\4\3\2\u0232\u0235\3\2\2\2\u0233")
        buf.write("\u0235\5`\61\2\u0234\u022f\3\2\2\2\u0234\u0233\3\2\2\2")
        buf.write("\u0235c\3\2\2\2\u0236\u0237\7\67\2\2\u0237\u023d\5\\/")
        buf.write("\2\u0238\u0239\5\2\2\2\u0239\u023a\5n8\2\u023a\u023b\5")
        buf.write("\4\3\2\u023b\u023e\3\2\2\2\u023c\u023e\5n8\2\u023d\u0238")
        buf.write("\3\2\2\2\u023d\u023c\3\2\2\2\u023ee\3\2\2\2\u023f\u0240")
        buf.write("\7D\2\2\u0240\u0241\5b\62\2\u0241g\3\2\2\2\u0242\u0244")
        buf.write("\78\2\2\u0243\u0245\7\32\2\2\u0244\u0243\3\2\2\2\u0244")
        buf.write("\u0245\3\2\2\2\u0245\u0246\3\2\2\2\u0246\u0247\5b\62\2")
        buf.write("\u0247i\3\2\2\2\u0248\u024d\5\\/\2\u0249\u024a\7\b\2\2")
        buf.write("\u024a\u024c\5\\/\2\u024b\u0249\3\2\2\2\u024c\u024f\3")
        buf.write("\2\2\2\u024d\u024b\3\2\2\2\u024d\u024e\3\2\2\2\u024ek")
        buf.write("\3\2\2\2\u024f\u024d\3\2\2\2\u0250\u0251\7\31\2\2\u0251")
        buf.write("\u0252\5j\66\2\u0252\u025c\7\25\2\2\u0253\u0255\5\2\2")
        buf.write("\2\u0254\u0256\5^\60\2\u0255\u0254\3\2\2\2\u0256\u0257")
        buf.write("\3\2\2\2\u0257\u0255\3\2\2\2\u0257\u0258\3\2\2\2\u0258")
        buf.write("\u0259\3\2\2\2\u0259\u025a\5\4\3\2\u025a\u025d\3\2\2\2")
        buf.write("\u025b\u025d\5^\60\2\u025c\u0253\3\2\2\2\u025c\u025b\3")
        buf.write("\2\2\2\u025dm\3\2\2\2\u025e\u0260\5l\67\2\u025f\u025e")
        buf.write("\3\2\2\2\u0260\u0261\3\2\2\2\u0261\u025f\3\2\2\2\u0261")
        buf.write("\u0262\3\2\2\2\u0262\u0270\3\2\2\2\u0263\u0264\7:\2\2")
        buf.write("\u0264\u026e\7\25\2\2\u0265\u0267\5\2\2\2\u0266\u0268")
        buf.write("\5^\60\2\u0267\u0266\3\2\2\2\u0268\u0269\3\2\2\2\u0269")
        buf.write("\u0267\3\2\2\2\u0269\u026a\3\2\2\2\u026a\u026b\3\2\2\2")
        buf.write("\u026b\u026c\5\4\3\2\u026c\u026f\3\2\2\2\u026d\u026f\5")
        buf.write("^\60\2\u026e\u0265\3\2\2\2\u026e\u026d\3\2\2\2\u026f\u0271")
        buf.write("\3\2\2\2\u0270\u0263\3\2\2\2\u0270\u0271\3\2\2\2\u0271")
        buf.write("o\3\2\2\2\u0272\u0273\7\67\2\2\u0273\u0279\5\\/\2\u0274")
        buf.write("\u0275\5\2\2\2\u0275\u0276\5n8\2\u0276\u0277\5\4\3\2\u0277")
        buf.write("\u027a\3\2\2\2\u0278\u027a\5n8\2\u0279\u0274\3\2\2\2\u0279")
        buf.write("\u0278\3\2\2\2\u027aq\3\2\2\2\u027b\u027c\7<\2\2\u027c")
        buf.write("\u027d\5\\/\2\u027d\u0291\7\25\2\2\u027e\u0285\5\2\2\2")
        buf.write("\u027f\u0281\5\u00d0i\2\u0280\u027f\3\2\2\2\u0281\u0282")
        buf.write("\3\2\2\2\u0282\u0280\3\2\2\2\u0282\u0283\3\2\2\2\u0283")
        buf.write("\u0286\3\2\2\2\u0284\u0286\5\u00d2j\2\u0285\u0280\3\2")
        buf.write("\2\2\u0285\u0284\3\2\2\2\u0286\u0287\3\2\2\2\u0287\u0288")
        buf.write("\5\4\3\2\u0288\u0292\3\2\2\2\u0289\u028b\5\u00d0i\2\u028a")
        buf.write("\u0289\3\2\2\2\u028b\u028c\3\2\2\2\u028c\u028a\3\2\2\2")
        buf.write("\u028c\u028d\3\2\2\2\u028d\u0290\3\2\2\2\u028e\u0290\5")
        buf.write("\u00d2j\2\u028f\u028a\3\2\2\2\u028f\u028e\3\2\2\2\u0290")
        buf.write("\u0292\3\2\2\2\u0291\u027e\3\2\2\2\u0291\u028f\3\2\2\2")
        buf.write("\u0292s\3\2\2\2\u0293\u0294\7D\2\2\u0294\u0295\5\u0082")
        buf.write("B\2\u0295u\3\2\2\2\u0296\u029b\7X\2\2\u0297\u0298\7\b")
        buf.write("\2\2\u0298\u029a\7X\2\2\u0299\u0297\3\2\2\2\u029a\u029d")
        buf.write("\3\2\2\2\u029b\u0299\3\2\2\2\u029b\u029c\3\2\2\2\u029c")
        buf.write("w\3\2\2\2\u029d\u029b\3\2\2\2\u029e\u029f\7>\2\2\u029f")
        buf.write("\u02a0\5v<\2\u02a0\u02a1\7\30\2\2\u02a1\u02a2\5$\23\2")
        buf.write("\u02a2\u02ac\7\25\2\2\u02a3\u02a5\5\2\2\2\u02a4\u02a6")
        buf.write("\5\u00d2j\2\u02a5\u02a4\3\2\2\2\u02a6\u02a7\3\2\2\2\u02a7")
        buf.write("\u02a5\3\2\2\2\u02a7\u02a8\3\2\2\2\u02a8\u02a9\3\2\2\2")
        buf.write("\u02a9\u02aa\5\4\3\2\u02aa\u02ad\3\2\2\2\u02ab\u02ad\5")
        buf.write("^\60\2\u02ac\u02a3\3\2\2\2\u02ac\u02ab\3\2\2\2\u02ady")
        buf.write("\3\2\2\2\u02ae\u02b0\78\2\2\u02af\u02b1\7\32\2\2\u02b0")
        buf.write("\u02af\3\2\2\2\u02b0\u02b1\3\2\2\2\u02b1\u02b2\3\2\2\2")
        buf.write("\u02b2\u02b3\5\u0082B\2\u02b3{\3\2\2\2\u02b4\u02b5\79")
        buf.write("\2\2\u02b5\u02b6\5\\/\2\u02b6\u02ca\7\25\2\2\u02b7\u02be")
        buf.write("\5\2\2\2\u02b8\u02ba\5\u00d0i\2\u02b9\u02b8\3\2\2\2\u02ba")
        buf.write("\u02bb\3\2\2\2\u02bb\u02b9\3\2\2\2\u02bb\u02bc\3\2\2\2")
        buf.write("\u02bc\u02bf\3\2\2\2\u02bd\u02bf\5\u00d2j\2\u02be\u02b9")
        buf.write("\3\2\2\2\u02be\u02bd\3\2\2\2\u02bf\u02c0\3\2\2\2\u02c0")
        buf.write("\u02c1\5\4\3\2\u02c1\u02cb\3\2\2\2\u02c2\u02c4\5\u00d0")
        buf.write("i\2\u02c3\u02c2\3\2\2\2\u02c4\u02c5\3\2\2\2\u02c5\u02c3")
        buf.write("\3\2\2\2\u02c5\u02c6\3\2\2\2\u02c6\u02c9\3\2\2\2\u02c7")
        buf.write("\u02c9\5\u00d2j\2\u02c8\u02c3\3\2\2\2\u02c8\u02c7\3\2")
        buf.write("\2\2\u02c9\u02cb\3\2\2\2\u02ca\u02b7\3\2\2\2\u02ca\u02c8")
        buf.write("\3\2\2\2\u02cb}\3\2\2\2\u02cc\u02cd\7:\2\2\u02cd\u02e1")
        buf.write("\7\25\2\2\u02ce\u02d5\5\2\2\2\u02cf\u02d1\5\u00d0i\2\u02d0")
        buf.write("\u02cf\3\2\2\2\u02d1\u02d2\3\2\2\2\u02d2\u02d0\3\2\2\2")
        buf.write("\u02d2\u02d3\3\2\2\2\u02d3\u02d6\3\2\2\2\u02d4\u02d6\5")
        buf.write("\u00d2j\2\u02d5\u02d0\3\2\2\2\u02d5\u02d4\3\2\2\2\u02d6")
        buf.write("\u02d7\3\2\2\2\u02d7\u02d8\5\4\3\2\u02d8\u02e2\3\2\2\2")
        buf.write("\u02d9\u02db\5\u00d0i\2\u02da\u02d9\3\2\2\2\u02db\u02dc")
        buf.write("\3\2\2\2\u02dc\u02da\3\2\2\2\u02dc\u02dd\3\2\2\2\u02dd")
        buf.write("\u02e0\3\2\2\2\u02de\u02e0\5\u00d2j\2\u02df\u02da\3\2")
        buf.write("\2\2\u02df\u02de\3\2\2\2\u02e0\u02e2\3\2\2\2\u02e1\u02ce")
        buf.write("\3\2\2\2\u02e1\u02df\3\2\2\2\u02e2\177\3\2\2\2\u02e3\u02e4")
        buf.write("\5\2\2\2\u02e4\u02e5\5\u00d2j\2\u02e5\u02e6\5\4\3\2\u02e6")
        buf.write("\u02e9\3\2\2\2\u02e7\u02e9\5\u00d2j\2\u02e8\u02e3\3\2")
        buf.write("\2\2\u02e8\u02e7\3\2\2\2\u02e9\u030b\3\2\2\2\u02ea\u02ee")
        buf.write("\5\2\2\2\u02eb\u02ed\5|?\2\u02ec\u02eb\3\2\2\2\u02ed\u02f0")
        buf.write("\3\2\2\2\u02ee\u02ec\3\2\2\2\u02ee\u02ef\3\2\2\2\u02ef")
        buf.write("\u02f2\3\2\2\2\u02f0\u02ee\3\2\2\2\u02f1\u02f3\5~@\2\u02f2")
        buf.write("\u02f1\3\2\2\2\u02f2\u02f3\3\2\2\2\u02f3\u02f4\3\2\2\2")
        buf.write("\u02f4\u02f5\5\4\3\2\u02f5\u030c\3\2\2\2\u02f6\u02f8\5")
        buf.write("|?\2\u02f7\u02f6\3\2\2\2\u02f8\u02fb\3\2\2\2\u02f9\u02f7")
        buf.write("\3\2\2\2\u02f9\u02fa\3\2\2\2\u02fa\u02fc\3\2\2\2\u02fb")
        buf.write("\u02f9\3\2\2\2\u02fc\u02fe\5\2\2\2\u02fd\u02ff\5~@\2\u02fe")
        buf.write("\u02fd\3\2\2\2\u02fe\u02ff\3\2\2\2\u02ff\u0300\3\2\2\2")
        buf.write("\u0300\u0301\5\4\3\2\u0301\u030c\3\2\2\2\u0302\u0304\5")
        buf.write("|?\2\u0303\u0302\3\2\2\2\u0304\u0307\3\2\2\2\u0305\u0303")
        buf.write("\3\2\2\2\u0305\u0306\3\2\2\2\u0306\u0309\3\2\2\2\u0307")
        buf.write("\u0305\3\2\2\2\u0308\u030a\5~@\2\u0309\u0308\3\2\2\2\u0309")
        buf.write("\u030a\3\2\2\2\u030a\u030c\3\2\2\2\u030b\u02ea\3\2\2\2")
        buf.write("\u030b\u02f9\3\2\2\2\u030b\u0305\3\2\2\2\u030c\u0081\3")
        buf.write("\2\2\2\u030d\u030e\5\\/\2\u030e\u030f\7\25\2\2\u030f\u0310")
        buf.write("\5\u0080A\2\u0310\u0083\3\2\2\2\u0311\u0312\7O\2\2\u0312")
        buf.write("\u0313\5<\37\2\u0313\u0319\7\25\2\2\u0314\u0315\5\2\2")
        buf.write("\2\u0315\u0316\5\u00d2j\2\u0316\u0317\5\4\3\2\u0317\u031a")
        buf.write("\3\2\2\2\u0318\u031a\5\u00d2j\2\u0319\u0314\3\2\2\2\u0319")
        buf.write("\u0318\3\2\2\2\u031a\u0085\3\2\2\2\u031b\u031c\7U\2\2")
        buf.write("\u031c\u0087\3\2\2\2\u031d\u031e\7\62\2\2\u031e\u0321")
        buf.write("\5$\23\2\u031f\u0321\7\62\2\2\u0320\u031d\3\2\2\2\u0320")
        buf.write("\u031f\3\2\2\2\u0321\u0089\3\2\2\2\u0322\u0323\7@\2\2")
        buf.write("\u0323\u0326\5$\23\2\u0324\u0326\7@\2\2\u0325\u0322\3")
        buf.write("\2\2\2\u0325\u0324\3\2\2\2\u0326\u008b\3\2\2\2\u0327\u0328")
        buf.write("\7?\2\2\u0328\u008d\3\2\2\2\u0329\u032e\5X-\2\u032a\u032e")
        buf.write("\5Z.\2\u032b\u032e\5h\65\2\u032c\u032e\5f\64\2\u032d\u0329")
        buf.write("\3\2\2\2\u032d\u032a\3\2\2\2\u032d\u032b\3\2\2\2\u032d")
        buf.write("\u032c\3\2\2\2\u032e\u008f\3\2\2\2\u032f\u0330\7\f\2\2")
        buf.write("\u0330\u0331\7\26\2\2\u0331\u0333\7X\2\2\u0332\u0334\7")
        buf.write("\26\2\2\u0333\u0332\3\2\2\2\u0333\u0334\3\2\2\2\u0334")
        buf.write("\u0335\3\2\2\2\u0335\u0336\7\r\2\2\u0336\u0091\3\2\2\2")
        buf.write("\u0337\u0339\5<\37\2\u0338\u033a\5B\"\2\u0339\u0338\3")
        buf.write("\2\2\2\u0339\u033a\3\2\2\2\u033a\u0093\3\2\2\2\u033b\u033c")
        buf.write("\7X\2\2\u033c\u033d\5B\"\2\u033d\u0095\3\2\2\2\u033e\u0340")
        buf.write("\7X\2\2\u033f\u0341\5B\"\2\u0340\u033f\3\2\2\2\u0340\u0341")
        buf.write("\3\2\2\2\u0341\u0347\3\2\2\2\u0342\u0343\7+\2\2\u0343")
        buf.write("\u0347\5\u009cO\2\u0344\u0345\7\'\2\2\u0345\u0347\5\u0094")
        buf.write("K\2\u0346\u033e\3\2\2\2\u0346\u0342\3\2\2\2\u0346\u0344")
        buf.write("\3\2\2\2\u0347\u0097\3\2\2\2\u0348\u034d\7X\2\2\u0349")
        buf.write("\u034a\7\25\2\2\u034a\u034e\5\u0096L\2\u034b\u034c\7\27")
        buf.write("\2\2\u034c\u034e\5$\23\2\u034d\u0349\3\2\2\2\u034d\u034b")
        buf.write("\3\2\2\2\u034e\u0099\3\2\2\2\u034f\u0350\7\25\2\2\u0350")
        buf.write("\u0352\5\u0096L\2\u0351\u034f\3\2\2\2\u0351\u0352\3\2")
        buf.write("\2\2\u0352\u0353\3\2\2\2\u0353\u035d\7\27\2\2\u0354\u035e")
        buf.write("\5^\60\2\u0355\u0357\5\2\2\2\u0356\u0358\5^\60\2\u0357")
        buf.write("\u0356\3\2\2\2\u0358\u0359\3\2\2\2\u0359\u0357\3\2\2\2")
        buf.write("\u0359\u035a\3\2\2\2\u035a\u035b\3\2\2\2\u035b\u035c\5")
        buf.write("\4\3\2\u035c\u035e\3\2\2\2\u035d\u0354\3\2\2\2\u035d\u0355")
        buf.write("\3\2\2\2\u035e\u009b\3\2\2\2\u035f\u0360\7\n\2\2\u0360")
        buf.write("\u0365\5\u0098M\2\u0361\u0362\7\b\2\2\u0362\u0364\5\u0098")
        buf.write("M\2\u0363\u0361\3\2\2\2\u0364\u0367\3\2\2\2\u0365\u0363")
        buf.write("\3\2\2\2\u0365\u0366\3\2\2\2\u0366\u0368\3\2\2\2\u0367")
        buf.write("\u0365\3\2\2\2\u0368\u0369\7\13\2\2\u0369\u009d\3\2\2")
        buf.write("\2\u036a\u036b\5\u0092J\2\u036b\u036c\5\u009cO\2\u036c")
        buf.write("\u036d\5\u009aN\2\u036d\u009f\3\2\2\2\u036e\u036f\7X\2")
        buf.write("\2\u036f\u00a1\3\2\2\2\u0370\u0371\7\n\2\2\u0371\u0376")
        buf.write("\5\u00a4S\2\u0372\u0373\7\b\2\2\u0373\u0375\5\u00a4S\2")
        buf.write("\u0374\u0372\3\2\2\2\u0375\u0378\3\2\2\2\u0376\u0374\3")
        buf.write("\2\2\2\u0376\u0377\3\2\2\2\u0377\u0379\3\2\2\2\u0378\u0376")
        buf.write("\3\2\2\2\u0379\u037a\7\13\2\2\u037a\u00a3\3\2\2\2\u037b")
        buf.write("\u037c\7X\2\2\u037c\u00a5\3\2\2\2\u037d\u037f\5\u0090")
        buf.write("I\2\u037e\u037d\3\2\2\2\u037e\u037f\3\2\2\2\u037f\u0380")
        buf.write("\3\2\2\2\u0380\u038a\7\27\2\2\u0381\u038b\5^\60\2\u0382")
        buf.write("\u0384\5\2\2\2\u0383\u0385\5^\60\2\u0384\u0383\3\2\2\2")
        buf.write("\u0385\u0386\3\2\2\2\u0386\u0384\3\2\2\2\u0386\u0387\3")
        buf.write("\2\2\2\u0387\u0388\3\2\2\2\u0388\u0389\5\4\3\2\u0389\u038b")
        buf.write("\3\2\2\2\u038a\u0381\3\2\2\2\u038a\u0382\3\2\2\2\u038b")
        buf.write("\u00a7\3\2\2\2\u038c\u038d\5\u00a0Q\2\u038d\u038e\5\u00a2")
        buf.write("R\2\u038e\u038f\5\u00a6T\2\u038f\u00a9\3\2\2\2\u0390\u0391")
        buf.write("\7X\2\2\u0391\u00ab\3\2\2\2\u0392\u0393\7X\2\2\u0393\u00ad")
        buf.write("\3\2\2\2\u0394\u0395\7X\2\2\u0395\u0396\7\25\2\2\u0396")
        buf.write("\u0397\5\u00acW\2\u0397\u00af\3\2\2\2\u0398\u0399\7\n")
        buf.write("\2\2\u0399\u039e\5\u00aeX\2\u039a\u039b\t\13\2\2\u039b")
        buf.write("\u039d\5\u00aeX\2\u039c\u039a\3\2\2\2\u039d\u03a0\3\2")
        buf.write("\2\2\u039e\u039c\3\2\2\2\u039e\u039f\3\2\2\2\u039f\u03a1")
        buf.write("\3\2\2\2\u03a0\u039e\3\2\2\2\u03a1\u03a2\7\13\2\2\u03a2")
        buf.write("\u00b1\3\2\2\2\u03a3\u03a4\7\25\2\2\u03a4\u03a6\5\u00ac")
        buf.write("W\2\u03a5\u03a3\3\2\2\2\u03a5\u03a6\3\2\2\2\u03a6\u03a7")
        buf.write("\3\2\2\2\u03a7\u03b1\7\27\2\2\u03a8\u03b2\5^\60\2\u03a9")
        buf.write("\u03ab\5\2\2\2\u03aa\u03ac\5^\60\2\u03ab\u03aa\3\2\2\2")
        buf.write("\u03ac\u03ad\3\2\2\2\u03ad\u03ab\3\2\2\2\u03ad\u03ae\3")
        buf.write("\2\2\2\u03ae\u03af\3\2\2\2\u03af\u03b0\5\4\3\2\u03b0\u03b2")
        buf.write("\3\2\2\2\u03b1\u03a8\3\2\2\2\u03b1\u03a9\3\2\2\2\u03b2")
        buf.write("\u00b3\3\2\2\2\u03b3\u03b4\5\u00aaV\2\u03b4\u03b5\5\u00b0")
        buf.write("Y\2\u03b5\u03b6\5\u00b2Z\2\u03b6\u00b5\3\2\2\2\u03b7\u03b8")
        buf.write("\7\f\2\2\u03b8\u00b7\3\2\2\2\u03b9\u03bb\5\u00c4c\2\u03ba")
        buf.write("\u03b9\3\2\2\2\u03bb\u03bc\3\2\2\2\u03bc\u03ba\3\2\2\2")
        buf.write("\u03bc\u03bd\3\2\2\2\u03bd\u03c7\3\2\2\2\u03be\u03c0\5")
        buf.write("\2\2\2\u03bf\u03c1\5\u00c4c\2\u03c0\u03bf\3\2\2\2\u03c1")
        buf.write("\u03c2\3\2\2\2\u03c2\u03c0\3\2\2\2\u03c2\u03c3\3\2\2\2")
        buf.write("\u03c3\u03c4\3\2\2\2\u03c4\u03c5\5\4\3\2\u03c5\u03c7\3")
        buf.write("\2\2\2\u03c6\u03ba\3\2\2\2\u03c6\u03be\3\2\2\2\u03c7\u00b9")
        buf.write("\3\2\2\2\u03c8\u03ca\5\u00c2b\2\u03c9\u03c8\3\2\2\2\u03ca")
        buf.write("\u03cb\3\2\2\2\u03cb\u03c9\3\2\2\2\u03cb\u03cc\3\2\2\2")
        buf.write("\u03cc\u03d6\3\2\2\2\u03cd\u03cf\5\2\2\2\u03ce\u03d0\5")
        buf.write("\u00c2b\2\u03cf\u03ce\3\2\2\2\u03d0\u03d1\3\2\2\2\u03d1")
        buf.write("\u03cf\3\2\2\2\u03d1\u03d2\3\2\2\2\u03d2\u03d3\3\2\2\2")
        buf.write("\u03d3\u03d4\5\4\3\2\u03d4\u03d6\3\2\2\2\u03d5\u03c9\3")
        buf.write("\2\2\2\u03d5\u03cd\3\2\2\2\u03d6\u00bb\3\2\2\2\u03d7\u03d8")
        buf.write("\7X\2\2\u03d8\u03d9\7\27\2\2\u03d9\u03e5\5$\23\2\u03da")
        buf.write("\u03de\5\2\2\2\u03db\u03dc\7X\2\2\u03dc\u03dd\7\27\2\2")
        buf.write("\u03dd\u03df\5$\23\2\u03de\u03db\3\2\2\2\u03df\u03e0\3")
        buf.write("\2\2\2\u03e0\u03de\3\2\2\2\u03e0\u03e1\3\2\2\2\u03e1\u03e2")
        buf.write("\3\2\2\2\u03e2\u03e3\5\4\3\2\u03e3\u03e5\3\2\2\2\u03e4")
        buf.write("\u03d7\3\2\2\2\u03e4\u03da\3\2\2\2\u03e5\u00bd\3\2\2\2")
        buf.write("\u03e6\u03e8\5<\37\2\u03e7\u03e9\5 \21\2\u03e8\u03e7\3")
        buf.write("\2\2\2\u03e8\u03e9\3\2\2\2\u03e9\u00bf\3\2\2\2\u03ea\u03eb")
        buf.write("\7\f\2\2\u03eb\u03f0\5\u00be`\2\u03ec\u03ed\7\b\2\2\u03ed")
        buf.write("\u03ef\5\u00be`\2\u03ee\u03ec\3\2\2\2\u03ef\u03f2\3\2")
        buf.write("\2\2\u03f0\u03ee\3\2\2\2\u03f0\u03f1\3\2\2\2\u03f1\u03f8")
        buf.write("\3\2\2\2\u03f2\u03f0\3\2\2\2\u03f3\u03f4\5\2\2\2\u03f4")
        buf.write("\u03f5\7\r\2\2\u03f5\u03f6\5\4\3\2\u03f6\u03f9\3\2\2\2")
        buf.write("\u03f7\u03f9\7\r\2\2\u03f8\u03f3\3\2\2\2\u03f8\u03f7\3")
        buf.write("\2\2\2\u03f9\u03fa\3\2\2\2\u03fa\u03fc\7\27\2\2\u03fb")
        buf.write("\u03fd\5\4\3\2\u03fc\u03fb\3\2\2\2\u03fc\u03fd\3\2\2\2")
        buf.write("\u03fd\u0403\3\2\2\2\u03fe\u03ff\5\2\2\2\u03ff\u0400\5")
        buf.write("*\26\2\u0400\u0401\5\4\3\2\u0401\u0404\3\2\2\2\u0402\u0404")
        buf.write("\5\\/\2\u0403\u03fe\3\2\2\2\u0403\u0402\3\2\2\2\u0404")
        buf.write("\u00c1\3\2\2\2\u0405\u040a\7X\2\2\u0406\u0407\7\b\2\2")
        buf.write("\u0407\u0409\7X\2\2\u0408\u0406\3\2\2\2\u0409\u040c\3")
        buf.write("\2\2\2\u040a\u0408\3\2\2\2\u040a\u040b\3\2\2\2\u040b\u040f")
        buf.write("\3\2\2\2\u040c\u040a\3\2\2\2\u040d\u040e\7\25\2\2\u040e")
        buf.write("\u0410\5$\23\2\u040f\u040d\3\2\2\2\u040f\u0410\3\2\2\2")
        buf.write("\u0410\u0411\3\2\2\2\u0411\u0417\7\27\2\2\u0412\u0413")
        buf.write("\5\2\2\2\u0413\u0414\5\\/\2\u0414\u0415\5\4\3\2\u0415")
        buf.write("\u0418\3\2\2\2\u0416\u0418\5\\/\2\u0417\u0412\3\2\2\2")
        buf.write("\u0417\u0416\3\2\2\2\u0418\u00c3\3\2\2\2\u0419\u041b\5")
        buf.write("\u00c6d\2\u041a\u041c\5\u00ceh\2\u041b\u041a\3\2\2\2\u041b")
        buf.write("\u041c\3\2\2\2\u041c\u00c5\3\2\2\2\u041d\u0422\7X\2\2")
        buf.write("\u041e\u041f\7\b\2\2\u041f\u0421\7X\2\2\u0420\u041e\3")
        buf.write("\2\2\2\u0421\u0424\3\2\2\2\u0422\u0420\3\2\2\2\u0422\u0423")
        buf.write("\3\2\2\2\u0423\u0426\3\2\2\2\u0424\u0422\3\2\2\2\u0425")
        buf.write("\u0427\7\b\2\2\u0426\u0425\3\2\2\2\u0426\u0427\3\2\2\2")
        buf.write("\u0427\u0430\3\2\2\2\u0428\u042e\7\25\2\2\u0429\u042a")
        buf.write("\5\2\2\2\u042a\u042b\5$\23\2\u042b\u042c\5\4\3\2\u042c")
        buf.write("\u042f\3\2\2\2\u042d\u042f\5$\23\2\u042e\u0429\3\2\2\2")
        buf.write("\u042e\u042d\3\2\2\2\u042f\u0431\3\2\2\2\u0430\u0428\3")
        buf.write("\2\2\2\u0430\u0431\3\2\2\2\u0431\u043a\3\2\2\2\u0432\u0438")
        buf.write("\7\27\2\2\u0433\u0434\5\2\2\2\u0434\u0435\5\\/\2\u0435")
        buf.write("\u0436\5\4\3\2\u0436\u0439\3\2\2\2\u0437\u0439\5\\/\2")
        buf.write("\u0438\u0433\3\2\2\2\u0438\u0437\3\2\2\2\u0439\u043b\3")
        buf.write("\2\2\2\u043a\u0432\3\2\2\2\u043a\u043b\3\2\2\2\u043b\u00c7")
        buf.write("\3\2\2\2\u043c\u043f\5\u00caf\2\u043d\u043f\5\u00ccg\2")
        buf.write("\u043e\u043c\3\2\2\2\u043e\u043d\3\2\2\2\u043f\u00c9\3")
        buf.write("\2\2\2\u0440\u0447\5T+\2\u0441\u0447\5V,\2\u0442\u0447")
        buf.write("\5\u0086D\2\u0443\u0447\5\u0088E\2\u0444\u0447\5\u008a")
        buf.write("F\2\u0445\u0447\5\u008cG\2\u0446\u0440\3\2\2\2\u0446\u0441")
        buf.write("\3\2\2\2\u0446\u0442\3\2\2\2\u0446\u0443\3\2\2\2\u0446")
        buf.write("\u0444\3\2\2\2\u0446\u0445\3\2\2\2\u0447\u00cb\3\2\2\2")
        buf.write("\u0448\u045d\5x=\2\u0449\u045d\5z>\2\u044a\u045d\5p9\2")
        buf.write("\u044b\u045d\5\u0084C\2\u044c\u045d\5r:\2\u044d\u045d")
        buf.write("\5t;\2\u044e\u044f\7A\2\2\u044f\u045d\5\u00a8U\2\u0450")
        buf.write("\u0451\7+\2\2\u0451\u045d\5\u009eP\2\u0452\u0453\7P\2")
        buf.write("\2\u0453\u045d\5\u00b4[\2\u0454\u0455\7\24\2\2\u0455\u045d")
        buf.write("\5\u00b6\\\2\u0456\u0457\7)\2\2\u0457\u045d\5\u00ba^\2")
        buf.write("\u0458\u0459\7\'\2\2\u0459\u045d\5\u00b8]\2\u045a\u045b")
        buf.write("\7(\2\2\u045b\u045d\5\u00bc_\2\u045c\u0448\3\2\2\2\u045c")
        buf.write("\u0449\3\2\2\2\u045c\u044a\3\2\2\2\u045c\u044b\3\2\2\2")
        buf.write("\u045c\u044c\3\2\2\2\u045c\u044d\3\2\2\2\u045c\u044e\3")
        buf.write("\2\2\2\u045c\u0450\3\2\2\2\u045c\u0452\3\2\2\2\u045c\u0454")
        buf.write("\3\2\2\2\u045c\u0456\3\2\2\2\u045c\u0458\3\2\2\2\u045c")
        buf.write("\u045a\3\2\2\2\u045d\u00cd\3\2\2\2\u045e\u045f\7\25\2")
        buf.write("\2\u045f\u0460\5\u00d2j\2\u0460\u00cf\3\2\2\2\u0461\u0462")
        buf.write("\5$\23\2\u0462\u0463\7\27\2\2\u0463\u0464\5\\/\2\u0464")
        buf.write("\u00d1\3\2\2\2\u0465\u0466\5\u00c8e\2\u0466\u00d3\3\2")
        buf.write("\2\2\u0467\u046e\5\u00d2j\2\u0468\u046a\7\t\2\2\u0469")
        buf.write("\u0468\3\2\2\2\u0469\u046a\3\2\2\2\u046a\u046b\3\2\2\2")
        buf.write("\u046b\u046d\5\u00d2j\2\u046c\u0469\3\2\2\2\u046d\u0470")
        buf.write("\3\2\2\2\u046e\u046c\3\2\2\2\u046e\u046f\3\2\2\2\u046f")
        buf.write("\u00d5\3\2\2\2\u0470\u046e\3\2\2\2\u0471\u0472\5\u00d4")
        buf.write("k\2\u0472\u00d7\3\2\2\2\u0084\u00e8\u00f4\u0109\u0112")
        buf.write("\u011a\u0122\u012a\u0132\u013a\u0142\u014a\u0152\u015a")
        buf.write("\u0166\u0170\u0172\u0175\u017a\u0182\u018d\u0195\u019d")
        buf.write("\u01a2\u01aa\u01b2\u01ba\u01c2\u01c9\u01cf\u01d1\u01d3")
        buf.write("\u01d9\u01e3\u01e9\u01eb\u01ed\u01f9\u0208\u020e\u0212")
        buf.write("\u021d\u0221\u022b\u0234\u023d\u0244\u024d\u0257\u025c")
        buf.write("\u0261\u0269\u026e\u0270\u0279\u0282\u0285\u028c\u028f")
        buf.write("\u0291\u029b\u02a7\u02ac\u02b0\u02bb\u02be\u02c5\u02c8")
        buf.write("\u02ca\u02d2\u02d5\u02dc\u02df\u02e1\u02e8\u02ee\u02f2")
        buf.write("\u02f9\u02fe\u0305\u0309\u030b\u0319\u0320\u0325\u032d")
        buf.write("\u0333\u0339\u0340\u0346\u034d\u0351\u0359\u035d\u0365")
        buf.write("\u0376\u037e\u0386\u038a\u039e\u03a5\u03ad\u03b1\u03bc")
        buf.write("\u03c2\u03c6\u03cb\u03d1\u03d5\u03e0\u03e4\u03e8\u03f0")
        buf.write("\u03f8\u03fc\u0403\u040a\u040f\u0417\u041b\u0422\u0426")
        buf.write("\u042e\u0430\u0438\u043a\u043e\u0446\u045c\u0469\u046e")
        return buf.getvalue()


class nim_Parser ( Parser ):

    grammarFileName = "nim_Parser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "' '", "','", "';'", "'('", "')'", "'{'", 
                     "'}'", "'['", "']'", "'interface'", "'enum'", "'object'", 
                     "'concept'", "'type'", "':'", "'.'", "'='", "'in'", 
                     "'of'", "'not'", "'$'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'var'", "'let'", "'const'", "'bind'", "'proc'", "'static'", 
                     "'method'", "'func'", "'mixin'", "'end'", "'except'", 
                     "'return'", "'try'", "'raise'", "'finally'", "'out'", 
                     "'case'", "'if'", "'elif'", "'else'", "'do'", "'while'", 
                     "'iterator'", "'for'", "'continue'", "'break'", "'template'", 
                     "'tuple'", "'using'", "'when'", "'yield'", "'include'", 
                     "'import'", "'from'", "'as'", "'export'", "'ref'", 
                     "'ptr'", "'addr'", "'asm'", "'block'", "'macro'", "'nil'", 
                     "'cast'", "'converter'", "'defer'", "'discard'", "'distinct'", 
                     "'`'" ]

    symbolicNames = [ "<INVALID>", "DOCUMENTATION_COMMENT", "MULTILINE_COMMENT", 
                      "COMMENT", "UNCONDITIONAL_NEWLINE", "WS", "COMMA", 
                      "SEMI_COLON", "OPEN_PAREN", "CLOSE_PAREN", "OPEN_BRACE", 
                      "CLOSE_BRACE", "OPEN_BRACK", "CLOSE_BRACK", "INTERFACE", 
                      "ENUM", "OBJECT", "CONCEPT", "TYPE", "COLON", "DOT", 
                      "EQUALS", "IN", "OF", "NOT", "DOLLAR_SIGN", "OP0", 
                      "OP1", "OP2", "OP3", "OP4", "OP5", "OP6", "OP7", "OP8", 
                      "OP9", "OP10", "VARIABLE", "LET", "CONST", "BIND", 
                      "PROC", "STATIC", "METHOD", "FUNC", "MIXIN", "END", 
                      "EXCEPT", "RETURN", "TRY", "RAISE", "FINALLY", "OUT", 
                      "CASE", "IF", "ELIF", "ELSE", "DO", "WHILE", "ITERATOR", 
                      "FOR", "CONTINUE", "BREAK", "TEMPLATE", "TUPLE", "USING", 
                      "WHEN", "YIELD", "INCLUDE", "IMPORT", "FROM", "AS", 
                      "EXPORT", "REF", "PTR", "ADDR", "ASM", "BLOCK", "MACRO", 
                      "NIL", "CAST", "CONVERTER", "DEFER", "DISCARD", "DISTINCT", 
                      "SYM_HEADER", "IDENTIFIER", "INT_LIT", "INT8_LIT", 
                      "INT16_LIT", "INT32_LIT", "INT64_LIT", "UINT_LIT", 
                      "UINT8_LIT", "UINT16_LIT", "UINT32_LIT", "UINT64_LIT", 
                      "EXP", "FLOAT_LIT", "FLOAT32_LIT", "FLOAT64_LIT", 
                      "CHAR_LIT", "STR_LIT", "TRIPLESTR_LIT", "RSTR_LIT", 
                      "GENERALIZED_STR_LIT", "GENERALIZED_TRIPLESTR_LIT", 
                      "DEDENT", "EXIT", "USELESS_LINE", "USELSSS_INDENTS", 
                      "INDENT", "INDENTS_PASS", "ERROR_INDENT" ]

    RULE_ind = 0
    RULE_ded = 1
    RULE_typeKeyw = 2
    RULE_parKeyw = 3
    RULE_op0 = 4
    RULE_op1 = 5
    RULE_op2 = 6
    RULE_op3 = 7
    RULE_op4 = 8
    RULE_op5 = 9
    RULE_op6 = 10
    RULE_op7 = 11
    RULE_op8 = 12
    RULE_op9 = 13
    RULE_op10 = 14
    RULE_operator = 15
    RULE_prefixOperator = 16
    RULE_simpleExpr = 17
    RULE_assignExpr = 18
    RULE_orExpr = 19
    RULE_andExpr = 20
    RULE_cmpExpr = 21
    RULE_sliceExpr = 22
    RULE_ampExpr = 23
    RULE_plusExpr = 24
    RULE_mulExpr = 25
    RULE_dollarExpr = 26
    RULE_literal = 27
    RULE_generalizedLit = 28
    RULE_symbol = 29
    RULE_symbolBody = 30
    RULE_exprColonEqExpr = 31
    RULE_arrayConstr = 32
    RULE_tupleConstr = 33
    RULE_identOrLiteral = 34
    RULE_addressLiteral = 35
    RULE_primarySuffixSimpleBody = 36
    RULE_primarySuffix = 37
    RULE_primary = 38
    RULE_parBody = 39
    RULE_par = 40
    RULE_importStmt = 41
    RULE_fromStmt = 42
    RULE_blockExpr = 43
    RULE_forExpr = 44
    RULE_anyExpr = 45
    RULE_anyStmt = 46
    RULE_condExprBody = 47
    RULE_condExpr = 48
    RULE_caseExpr = 49
    RULE_whenExpr = 50
    RULE_ifExpr = 51
    RULE_exprList = 52
    RULE_ofBranch = 53
    RULE_ofBranches = 54
    RULE_caseStmt = 55
    RULE_whileStmt = 56
    RULE_whenStmt = 57
    RULE_idList = 58
    RULE_forStmt = 59
    RULE_ifStmt = 60
    RULE_condStmtElif = 61
    RULE_condStmtElse = 62
    RULE_condStmtBody = 63
    RULE_condStmt = 64
    RULE_blockStmt = 65
    RULE_discardStmt = 66
    RULE_returnStmt = 67
    RULE_breakStmt = 68
    RULE_continueStmt = 69
    RULE_expr = 70
    RULE_pragma = 71
    RULE_procRoutineHeader = 72
    RULE_procRoutineVariableType = 73
    RULE_procRoutineType = 74
    RULE_procRoutineBody = 75
    RULE_procRoutineTail = 76
    RULE_procRoutineBodyList = 77
    RULE_procRoutine = 78
    RULE_templateRoutineHeader = 79
    RULE_templateRoutineBodyList = 80
    RULE_templateRoutineBody = 81
    RULE_templateRoutineTail = 82
    RULE_templateRoutine = 83
    RULE_macroRoutineHeader = 84
    RULE_macroRoutineType = 85
    RULE_macroRoutineBody = 86
    RULE_macroRoutineBodyList = 87
    RULE_macroRoutineTail = 88
    RULE_macroRoutine = 89
    RULE_typeSection = 90
    RULE_variableSection = 91
    RULE_constantSection = 92
    RULE_letSection = 93
    RULE_identVis = 94
    RULE_varTuple = 95
    RULE_constant = 96
    RULE_variable = 97
    RULE_idColonEq = 98
    RULE_simple_complexStmt = 99
    RULE_simpleStmt = 100
    RULE_complexStmt = 101
    RULE_colonBody = 102
    RULE_exprStmt = 103
    RULE_stmt = 104
    RULE_module = 105
    RULE_start = 106

    ruleNames =  [ "ind", "ded", "typeKeyw", "parKeyw", "op0", "op1", "op2", 
                   "op3", "op4", "op5", "op6", "op7", "op8", "op9", "op10", 
                   "operator", "prefixOperator", "simpleExpr", "assignExpr", 
                   "orExpr", "andExpr", "cmpExpr", "sliceExpr", "ampExpr", 
                   "plusExpr", "mulExpr", "dollarExpr", "literal", "generalizedLit", 
                   "symbol", "symbolBody", "exprColonEqExpr", "arrayConstr", 
                   "tupleConstr", "identOrLiteral", "addressLiteral", "primarySuffixSimpleBody", 
                   "primarySuffix", "primary", "parBody", "par", "importStmt", 
                   "fromStmt", "blockExpr", "forExpr", "anyExpr", "anyStmt", 
                   "condExprBody", "condExpr", "caseExpr", "whenExpr", "ifExpr", 
                   "exprList", "ofBranch", "ofBranches", "caseStmt", "whileStmt", 
                   "whenStmt", "idList", "forStmt", "ifStmt", "condStmtElif", 
                   "condStmtElse", "condStmtBody", "condStmt", "blockStmt", 
                   "discardStmt", "returnStmt", "breakStmt", "continueStmt", 
                   "expr", "pragma", "procRoutineHeader", "procRoutineVariableType", 
                   "procRoutineType", "procRoutineBody", "procRoutineTail", 
                   "procRoutineBodyList", "procRoutine", "templateRoutineHeader", 
                   "templateRoutineBodyList", "templateRoutineBody", "templateRoutineTail", 
                   "templateRoutine", "macroRoutineHeader", "macroRoutineType", 
                   "macroRoutineBody", "macroRoutineBodyList", "macroRoutineTail", 
                   "macroRoutine", "typeSection", "variableSection", "constantSection", 
                   "letSection", "identVis", "varTuple", "constant", "variable", 
                   "idColonEq", "simple_complexStmt", "simpleStmt", "complexStmt", 
                   "colonBody", "exprStmt", "stmt", "module", "start" ]

    EOF = Token.EOF
    DOCUMENTATION_COMMENT=1
    MULTILINE_COMMENT=2
    COMMENT=3
    UNCONDITIONAL_NEWLINE=4
    WS=5
    COMMA=6
    SEMI_COLON=7
    OPEN_PAREN=8
    CLOSE_PAREN=9
    OPEN_BRACE=10
    CLOSE_BRACE=11
    OPEN_BRACK=12
    CLOSE_BRACK=13
    INTERFACE=14
    ENUM=15
    OBJECT=16
    CONCEPT=17
    TYPE=18
    COLON=19
    DOT=20
    EQUALS=21
    IN=22
    OF=23
    NOT=24
    DOLLAR_SIGN=25
    OP0=26
    OP1=27
    OP2=28
    OP3=29
    OP4=30
    OP5=31
    OP6=32
    OP7=33
    OP8=34
    OP9=35
    OP10=36
    VARIABLE=37
    LET=38
    CONST=39
    BIND=40
    PROC=41
    STATIC=42
    METHOD=43
    FUNC=44
    MIXIN=45
    END=46
    EXCEPT=47
    RETURN=48
    TRY=49
    RAISE=50
    FINALLY=51
    OUT=52
    CASE=53
    IF=54
    ELIF=55
    ELSE=56
    DO=57
    WHILE=58
    ITERATOR=59
    FOR=60
    CONTINUE=61
    BREAK=62
    TEMPLATE=63
    TUPLE=64
    USING=65
    WHEN=66
    YIELD=67
    INCLUDE=68
    IMPORT=69
    FROM=70
    AS=71
    EXPORT=72
    REF=73
    PTR=74
    ADDR=75
    ASM=76
    BLOCK=77
    MACRO=78
    NIL=79
    CAST=80
    CONVERTER=81
    DEFER=82
    DISCARD=83
    DISTINCT=84
    SYM_HEADER=85
    IDENTIFIER=86
    INT_LIT=87
    INT8_LIT=88
    INT16_LIT=89
    INT32_LIT=90
    INT64_LIT=91
    UINT_LIT=92
    UINT8_LIT=93
    UINT16_LIT=94
    UINT32_LIT=95
    UINT64_LIT=96
    EXP=97
    FLOAT_LIT=98
    FLOAT32_LIT=99
    FLOAT64_LIT=100
    CHAR_LIT=101
    STR_LIT=102
    TRIPLESTR_LIT=103
    RSTR_LIT=104
    GENERALIZED_STR_LIT=105
    GENERALIZED_TRIPLESTR_LIT=106
    DEDENT=107
    EXIT=108
    USELESS_LINE=109
    USELSSS_INDENTS=110
    INDENT=111
    INDENTS_PASS=112
    ERROR_INDENT=113

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None



    parKeyWList = [IF, WHILE, CASE, FOR, BLOCK, CONST, LET, WHEN, VARIABLE]
    literals = [INT_LIT, INT8_LIT, INT16_LIT , INT32_LIT , INT64_LIT, UINT_LIT , UINT8_LIT , 
    UINT16_LIT , UINT32_LIT , UINT64_LIT, FLOAT_LIT , FLOAT32_LIT , FLOAT64_LIT, STR_LIT, 
    RSTR_LIT , TRIPLESTR_LIT, CHAR_LIT, NIL ]
    primarySuffixList = [SYM_HEADER, IDENTIFIER, TYPE] + literals



    class IndContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INDENT(self):
            return self.getToken(nim_Parser.INDENT, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_ind

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInd" ):
                listener.enterInd(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInd" ):
                listener.exitInd(self)




    def ind(self):

        localctx = nim_Parser.IndContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_ind)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 214
            self.match(nim_Parser.INDENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DedContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEDENT(self):
            return self.getToken(nim_Parser.DEDENT, 0)

        def EOF(self):
            return self.getToken(nim_Parser.EOF, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_ded

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDed" ):
                listener.enterDed(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDed" ):
                listener.exitDed(self)




    def ded(self):

        localctx = nim_Parser.DedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_ded)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 216
            _la = self._input.LA(1)
            if not(_la==nim_Parser.EOF or _la==nim_Parser.DEDENT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeKeywContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VARIABLE(self):
            return self.getToken(nim_Parser.VARIABLE, 0)

        def REF(self):
            return self.getToken(nim_Parser.REF, 0)

        def PROC(self):
            return self.getToken(nim_Parser.PROC, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_typeKeyw

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeKeyw" ):
                listener.enterTypeKeyw(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeKeyw" ):
                listener.exitTypeKeyw(self)




    def typeKeyw(self):

        localctx = nim_Parser.TypeKeywContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_typeKeyw)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 218
            _la = self._input.LA(1)
            if not(((((_la - 37)) & ~0x3f) == 0 and ((1 << (_la - 37)) & ((1 << (nim_Parser.VARIABLE - 37)) | (1 << (nim_Parser.PROC - 37)) | (1 << (nim_Parser.REF - 37)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParKeywContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DISCARD(self):
            return self.getToken(nim_Parser.DISCARD, 0)

        def IF(self):
            return self.getToken(nim_Parser.IF, 0)

        def WHILE(self):
            return self.getToken(nim_Parser.WHILE, 0)

        def CASE(self):
            return self.getToken(nim_Parser.CASE, 0)

        def FOR(self):
            return self.getToken(nim_Parser.FOR, 0)

        def BLOCK(self):
            return self.getToken(nim_Parser.BLOCK, 0)

        def CONST(self):
            return self.getToken(nim_Parser.CONST, 0)

        def LET(self):
            return self.getToken(nim_Parser.LET, 0)

        def WHEN(self):
            return self.getToken(nim_Parser.WHEN, 0)

        def VARIABLE(self):
            return self.getToken(nim_Parser.VARIABLE, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_parKeyw

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParKeyw" ):
                listener.enterParKeyw(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParKeyw" ):
                listener.exitParKeyw(self)




    def parKeyw(self):

        localctx = nim_Parser.ParKeywContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_parKeyw)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 220
            _la = self._input.LA(1)
            if not(((((_la - 37)) & ~0x3f) == 0 and ((1 << (_la - 37)) & ((1 << (nim_Parser.VARIABLE - 37)) | (1 << (nim_Parser.LET - 37)) | (1 << (nim_Parser.CONST - 37)) | (1 << (nim_Parser.CASE - 37)) | (1 << (nim_Parser.IF - 37)) | (1 << (nim_Parser.WHILE - 37)) | (1 << (nim_Parser.FOR - 37)) | (1 << (nim_Parser.WHEN - 37)) | (1 << (nim_Parser.BLOCK - 37)) | (1 << (nim_Parser.DISCARD - 37)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Op0Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OP0(self):
            return self.getToken(nim_Parser.OP0, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_op0

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOp0" ):
                listener.enterOp0(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOp0" ):
                listener.exitOp0(self)




    def op0(self):

        localctx = nim_Parser.Op0Context(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_op0)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 222
            self.match(nim_Parser.OP0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Op1Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OP1(self):
            return self.getToken(nim_Parser.OP1, 0)

        def EQUALS(self):
            return self.getToken(nim_Parser.EQUALS, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_op1

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOp1" ):
                listener.enterOp1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOp1" ):
                listener.exitOp1(self)




    def op1(self):

        localctx = nim_Parser.Op1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_op1)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 224
            _la = self._input.LA(1)
            if not(_la==nim_Parser.EQUALS or _la==nim_Parser.OP1):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Op2Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OP2(self):
            return self.getToken(nim_Parser.OP2, 0)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.COLON)
            else:
                return self.getToken(nim_Parser.COLON, i)

        def getRuleIndex(self):
            return nim_Parser.RULE_op2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOp2" ):
                listener.enterOp2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOp2" ):
                listener.exitOp2(self)




    def op2(self):

        localctx = nim_Parser.Op2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_op2)
        try:
            self.state = 230
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 226
                self.match(nim_Parser.OP2)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 227
                self.match(nim_Parser.COLON)
                self.state = 228
                self.match(nim_Parser.COLON)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 229
                self.match(nim_Parser.COLON)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Op3Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OP3(self):
            return self.getToken(nim_Parser.OP3, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_op3

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOp3" ):
                listener.enterOp3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOp3" ):
                listener.exitOp3(self)




    def op3(self):

        localctx = nim_Parser.Op3Context(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_op3)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 232
            self.match(nim_Parser.OP3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Op4Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OP4(self):
            return self.getToken(nim_Parser.OP4, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_op4

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOp4" ):
                listener.enterOp4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOp4" ):
                listener.exitOp4(self)




    def op4(self):

        localctx = nim_Parser.Op4Context(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_op4)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 234
            self.match(nim_Parser.OP4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Op5Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OP5(self):
            return self.getToken(nim_Parser.OP5, 0)

        def IN(self):
            return self.getToken(nim_Parser.IN, 0)

        def OF(self):
            return self.getToken(nim_Parser.OF, 0)

        def NOT(self):
            return self.getToken(nim_Parser.NOT, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_op5

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOp5" ):
                listener.enterOp5(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOp5" ):
                listener.exitOp5(self)




    def op5(self):

        localctx = nim_Parser.Op5Context(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_op5)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 236
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nim_Parser.IN) | (1 << nim_Parser.OF) | (1 << nim_Parser.NOT) | (1 << nim_Parser.OP5))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Op6Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OP6(self):
            return self.getToken(nim_Parser.OP6, 0)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.DOT)
            else:
                return self.getToken(nim_Parser.DOT, i)

        def getRuleIndex(self):
            return nim_Parser.RULE_op6

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOp6" ):
                listener.enterOp6(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOp6" ):
                listener.exitOp6(self)




    def op6(self):

        localctx = nim_Parser.Op6Context(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_op6)
        try:
            self.state = 242
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 238
                self.match(nim_Parser.OP6)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 239
                self.match(nim_Parser.DOT)
                self.state = 240
                self.match(nim_Parser.DOT)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 241
                self.match(nim_Parser.DOT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Op7Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OP7(self):
            return self.getToken(nim_Parser.OP7, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_op7

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOp7" ):
                listener.enterOp7(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOp7" ):
                listener.exitOp7(self)




    def op7(self):

        localctx = nim_Parser.Op7Context(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_op7)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 244
            self.match(nim_Parser.OP7)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Op8Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OP8(self):
            return self.getToken(nim_Parser.OP8, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_op8

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOp8" ):
                listener.enterOp8(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOp8" ):
                listener.exitOp8(self)




    def op8(self):

        localctx = nim_Parser.Op8Context(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_op8)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 246
            self.match(nim_Parser.OP8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Op9Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OP9(self):
            return self.getToken(nim_Parser.OP9, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_op9

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOp9" ):
                listener.enterOp9(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOp9" ):
                listener.exitOp9(self)




    def op9(self):

        localctx = nim_Parser.Op9Context(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_op9)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 248
            self.match(nim_Parser.OP9)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Op10Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OP10(self):
            return self.getToken(nim_Parser.OP10, 0)

        def DOLLAR_SIGN(self):
            return self.getToken(nim_Parser.DOLLAR_SIGN, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_op10

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOp10" ):
                listener.enterOp10(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOp10" ):
                listener.exitOp10(self)




    def op10(self):

        localctx = nim_Parser.Op10Context(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_op10)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 250
            _la = self._input.LA(1)
            if not(_la==nim_Parser.DOLLAR_SIGN or _la==nim_Parser.OP10):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def op0(self):
            return self.getTypedRuleContext(nim_Parser.Op0Context,0)


        def op1(self):
            return self.getTypedRuleContext(nim_Parser.Op1Context,0)


        def op2(self):
            return self.getTypedRuleContext(nim_Parser.Op2Context,0)


        def op3(self):
            return self.getTypedRuleContext(nim_Parser.Op3Context,0)


        def op4(self):
            return self.getTypedRuleContext(nim_Parser.Op4Context,0)


        def op5(self):
            return self.getTypedRuleContext(nim_Parser.Op5Context,0)


        def op6(self):
            return self.getTypedRuleContext(nim_Parser.Op6Context,0)


        def op7(self):
            return self.getTypedRuleContext(nim_Parser.Op7Context,0)


        def op8(self):
            return self.getTypedRuleContext(nim_Parser.Op8Context,0)


        def op9(self):
            return self.getTypedRuleContext(nim_Parser.Op9Context,0)


        def op10(self):
            return self.getTypedRuleContext(nim_Parser.Op10Context,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperator" ):
                listener.enterOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperator" ):
                listener.exitOperator(self)




    def operator(self):

        localctx = nim_Parser.OperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_operator)
        try:
            self.state = 263
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [nim_Parser.OP0]:
                self.enterOuterAlt(localctx, 1)
                self.state = 252
                self.op0()
                pass
            elif token in [nim_Parser.EQUALS, nim_Parser.OP1]:
                self.enterOuterAlt(localctx, 2)
                self.state = 253
                self.op1()
                pass
            elif token in [nim_Parser.COLON, nim_Parser.OP2]:
                self.enterOuterAlt(localctx, 3)
                self.state = 254
                self.op2()
                pass
            elif token in [nim_Parser.OP3]:
                self.enterOuterAlt(localctx, 4)
                self.state = 255
                self.op3()
                pass
            elif token in [nim_Parser.OP4]:
                self.enterOuterAlt(localctx, 5)
                self.state = 256
                self.op4()
                pass
            elif token in [nim_Parser.IN, nim_Parser.OF, nim_Parser.NOT, nim_Parser.OP5]:
                self.enterOuterAlt(localctx, 6)
                self.state = 257
                self.op5()
                pass
            elif token in [nim_Parser.DOT, nim_Parser.OP6]:
                self.enterOuterAlt(localctx, 7)
                self.state = 258
                self.op6()
                pass
            elif token in [nim_Parser.OP7]:
                self.enterOuterAlt(localctx, 8)
                self.state = 259
                self.op7()
                pass
            elif token in [nim_Parser.OP8]:
                self.enterOuterAlt(localctx, 9)
                self.state = 260
                self.op8()
                pass
            elif token in [nim_Parser.OP9]:
                self.enterOuterAlt(localctx, 10)
                self.state = 261
                self.op9()
                pass
            elif token in [nim_Parser.DOLLAR_SIGN, nim_Parser.OP10]:
                self.enterOuterAlt(localctx, 11)
                self.state = 262
                self.op10()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrefixOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def operator(self):
            return self.getTypedRuleContext(nim_Parser.OperatorContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_prefixOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrefixOperator" ):
                listener.enterPrefixOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrefixOperator" ):
                listener.exitPrefixOperator(self)




    def prefixOperator(self):

        localctx = nim_Parser.PrefixOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_prefixOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 265
            self.operator()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.AssignExprContext)
            else:
                return self.getTypedRuleContext(nim_Parser.AssignExprContext,i)


        def OP1(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.OP1)
            else:
                return self.getToken(nim_Parser.OP1, i)

        def getRuleIndex(self):
            return nim_Parser.RULE_simpleExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleExpr" ):
                listener.enterSimpleExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleExpr" ):
                listener.exitSimpleExpr(self)




    def simpleExpr(self):

        localctx = nim_Parser.SimpleExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_simpleExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 267
            self.assignExpr()
            self.state = 272
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,3,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 268
                    self.match(nim_Parser.OP1)
                    self.state = 269
                    self.assignExpr() 
                self.state = 274
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,3,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def orExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.OrExprContext)
            else:
                return self.getTypedRuleContext(nim_Parser.OrExprContext,i)


        def OP2(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.OP2)
            else:
                return self.getToken(nim_Parser.OP2, i)

        def getRuleIndex(self):
            return nim_Parser.RULE_assignExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignExpr" ):
                listener.enterAssignExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignExpr" ):
                listener.exitAssignExpr(self)




    def assignExpr(self):

        localctx = nim_Parser.AssignExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_assignExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 275
            self.orExpr()
            self.state = 280
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,4,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 276
                    self.match(nim_Parser.OP2)
                    self.state = 277
                    self.orExpr() 
                self.state = 282
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,4,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def andExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.AndExprContext)
            else:
                return self.getTypedRuleContext(nim_Parser.AndExprContext,i)


        def OP3(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.OP3)
            else:
                return self.getToken(nim_Parser.OP3, i)

        def getRuleIndex(self):
            return nim_Parser.RULE_orExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrExpr" ):
                listener.enterOrExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrExpr" ):
                listener.exitOrExpr(self)




    def orExpr(self):

        localctx = nim_Parser.OrExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_orExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 283
            self.andExpr()
            self.state = 288
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,5,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 284
                    self.match(nim_Parser.OP3)
                    self.state = 285
                    self.andExpr() 
                self.state = 290
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,5,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AndExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def cmpExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.CmpExprContext)
            else:
                return self.getTypedRuleContext(nim_Parser.CmpExprContext,i)


        def OP4(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.OP4)
            else:
                return self.getToken(nim_Parser.OP4, i)

        def getRuleIndex(self):
            return nim_Parser.RULE_andExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAndExpr" ):
                listener.enterAndExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAndExpr" ):
                listener.exitAndExpr(self)




    def andExpr(self):

        localctx = nim_Parser.AndExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_andExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 291
            self.cmpExpr()
            self.state = 296
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,6,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 292
                    self.match(nim_Parser.OP4)
                    self.state = 293
                    self.cmpExpr() 
                self.state = 298
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,6,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CmpExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sliceExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.SliceExprContext)
            else:
                return self.getTypedRuleContext(nim_Parser.SliceExprContext,i)


        def OP5(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.OP5)
            else:
                return self.getToken(nim_Parser.OP5, i)

        def getRuleIndex(self):
            return nim_Parser.RULE_cmpExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCmpExpr" ):
                listener.enterCmpExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCmpExpr" ):
                listener.exitCmpExpr(self)




    def cmpExpr(self):

        localctx = nim_Parser.CmpExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_cmpExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 299
            self.sliceExpr()
            self.state = 304
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,7,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 300
                    self.match(nim_Parser.OP5)
                    self.state = 301
                    self.sliceExpr() 
                self.state = 306
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,7,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SliceExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ampExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.AmpExprContext)
            else:
                return self.getTypedRuleContext(nim_Parser.AmpExprContext,i)


        def OP6(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.OP6)
            else:
                return self.getToken(nim_Parser.OP6, i)

        def getRuleIndex(self):
            return nim_Parser.RULE_sliceExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSliceExpr" ):
                listener.enterSliceExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSliceExpr" ):
                listener.exitSliceExpr(self)




    def sliceExpr(self):

        localctx = nim_Parser.SliceExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_sliceExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 307
            self.ampExpr()
            self.state = 312
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,8,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 308
                    self.match(nim_Parser.OP6)
                    self.state = 309
                    self.ampExpr() 
                self.state = 314
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,8,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AmpExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def plusExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.PlusExprContext)
            else:
                return self.getTypedRuleContext(nim_Parser.PlusExprContext,i)


        def OP7(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.OP7)
            else:
                return self.getToken(nim_Parser.OP7, i)

        def getRuleIndex(self):
            return nim_Parser.RULE_ampExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAmpExpr" ):
                listener.enterAmpExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAmpExpr" ):
                listener.exitAmpExpr(self)




    def ampExpr(self):

        localctx = nim_Parser.AmpExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_ampExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 315
            self.plusExpr()
            self.state = 320
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,9,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 316
                    self.match(nim_Parser.OP7)
                    self.state = 317
                    self.plusExpr() 
                self.state = 322
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,9,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PlusExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mulExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.MulExprContext)
            else:
                return self.getTypedRuleContext(nim_Parser.MulExprContext,i)


        def OP8(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.OP8)
            else:
                return self.getToken(nim_Parser.OP8, i)

        def getRuleIndex(self):
            return nim_Parser.RULE_plusExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlusExpr" ):
                listener.enterPlusExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlusExpr" ):
                listener.exitPlusExpr(self)




    def plusExpr(self):

        localctx = nim_Parser.PlusExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_plusExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 323
            self.mulExpr()
            self.state = 328
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,10,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 324
                    self.match(nim_Parser.OP8)
                    self.state = 325
                    self.mulExpr() 
                self.state = 330
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,10,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MulExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dollarExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.DollarExprContext)
            else:
                return self.getTypedRuleContext(nim_Parser.DollarExprContext,i)


        def OP9(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.OP9)
            else:
                return self.getToken(nim_Parser.OP9, i)

        def getRuleIndex(self):
            return nim_Parser.RULE_mulExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMulExpr" ):
                listener.enterMulExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMulExpr" ):
                listener.exitMulExpr(self)




    def mulExpr(self):

        localctx = nim_Parser.MulExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_mulExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 331
            self.dollarExpr()
            self.state = 336
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,11,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 332
                    self.match(nim_Parser.OP9)
                    self.state = 333
                    self.dollarExpr() 
                self.state = 338
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,11,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DollarExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primary(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.PrimaryContext)
            else:
                return self.getTypedRuleContext(nim_Parser.PrimaryContext,i)


        def OP10(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.OP10)
            else:
                return self.getToken(nim_Parser.OP10, i)

        def getRuleIndex(self):
            return nim_Parser.RULE_dollarExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDollarExpr" ):
                listener.enterDollarExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDollarExpr" ):
                listener.exitDollarExpr(self)




    def dollarExpr(self):

        localctx = nim_Parser.DollarExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_dollarExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 339
            self.primary()
            self.state = 344
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,12,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 340
                    self.match(nim_Parser.OP10)
                    self.state = 341
                    self.primary() 
                self.state = 346
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,12,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT_LIT(self):
            return self.getToken(nim_Parser.INT_LIT, 0)

        def INT8_LIT(self):
            return self.getToken(nim_Parser.INT8_LIT, 0)

        def INT16_LIT(self):
            return self.getToken(nim_Parser.INT16_LIT, 0)

        def INT32_LIT(self):
            return self.getToken(nim_Parser.INT32_LIT, 0)

        def INT64_LIT(self):
            return self.getToken(nim_Parser.INT64_LIT, 0)

        def UINT_LIT(self):
            return self.getToken(nim_Parser.UINT_LIT, 0)

        def UINT8_LIT(self):
            return self.getToken(nim_Parser.UINT8_LIT, 0)

        def UINT16_LIT(self):
            return self.getToken(nim_Parser.UINT16_LIT, 0)

        def UINT32_LIT(self):
            return self.getToken(nim_Parser.UINT32_LIT, 0)

        def UINT64_LIT(self):
            return self.getToken(nim_Parser.UINT64_LIT, 0)

        def FLOAT_LIT(self):
            return self.getToken(nim_Parser.FLOAT_LIT, 0)

        def FLOAT32_LIT(self):
            return self.getToken(nim_Parser.FLOAT32_LIT, 0)

        def FLOAT64_LIT(self):
            return self.getToken(nim_Parser.FLOAT64_LIT, 0)

        def STR_LIT(self):
            return self.getToken(nim_Parser.STR_LIT, 0)

        def RSTR_LIT(self):
            return self.getToken(nim_Parser.RSTR_LIT, 0)

        def TRIPLESTR_LIT(self):
            return self.getToken(nim_Parser.TRIPLESTR_LIT, 0)

        def CHAR_LIT(self):
            return self.getToken(nim_Parser.CHAR_LIT, 0)

        def NIL(self):
            return self.getToken(nim_Parser.NIL, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral" ):
                listener.enterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral" ):
                listener.exitLiteral(self)




    def literal(self):

        localctx = nim_Parser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 347
            _la = self._input.LA(1)
            if not(((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & ((1 << (nim_Parser.NIL - 79)) | (1 << (nim_Parser.INT_LIT - 79)) | (1 << (nim_Parser.INT8_LIT - 79)) | (1 << (nim_Parser.INT16_LIT - 79)) | (1 << (nim_Parser.INT32_LIT - 79)) | (1 << (nim_Parser.INT64_LIT - 79)) | (1 << (nim_Parser.UINT_LIT - 79)) | (1 << (nim_Parser.UINT8_LIT - 79)) | (1 << (nim_Parser.UINT16_LIT - 79)) | (1 << (nim_Parser.UINT32_LIT - 79)) | (1 << (nim_Parser.UINT64_LIT - 79)) | (1 << (nim_Parser.FLOAT_LIT - 79)) | (1 << (nim_Parser.FLOAT32_LIT - 79)) | (1 << (nim_Parser.FLOAT64_LIT - 79)) | (1 << (nim_Parser.CHAR_LIT - 79)) | (1 << (nim_Parser.STR_LIT - 79)) | (1 << (nim_Parser.TRIPLESTR_LIT - 79)) | (1 << (nim_Parser.RSTR_LIT - 79)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GeneralizedLitContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GENERALIZED_STR_LIT(self):
            return self.getToken(nim_Parser.GENERALIZED_STR_LIT, 0)

        def GENERALIZED_TRIPLESTR_LIT(self):
            return self.getToken(nim_Parser.GENERALIZED_TRIPLESTR_LIT, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_generalizedLit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneralizedLit" ):
                listener.enterGeneralizedLit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneralizedLit" ):
                listener.exitGeneralizedLit(self)




    def generalizedLit(self):

        localctx = nim_Parser.GeneralizedLitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_generalizedLit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 349
            _la = self._input.LA(1)
            if not(_la==nim_Parser.GENERALIZED_STR_LIT or _la==nim_Parser.GENERALIZED_TRIPLESTR_LIT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SymbolContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbolBody(self):
            return self.getTypedRuleContext(nim_Parser.SymbolBodyContext,0)


        def SYM_HEADER(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.SYM_HEADER)
            else:
                return self.getToken(nim_Parser.SYM_HEADER, i)

        def getRuleIndex(self):
            return nim_Parser.RULE_symbol

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSymbol" ):
                listener.enterSymbol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSymbol" ):
                listener.exitSymbol(self)




    def symbol(self):

        localctx = nim_Parser.SymbolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_symbol)
        try:
            self.state = 356
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 351
                self.symbolBody()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 352
                self.match(nim_Parser.SYM_HEADER)
                self.state = 353
                self.symbolBody()
                self.state = 354
                self.match(nim_Parser.SYM_HEADER)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SymbolBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(nim_Parser.IDENTIFIER, 0)

        def literal(self):
            return self.getTypedRuleContext(nim_Parser.LiteralContext,0)


        def operator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.OperatorContext)
            else:
                return self.getTypedRuleContext(nim_Parser.OperatorContext,i)


        def OPEN_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.OPEN_PAREN)
            else:
                return self.getToken(nim_Parser.OPEN_PAREN, i)

        def CLOSE_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.CLOSE_PAREN)
            else:
                return self.getToken(nim_Parser.CLOSE_PAREN, i)

        def OPEN_BRACK(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.OPEN_BRACK)
            else:
                return self.getToken(nim_Parser.OPEN_BRACK, i)

        def CLOSE_BRACK(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.CLOSE_BRACK)
            else:
                return self.getToken(nim_Parser.CLOSE_BRACK, i)

        def EQUALS(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.EQUALS)
            else:
                return self.getToken(nim_Parser.EQUALS, i)

        def getRuleIndex(self):
            return nim_Parser.RULE_symbolBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSymbolBody" ):
                listener.enterSymbolBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSymbolBody" ):
                listener.exitSymbolBody(self)




    def symbolBody(self):

        localctx = nim_Parser.SymbolBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_symbolBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 371
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
            if la_ == 1:
                self.state = 358
                self.match(nim_Parser.IDENTIFIER)
                pass

            elif la_ == 2:
                self.state = 359
                self.literal()
                pass

            elif la_ == 3:
                self.state = 368
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,15,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 366
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
                        if la_ == 1:
                            self.state = 360
                            self.operator()
                            pass

                        elif la_ == 2:
                            self.state = 361
                            self.match(nim_Parser.OPEN_PAREN)
                            pass

                        elif la_ == 3:
                            self.state = 362
                            self.match(nim_Parser.CLOSE_PAREN)
                            pass

                        elif la_ == 4:
                            self.state = 363
                            self.match(nim_Parser.OPEN_BRACK)
                            pass

                        elif la_ == 5:
                            self.state = 364
                            self.match(nim_Parser.CLOSE_BRACK)
                            pass

                        elif la_ == 6:
                            self.state = 365
                            self.match(nim_Parser.EQUALS)
                            pass

                 
                    self.state = 370
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,15,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprColonEqExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def anyExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.AnyExprContext)
            else:
                return self.getTypedRuleContext(nim_Parser.AnyExprContext,i)


        def COLON(self):
            return self.getToken(nim_Parser.COLON, 0)

        def EQUALS(self):
            return self.getToken(nim_Parser.EQUALS, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_exprColonEqExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprColonEqExpr" ):
                listener.enterExprColonEqExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprColonEqExpr" ):
                listener.exitExprColonEqExpr(self)




    def exprColonEqExpr(self):

        localctx = nim_Parser.ExprColonEqExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_exprColonEqExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 373
            self.anyExpr()
            self.state = 376
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==nim_Parser.COLON or _la==nim_Parser.EQUALS:
                self.state = 374
                _la = self._input.LA(1)
                if not(_la==nim_Parser.COLON or _la==nim_Parser.EQUALS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 375
                self.anyExpr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayConstrContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACK(self):
            return self.getToken(nim_Parser.OPEN_BRACK, 0)

        def exprColonEqExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.ExprColonEqExprContext)
            else:
                return self.getTypedRuleContext(nim_Parser.ExprColonEqExprContext,i)


        def CLOSE_BRACK(self):
            return self.getToken(nim_Parser.CLOSE_BRACK, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.COMMA)
            else:
                return self.getToken(nim_Parser.COMMA, i)

        def getRuleIndex(self):
            return nim_Parser.RULE_arrayConstr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayConstr" ):
                listener.enterArrayConstr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayConstr" ):
                listener.exitArrayConstr(self)




    def arrayConstr(self):

        localctx = nim_Parser.ArrayConstrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_arrayConstr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 378
            self.match(nim_Parser.OPEN_BRACK)
            self.state = 379
            self.exprColonEqExpr()
            self.state = 384
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==nim_Parser.COMMA:
                self.state = 380
                self.match(nim_Parser.COMMA)
                self.state = 381
                self.exprColonEqExpr()
                self.state = 386
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 387
            self.match(nim_Parser.CLOSE_BRACK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TupleConstrContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(nim_Parser.OPEN_PAREN, 0)

        def exprColonEqExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.ExprColonEqExprContext)
            else:
                return self.getTypedRuleContext(nim_Parser.ExprColonEqExprContext,i)


        def CLOSE_PAREN(self):
            return self.getToken(nim_Parser.CLOSE_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.COMMA)
            else:
                return self.getToken(nim_Parser.COMMA, i)

        def getRuleIndex(self):
            return nim_Parser.RULE_tupleConstr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTupleConstr" ):
                listener.enterTupleConstr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTupleConstr" ):
                listener.exitTupleConstr(self)




    def tupleConstr(self):

        localctx = nim_Parser.TupleConstrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_tupleConstr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 389
            self.match(nim_Parser.OPEN_PAREN)
            self.state = 390
            self.exprColonEqExpr()
            self.state = 395
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==nim_Parser.COMMA:
                self.state = 391
                self.match(nim_Parser.COMMA)
                self.state = 392
                self.exprColonEqExpr()
                self.state = 397
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 398
            self.match(nim_Parser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentOrLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def generalizedLit(self):
            return self.getTypedRuleContext(nim_Parser.GeneralizedLitContext,0)


        def symbol(self):
            return self.getTypedRuleContext(nim_Parser.SymbolContext,0)


        def arrayConstr(self):
            return self.getTypedRuleContext(nim_Parser.ArrayConstrContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_identOrLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentOrLiteral" ):
                listener.enterIdentOrLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentOrLiteral" ):
                listener.exitIdentOrLiteral(self)




    def identOrLiteral(self):

        localctx = nim_Parser.IdentOrLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_identOrLiteral)
        try:
            self.state = 403
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,20,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 400
                self.generalizedLit()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 401
                self.symbol()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 402
                self.arrayConstr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AddressLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOLLAR_SIGN(self):
            return self.getToken(nim_Parser.DOLLAR_SIGN, 0)

        def identOrLiteral(self):
            return self.getTypedRuleContext(nim_Parser.IdentOrLiteralContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_addressLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAddressLiteral" ):
                listener.enterAddressLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAddressLiteral" ):
                listener.exitAddressLiteral(self)




    def addressLiteral(self):

        localctx = nim_Parser.AddressLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_addressLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 405
            self.match(nim_Parser.DOLLAR_SIGN)
            self.state = 406
            self.identOrLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimarySuffixSimpleBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal(self):
            return self.getTypedRuleContext(nim_Parser.LiteralContext,0)


        def generalizedLit(self):
            return self.getTypedRuleContext(nim_Parser.GeneralizedLitContext,0)


        def addressLiteral(self):
            return self.getTypedRuleContext(nim_Parser.AddressLiteralContext,0)


        def IDENTIFIER(self):
            return self.getToken(nim_Parser.IDENTIFIER, 0)

        def arrayConstr(self):
            return self.getTypedRuleContext(nim_Parser.ArrayConstrContext,0)


        def tupleConstr(self):
            return self.getTypedRuleContext(nim_Parser.TupleConstrContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_primarySuffixSimpleBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimarySuffixSimpleBody" ):
                listener.enterPrimarySuffixSimpleBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimarySuffixSimpleBody" ):
                listener.exitPrimarySuffixSimpleBody(self)




    def primarySuffixSimpleBody(self):

        localctx = nim_Parser.PrimarySuffixSimpleBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_primarySuffixSimpleBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 416
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [nim_Parser.IDENTIFIER]:
                self.state = 408
                self.match(nim_Parser.IDENTIFIER)
                self.state = 411
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [nim_Parser.OPEN_BRACK]:
                    self.state = 409
                    self.arrayConstr()
                    pass
                elif token in [nim_Parser.OPEN_PAREN]:
                    self.state = 410
                    self.tupleConstr()
                    pass
                elif token in [nim_Parser.EOF]:
                    pass
                else:
                    pass
                pass
            elif token in [nim_Parser.NIL, nim_Parser.INT_LIT, nim_Parser.INT8_LIT, nim_Parser.INT16_LIT, nim_Parser.INT32_LIT, nim_Parser.INT64_LIT, nim_Parser.UINT_LIT, nim_Parser.UINT8_LIT, nim_Parser.UINT16_LIT, nim_Parser.UINT32_LIT, nim_Parser.UINT64_LIT, nim_Parser.FLOAT_LIT, nim_Parser.FLOAT32_LIT, nim_Parser.FLOAT64_LIT, nim_Parser.CHAR_LIT, nim_Parser.STR_LIT, nim_Parser.TRIPLESTR_LIT, nim_Parser.RSTR_LIT]:
                self.state = 413
                self.literal()
                pass
            elif token in [nim_Parser.GENERALIZED_STR_LIT, nim_Parser.GENERALIZED_TRIPLESTR_LIT]:
                self.state = 414
                self.generalizedLit()
                pass
            elif token in [nim_Parser.DOLLAR_SIGN]:
                self.state = 415
                self.addressLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimarySuffixContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(nim_Parser.OPEN_PAREN, 0)

        def exprColonEqExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.ExprColonEqExprContext)
            else:
                return self.getTypedRuleContext(nim_Parser.ExprColonEqExprContext,i)


        def CLOSE_PAREN(self):
            return self.getToken(nim_Parser.CLOSE_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.COMMA)
            else:
                return self.getToken(nim_Parser.COMMA, i)

        def DOT(self):
            return self.getToken(nim_Parser.DOT, 0)

        def symbol(self):
            return self.getTypedRuleContext(nim_Parser.SymbolContext,0)


        def generalizedLit(self):
            return self.getTypedRuleContext(nim_Parser.GeneralizedLitContext,0)


        def OPEN_BRACK(self):
            return self.getToken(nim_Parser.OPEN_BRACK, 0)

        def exprList(self):
            return self.getTypedRuleContext(nim_Parser.ExprListContext,0)


        def CLOSE_BRACK(self):
            return self.getToken(nim_Parser.CLOSE_BRACK, 0)

        def expr(self):
            return self.getTypedRuleContext(nim_Parser.ExprContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_primarySuffix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimarySuffix" ):
                listener.enterPrimarySuffix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimarySuffix" ):
                listener.exitPrimarySuffix(self)




    def primarySuffix(self):

        localctx = nim_Parser.PrimarySuffixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_primarySuffix)
        self._la = 0 # Token type
        try:
            self.state = 440
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,25,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 418
                self.match(nim_Parser.OPEN_PAREN)
                self.state = 419
                self.exprColonEqExpr()
                self.state = 424
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==nim_Parser.COMMA:
                    self.state = 420
                    self.match(nim_Parser.COMMA)
                    self.state = 421
                    self.exprColonEqExpr()
                    self.state = 426
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 427
                self.match(nim_Parser.CLOSE_PAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 429
                self.match(nim_Parser.DOT)
                self.state = 430
                self.symbol()
                self.state = 432
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,24,self._ctx)
                if la_ == 1:
                    self.state = 431
                    self.generalizedLit()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 434
                self.match(nim_Parser.OPEN_BRACK)
                self.state = 435
                self.exprList()
                self.state = 436
                self.match(nim_Parser.CLOSE_BRACK)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 438
                if not self._input.LT(1).type in self.primarySuffixList:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self._input.LT(1).type in self.primarySuffixList")
                self.state = 439
                self.expr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeKeyw(self):
            return self.getTypedRuleContext(nim_Parser.TypeKeywContext,0)


        def simpleExpr(self):
            return self.getTypedRuleContext(nim_Parser.SimpleExprContext,0)


        def prefixOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.PrefixOperatorContext)
            else:
                return self.getTypedRuleContext(nim_Parser.PrefixOperatorContext,i)


        def identOrLiteral(self):
            return self.getTypedRuleContext(nim_Parser.IdentOrLiteralContext,0)


        def primarySuffix(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.PrimarySuffixContext)
            else:
                return self.getTypedRuleContext(nim_Parser.PrimarySuffixContext,i)


        def getRuleIndex(self):
            return nim_Parser.RULE_primary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimary" ):
                listener.enterPrimary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimary" ):
                listener.exitPrimary(self)




    def primary(self):

        localctx = nim_Parser.PrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_primary)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 465
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
            if la_ == 1:
                self.state = 442
                self.typeKeyw()
                self.state = 443
                self.simpleExpr()
                pass

            elif la_ == 2:
                self.state = 448
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,26,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 445
                        self.prefixOperator() 
                    self.state = 450
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,26,self._ctx)

                self.state = 463
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
                if la_ == 1:
                    self.state = 451
                    self.identOrLiteral()
                    self.state = 455
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,27,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 452
                            self.primarySuffix() 
                        self.state = 457
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,27,self._ctx)

                    pass

                elif la_ == 2:
                    self.state = 459 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 458
                            self.primarySuffix()

                        else:
                            raise NoViableAltException(self)
                        self.state = 461 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,28,self._ctx)

                    pass


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_complexStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.Simple_complexStmtContext)
            else:
                return self.getTypedRuleContext(nim_Parser.Simple_complexStmtContext,i)


        def expr(self):
            return self.getTypedRuleContext(nim_Parser.ExprContext,0)


        def SEMI_COLON(self):
            return self.getToken(nim_Parser.SEMI_COLON, 0)

        def COLON(self):
            return self.getToken(nim_Parser.COLON, 0)

        def EQUALS(self):
            return self.getToken(nim_Parser.EQUALS, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.COMMA)
            else:
                return self.getToken(nim_Parser.COMMA, i)

        def exprColonEqExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.ExprColonEqExprContext)
            else:
                return self.getTypedRuleContext(nim_Parser.ExprColonEqExprContext,i)


        def getRuleIndex(self):
            return nim_Parser.RULE_parBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParBody" ):
                listener.enterParBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParBody" ):
                listener.exitParBody(self)




    def parBody(self):

        localctx = nim_Parser.ParBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_parBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 491
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
            if la_ == 1:
                self.state = 467
                if not self._input.LT(1).type in self.parKeyWList:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self._input.LT(1).type in self.parKeyWList")
                self.state = 468
                self.simple_complexStmt()
                self.state = 471
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nim_Parser.SEMI_COLON:
                    self.state = 469
                    self.match(nim_Parser.SEMI_COLON)
                    self.state = 470
                    self.simple_complexStmt()


                pass

            elif la_ == 2:
                self.state = 473
                self.expr()
                pass

            elif la_ == 3:
                self.state = 474
                _la = self._input.LA(1)
                if not(_la==nim_Parser.COLON or _la==nim_Parser.EQUALS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 475
                self.expr()
                self.state = 489
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [nim_Parser.COMMA]:
                    self.state = 479 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 477
                        self.match(nim_Parser.COMMA)
                        self.state = 478
                        self.exprColonEqExpr()
                        self.state = 481 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==nim_Parser.COMMA):
                            break

                    pass
                elif token in [nim_Parser.SEMI_COLON]:
                    self.state = 483
                    self.match(nim_Parser.SEMI_COLON)
                    self.state = 485 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 484
                        self.simple_complexStmt()
                        self.state = 487 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nim_Parser.TYPE) | (1 << nim_Parser.VARIABLE) | (1 << nim_Parser.LET) | (1 << nim_Parser.CONST) | (1 << nim_Parser.PROC) | (1 << nim_Parser.RETURN) | (1 << nim_Parser.CASE) | (1 << nim_Parser.IF) | (1 << nim_Parser.WHILE) | (1 << nim_Parser.FOR) | (1 << nim_Parser.CONTINUE) | (1 << nim_Parser.BREAK) | (1 << nim_Parser.TEMPLATE))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (nim_Parser.WHEN - 66)) | (1 << (nim_Parser.IMPORT - 66)) | (1 << (nim_Parser.FROM - 66)) | (1 << (nim_Parser.BLOCK - 66)) | (1 << (nim_Parser.MACRO - 66)) | (1 << (nim_Parser.DISCARD - 66)))) != 0)):
                            break

                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(nim_Parser.OPEN_PAREN, 0)

        def parBody(self):
            return self.getTypedRuleContext(nim_Parser.ParBodyContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(nim_Parser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_par

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPar" ):
                listener.enterPar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPar" ):
                listener.exitPar(self)




    def par(self):

        localctx = nim_Parser.ParContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_par)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 493
            self.match(nim_Parser.OPEN_PAREN)
            self.state = 494
            self.parBody()
            self.state = 495
            self.match(nim_Parser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPORT(self):
            return self.getToken(nim_Parser.IMPORT, 0)

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.IDENTIFIER)
            else:
                return self.getToken(nim_Parser.IDENTIFIER, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.COMMA)
            else:
                return self.getToken(nim_Parser.COMMA, i)

        def getRuleIndex(self):
            return nim_Parser.RULE_importStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportStmt" ):
                listener.enterImportStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportStmt" ):
                listener.exitImportStmt(self)




    def importStmt(self):

        localctx = nim_Parser.ImportStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_importStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 497
            self.match(nim_Parser.IMPORT)
            self.state = 498
            self.match(nim_Parser.IDENTIFIER)
            self.state = 503
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,36,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 499
                    self.match(nim_Parser.COMMA)
                    self.state = 500
                    self.match(nim_Parser.IDENTIFIER) 
                self.state = 505
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,36,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FromStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(nim_Parser.FROM, 0)

        def IDENTIFIER(self):
            return self.getToken(nim_Parser.IDENTIFIER, 0)

        def importStmt(self):
            return self.getTypedRuleContext(nim_Parser.ImportStmtContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_fromStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFromStmt" ):
                listener.enterFromStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFromStmt" ):
                listener.exitFromStmt(self)




    def fromStmt(self):

        localctx = nim_Parser.FromStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_fromStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 506
            self.match(nim_Parser.FROM)
            self.state = 507
            self.match(nim_Parser.IDENTIFIER)
            self.state = 508
            self.importStmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BLOCK(self):
            return self.getToken(nim_Parser.BLOCK, 0)

        def symbol(self):
            return self.getTypedRuleContext(nim_Parser.SymbolContext,0)


        def COLON(self):
            return self.getToken(nim_Parser.COLON, 0)

        def stmt(self):
            return self.getTypedRuleContext(nim_Parser.StmtContext,0)


        def ind(self):
            return self.getTypedRuleContext(nim_Parser.IndContext,0)


        def ded(self):
            return self.getTypedRuleContext(nim_Parser.DedContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_blockExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockExpr" ):
                listener.enterBlockExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockExpr" ):
                listener.exitBlockExpr(self)




    def blockExpr(self):

        localctx = nim_Parser.BlockExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_blockExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 510
            self.match(nim_Parser.BLOCK)
            self.state = 511
            self.symbol()
            self.state = 512
            self.match(nim_Parser.COLON)
            self.state = 518
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [nim_Parser.TYPE, nim_Parser.VARIABLE, nim_Parser.LET, nim_Parser.CONST, nim_Parser.PROC, nim_Parser.RETURN, nim_Parser.CASE, nim_Parser.IF, nim_Parser.WHILE, nim_Parser.FOR, nim_Parser.CONTINUE, nim_Parser.BREAK, nim_Parser.TEMPLATE, nim_Parser.WHEN, nim_Parser.IMPORT, nim_Parser.FROM, nim_Parser.BLOCK, nim_Parser.MACRO, nim_Parser.DISCARD]:
                self.state = 513
                self.stmt()
                pass
            elif token in [nim_Parser.INDENT]:
                self.state = 514
                self.ind()
                self.state = 515
                self.stmt()
                self.state = 516
                self.ded()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def forStmt(self):
            return self.getTypedRuleContext(nim_Parser.ForStmtContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_forExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForExpr" ):
                listener.enterForExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForExpr" ):
                listener.exitForExpr(self)




    def forExpr(self):

        localctx = nim_Parser.ForExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_forExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 520
            self.forStmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnyExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleExpr(self):
            return self.getTypedRuleContext(nim_Parser.SimpleExprContext,0)


        def expr(self):
            return self.getTypedRuleContext(nim_Parser.ExprContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_anyExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnyExpr" ):
                listener.enterAnyExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnyExpr" ):
                listener.exitAnyExpr(self)




    def anyExpr(self):

        localctx = nim_Parser.AnyExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_anyExpr)
        try:
            self.state = 524
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 522
                self.simpleExpr()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 523
                self.expr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnyStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stmt(self):
            return self.getTypedRuleContext(nim_Parser.StmtContext,0)


        def exprStmt(self):
            return self.getTypedRuleContext(nim_Parser.ExprStmtContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_anyStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnyStmt" ):
                listener.enterAnyStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnyStmt" ):
                listener.exitAnyStmt(self)




    def anyStmt(self):

        localctx = nim_Parser.AnyStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_anyStmt)
        try:
            self.state = 528
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 526
                self.stmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 527
                self.exprStmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CondExprBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def anyExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.AnyExprContext)
            else:
                return self.getTypedRuleContext(nim_Parser.AnyExprContext,i)


        def ELSE(self):
            return self.getToken(nim_Parser.ELSE, 0)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.COLON)
            else:
                return self.getToken(nim_Parser.COLON, i)

        def ELIF(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.ELIF)
            else:
                return self.getToken(nim_Parser.ELIF, i)

        def ind(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.IndContext)
            else:
                return self.getTypedRuleContext(nim_Parser.IndContext,i)


        def ded(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.DedContext)
            else:
                return self.getTypedRuleContext(nim_Parser.DedContext,i)


        def getRuleIndex(self):
            return nim_Parser.RULE_condExprBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondExprBody" ):
                listener.enterCondExprBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondExprBody" ):
                listener.exitCondExprBody(self)




    def condExprBody(self):

        localctx = nim_Parser.CondExprBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_condExprBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 530
            self.anyExpr()
            self.state = 543
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==nim_Parser.ELIF:
                self.state = 531
                self.match(nim_Parser.ELIF)

                self.state = 532
                self.anyExpr()
                self.state = 533
                self.match(nim_Parser.COLON)
                self.state = 539
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
                if la_ == 1:
                    self.state = 534
                    self.ind()
                    self.state = 535
                    self.anyExpr()
                    self.state = 536
                    self.ded()
                    pass

                elif la_ == 2:
                    self.state = 538
                    self.anyExpr()
                    pass


                self.state = 545
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 546
            self.match(nim_Parser.ELSE)
            self.state = 547
            self.match(nim_Parser.COLON)
            self.state = 553
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
            if la_ == 1:
                self.state = 548
                self.ind()
                self.state = 549
                self.anyExpr()
                self.state = 550
                self.ded()
                pass

            elif la_ == 2:
                self.state = 552
                self.anyExpr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CondExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def anyExpr(self):
            return self.getTypedRuleContext(nim_Parser.AnyExprContext,0)


        def COLON(self):
            return self.getToken(nim_Parser.COLON, 0)

        def ind(self):
            return self.getTypedRuleContext(nim_Parser.IndContext,0)


        def condExprBody(self):
            return self.getTypedRuleContext(nim_Parser.CondExprBodyContext,0)


        def ded(self):
            return self.getTypedRuleContext(nim_Parser.DedContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_condExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondExpr" ):
                listener.enterCondExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondExpr" ):
                listener.exitCondExpr(self)




    def condExpr(self):

        localctx = nim_Parser.CondExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_condExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 555
            self.anyExpr()
            self.state = 556
            self.match(nim_Parser.COLON)
            self.state = 562
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
            if la_ == 1:
                self.state = 557
                self.ind()
                self.state = 558
                self.condExprBody()
                self.state = 559
                self.ded()
                pass

            elif la_ == 2:
                self.state = 561
                self.condExprBody()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CaseExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(nim_Parser.CASE, 0)

        def anyExpr(self):
            return self.getTypedRuleContext(nim_Parser.AnyExprContext,0)


        def ofBranches(self):
            return self.getTypedRuleContext(nim_Parser.OfBranchesContext,0)


        def ind(self):
            return self.getTypedRuleContext(nim_Parser.IndContext,0)


        def ded(self):
            return self.getTypedRuleContext(nim_Parser.DedContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_caseExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseExpr" ):
                listener.enterCaseExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseExpr" ):
                listener.exitCaseExpr(self)




    def caseExpr(self):

        localctx = nim_Parser.CaseExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_caseExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 564
            self.match(nim_Parser.CASE)
            self.state = 565
            self.anyExpr()
            self.state = 571
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [nim_Parser.INDENT]:
                self.state = 566
                self.ind()
                self.state = 567
                self.ofBranches()
                self.state = 568
                self.ded()
                pass
            elif token in [nim_Parser.OF]:
                self.state = 570
                self.ofBranches()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhenExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(nim_Parser.WHEN, 0)

        def condExpr(self):
            return self.getTypedRuleContext(nim_Parser.CondExprContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_whenExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhenExpr" ):
                listener.enterWhenExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhenExpr" ):
                listener.exitWhenExpr(self)




    def whenExpr(self):

        localctx = nim_Parser.WhenExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_whenExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 573
            self.match(nim_Parser.WHEN)
            self.state = 574
            self.condExpr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(nim_Parser.IF, 0)

        def condExpr(self):
            return self.getTypedRuleContext(nim_Parser.CondExprContext,0)


        def NOT(self):
            return self.getToken(nim_Parser.NOT, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_ifExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfExpr" ):
                listener.enterIfExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfExpr" ):
                listener.exitIfExpr(self)




    def ifExpr(self):

        localctx = nim_Parser.IfExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_ifExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 576
            self.match(nim_Parser.IF)
            self.state = 578
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,45,self._ctx)
            if la_ == 1:
                self.state = 577
                self.match(nim_Parser.NOT)


            self.state = 580
            self.condExpr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def anyExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.AnyExprContext)
            else:
                return self.getTypedRuleContext(nim_Parser.AnyExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.COMMA)
            else:
                return self.getToken(nim_Parser.COMMA, i)

        def getRuleIndex(self):
            return nim_Parser.RULE_exprList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprList" ):
                listener.enterExprList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprList" ):
                listener.exitExprList(self)




    def exprList(self):

        localctx = nim_Parser.ExprListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_exprList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 582
            self.anyExpr()
            self.state = 587
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==nim_Parser.COMMA:
                self.state = 583
                self.match(nim_Parser.COMMA)
                self.state = 584
                self.anyExpr()
                self.state = 589
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OfBranchContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OF(self):
            return self.getToken(nim_Parser.OF, 0)

        def exprList(self):
            return self.getTypedRuleContext(nim_Parser.ExprListContext,0)


        def COLON(self):
            return self.getToken(nim_Parser.COLON, 0)

        def ind(self):
            return self.getTypedRuleContext(nim_Parser.IndContext,0)


        def ded(self):
            return self.getTypedRuleContext(nim_Parser.DedContext,0)


        def anyStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.AnyStmtContext)
            else:
                return self.getTypedRuleContext(nim_Parser.AnyStmtContext,i)


        def getRuleIndex(self):
            return nim_Parser.RULE_ofBranch

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOfBranch" ):
                listener.enterOfBranch(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOfBranch" ):
                listener.exitOfBranch(self)




    def ofBranch(self):

        localctx = nim_Parser.OfBranchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_ofBranch)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 590
            self.match(nim_Parser.OF)
            self.state = 591
            self.exprList()
            self.state = 592
            self.match(nim_Parser.COLON)
            self.state = 602
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
            if la_ == 1:
                self.state = 593
                self.ind()
                self.state = 595 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 594
                        self.anyStmt()

                    else:
                        raise NoViableAltException(self)
                    self.state = 597 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,47,self._ctx)

                self.state = 599
                self.ded()
                pass

            elif la_ == 2:
                self.state = 601
                self.anyStmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OfBranchesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ofBranch(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.OfBranchContext)
            else:
                return self.getTypedRuleContext(nim_Parser.OfBranchContext,i)


        def ELSE(self):
            return self.getToken(nim_Parser.ELSE, 0)

        def COLON(self):
            return self.getToken(nim_Parser.COLON, 0)

        def anyStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.AnyStmtContext)
            else:
                return self.getTypedRuleContext(nim_Parser.AnyStmtContext,i)


        def ind(self):
            return self.getTypedRuleContext(nim_Parser.IndContext,0)


        def ded(self):
            return self.getTypedRuleContext(nim_Parser.DedContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_ofBranches

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOfBranches" ):
                listener.enterOfBranches(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOfBranches" ):
                listener.exitOfBranches(self)




    def ofBranches(self):

        localctx = nim_Parser.OfBranchesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_ofBranches)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 605 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 604
                    self.ofBranch()

                else:
                    raise NoViableAltException(self)
                self.state = 607 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,49,self._ctx)

            self.state = 622
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
            if la_ == 1:
                self.state = 609
                self.match(nim_Parser.ELSE)
                self.state = 610
                self.match(nim_Parser.COLON)
                self.state = 620
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
                if la_ == 1:
                    self.state = 611
                    self.ind()
                    self.state = 613 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 612
                            self.anyStmt()

                        else:
                            raise NoViableAltException(self)
                        self.state = 615 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,50,self._ctx)

                    self.state = 617
                    self.ded()
                    pass

                elif la_ == 2:
                    self.state = 619
                    self.anyStmt()
                    pass




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CaseStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(nim_Parser.CASE, 0)

        def anyExpr(self):
            return self.getTypedRuleContext(nim_Parser.AnyExprContext,0)


        def ofBranches(self):
            return self.getTypedRuleContext(nim_Parser.OfBranchesContext,0)


        def ind(self):
            return self.getTypedRuleContext(nim_Parser.IndContext,0)


        def ded(self):
            return self.getTypedRuleContext(nim_Parser.DedContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_caseStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseStmt" ):
                listener.enterCaseStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseStmt" ):
                listener.exitCaseStmt(self)




    def caseStmt(self):

        localctx = nim_Parser.CaseStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_caseStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 624
            self.match(nim_Parser.CASE)
            self.state = 625
            self.anyExpr()
            self.state = 631
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [nim_Parser.INDENT]:
                self.state = 626
                self.ind()
                self.state = 627
                self.ofBranches()
                self.state = 628
                self.ded()
                pass
            elif token in [nim_Parser.OF]:
                self.state = 630
                self.ofBranches()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(nim_Parser.WHILE, 0)

        def anyExpr(self):
            return self.getTypedRuleContext(nim_Parser.AnyExprContext,0)


        def COLON(self):
            return self.getToken(nim_Parser.COLON, 0)

        def ind(self):
            return self.getTypedRuleContext(nim_Parser.IndContext,0)


        def ded(self):
            return self.getTypedRuleContext(nim_Parser.DedContext,0)


        def stmt(self):
            return self.getTypedRuleContext(nim_Parser.StmtContext,0)


        def exprStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.ExprStmtContext)
            else:
                return self.getTypedRuleContext(nim_Parser.ExprStmtContext,i)


        def getRuleIndex(self):
            return nim_Parser.RULE_whileStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileStmt" ):
                listener.enterWhileStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileStmt" ):
                listener.exitWhileStmt(self)




    def whileStmt(self):

        localctx = nim_Parser.WhileStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_whileStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 633
            self.match(nim_Parser.WHILE)
            self.state = 634
            self.anyExpr()
            self.state = 635
            self.match(nim_Parser.COLON)
            self.state = 655
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
            if la_ == 1:
                self.state = 636
                self.ind()
                self.state = 643
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,55,self._ctx)
                if la_ == 1:
                    self.state = 638 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 637
                            self.exprStmt()

                        else:
                            raise NoViableAltException(self)
                        self.state = 640 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,54,self._ctx)

                    pass

                elif la_ == 2:
                    self.state = 642
                    self.stmt()
                    pass


                self.state = 645
                self.ded()
                pass

            elif la_ == 2:
                self.state = 653
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
                if la_ == 1:
                    self.state = 648 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 647
                            self.exprStmt()

                        else:
                            raise NoViableAltException(self)
                        self.state = 650 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,56,self._ctx)

                    pass

                elif la_ == 2:
                    self.state = 652
                    self.stmt()
                    pass


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhenStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(nim_Parser.WHEN, 0)

        def condStmt(self):
            return self.getTypedRuleContext(nim_Parser.CondStmtContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_whenStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhenStmt" ):
                listener.enterWhenStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhenStmt" ):
                listener.exitWhenStmt(self)




    def whenStmt(self):

        localctx = nim_Parser.WhenStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_whenStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 657
            self.match(nim_Parser.WHEN)
            self.state = 658
            self.condStmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.IDENTIFIER)
            else:
                return self.getToken(nim_Parser.IDENTIFIER, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.COMMA)
            else:
                return self.getToken(nim_Parser.COMMA, i)

        def getRuleIndex(self):
            return nim_Parser.RULE_idList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdList" ):
                listener.enterIdList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdList" ):
                listener.exitIdList(self)




    def idList(self):

        localctx = nim_Parser.IdListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_idList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 660
            self.match(nim_Parser.IDENTIFIER)
            self.state = 665
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==nim_Parser.COMMA:
                self.state = 661
                self.match(nim_Parser.COMMA)
                self.state = 662
                self.match(nim_Parser.IDENTIFIER)
                self.state = 667
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(nim_Parser.FOR, 0)

        def idList(self):
            return self.getTypedRuleContext(nim_Parser.IdListContext,0)


        def IN(self):
            return self.getToken(nim_Parser.IN, 0)

        def simpleExpr(self):
            return self.getTypedRuleContext(nim_Parser.SimpleExprContext,0)


        def COLON(self):
            return self.getToken(nim_Parser.COLON, 0)

        def anyStmt(self):
            return self.getTypedRuleContext(nim_Parser.AnyStmtContext,0)


        def ind(self):
            return self.getTypedRuleContext(nim_Parser.IndContext,0)


        def ded(self):
            return self.getTypedRuleContext(nim_Parser.DedContext,0)


        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.StmtContext)
            else:
                return self.getTypedRuleContext(nim_Parser.StmtContext,i)


        def getRuleIndex(self):
            return nim_Parser.RULE_forStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForStmt" ):
                listener.enterForStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForStmt" ):
                listener.exitForStmt(self)




    def forStmt(self):

        localctx = nim_Parser.ForStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_forStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 668
            self.match(nim_Parser.FOR)
            self.state = 669
            self.idList()
            self.state = 670
            self.match(nim_Parser.IN)
            self.state = 671
            self.simpleExpr()
            self.state = 672
            self.match(nim_Parser.COLON)
            self.state = 682
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
            if la_ == 1:
                self.state = 673
                self.ind()
                self.state = 675 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 674
                    self.stmt()
                    self.state = 677 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nim_Parser.TYPE) | (1 << nim_Parser.VARIABLE) | (1 << nim_Parser.LET) | (1 << nim_Parser.CONST) | (1 << nim_Parser.PROC) | (1 << nim_Parser.RETURN) | (1 << nim_Parser.CASE) | (1 << nim_Parser.IF) | (1 << nim_Parser.WHILE) | (1 << nim_Parser.FOR) | (1 << nim_Parser.CONTINUE) | (1 << nim_Parser.BREAK) | (1 << nim_Parser.TEMPLATE))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (nim_Parser.WHEN - 66)) | (1 << (nim_Parser.IMPORT - 66)) | (1 << (nim_Parser.FROM - 66)) | (1 << (nim_Parser.BLOCK - 66)) | (1 << (nim_Parser.MACRO - 66)) | (1 << (nim_Parser.DISCARD - 66)))) != 0)):
                        break

                self.state = 679
                self.ded()
                pass

            elif la_ == 2:
                self.state = 681
                self.anyStmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(nim_Parser.IF, 0)

        def condStmt(self):
            return self.getTypedRuleContext(nim_Parser.CondStmtContext,0)


        def NOT(self):
            return self.getToken(nim_Parser.NOT, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_ifStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfStmt" ):
                listener.enterIfStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfStmt" ):
                listener.exitIfStmt(self)




    def ifStmt(self):

        localctx = nim_Parser.IfStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_ifStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 684
            self.match(nim_Parser.IF)
            self.state = 686
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
            if la_ == 1:
                self.state = 685
                self.match(nim_Parser.NOT)


            self.state = 688
            self.condStmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CondStmtElifContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELIF(self):
            return self.getToken(nim_Parser.ELIF, 0)

        def COLON(self):
            return self.getToken(nim_Parser.COLON, 0)

        def anyExpr(self):
            return self.getTypedRuleContext(nim_Parser.AnyExprContext,0)


        def ind(self):
            return self.getTypedRuleContext(nim_Parser.IndContext,0)


        def ded(self):
            return self.getTypedRuleContext(nim_Parser.DedContext,0)


        def stmt(self):
            return self.getTypedRuleContext(nim_Parser.StmtContext,0)


        def exprStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.ExprStmtContext)
            else:
                return self.getTypedRuleContext(nim_Parser.ExprStmtContext,i)


        def getRuleIndex(self):
            return nim_Parser.RULE_condStmtElif

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondStmtElif" ):
                listener.enterCondStmtElif(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondStmtElif" ):
                listener.exitCondStmtElif(self)




    def condStmtElif(self):

        localctx = nim_Parser.CondStmtElifContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_condStmtElif)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 690
            self.match(nim_Parser.ELIF)

            self.state = 691
            self.anyExpr()
            self.state = 692
            self.match(nim_Parser.COLON)
            self.state = 712
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,67,self._ctx)
            if la_ == 1:
                self.state = 693
                self.ind()
                self.state = 700
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
                if la_ == 1:
                    self.state = 695 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 694
                            self.exprStmt()

                        else:
                            raise NoViableAltException(self)
                        self.state = 697 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,63,self._ctx)

                    pass

                elif la_ == 2:
                    self.state = 699
                    self.stmt()
                    pass


                self.state = 702
                self.ded()
                pass

            elif la_ == 2:
                self.state = 710
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
                if la_ == 1:
                    self.state = 705 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 704
                            self.exprStmt()

                        else:
                            raise NoViableAltException(self)
                        self.state = 707 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,65,self._ctx)

                    pass

                elif la_ == 2:
                    self.state = 709
                    self.stmt()
                    pass


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CondStmtElseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(nim_Parser.ELSE, 0)

        def COLON(self):
            return self.getToken(nim_Parser.COLON, 0)

        def ind(self):
            return self.getTypedRuleContext(nim_Parser.IndContext,0)


        def ded(self):
            return self.getTypedRuleContext(nim_Parser.DedContext,0)


        def stmt(self):
            return self.getTypedRuleContext(nim_Parser.StmtContext,0)


        def exprStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.ExprStmtContext)
            else:
                return self.getTypedRuleContext(nim_Parser.ExprStmtContext,i)


        def getRuleIndex(self):
            return nim_Parser.RULE_condStmtElse

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondStmtElse" ):
                listener.enterCondStmtElse(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondStmtElse" ):
                listener.exitCondStmtElse(self)




    def condStmtElse(self):

        localctx = nim_Parser.CondStmtElseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_condStmtElse)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 714
            self.match(nim_Parser.ELSE)
            self.state = 715
            self.match(nim_Parser.COLON)
            self.state = 735
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,72,self._ctx)
            if la_ == 1:
                self.state = 716
                self.ind()
                self.state = 723
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,69,self._ctx)
                if la_ == 1:
                    self.state = 718 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 717
                            self.exprStmt()

                        else:
                            raise NoViableAltException(self)
                        self.state = 720 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,68,self._ctx)

                    pass

                elif la_ == 2:
                    self.state = 722
                    self.stmt()
                    pass


                self.state = 725
                self.ded()
                pass

            elif la_ == 2:
                self.state = 733
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
                if la_ == 1:
                    self.state = 728 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 727
                            self.exprStmt()

                        else:
                            raise NoViableAltException(self)
                        self.state = 730 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,70,self._ctx)

                    pass

                elif la_ == 2:
                    self.state = 732
                    self.stmt()
                    pass


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CondStmtBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stmt(self):
            return self.getTypedRuleContext(nim_Parser.StmtContext,0)


        def ind(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.IndContext)
            else:
                return self.getTypedRuleContext(nim_Parser.IndContext,i)


        def ded(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.DedContext)
            else:
                return self.getTypedRuleContext(nim_Parser.DedContext,i)


        def condStmtElif(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.CondStmtElifContext)
            else:
                return self.getTypedRuleContext(nim_Parser.CondStmtElifContext,i)


        def condStmtElse(self):
            return self.getTypedRuleContext(nim_Parser.CondStmtElseContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_condStmtBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondStmtBody" ):
                listener.enterCondStmtBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondStmtBody" ):
                listener.exitCondStmtBody(self)




    def condStmtBody(self):

        localctx = nim_Parser.CondStmtBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_condStmtBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 742
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [nim_Parser.INDENT]:
                self.state = 737
                self.ind()
                self.state = 738
                self.stmt()
                self.state = 739
                self.ded()
                pass
            elif token in [nim_Parser.TYPE, nim_Parser.VARIABLE, nim_Parser.LET, nim_Parser.CONST, nim_Parser.PROC, nim_Parser.RETURN, nim_Parser.CASE, nim_Parser.IF, nim_Parser.WHILE, nim_Parser.FOR, nim_Parser.CONTINUE, nim_Parser.BREAK, nim_Parser.TEMPLATE, nim_Parser.WHEN, nim_Parser.IMPORT, nim_Parser.FROM, nim_Parser.BLOCK, nim_Parser.MACRO, nim_Parser.DISCARD]:
                self.state = 741
                self.stmt()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 777
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
            if la_ == 1:
                self.state = 744
                self.ind()
                self.state = 748
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==nim_Parser.ELIF:
                    self.state = 745
                    self.condStmtElif()
                    self.state = 750
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 752
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nim_Parser.ELSE:
                    self.state = 751
                    self.condStmtElse()


                self.state = 754
                self.ded()
                pass

            elif la_ == 2:
                self.state = 759
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==nim_Parser.ELIF:
                    self.state = 756
                    self.condStmtElif()
                    self.state = 761
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 762
                self.ind()
                self.state = 764
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nim_Parser.ELSE:
                    self.state = 763
                    self.condStmtElse()


                self.state = 766
                self.ded()
                pass

            elif la_ == 3:
                self.state = 771
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,78,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 768
                        self.condStmtElif() 
                    self.state = 773
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,78,self._ctx)

                self.state = 775
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,79,self._ctx)
                if la_ == 1:
                    self.state = 774
                    self.condStmtElse()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CondStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def anyExpr(self):
            return self.getTypedRuleContext(nim_Parser.AnyExprContext,0)


        def COLON(self):
            return self.getToken(nim_Parser.COLON, 0)

        def condStmtBody(self):
            return self.getTypedRuleContext(nim_Parser.CondStmtBodyContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_condStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondStmt" ):
                listener.enterCondStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondStmt" ):
                listener.exitCondStmt(self)




    def condStmt(self):

        localctx = nim_Parser.CondStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_condStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 779
            self.anyExpr()
            self.state = 780
            self.match(nim_Parser.COLON)
            self.state = 781
            self.condStmtBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BLOCK(self):
            return self.getToken(nim_Parser.BLOCK, 0)

        def symbol(self):
            return self.getTypedRuleContext(nim_Parser.SymbolContext,0)


        def COLON(self):
            return self.getToken(nim_Parser.COLON, 0)

        def stmt(self):
            return self.getTypedRuleContext(nim_Parser.StmtContext,0)


        def ind(self):
            return self.getTypedRuleContext(nim_Parser.IndContext,0)


        def ded(self):
            return self.getTypedRuleContext(nim_Parser.DedContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_blockStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockStmt" ):
                listener.enterBlockStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockStmt" ):
                listener.exitBlockStmt(self)




    def blockStmt(self):

        localctx = nim_Parser.BlockStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_blockStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 783
            self.match(nim_Parser.BLOCK)
            self.state = 784
            self.symbol()
            self.state = 785
            self.match(nim_Parser.COLON)
            self.state = 791
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [nim_Parser.INDENT]:
                self.state = 786
                self.ind()
                self.state = 787
                self.stmt()
                self.state = 788
                self.ded()
                pass
            elif token in [nim_Parser.TYPE, nim_Parser.VARIABLE, nim_Parser.LET, nim_Parser.CONST, nim_Parser.PROC, nim_Parser.RETURN, nim_Parser.CASE, nim_Parser.IF, nim_Parser.WHILE, nim_Parser.FOR, nim_Parser.CONTINUE, nim_Parser.BREAK, nim_Parser.TEMPLATE, nim_Parser.WHEN, nim_Parser.IMPORT, nim_Parser.FROM, nim_Parser.BLOCK, nim_Parser.MACRO, nim_Parser.DISCARD]:
                self.state = 790
                self.stmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiscardStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DISCARD(self):
            return self.getToken(nim_Parser.DISCARD, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_discardStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiscardStmt" ):
                listener.enterDiscardStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiscardStmt" ):
                listener.exitDiscardStmt(self)




    def discardStmt(self):

        localctx = nim_Parser.DiscardStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_discardStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 793
            self.match(nim_Parser.DISCARD)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(nim_Parser.RETURN, 0)

        def simpleExpr(self):
            return self.getTypedRuleContext(nim_Parser.SimpleExprContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_returnStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnStmt" ):
                listener.enterReturnStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnStmt" ):
                listener.exitReturnStmt(self)




    def returnStmt(self):

        localctx = nim_Parser.ReturnStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_returnStmt)
        try:
            self.state = 798
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 795
                self.match(nim_Parser.RETURN)
                self.state = 796
                self.simpleExpr()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 797
                self.match(nim_Parser.RETURN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BreakStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BREAK(self):
            return self.getToken(nim_Parser.BREAK, 0)

        def simpleExpr(self):
            return self.getTypedRuleContext(nim_Parser.SimpleExprContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_breakStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBreakStmt" ):
                listener.enterBreakStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBreakStmt" ):
                listener.exitBreakStmt(self)




    def breakStmt(self):

        localctx = nim_Parser.BreakStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_breakStmt)
        try:
            self.state = 803
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 800
                self.match(nim_Parser.BREAK)
                self.state = 801
                self.simpleExpr()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 802
                self.match(nim_Parser.BREAK)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContinueStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTINUE(self):
            return self.getToken(nim_Parser.CONTINUE, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_continueStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContinueStmt" ):
                listener.enterContinueStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContinueStmt" ):
                listener.exitContinueStmt(self)




    def continueStmt(self):

        localctx = nim_Parser.ContinueStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_continueStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 805
            self.match(nim_Parser.CONTINUE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def blockExpr(self):
            return self.getTypedRuleContext(nim_Parser.BlockExprContext,0)


        def forExpr(self):
            return self.getTypedRuleContext(nim_Parser.ForExprContext,0)


        def ifExpr(self):
            return self.getTypedRuleContext(nim_Parser.IfExprContext,0)


        def whenExpr(self):
            return self.getTypedRuleContext(nim_Parser.WhenExprContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr" ):
                listener.enterExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr" ):
                listener.exitExpr(self)




    def expr(self):

        localctx = nim_Parser.ExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_expr)
        try:
            self.state = 811
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [nim_Parser.BLOCK]:
                self.enterOuterAlt(localctx, 1)
                self.state = 807
                self.blockExpr()
                pass
            elif token in [nim_Parser.FOR]:
                self.enterOuterAlt(localctx, 2)
                self.state = 808
                self.forExpr()
                pass
            elif token in [nim_Parser.IF]:
                self.enterOuterAlt(localctx, 3)
                self.state = 809
                self.ifExpr()
                pass
            elif token in [nim_Parser.WHEN]:
                self.enterOuterAlt(localctx, 4)
                self.state = 810
                self.whenExpr()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PragmaContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(nim_Parser.OPEN_BRACE, 0)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.DOT)
            else:
                return self.getToken(nim_Parser.DOT, i)

        def IDENTIFIER(self):
            return self.getToken(nim_Parser.IDENTIFIER, 0)

        def CLOSE_BRACE(self):
            return self.getToken(nim_Parser.CLOSE_BRACE, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_pragma

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragma" ):
                listener.enterPragma(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragma" ):
                listener.exitPragma(self)




    def pragma(self):

        localctx = nim_Parser.PragmaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_pragma)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 813
            self.match(nim_Parser.OPEN_BRACE)
            self.state = 814
            self.match(nim_Parser.DOT)
            self.state = 815
            self.match(nim_Parser.IDENTIFIER)
            self.state = 817
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==nim_Parser.DOT:
                self.state = 816
                self.match(nim_Parser.DOT)


            self.state = 819
            self.match(nim_Parser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcRoutineHeaderContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self):
            return self.getTypedRuleContext(nim_Parser.SymbolContext,0)


        def arrayConstr(self):
            return self.getTypedRuleContext(nim_Parser.ArrayConstrContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_procRoutineHeader

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcRoutineHeader" ):
                listener.enterProcRoutineHeader(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcRoutineHeader" ):
                listener.exitProcRoutineHeader(self)




    def procRoutineHeader(self):

        localctx = nim_Parser.ProcRoutineHeaderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_procRoutineHeader)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 821
            self.symbol()
            self.state = 823
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==nim_Parser.OPEN_BRACK:
                self.state = 822
                self.arrayConstr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcRoutineVariableTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(nim_Parser.IDENTIFIER, 0)

        def arrayConstr(self):
            return self.getTypedRuleContext(nim_Parser.ArrayConstrContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_procRoutineVariableType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcRoutineVariableType" ):
                listener.enterProcRoutineVariableType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcRoutineVariableType" ):
                listener.exitProcRoutineVariableType(self)




    def procRoutineVariableType(self):

        localctx = nim_Parser.ProcRoutineVariableTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_procRoutineVariableType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 825
            self.match(nim_Parser.IDENTIFIER)
            self.state = 826
            self.arrayConstr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcRoutineTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(nim_Parser.IDENTIFIER, 0)

        def arrayConstr(self):
            return self.getTypedRuleContext(nim_Parser.ArrayConstrContext,0)


        def PROC(self):
            return self.getToken(nim_Parser.PROC, 0)

        def procRoutineBodyList(self):
            return self.getTypedRuleContext(nim_Parser.ProcRoutineBodyListContext,0)


        def VARIABLE(self):
            return self.getToken(nim_Parser.VARIABLE, 0)

        def procRoutineVariableType(self):
            return self.getTypedRuleContext(nim_Parser.ProcRoutineVariableTypeContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_procRoutineType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcRoutineType" ):
                listener.enterProcRoutineType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcRoutineType" ):
                listener.exitProcRoutineType(self)




    def procRoutineType(self):

        localctx = nim_Parser.ProcRoutineTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_procRoutineType)
        self._la = 0 # Token type
        try:
            self.state = 836
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [nim_Parser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 828
                self.match(nim_Parser.IDENTIFIER)
                self.state = 830
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nim_Parser.OPEN_BRACK:
                    self.state = 829
                    self.arrayConstr()


                pass
            elif token in [nim_Parser.PROC]:
                self.enterOuterAlt(localctx, 2)
                self.state = 832
                self.match(nim_Parser.PROC)
                self.state = 833
                self.procRoutineBodyList()
                pass
            elif token in [nim_Parser.VARIABLE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 834
                self.match(nim_Parser.VARIABLE)
                self.state = 835
                self.procRoutineVariableType()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcRoutineBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(nim_Parser.IDENTIFIER, 0)

        def COLON(self):
            return self.getToken(nim_Parser.COLON, 0)

        def procRoutineType(self):
            return self.getTypedRuleContext(nim_Parser.ProcRoutineTypeContext,0)


        def EQUALS(self):
            return self.getToken(nim_Parser.EQUALS, 0)

        def simpleExpr(self):
            return self.getTypedRuleContext(nim_Parser.SimpleExprContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_procRoutineBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcRoutineBody" ):
                listener.enterProcRoutineBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcRoutineBody" ):
                listener.exitProcRoutineBody(self)




    def procRoutineBody(self):

        localctx = nim_Parser.ProcRoutineBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_procRoutineBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 838
            self.match(nim_Parser.IDENTIFIER)
            self.state = 843
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [nim_Parser.COLON]:
                self.state = 839
                self.match(nim_Parser.COLON)
                self.state = 840
                self.procRoutineType()
                pass
            elif token in [nim_Parser.EQUALS]:
                self.state = 841
                self.match(nim_Parser.EQUALS)
                self.state = 842
                self.simpleExpr()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcRoutineTailContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUALS(self):
            return self.getToken(nim_Parser.EQUALS, 0)

        def anyStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.AnyStmtContext)
            else:
                return self.getTypedRuleContext(nim_Parser.AnyStmtContext,i)


        def COLON(self):
            return self.getToken(nim_Parser.COLON, 0)

        def procRoutineType(self):
            return self.getTypedRuleContext(nim_Parser.ProcRoutineTypeContext,0)


        def ind(self):
            return self.getTypedRuleContext(nim_Parser.IndContext,0)


        def ded(self):
            return self.getTypedRuleContext(nim_Parser.DedContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_procRoutineTail

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcRoutineTail" ):
                listener.enterProcRoutineTail(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcRoutineTail" ):
                listener.exitProcRoutineTail(self)




    def procRoutineTail(self):

        localctx = nim_Parser.ProcRoutineTailContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_procRoutineTail)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 847
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==nim_Parser.COLON:
                self.state = 845
                self.match(nim_Parser.COLON)
                self.state = 846
                self.procRoutineType()


            self.state = 849
            self.match(nim_Parser.EQUALS)
            self.state = 859
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
            if la_ == 1:
                self.state = 850
                self.anyStmt()
                pass

            elif la_ == 2:
                self.state = 851
                self.ind()
                self.state = 853 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 852
                        self.anyStmt()

                    else:
                        raise NoViableAltException(self)
                    self.state = 855 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,91,self._ctx)

                self.state = 857
                self.ded()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcRoutineBodyListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(nim_Parser.OPEN_PAREN, 0)

        def procRoutineBody(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.ProcRoutineBodyContext)
            else:
                return self.getTypedRuleContext(nim_Parser.ProcRoutineBodyContext,i)


        def CLOSE_PAREN(self):
            return self.getToken(nim_Parser.CLOSE_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.COMMA)
            else:
                return self.getToken(nim_Parser.COMMA, i)

        def getRuleIndex(self):
            return nim_Parser.RULE_procRoutineBodyList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcRoutineBodyList" ):
                listener.enterProcRoutineBodyList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcRoutineBodyList" ):
                listener.exitProcRoutineBodyList(self)




    def procRoutineBodyList(self):

        localctx = nim_Parser.ProcRoutineBodyListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_procRoutineBodyList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 861
            self.match(nim_Parser.OPEN_PAREN)
            self.state = 862
            self.procRoutineBody()
            self.state = 867
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==nim_Parser.COMMA:
                self.state = 863
                self.match(nim_Parser.COMMA)
                self.state = 864
                self.procRoutineBody()
                self.state = 869
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 870
            self.match(nim_Parser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcRoutineContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def procRoutineHeader(self):
            return self.getTypedRuleContext(nim_Parser.ProcRoutineHeaderContext,0)


        def procRoutineBodyList(self):
            return self.getTypedRuleContext(nim_Parser.ProcRoutineBodyListContext,0)


        def procRoutineTail(self):
            return self.getTypedRuleContext(nim_Parser.ProcRoutineTailContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_procRoutine

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcRoutine" ):
                listener.enterProcRoutine(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcRoutine" ):
                listener.exitProcRoutine(self)




    def procRoutine(self):

        localctx = nim_Parser.ProcRoutineContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_procRoutine)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 872
            self.procRoutineHeader()
            self.state = 873
            self.procRoutineBodyList()
            self.state = 874
            self.procRoutineTail()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TemplateRoutineHeaderContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(nim_Parser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_templateRoutineHeader

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemplateRoutineHeader" ):
                listener.enterTemplateRoutineHeader(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemplateRoutineHeader" ):
                listener.exitTemplateRoutineHeader(self)




    def templateRoutineHeader(self):

        localctx = nim_Parser.TemplateRoutineHeaderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_templateRoutineHeader)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 876
            self.match(nim_Parser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TemplateRoutineBodyListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(nim_Parser.OPEN_PAREN, 0)

        def templateRoutineBody(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.TemplateRoutineBodyContext)
            else:
                return self.getTypedRuleContext(nim_Parser.TemplateRoutineBodyContext,i)


        def CLOSE_PAREN(self):
            return self.getToken(nim_Parser.CLOSE_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.COMMA)
            else:
                return self.getToken(nim_Parser.COMMA, i)

        def getRuleIndex(self):
            return nim_Parser.RULE_templateRoutineBodyList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemplateRoutineBodyList" ):
                listener.enterTemplateRoutineBodyList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemplateRoutineBodyList" ):
                listener.exitTemplateRoutineBodyList(self)




    def templateRoutineBodyList(self):

        localctx = nim_Parser.TemplateRoutineBodyListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_templateRoutineBodyList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 878
            self.match(nim_Parser.OPEN_PAREN)
            self.state = 879
            self.templateRoutineBody()
            self.state = 884
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==nim_Parser.COMMA:
                self.state = 880
                self.match(nim_Parser.COMMA)
                self.state = 881
                self.templateRoutineBody()
                self.state = 886
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 887
            self.match(nim_Parser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TemplateRoutineBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(nim_Parser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_templateRoutineBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemplateRoutineBody" ):
                listener.enterTemplateRoutineBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemplateRoutineBody" ):
                listener.exitTemplateRoutineBody(self)




    def templateRoutineBody(self):

        localctx = nim_Parser.TemplateRoutineBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_templateRoutineBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 889
            self.match(nim_Parser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TemplateRoutineTailContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUALS(self):
            return self.getToken(nim_Parser.EQUALS, 0)

        def anyStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.AnyStmtContext)
            else:
                return self.getTypedRuleContext(nim_Parser.AnyStmtContext,i)


        def pragma(self):
            return self.getTypedRuleContext(nim_Parser.PragmaContext,0)


        def ind(self):
            return self.getTypedRuleContext(nim_Parser.IndContext,0)


        def ded(self):
            return self.getTypedRuleContext(nim_Parser.DedContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_templateRoutineTail

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemplateRoutineTail" ):
                listener.enterTemplateRoutineTail(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemplateRoutineTail" ):
                listener.exitTemplateRoutineTail(self)




    def templateRoutineTail(self):

        localctx = nim_Parser.TemplateRoutineTailContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_templateRoutineTail)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 892
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==nim_Parser.OPEN_BRACE:
                self.state = 891
                self.pragma()


            self.state = 894
            self.match(nim_Parser.EQUALS)
            self.state = 904
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
            if la_ == 1:
                self.state = 895
                self.anyStmt()
                pass

            elif la_ == 2:
                self.state = 896
                self.ind()
                self.state = 898 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 897
                        self.anyStmt()

                    else:
                        raise NoViableAltException(self)
                    self.state = 900 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,96,self._ctx)

                self.state = 902
                self.ded()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TemplateRoutineContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def templateRoutineHeader(self):
            return self.getTypedRuleContext(nim_Parser.TemplateRoutineHeaderContext,0)


        def templateRoutineBodyList(self):
            return self.getTypedRuleContext(nim_Parser.TemplateRoutineBodyListContext,0)


        def templateRoutineTail(self):
            return self.getTypedRuleContext(nim_Parser.TemplateRoutineTailContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_templateRoutine

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemplateRoutine" ):
                listener.enterTemplateRoutine(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemplateRoutine" ):
                listener.exitTemplateRoutine(self)




    def templateRoutine(self):

        localctx = nim_Parser.TemplateRoutineContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_templateRoutine)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 906
            self.templateRoutineHeader()
            self.state = 907
            self.templateRoutineBodyList()
            self.state = 908
            self.templateRoutineTail()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MacroRoutineHeaderContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(nim_Parser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_macroRoutineHeader

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacroRoutineHeader" ):
                listener.enterMacroRoutineHeader(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacroRoutineHeader" ):
                listener.exitMacroRoutineHeader(self)




    def macroRoutineHeader(self):

        localctx = nim_Parser.MacroRoutineHeaderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_macroRoutineHeader)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 910
            self.match(nim_Parser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MacroRoutineTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(nim_Parser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_macroRoutineType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacroRoutineType" ):
                listener.enterMacroRoutineType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacroRoutineType" ):
                listener.exitMacroRoutineType(self)




    def macroRoutineType(self):

        localctx = nim_Parser.MacroRoutineTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_macroRoutineType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 912
            self.match(nim_Parser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MacroRoutineBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(nim_Parser.IDENTIFIER, 0)

        def COLON(self):
            return self.getToken(nim_Parser.COLON, 0)

        def macroRoutineType(self):
            return self.getTypedRuleContext(nim_Parser.MacroRoutineTypeContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_macroRoutineBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacroRoutineBody" ):
                listener.enterMacroRoutineBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacroRoutineBody" ):
                listener.exitMacroRoutineBody(self)




    def macroRoutineBody(self):

        localctx = nim_Parser.MacroRoutineBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_macroRoutineBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 914
            self.match(nim_Parser.IDENTIFIER)

            self.state = 915
            self.match(nim_Parser.COLON)
            self.state = 916
            self.macroRoutineType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MacroRoutineBodyListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(nim_Parser.OPEN_PAREN, 0)

        def macroRoutineBody(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.MacroRoutineBodyContext)
            else:
                return self.getTypedRuleContext(nim_Parser.MacroRoutineBodyContext,i)


        def CLOSE_PAREN(self):
            return self.getToken(nim_Parser.CLOSE_PAREN, 0)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.COLON)
            else:
                return self.getToken(nim_Parser.COLON, i)

        def SEMI_COLON(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.SEMI_COLON)
            else:
                return self.getToken(nim_Parser.SEMI_COLON, i)

        def getRuleIndex(self):
            return nim_Parser.RULE_macroRoutineBodyList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacroRoutineBodyList" ):
                listener.enterMacroRoutineBodyList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacroRoutineBodyList" ):
                listener.exitMacroRoutineBodyList(self)




    def macroRoutineBodyList(self):

        localctx = nim_Parser.MacroRoutineBodyListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_macroRoutineBodyList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 918
            self.match(nim_Parser.OPEN_PAREN)
            self.state = 919
            self.macroRoutineBody()
            self.state = 924
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==nim_Parser.SEMI_COLON or _la==nim_Parser.COLON:
                self.state = 920
                _la = self._input.LA(1)
                if not(_la==nim_Parser.SEMI_COLON or _la==nim_Parser.COLON):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 921
                self.macroRoutineBody()
                self.state = 926
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 927
            self.match(nim_Parser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MacroRoutineTailContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUALS(self):
            return self.getToken(nim_Parser.EQUALS, 0)

        def anyStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.AnyStmtContext)
            else:
                return self.getTypedRuleContext(nim_Parser.AnyStmtContext,i)


        def COLON(self):
            return self.getToken(nim_Parser.COLON, 0)

        def macroRoutineType(self):
            return self.getTypedRuleContext(nim_Parser.MacroRoutineTypeContext,0)


        def ind(self):
            return self.getTypedRuleContext(nim_Parser.IndContext,0)


        def ded(self):
            return self.getTypedRuleContext(nim_Parser.DedContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_macroRoutineTail

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacroRoutineTail" ):
                listener.enterMacroRoutineTail(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacroRoutineTail" ):
                listener.exitMacroRoutineTail(self)




    def macroRoutineTail(self):

        localctx = nim_Parser.MacroRoutineTailContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_macroRoutineTail)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 931
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==nim_Parser.COLON:
                self.state = 929
                self.match(nim_Parser.COLON)
                self.state = 930
                self.macroRoutineType()


            self.state = 933
            self.match(nim_Parser.EQUALS)
            self.state = 943
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,101,self._ctx)
            if la_ == 1:
                self.state = 934
                self.anyStmt()
                pass

            elif la_ == 2:
                self.state = 935
                self.ind()
                self.state = 937 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 936
                        self.anyStmt()

                    else:
                        raise NoViableAltException(self)
                    self.state = 939 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,100,self._ctx)

                self.state = 941
                self.ded()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MacroRoutineContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def macroRoutineHeader(self):
            return self.getTypedRuleContext(nim_Parser.MacroRoutineHeaderContext,0)


        def macroRoutineBodyList(self):
            return self.getTypedRuleContext(nim_Parser.MacroRoutineBodyListContext,0)


        def macroRoutineTail(self):
            return self.getTypedRuleContext(nim_Parser.MacroRoutineTailContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_macroRoutine

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacroRoutine" ):
                listener.enterMacroRoutine(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacroRoutine" ):
                listener.exitMacroRoutine(self)




    def macroRoutine(self):

        localctx = nim_Parser.MacroRoutineContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_macroRoutine)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 945
            self.macroRoutineHeader()
            self.state = 946
            self.macroRoutineBodyList()
            self.state = 947
            self.macroRoutineTail()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeSectionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(nim_Parser.OPEN_BRACE, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_typeSection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeSection" ):
                listener.enterTypeSection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeSection" ):
                listener.exitTypeSection(self)




    def typeSection(self):

        localctx = nim_Parser.TypeSectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_typeSection)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 949
            self.match(nim_Parser.OPEN_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableSectionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ind(self):
            return self.getTypedRuleContext(nim_Parser.IndContext,0)


        def ded(self):
            return self.getTypedRuleContext(nim_Parser.DedContext,0)


        def variable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.VariableContext)
            else:
                return self.getTypedRuleContext(nim_Parser.VariableContext,i)


        def getRuleIndex(self):
            return nim_Parser.RULE_variableSection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableSection" ):
                listener.enterVariableSection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableSection" ):
                listener.exitVariableSection(self)




    def variableSection(self):

        localctx = nim_Parser.VariableSectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_variableSection)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 964
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [nim_Parser.IDENTIFIER]:
                self.state = 952 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 951
                        self.variable()

                    else:
                        raise NoViableAltException(self)
                    self.state = 954 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,102,self._ctx)

                pass
            elif token in [nim_Parser.INDENT]:
                self.state = 956
                self.ind()
                self.state = 958 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 957
                    self.variable()
                    self.state = 960 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==nim_Parser.IDENTIFIER):
                        break

                self.state = 962
                self.ded()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantSectionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ind(self):
            return self.getTypedRuleContext(nim_Parser.IndContext,0)


        def ded(self):
            return self.getTypedRuleContext(nim_Parser.DedContext,0)


        def constant(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.ConstantContext)
            else:
                return self.getTypedRuleContext(nim_Parser.ConstantContext,i)


        def getRuleIndex(self):
            return nim_Parser.RULE_constantSection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantSection" ):
                listener.enterConstantSection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantSection" ):
                listener.exitConstantSection(self)




    def constantSection(self):

        localctx = nim_Parser.ConstantSectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_constantSection)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 979
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [nim_Parser.IDENTIFIER]:
                self.state = 967 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 966
                        self.constant()

                    else:
                        raise NoViableAltException(self)
                    self.state = 969 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,105,self._ctx)

                pass
            elif token in [nim_Parser.INDENT]:
                self.state = 971
                self.ind()
                self.state = 973 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 972
                    self.constant()
                    self.state = 975 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==nim_Parser.IDENTIFIER):
                        break

                self.state = 977
                self.ded()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LetSectionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.IDENTIFIER)
            else:
                return self.getToken(nim_Parser.IDENTIFIER, i)

        def EQUALS(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.EQUALS)
            else:
                return self.getToken(nim_Parser.EQUALS, i)

        def simpleExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.SimpleExprContext)
            else:
                return self.getTypedRuleContext(nim_Parser.SimpleExprContext,i)


        def ind(self):
            return self.getTypedRuleContext(nim_Parser.IndContext,0)


        def ded(self):
            return self.getTypedRuleContext(nim_Parser.DedContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_letSection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLetSection" ):
                listener.enterLetSection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLetSection" ):
                listener.exitLetSection(self)




    def letSection(self):

        localctx = nim_Parser.LetSectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_letSection)
        self._la = 0 # Token type
        try:
            self.state = 994
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [nim_Parser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 981
                self.match(nim_Parser.IDENTIFIER)
                self.state = 982
                self.match(nim_Parser.EQUALS)
                self.state = 983
                self.simpleExpr()
                pass
            elif token in [nim_Parser.INDENT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 984
                self.ind()
                self.state = 988 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 985
                    self.match(nim_Parser.IDENTIFIER)
                    self.state = 986
                    self.match(nim_Parser.EQUALS)
                    self.state = 987
                    self.simpleExpr()
                    self.state = 990 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==nim_Parser.IDENTIFIER):
                        break

                self.state = 992
                self.ded()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentVisContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self):
            return self.getTypedRuleContext(nim_Parser.SymbolContext,0)


        def operator(self):
            return self.getTypedRuleContext(nim_Parser.OperatorContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_identVis

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentVis" ):
                listener.enterIdentVis(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentVis" ):
                listener.exitIdentVis(self)




    def identVis(self):

        localctx = nim_Parser.IdentVisContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_identVis)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 996
            self.symbol()
            self.state = 998
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nim_Parser.COLON) | (1 << nim_Parser.DOT) | (1 << nim_Parser.EQUALS) | (1 << nim_Parser.IN) | (1 << nim_Parser.OF) | (1 << nim_Parser.NOT) | (1 << nim_Parser.DOLLAR_SIGN) | (1 << nim_Parser.OP0) | (1 << nim_Parser.OP1) | (1 << nim_Parser.OP2) | (1 << nim_Parser.OP3) | (1 << nim_Parser.OP4) | (1 << nim_Parser.OP5) | (1 << nim_Parser.OP6) | (1 << nim_Parser.OP7) | (1 << nim_Parser.OP8) | (1 << nim_Parser.OP9) | (1 << nim_Parser.OP10))) != 0):
                self.state = 997
                self.operator()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarTupleContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUALS(self):
            return self.getToken(nim_Parser.EQUALS, 0)

        def OPEN_BRACE(self):
            return self.getToken(nim_Parser.OPEN_BRACE, 0)

        def identVis(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.IdentVisContext)
            else:
                return self.getTypedRuleContext(nim_Parser.IdentVisContext,i)


        def anyExpr(self):
            return self.getTypedRuleContext(nim_Parser.AnyExprContext,0)


        def ded(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.DedContext)
            else:
                return self.getTypedRuleContext(nim_Parser.DedContext,i)


        def ind(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.IndContext)
            else:
                return self.getTypedRuleContext(nim_Parser.IndContext,i)


        def CLOSE_BRACE(self):
            return self.getToken(nim_Parser.CLOSE_BRACE, 0)

        def andExpr(self):
            return self.getTypedRuleContext(nim_Parser.AndExprContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.COMMA)
            else:
                return self.getToken(nim_Parser.COMMA, i)

        def getRuleIndex(self):
            return nim_Parser.RULE_varTuple

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarTuple" ):
                listener.enterVarTuple(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarTuple" ):
                listener.exitVarTuple(self)




    def varTuple(self):

        localctx = nim_Parser.VarTupleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_varTuple)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1000
            self.match(nim_Parser.OPEN_BRACE)
            self.state = 1001
            self.identVis()
            self.state = 1006
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==nim_Parser.COMMA:
                self.state = 1002
                self.match(nim_Parser.COMMA)
                self.state = 1003
                self.identVis()
                self.state = 1008
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1014
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [nim_Parser.INDENT]:
                self.state = 1009
                self.ind()
                self.state = 1010
                self.match(nim_Parser.CLOSE_BRACE)
                self.state = 1011
                self.ded()
                pass
            elif token in [nim_Parser.CLOSE_BRACE]:
                self.state = 1013
                self.match(nim_Parser.CLOSE_BRACE)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1016
            self.match(nim_Parser.EQUALS)
            self.state = 1018
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,113,self._ctx)
            if la_ == 1:
                self.state = 1017
                self.ded()


            self.state = 1025
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,114,self._ctx)
            if la_ == 1:
                self.state = 1020
                self.ind()
                self.state = 1021
                self.andExpr()
                self.state = 1022
                self.ded()
                pass

            elif la_ == 2:
                self.state = 1024
                self.anyExpr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.IDENTIFIER)
            else:
                return self.getToken(nim_Parser.IDENTIFIER, i)

        def EQUALS(self):
            return self.getToken(nim_Parser.EQUALS, 0)

        def ind(self):
            return self.getTypedRuleContext(nim_Parser.IndContext,0)


        def anyExpr(self):
            return self.getTypedRuleContext(nim_Parser.AnyExprContext,0)


        def ded(self):
            return self.getTypedRuleContext(nim_Parser.DedContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.COMMA)
            else:
                return self.getToken(nim_Parser.COMMA, i)

        def COLON(self):
            return self.getToken(nim_Parser.COLON, 0)

        def simpleExpr(self):
            return self.getTypedRuleContext(nim_Parser.SimpleExprContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_constant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant" ):
                listener.enterConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant" ):
                listener.exitConstant(self)




    def constant(self):

        localctx = nim_Parser.ConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_constant)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1027
            self.match(nim_Parser.IDENTIFIER)
            self.state = 1032
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==nim_Parser.COMMA:
                self.state = 1028
                self.match(nim_Parser.COMMA)
                self.state = 1029
                self.match(nim_Parser.IDENTIFIER)
                self.state = 1034
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1037
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==nim_Parser.COLON:
                self.state = 1035
                self.match(nim_Parser.COLON)
                self.state = 1036
                self.simpleExpr()


            self.state = 1039
            self.match(nim_Parser.EQUALS)
            self.state = 1045
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,117,self._ctx)
            if la_ == 1:
                self.state = 1040
                self.ind()
                self.state = 1041
                self.anyExpr()
                self.state = 1042
                self.ded()
                pass

            elif la_ == 2:
                self.state = 1044
                self.anyExpr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def idColonEq(self):
            return self.getTypedRuleContext(nim_Parser.IdColonEqContext,0)


        def colonBody(self):
            return self.getTypedRuleContext(nim_Parser.ColonBodyContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_variable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable" ):
                listener.enterVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable" ):
                listener.exitVariable(self)




    def variable(self):

        localctx = nim_Parser.VariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_variable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1047
            self.idColonEq()
            self.state = 1049
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,118,self._ctx)
            if la_ == 1:
                self.state = 1048
                self.colonBody()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdColonEqContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.IDENTIFIER)
            else:
                return self.getToken(nim_Parser.IDENTIFIER, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.COMMA)
            else:
                return self.getToken(nim_Parser.COMMA, i)

        def COLON(self):
            return self.getToken(nim_Parser.COLON, 0)

        def EQUALS(self):
            return self.getToken(nim_Parser.EQUALS, 0)

        def ind(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.IndContext)
            else:
                return self.getTypedRuleContext(nim_Parser.IndContext,i)


        def simpleExpr(self):
            return self.getTypedRuleContext(nim_Parser.SimpleExprContext,0)


        def ded(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.DedContext)
            else:
                return self.getTypedRuleContext(nim_Parser.DedContext,i)


        def anyExpr(self):
            return self.getTypedRuleContext(nim_Parser.AnyExprContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_idColonEq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdColonEq" ):
                listener.enterIdColonEq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdColonEq" ):
                listener.exitIdColonEq(self)




    def idColonEq(self):

        localctx = nim_Parser.IdColonEqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_idColonEq)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1051
            self.match(nim_Parser.IDENTIFIER)
            self.state = 1056
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,119,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1052
                    self.match(nim_Parser.COMMA)
                    self.state = 1053
                    self.match(nim_Parser.IDENTIFIER) 
                self.state = 1058
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,119,self._ctx)

            self.state = 1060
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,120,self._ctx)
            if la_ == 1:
                self.state = 1059
                self.match(nim_Parser.COMMA)


            self.state = 1070
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,122,self._ctx)
            if la_ == 1:
                self.state = 1062
                self.match(nim_Parser.COLON)
                self.state = 1068
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,121,self._ctx)
                if la_ == 1:
                    self.state = 1063
                    self.ind()
                    self.state = 1064
                    self.simpleExpr()
                    self.state = 1065
                    self.ded()
                    pass

                elif la_ == 2:
                    self.state = 1067
                    self.simpleExpr()
                    pass




            self.state = 1080
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,124,self._ctx)
            if la_ == 1:
                self.state = 1072
                self.match(nim_Parser.EQUALS)
                self.state = 1078
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,123,self._ctx)
                if la_ == 1:
                    self.state = 1073
                    self.ind()
                    self.state = 1074
                    self.anyExpr()
                    self.state = 1075
                    self.ded()
                    pass

                elif la_ == 2:
                    self.state = 1077
                    self.anyExpr()
                    pass




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_complexStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleStmt(self):
            return self.getTypedRuleContext(nim_Parser.SimpleStmtContext,0)


        def complexStmt(self):
            return self.getTypedRuleContext(nim_Parser.ComplexStmtContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_simple_complexStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_complexStmt" ):
                listener.enterSimple_complexStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_complexStmt" ):
                listener.exitSimple_complexStmt(self)




    def simple_complexStmt(self):

        localctx = nim_Parser.Simple_complexStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_simple_complexStmt)
        try:
            self.state = 1084
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [nim_Parser.RETURN, nim_Parser.CONTINUE, nim_Parser.BREAK, nim_Parser.IMPORT, nim_Parser.FROM, nim_Parser.DISCARD]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1082
                self.simpleStmt()
                pass
            elif token in [nim_Parser.TYPE, nim_Parser.VARIABLE, nim_Parser.LET, nim_Parser.CONST, nim_Parser.PROC, nim_Parser.CASE, nim_Parser.IF, nim_Parser.WHILE, nim_Parser.FOR, nim_Parser.TEMPLATE, nim_Parser.WHEN, nim_Parser.BLOCK, nim_Parser.MACRO]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1083
                self.complexStmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def importStmt(self):
            return self.getTypedRuleContext(nim_Parser.ImportStmtContext,0)


        def fromStmt(self):
            return self.getTypedRuleContext(nim_Parser.FromStmtContext,0)


        def discardStmt(self):
            return self.getTypedRuleContext(nim_Parser.DiscardStmtContext,0)


        def returnStmt(self):
            return self.getTypedRuleContext(nim_Parser.ReturnStmtContext,0)


        def breakStmt(self):
            return self.getTypedRuleContext(nim_Parser.BreakStmtContext,0)


        def continueStmt(self):
            return self.getTypedRuleContext(nim_Parser.ContinueStmtContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_simpleStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleStmt" ):
                listener.enterSimpleStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleStmt" ):
                listener.exitSimpleStmt(self)




    def simpleStmt(self):

        localctx = nim_Parser.SimpleStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_simpleStmt)
        try:
            self.state = 1092
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [nim_Parser.IMPORT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1086
                self.importStmt()
                pass
            elif token in [nim_Parser.FROM]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1087
                self.fromStmt()
                pass
            elif token in [nim_Parser.DISCARD]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1088
                self.discardStmt()
                pass
            elif token in [nim_Parser.RETURN]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1089
                self.returnStmt()
                pass
            elif token in [nim_Parser.BREAK]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1090
                self.breakStmt()
                pass
            elif token in [nim_Parser.CONTINUE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1091
                self.continueStmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComplexStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def forStmt(self):
            return self.getTypedRuleContext(nim_Parser.ForStmtContext,0)


        def ifStmt(self):
            return self.getTypedRuleContext(nim_Parser.IfStmtContext,0)


        def caseStmt(self):
            return self.getTypedRuleContext(nim_Parser.CaseStmtContext,0)


        def blockStmt(self):
            return self.getTypedRuleContext(nim_Parser.BlockStmtContext,0)


        def whileStmt(self):
            return self.getTypedRuleContext(nim_Parser.WhileStmtContext,0)


        def whenStmt(self):
            return self.getTypedRuleContext(nim_Parser.WhenStmtContext,0)


        def TEMPLATE(self):
            return self.getToken(nim_Parser.TEMPLATE, 0)

        def templateRoutine(self):
            return self.getTypedRuleContext(nim_Parser.TemplateRoutineContext,0)


        def PROC(self):
            return self.getToken(nim_Parser.PROC, 0)

        def procRoutine(self):
            return self.getTypedRuleContext(nim_Parser.ProcRoutineContext,0)


        def MACRO(self):
            return self.getToken(nim_Parser.MACRO, 0)

        def macroRoutine(self):
            return self.getTypedRuleContext(nim_Parser.MacroRoutineContext,0)


        def TYPE(self):
            return self.getToken(nim_Parser.TYPE, 0)

        def typeSection(self):
            return self.getTypedRuleContext(nim_Parser.TypeSectionContext,0)


        def CONST(self):
            return self.getToken(nim_Parser.CONST, 0)

        def constantSection(self):
            return self.getTypedRuleContext(nim_Parser.ConstantSectionContext,0)


        def VARIABLE(self):
            return self.getToken(nim_Parser.VARIABLE, 0)

        def variableSection(self):
            return self.getTypedRuleContext(nim_Parser.VariableSectionContext,0)


        def LET(self):
            return self.getToken(nim_Parser.LET, 0)

        def letSection(self):
            return self.getTypedRuleContext(nim_Parser.LetSectionContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_complexStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComplexStmt" ):
                listener.enterComplexStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComplexStmt" ):
                listener.exitComplexStmt(self)




    def complexStmt(self):

        localctx = nim_Parser.ComplexStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_complexStmt)
        try:
            self.state = 1114
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [nim_Parser.FOR]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1094
                self.forStmt()
                pass
            elif token in [nim_Parser.IF]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1095
                self.ifStmt()
                pass
            elif token in [nim_Parser.CASE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1096
                self.caseStmt()
                pass
            elif token in [nim_Parser.BLOCK]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1097
                self.blockStmt()
                pass
            elif token in [nim_Parser.WHILE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1098
                self.whileStmt()
                pass
            elif token in [nim_Parser.WHEN]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1099
                self.whenStmt()
                pass
            elif token in [nim_Parser.TEMPLATE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1100
                self.match(nim_Parser.TEMPLATE)
                self.state = 1101
                self.templateRoutine()
                pass
            elif token in [nim_Parser.PROC]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1102
                self.match(nim_Parser.PROC)
                self.state = 1103
                self.procRoutine()
                pass
            elif token in [nim_Parser.MACRO]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1104
                self.match(nim_Parser.MACRO)
                self.state = 1105
                self.macroRoutine()
                pass
            elif token in [nim_Parser.TYPE]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1106
                self.match(nim_Parser.TYPE)
                self.state = 1107
                self.typeSection()
                pass
            elif token in [nim_Parser.CONST]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1108
                self.match(nim_Parser.CONST)
                self.state = 1109
                self.constantSection()
                pass
            elif token in [nim_Parser.VARIABLE]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1110
                self.match(nim_Parser.VARIABLE)
                self.state = 1111
                self.variableSection()
                pass
            elif token in [nim_Parser.LET]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1112
                self.match(nim_Parser.LET)
                self.state = 1113
                self.letSection()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColonBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(nim_Parser.COLON, 0)

        def stmt(self):
            return self.getTypedRuleContext(nim_Parser.StmtContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_colonBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColonBody" ):
                listener.enterColonBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColonBody" ):
                listener.exitColonBody(self)




    def colonBody(self):

        localctx = nim_Parser.ColonBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_colonBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1116
            self.match(nim_Parser.COLON)
            self.state = 1117
            self.stmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleExpr(self):
            return self.getTypedRuleContext(nim_Parser.SimpleExprContext,0)


        def EQUALS(self):
            return self.getToken(nim_Parser.EQUALS, 0)

        def anyExpr(self):
            return self.getTypedRuleContext(nim_Parser.AnyExprContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_exprStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprStmt" ):
                listener.enterExprStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprStmt" ):
                listener.exitExprStmt(self)




    def exprStmt(self):

        localctx = nim_Parser.ExprStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_exprStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1119
            self.simpleExpr()
            self.state = 1120
            self.match(nim_Parser.EQUALS)
            self.state = 1121
            self.anyExpr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_complexStmt(self):
            return self.getTypedRuleContext(nim_Parser.Simple_complexStmtContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStmt" ):
                listener.enterStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStmt" ):
                listener.exitStmt(self)




    def stmt(self):

        localctx = nim_Parser.StmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1123
            self.simple_complexStmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModuleContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.StmtContext)
            else:
                return self.getTypedRuleContext(nim_Parser.StmtContext,i)


        def SEMI_COLON(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.SEMI_COLON)
            else:
                return self.getToken(nim_Parser.SEMI_COLON, i)

        def getRuleIndex(self):
            return nim_Parser.RULE_module

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModule" ):
                listener.enterModule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModule" ):
                listener.exitModule(self)




    def module(self):

        localctx = nim_Parser.ModuleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_module)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1125
            self.stmt()
            self.state = 1132
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nim_Parser.SEMI_COLON) | (1 << nim_Parser.TYPE) | (1 << nim_Parser.VARIABLE) | (1 << nim_Parser.LET) | (1 << nim_Parser.CONST) | (1 << nim_Parser.PROC) | (1 << nim_Parser.RETURN) | (1 << nim_Parser.CASE) | (1 << nim_Parser.IF) | (1 << nim_Parser.WHILE) | (1 << nim_Parser.FOR) | (1 << nim_Parser.CONTINUE) | (1 << nim_Parser.BREAK) | (1 << nim_Parser.TEMPLATE))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (nim_Parser.WHEN - 66)) | (1 << (nim_Parser.IMPORT - 66)) | (1 << (nim_Parser.FROM - 66)) | (1 << (nim_Parser.BLOCK - 66)) | (1 << (nim_Parser.MACRO - 66)) | (1 << (nim_Parser.DISCARD - 66)))) != 0):
                self.state = 1127
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nim_Parser.SEMI_COLON:
                    self.state = 1126
                    self.match(nim_Parser.SEMI_COLON)


                self.state = 1129
                self.stmt()
                self.state = 1134
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StartContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def module(self):
            return self.getTypedRuleContext(nim_Parser.ModuleContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_start

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStart" ):
                listener.enterStart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStart" ):
                listener.exitStart(self)




    def start(self):

        localctx = nim_Parser.StartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_start)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1135
            self.module()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[37] = self.primarySuffix_sempred
        self._predicates[39] = self.parBody_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def primarySuffix_sempred(self, localctx:PrimarySuffixContext, predIndex:int):
            if predIndex == 0:
                return self._input.LT(1).type in self.primarySuffixList
         

    def parBody_sempred(self, localctx:ParBodyContext, predIndex:int):
            if predIndex == 1:
                return self._input.LT(1).type in self.parKeyWList
         




