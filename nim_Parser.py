# Generated from nim_Parser.g4 by ANTLR 4.7.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys

def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3s")
        buf.write("\u041f\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\3\2\3\2\3\3\5\3\u00b6\n\3\3\4\3\4")
        buf.write("\3\5\3\5\3\6\3\6\3\7\3\7\3\b\3\b\3\t\3\t\3\t\3\t\5\t\u00c6")
        buf.write("\n\t\3\n\3\n\3\13\3\13\3\f\3\f\3\r\3\r\3\r\3\r\5\r\u00d2")
        buf.write("\n\r\3\16\3\16\3\17\3\17\3\20\3\20\3\21\3\21\3\22\3\22")
        buf.write("\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\5\22\u00e7")
        buf.write("\n\22\3\23\3\23\3\24\3\24\3\24\7\24\u00ee\n\24\f\24\16")
        buf.write("\24\u00f1\13\24\3\25\3\25\3\25\7\25\u00f6\n\25\f\25\16")
        buf.write("\25\u00f9\13\25\3\26\3\26\3\26\7\26\u00fe\n\26\f\26\16")
        buf.write("\26\u0101\13\26\3\27\3\27\3\27\7\27\u0106\n\27\f\27\16")
        buf.write("\27\u0109\13\27\3\30\3\30\3\30\7\30\u010e\n\30\f\30\16")
        buf.write("\30\u0111\13\30\3\31\3\31\3\31\7\31\u0116\n\31\f\31\16")
        buf.write("\31\u0119\13\31\3\32\3\32\3\32\7\32\u011e\n\32\f\32\16")
        buf.write("\32\u0121\13\32\3\33\3\33\3\33\7\33\u0126\n\33\f\33\16")
        buf.write("\33\u0129\13\33\3\34\3\34\3\34\7\34\u012e\n\34\f\34\16")
        buf.write("\34\u0131\13\34\3\35\3\35\3\35\7\35\u0136\n\35\f\35\16")
        buf.write("\35\u0139\13\35\3\36\3\36\3\37\3\37\3 \3 \3 \3 \3 \3 ")
        buf.write("\5 \u0145\n \3!\3!\3!\3!\3!\3!\3!\3!\7!\u014f\n!\f!\16")
        buf.write("!\u0152\13!\5!\u0154\n!\3\"\3\"\5\"\u0158\n\"\3\"\3\"")
        buf.write("\3\"\3\"\5\"\u015e\n\"\5\"\u0160\n\"\3#\3#\3#\3#\7#\u0166")
        buf.write("\n#\f#\16#\u0169\13#\3#\3#\3$\3$\3$\3$\7$\u0171\n$\f$")
        buf.write("\16$\u0174\13$\3$\3$\3%\3%\3%\3%\3%\5%\u017d\n%\3&\3&")
        buf.write("\3&\3&\5&\u0183\n&\3\'\3\'\3\'\3\'\7\'\u0189\n\'\f\'\16")
        buf.write("\'\u018c\13\'\3\'\3\'\3\'\3\'\3\'\5\'\u0193\n\'\3\'\3")
        buf.write("\'\3\'\5\'\u0198\n\'\3\'\3\'\3\'\5\'\u019d\n\'\7\'\u019f")
        buf.write("\n\'\f\'\16\'\u01a2\13\'\3\'\3\'\3\'\3\'\5\'\u01a8\n\'")
        buf.write("\3(\3(\3(\3(\7(\u01ae\n(\f(\16(\u01b1\13(\3(\3(\7(\u01b5")
        buf.write("\n(\f(\16(\u01b8\13(\3(\6(\u01bb\n(\r(\16(\u01bc\5(\u01bf")
        buf.write("\n(\5(\u01c1\n(\3)\3)\3)\3)\5)\u01c7\n)\3)\3)\3)\3)\5")
        buf.write(")\u01cd\n)\3)\3)\6)\u01d1\n)\r)\16)\u01d2\3)\3)\6)\u01d7")
        buf.write("\n)\r)\16)\u01d8\5)\u01db\n)\5)\u01dd\n)\3*\3*\3*\3*\3")
        buf.write("+\3+\3+\3+\7+\u01e7\n+\f+\16+\u01ea\13+\3,\3,\3,\3,\3")
        buf.write("-\3-\5-\u01f2\n-\3-\3-\3-\3-\3-\3-\5-\u01fa\n-\3.\3.\3")
        buf.write("/\3/\5/\u0200\n/\3\60\3\60\5\60\u0204\n\60\3\60\3\60\3")
        buf.write("\60\5\60\u0209\n\60\3\60\3\60\3\60\3\60\3\60\3\60\5\60")
        buf.write("\u0211\n\60\7\60\u0213\n\60\f\60\16\60\u0216\13\60\3\60")
        buf.write("\3\60\3\60\3\60\3\60\3\60\3\60\5\60\u021f\n\60\3\61\3")
        buf.write("\61\5\61\u0223\n\61\3\61\3\61\3\61\3\61\3\61\3\61\5\61")
        buf.write("\u022b\n\61\3\62\3\62\3\62\5\62\u0230\n\62\3\62\3\62\3")
        buf.write("\62\3\62\3\62\5\62\u0237\n\62\3\63\3\63\3\63\3\64\3\64")
        buf.write("\5\64\u023e\n\64\3\64\3\64\3\65\3\65\5\65\u0244\n\65\3")
        buf.write("\65\3\65\3\65\5\65\u0249\n\65\7\65\u024b\n\65\f\65\16")
        buf.write("\65\u024e\13\65\3\66\3\66\3\66\3\66\3\66\3\66\6\66\u0256")
        buf.write("\n\66\r\66\16\66\u0257\3\66\3\66\3\66\3\66\5\66\u025e")
        buf.write("\n\66\5\66\u0260\n\66\3\67\6\67\u0263\n\67\r\67\16\67")
        buf.write("\u0264\3\67\3\67\3\67\3\67\3\67\6\67\u026c\n\67\r\67\16")
        buf.write("\67\u026d\3\67\3\67\3\67\3\67\5\67\u0274\n\67\5\67\u0276")
        buf.write("\n\67\5\67\u0278\n\67\38\38\38\58\u027d\n8\38\38\38\3")
        buf.write("8\38\58\u0284\n8\39\39\39\59\u0289\n9\39\39\39\39\39\3")
        buf.write("9\39\39\59\u0293\n9\59\u0295\n9\39\39\39\39\39\39\39\3")
        buf.write("9\59\u029f\n9\59\u02a1\n9\59\u02a3\n9\3:\3:\5:\u02a7\n")
        buf.write(":\3:\3:\3;\3;\3;\3;\7;\u02af\n;\f;\16;\u02b2\13;\3;\3")
        buf.write(";\3;\3;\3;\6;\u02b9\n;\r;\16;\u02ba\3;\3;\3;\3;\5;\u02c1")
        buf.write("\n;\5;\u02c3\n;\3<\3<\5<\u02c7\n<\3<\3<\3=\3=\3=\5=\u02ce")
        buf.write("\n=\3=\3=\3=\6=\u02d3\n=\r=\16=\u02d4\3=\5=\u02d8\n=\3")
        buf.write("=\3=\3=\6=\u02dd\n=\r=\16=\u02de\3=\5=\u02e2\n=\5=\u02e4")
        buf.write("\n=\3>\3>\3>\3>\6>\u02ea\n>\r>\16>\u02eb\3>\5>\u02ef\n")
        buf.write(">\3>\3>\3>\6>\u02f4\n>\r>\16>\u02f5\3>\5>\u02f9\n>\5>")
        buf.write("\u02fb\n>\3?\3?\5?\u02ff\n?\3?\3?\7?\u0303\n?\f?\16?\u0306")
        buf.write("\13?\3?\5?\u0309\n?\3?\3?\3?\7?\u030e\n?\f?\16?\u0311")
        buf.write("\13?\3?\3?\5?\u0315\n?\3?\3?\3?\7?\u031a\n?\f?\16?\u031d")
        buf.write("\13?\3?\5?\u0320\n?\5?\u0322\n?\3@\3@\5@\u0326\n@\3@\3")
        buf.write("@\3@\3@\3@\3@\5@\u032e\n@\3A\3A\5A\u0332\nA\3A\3A\3A\3")
        buf.write("A\3A\3A\5A\u033a\nA\3B\3B\5B\u033e\nB\3C\3C\5C\u0342\n")
        buf.write("C\3D\3D\5D\u0346\nD\3E\3E\3F\3F\3F\3F\5F\u034e\nF\3G\3")
        buf.write("G\3G\3G\5G\u0354\nG\3G\3G\3H\3H\3H\7H\u035b\nH\fH\16H")
        buf.write("\u035e\13H\3I\3I\3J\6J\u0363\nJ\rJ\16J\u0364\3J\3J\6J")
        buf.write("\u0369\nJ\rJ\16J\u036a\3J\3J\5J\u036f\nJ\3K\6K\u0372\n")
        buf.write("K\rK\16K\u0373\3K\3K\6K\u0378\nK\rK\16K\u0379\3K\3K\5")
        buf.write("K\u037e\nK\3L\3L\5L\u0382\nL\3M\3M\3M\3M\7M\u0388\nM\f")
        buf.write("M\16M\u038b\13M\3M\3M\3M\3M\3M\5M\u0392\nM\3M\3M\5M\u0396")
        buf.write("\nM\3M\3M\3M\5M\u039b\nM\3M\3M\5M\u039f\nM\5M\u03a1\n")
        buf.write("M\3N\3N\3N\7N\u03a6\nN\fN\16N\u03a9\13N\3N\3N\5N\u03ad")
        buf.write("\nN\3N\3N\3N\3N\3N\3N\5N\u03b5\nN\3O\3O\3P\3P\3P\7P\u03bc")
        buf.write("\nP\fP\16P\u03bf\13P\3P\5P\u03c2\nP\3P\3P\3P\3P\3P\3P")
        buf.write("\5P\u03ca\nP\5P\u03cc\nP\3P\3P\3P\3P\5P\u03d2\nP\3P\3")
        buf.write("P\3P\5P\u03d7\nP\5P\u03d9\nP\3Q\3Q\5Q\u03dd\nQ\3R\3R\3")
        buf.write("R\5R\u03e2\nR\3S\3S\3S\3S\3S\3S\3S\3S\3S\3S\3S\3S\5S\u03f0")
        buf.write("\nS\3T\3T\3T\3U\3U\3U\3U\5U\u03f9\nU\3U\5U\u03fc\nU\3")
        buf.write("V\3V\3V\5V\u0401\nV\3V\7V\u0404\nV\fV\16V\u0407\13V\3")
        buf.write("V\3V\3V\5V\u040c\nV\3W\3W\5W\u0410\nW\3W\7W\u0413\nW\f")
        buf.write("W\16W\u0416\13W\3X\6X\u0419\nX\rX\16X\u041a\3Y\3Y\3Y\2")
        buf.write("\2Z\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60")
        buf.write("\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082")
        buf.write("\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094")
        buf.write("\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6")
        buf.write("\u00a8\u00aa\u00ac\u00ae\u00b0\2\13\3\3mm\5\2\'\'++KK")
        buf.write("\t\2\')\678<<>>DDOOUU\4\2\27\27\35\35\4\2\30\32!!\5\2")
        buf.write("QQYbdj\3\2kl\5\2++AAPP\3\2\'(\2\u047c\2\u00b2\3\2\2\2")
        buf.write("\4\u00b5\3\2\2\2\6\u00b7\3\2\2\2\b\u00b9\3\2\2\2\n\u00bb")
        buf.write("\3\2\2\2\f\u00bd\3\2\2\2\16\u00bf\3\2\2\2\20\u00c5\3\2")
        buf.write("\2\2\22\u00c7\3\2\2\2\24\u00c9\3\2\2\2\26\u00cb\3\2\2")
        buf.write("\2\30\u00d1\3\2\2\2\32\u00d3\3\2\2\2\34\u00d5\3\2\2\2")
        buf.write("\36\u00d7\3\2\2\2 \u00d9\3\2\2\2\"\u00e6\3\2\2\2$\u00e8")
        buf.write("\3\2\2\2&\u00ea\3\2\2\2(\u00f2\3\2\2\2*\u00fa\3\2\2\2")
        buf.write(",\u0102\3\2\2\2.\u010a\3\2\2\2\60\u0112\3\2\2\2\62\u011a")
        buf.write("\3\2\2\2\64\u0122\3\2\2\2\66\u012a\3\2\2\28\u0132\3\2")
        buf.write("\2\2:\u013a\3\2\2\2<\u013c\3\2\2\2>\u0144\3\2\2\2@\u0153")
        buf.write("\3\2\2\2B\u0157\3\2\2\2D\u0161\3\2\2\2F\u016c\3\2\2\2")
        buf.write("H\u017c\3\2\2\2J\u0182\3\2\2\2L\u01a7\3\2\2\2N\u01c0\3")
        buf.write("\2\2\2P\u01dc\3\2\2\2R\u01de\3\2\2\2T\u01e2\3\2\2\2V\u01eb")
        buf.write("\3\2\2\2X\u01ef\3\2\2\2Z\u01fb\3\2\2\2\\\u01ff\3\2\2\2")
        buf.write("^\u0203\3\2\2\2`\u0222\3\2\2\2b\u022c\3\2\2\2d\u0238\3")
        buf.write("\2\2\2f\u023b\3\2\2\2h\u0243\3\2\2\2j\u024f\3\2\2\2l\u0262")
        buf.write("\3\2\2\2n\u0279\3\2\2\2p\u02a2\3\2\2\2r\u02a4\3\2\2\2")
        buf.write("t\u02aa\3\2\2\2v\u02c4\3\2\2\2x\u02ca\3\2\2\2z\u02e5\3")
        buf.write("\2\2\2|\u02fe\3\2\2\2~\u0325\3\2\2\2\u0080\u032f\3\2\2")
        buf.write("\2\u0082\u033b\3\2\2\2\u0084\u033f\3\2\2\2\u0086\u0343")
        buf.write("\3\2\2\2\u0088\u0347\3\2\2\2\u008a\u034d\3\2\2\2\u008c")
        buf.write("\u034f\3\2\2\2\u008e\u0357\3\2\2\2\u0090\u035f\3\2\2\2")
        buf.write("\u0092\u036e\3\2\2\2\u0094\u037d\3\2\2\2\u0096\u037f\3")
        buf.write("\2\2\2\u0098\u0383\3\2\2\2\u009a\u03a2\3\2\2\2\u009c\u03b6")
        buf.write("\3\2\2\2\u009e\u03b8\3\2\2\2\u00a0\u03dc\3\2\2\2\u00a2")
        buf.write("\u03e1\3\2\2\2\u00a4\u03ef\3\2\2\2\u00a6\u03f1\3\2\2\2")
        buf.write("\u00a8\u03f4\3\2\2\2\u00aa\u040b\3\2\2\2\u00ac\u040d\3")
        buf.write("\2\2\2\u00ae\u0418\3\2\2\2\u00b0\u041c\3\2\2\2\u00b2\u00b3")
        buf.write("\7q\2\2\u00b3\3\3\2\2\2\u00b4\u00b6\5\2\2\2\u00b5\u00b4")
        buf.write("\3\2\2\2\u00b5\u00b6\3\2\2\2\u00b6\5\3\2\2\2\u00b7\u00b8")
        buf.write("\t\2\2\2\u00b8\7\3\2\2\2\u00b9\u00ba\t\3\2\2\u00ba\t\3")
        buf.write("\2\2\2\u00bb\u00bc\t\4\2\2\u00bc\13\3\2\2\2\u00bd\u00be")
        buf.write("\7\34\2\2\u00be\r\3\2\2\2\u00bf\u00c0\t\5\2\2\u00c0\17")
        buf.write("\3\2\2\2\u00c1\u00c6\7\36\2\2\u00c2\u00c3\7\25\2\2\u00c3")
        buf.write("\u00c6\7\25\2\2\u00c4\u00c6\7\25\2\2\u00c5\u00c1\3\2\2")
        buf.write("\2\u00c5\u00c2\3\2\2\2\u00c5\u00c4\3\2\2\2\u00c6\21\3")
        buf.write("\2\2\2\u00c7\u00c8\7\37\2\2\u00c8\23\3\2\2\2\u00c9\u00ca")
        buf.write("\7 \2\2\u00ca\25\3\2\2\2\u00cb\u00cc\t\6\2\2\u00cc\27")
        buf.write("\3\2\2\2\u00cd\u00d2\7\"\2\2\u00ce\u00cf\7\26\2\2\u00cf")
        buf.write("\u00d2\7\26\2\2\u00d0\u00d2\7\26\2\2\u00d1\u00cd\3\2\2")
        buf.write("\2\u00d1\u00ce\3\2\2\2\u00d1\u00d0\3\2\2\2\u00d2\31\3")
        buf.write("\2\2\2\u00d3\u00d4\7#\2\2\u00d4\33\3\2\2\2\u00d5\u00d6")
        buf.write("\7$\2\2\u00d6\35\3\2\2\2\u00d7\u00d8\7%\2\2\u00d8\37\3")
        buf.write("\2\2\2\u00d9\u00da\7&\2\2\u00da!\3\2\2\2\u00db\u00e7\5")
        buf.write("\f\7\2\u00dc\u00e7\5\16\b\2\u00dd\u00e7\5\20\t\2\u00de")
        buf.write("\u00e7\5\22\n\2\u00df\u00e7\5\24\13\2\u00e0\u00e7\5\26")
        buf.write("\f\2\u00e1\u00e7\5\30\r\2\u00e2\u00e7\5\32\16\2\u00e3")
        buf.write("\u00e7\5\34\17\2\u00e4\u00e7\5\36\20\2\u00e5\u00e7\5 ")
        buf.write("\21\2\u00e6\u00db\3\2\2\2\u00e6\u00dc\3\2\2\2\u00e6\u00dd")
        buf.write("\3\2\2\2\u00e6\u00de\3\2\2\2\u00e6\u00df\3\2\2\2\u00e6")
        buf.write("\u00e0\3\2\2\2\u00e6\u00e1\3\2\2\2\u00e6\u00e2\3\2\2\2")
        buf.write("\u00e6\u00e3\3\2\2\2\u00e6\u00e4\3\2\2\2\u00e6\u00e5\3")
        buf.write("\2\2\2\u00e7#\3\2\2\2\u00e8\u00e9\5\"\22\2\u00e9%\3\2")
        buf.write("\2\2\u00ea\u00ef\5(\25\2\u00eb\u00ec\7\35\2\2\u00ec\u00ee")
        buf.write("\5(\25\2\u00ed\u00eb\3\2\2\2\u00ee\u00f1\3\2\2\2\u00ef")
        buf.write("\u00ed\3\2\2\2\u00ef\u00f0\3\2\2\2\u00f0\'\3\2\2\2\u00f1")
        buf.write("\u00ef\3\2\2\2\u00f2\u00f7\5*\26\2\u00f3\u00f4\7\36\2")
        buf.write("\2\u00f4\u00f6\5*\26\2\u00f5\u00f3\3\2\2\2\u00f6\u00f9")
        buf.write("\3\2\2\2\u00f7\u00f5\3\2\2\2\u00f7\u00f8\3\2\2\2\u00f8")
        buf.write(")\3\2\2\2\u00f9\u00f7\3\2\2\2\u00fa\u00ff\5,\27\2\u00fb")
        buf.write("\u00fc\7\37\2\2\u00fc\u00fe\5,\27\2\u00fd\u00fb\3\2\2")
        buf.write("\2\u00fe\u0101\3\2\2\2\u00ff\u00fd\3\2\2\2\u00ff\u0100")
        buf.write("\3\2\2\2\u0100+\3\2\2\2\u0101\u00ff\3\2\2\2\u0102\u0107")
        buf.write("\5.\30\2\u0103\u0104\7 \2\2\u0104\u0106\5.\30\2\u0105")
        buf.write("\u0103\3\2\2\2\u0106\u0109\3\2\2\2\u0107\u0105\3\2\2\2")
        buf.write("\u0107\u0108\3\2\2\2\u0108-\3\2\2\2\u0109\u0107\3\2\2")
        buf.write("\2\u010a\u010f\5\60\31\2\u010b\u010c\7!\2\2\u010c\u010e")
        buf.write("\5\60\31\2\u010d\u010b\3\2\2\2\u010e\u0111\3\2\2\2\u010f")
        buf.write("\u010d\3\2\2\2\u010f\u0110\3\2\2\2\u0110/\3\2\2\2\u0111")
        buf.write("\u010f\3\2\2\2\u0112\u0117\5\62\32\2\u0113\u0114\7\"\2")
        buf.write("\2\u0114\u0116\5\62\32\2\u0115\u0113\3\2\2\2\u0116\u0119")
        buf.write("\3\2\2\2\u0117\u0115\3\2\2\2\u0117\u0118\3\2\2\2\u0118")
        buf.write("\61\3\2\2\2\u0119\u0117\3\2\2\2\u011a\u011f\5\64\33\2")
        buf.write("\u011b\u011c\7#\2\2\u011c\u011e\5\64\33\2\u011d\u011b")
        buf.write("\3\2\2\2\u011e\u0121\3\2\2\2\u011f\u011d\3\2\2\2\u011f")
        buf.write("\u0120\3\2\2\2\u0120\63\3\2\2\2\u0121\u011f\3\2\2\2\u0122")
        buf.write("\u0127\5\66\34\2\u0123\u0124\7$\2\2\u0124\u0126\5\66\34")
        buf.write("\2\u0125\u0123\3\2\2\2\u0126\u0129\3\2\2\2\u0127\u0125")
        buf.write("\3\2\2\2\u0127\u0128\3\2\2\2\u0128\65\3\2\2\2\u0129\u0127")
        buf.write("\3\2\2\2\u012a\u012f\58\35\2\u012b\u012c\7%\2\2\u012c")
        buf.write("\u012e\58\35\2\u012d\u012b\3\2\2\2\u012e\u0131\3\2\2\2")
        buf.write("\u012f\u012d\3\2\2\2\u012f\u0130\3\2\2\2\u0130\67\3\2")
        buf.write("\2\2\u0131\u012f\3\2\2\2\u0132\u0137\5N(\2\u0133\u0134")
        buf.write("\7&\2\2\u0134\u0136\5N(\2\u0135\u0133\3\2\2\2\u0136\u0139")
        buf.write("\3\2\2\2\u0137\u0135\3\2\2\2\u0137\u0138\3\2\2\2\u0138")
        buf.write("9\3\2\2\2\u0139\u0137\3\2\2\2\u013a\u013b\t\7\2\2\u013b")
        buf.write(";\3\2\2\2\u013c\u013d\t\b\2\2\u013d=\3\2\2\2\u013e\u0145")
        buf.write("\5@!\2\u013f\u0140\7W\2\2\u0140\u0141\5@!\2\u0141\u0142")
        buf.write("\7W\2\2\u0142\u0145\3\2\2\2\u0143\u0145\7X\2\2\u0144\u013e")
        buf.write("\3\2\2\2\u0144\u013f\3\2\2\2\u0144\u0143\3\2\2\2\u0145")
        buf.write("?\3\2\2\2\u0146\u0154\7X\2\2\u0147\u0154\5:\36\2\u0148")
        buf.write("\u014f\5\"\22\2\u0149\u014f\7\n\2\2\u014a\u014f\7\13\2")
        buf.write("\2\u014b\u014f\7\16\2\2\u014c\u014f\7\17\2\2\u014d\u014f")
        buf.write("\7\27\2\2\u014e\u0148\3\2\2\2\u014e\u0149\3\2\2\2\u014e")
        buf.write("\u014a\3\2\2\2\u014e\u014b\3\2\2\2\u014e\u014c\3\2\2\2")
        buf.write("\u014e\u014d\3\2\2\2\u014f\u0152\3\2\2\2\u0150\u014e\3")
        buf.write("\2\2\2\u0150\u0151\3\2\2\2\u0151\u0154\3\2\2\2\u0152\u0150")
        buf.write("\3\2\2\2\u0153\u0146\3\2\2\2\u0153\u0147\3\2\2\2\u0153")
        buf.write("\u0150\3\2\2\2\u0154A\3\2\2\2\u0155\u0158\5\u008aF\2\u0156")
        buf.write("\u0158\5&\24\2\u0157\u0155\3\2\2\2\u0157\u0156\3\2\2\2")
        buf.write("\u0158\u015f\3\2\2\2\u0159\u0160\7\25\2\2\u015a\u015d")
        buf.write("\7\27\2\2\u015b\u015e\5\u008aF\2\u015c\u015e\5&\24\2\u015d")
        buf.write("\u015b\3\2\2\2\u015d\u015c\3\2\2\2\u015e\u0160\3\2\2\2")
        buf.write("\u015f\u0159\3\2\2\2\u015f\u015a\3\2\2\2\u015f\u0160\3")
        buf.write("\2\2\2\u0160C\3\2\2\2\u0161\u0162\7\16\2\2\u0162\u0167")
        buf.write("\5B\"\2\u0163\u0164\7\b\2\2\u0164\u0166\5B\"\2\u0165\u0163")
        buf.write("\3\2\2\2\u0166\u0169\3\2\2\2\u0167\u0165\3\2\2\2\u0167")
        buf.write("\u0168\3\2\2\2\u0168\u016a\3\2\2\2\u0169\u0167\3\2\2\2")
        buf.write("\u016a\u016b\7\17\2\2\u016bE\3\2\2\2\u016c\u016d\7\n\2")
        buf.write("\2\u016d\u0172\5B\"\2\u016e\u016f\7\b\2\2\u016f\u0171")
        buf.write("\5B\"\2\u0170\u016e\3\2\2\2\u0171\u0174\3\2\2\2\u0172")
        buf.write("\u0170\3\2\2\2\u0172\u0173\3\2\2\2\u0173\u0175\3\2\2\2")
        buf.write("\u0174\u0172\3\2\2\2\u0175\u0176\7\13\2\2\u0176G\3\2\2")
        buf.write("\2\u0177\u017d\5<\37\2\u0178\u017d\5> \2\u0179\u017d\5")
        buf.write(":\36\2\u017a\u017d\5R*\2\u017b\u017d\5D#\2\u017c\u0177")
        buf.write("\3\2\2\2\u017c\u0178\3\2\2\2\u017c\u0179\3\2\2\2\u017c")
        buf.write("\u017a\3\2\2\2\u017c\u017b\3\2\2\2\u017dI\3\2\2\2\u017e")
        buf.write("\u0183\5<\37\2\u017f\u0183\5> \2\u0180\u0183\5R*\2\u0181")
        buf.write("\u0183\5D#\2\u0182\u017e\3\2\2\2\u0182\u017f\3\2\2\2\u0182")
        buf.write("\u0180\3\2\2\2\u0182\u0181\3\2\2\2\u0183K\3\2\2\2\u0184")
        buf.write("\u0185\7\n\2\2\u0185\u018a\5B\"\2\u0186\u0187\7\b\2\2")
        buf.write("\u0187\u0189\5B\"\2\u0188\u0186\3\2\2\2\u0189\u018c\3")
        buf.write("\2\2\2\u018a\u0188\3\2\2\2\u018a\u018b\3\2\2\2\u018b\u018d")
        buf.write("\3\2\2\2\u018c\u018a\3\2\2\2\u018d\u018e\7\13\2\2\u018e")
        buf.write("\u01a8\3\2\2\2\u018f\u0190\7\26\2\2\u0190\u0192\5> \2")
        buf.write("\u0191\u0193\5<\37\2\u0192\u0191\3\2\2\2\u0192\u0193\3")
        buf.write("\2\2\2\u0193\u01a8\3\2\2\2\u0194\u0197\7\16\2\2\u0195")
        buf.write("\u0198\5&\24\2\u0196\u0198\5\u008aF\2\u0197\u0195\3\2")
        buf.write("\2\2\u0197\u0196\3\2\2\2\u0198\u01a0\3\2\2\2\u0199\u019c")
        buf.write("\7\b\2\2\u019a\u019d\5&\24\2\u019b\u019d\5\u008aF\2\u019c")
        buf.write("\u019a\3\2\2\2\u019c\u019b\3\2\2\2\u019d\u019f\3\2\2\2")
        buf.write("\u019e\u0199\3\2\2\2\u019f\u01a2\3\2\2\2\u01a0\u019e\3")
        buf.write("\2\2\2\u01a0\u01a1\3\2\2\2\u01a1\u01a3\3\2\2\2\u01a2\u01a0")
        buf.write("\3\2\2\2\u01a3\u01a4\7\17\2\2\u01a4\u01a8\3\2\2\2\u01a5")
        buf.write("\u01a6\6\'\2\2\u01a6\u01a8\5\u008aF\2\u01a7\u0184\3\2")
        buf.write("\2\2\u01a7\u018f\3\2\2\2\u01a7\u0194\3\2\2\2\u01a7\u01a5")
        buf.write("\3\2\2\2\u01a8M\3\2\2\2\u01a9\u01aa\5\b\5\2\u01aa\u01ab")
        buf.write("\5&\24\2\u01ab\u01c1\3\2\2\2\u01ac\u01ae\5$\23\2\u01ad")
        buf.write("\u01ac\3\2\2\2\u01ae\u01b1\3\2\2\2\u01af\u01ad\3\2\2\2")
        buf.write("\u01af\u01b0\3\2\2\2\u01b0\u01be\3\2\2\2\u01b1\u01af\3")
        buf.write("\2\2\2\u01b2\u01b6\5H%\2\u01b3\u01b5\5L\'\2\u01b4\u01b3")
        buf.write("\3\2\2\2\u01b5\u01b8\3\2\2\2\u01b6\u01b4\3\2\2\2\u01b6")
        buf.write("\u01b7\3\2\2\2\u01b7\u01bf\3\2\2\2\u01b8\u01b6\3\2\2\2")
        buf.write("\u01b9\u01bb\5L\'\2\u01ba\u01b9\3\2\2\2\u01bb\u01bc\3")
        buf.write("\2\2\2\u01bc\u01ba\3\2\2\2\u01bc\u01bd\3\2\2\2\u01bd\u01bf")
        buf.write("\3\2\2\2\u01be\u01b2\3\2\2\2\u01be\u01ba\3\2\2\2\u01bf")
        buf.write("\u01c1\3\2\2\2\u01c0\u01a9\3\2\2\2\u01c0\u01af\3\2\2\2")
        buf.write("\u01c1O\3\2\2\2\u01c2\u01c3\6)\3\2\u01c3\u01c6\5\u00a0")
        buf.write("Q\2\u01c4\u01c5\7\t\2\2\u01c5\u01c7\5\u00a0Q\2\u01c6\u01c4")
        buf.write("\3\2\2\2\u01c6\u01c7\3\2\2\2\u01c7\u01dd\3\2\2\2\u01c8")
        buf.write("\u01dd\5\u008aF\2\u01c9\u01cd\7\25\2\2\u01ca\u01cb\7\27")
        buf.write("\2\2\u01cb\u01cd\5\u008aF\2\u01cc\u01c9\3\2\2\2\u01cc")
        buf.write("\u01ca\3\2\2\2\u01cd\u01da\3\2\2\2\u01ce\u01cf\7\b\2\2")
        buf.write("\u01cf\u01d1\5B\"\2\u01d0\u01ce\3\2\2\2\u01d1\u01d2\3")
        buf.write("\2\2\2\u01d2\u01d0\3\2\2\2\u01d2\u01d3\3\2\2\2\u01d3\u01db")
        buf.write("\3\2\2\2\u01d4\u01d6\7\t\2\2\u01d5\u01d7\5\u00a0Q\2\u01d6")
        buf.write("\u01d5\3\2\2\2\u01d7\u01d8\3\2\2\2\u01d8\u01d6\3\2\2\2")
        buf.write("\u01d8\u01d9\3\2\2\2\u01d9\u01db\3\2\2\2\u01da\u01d0\3")
        buf.write("\2\2\2\u01da\u01d4\3\2\2\2\u01db\u01dd\3\2\2\2\u01dc\u01c2")
        buf.write("\3\2\2\2\u01dc\u01c8\3\2\2\2\u01dc\u01cc\3\2\2\2\u01dd")
        buf.write("Q\3\2\2\2\u01de\u01df\7\n\2\2\u01df\u01e0\5P)\2\u01e0")
        buf.write("\u01e1\7\13\2\2\u01e1S\3\2\2\2\u01e2\u01e3\7G\2\2\u01e3")
        buf.write("\u01e8\7X\2\2\u01e4\u01e5\7\b\2\2\u01e5\u01e7\7X\2\2\u01e6")
        buf.write("\u01e4\3\2\2\2\u01e7\u01ea\3\2\2\2\u01e8\u01e6\3\2\2\2")
        buf.write("\u01e8\u01e9\3\2\2\2\u01e9U\3\2\2\2\u01ea\u01e8\3\2\2")
        buf.write("\2\u01eb\u01ec\7H\2\2\u01ec\u01ed\7X\2\2\u01ed\u01ee\5")
        buf.write("T+\2\u01eeW\3\2\2\2\u01ef\u01f1\7O\2\2\u01f0\u01f2\5>")
        buf.write(" \2\u01f1\u01f0\3\2\2\2\u01f1\u01f2\3\2\2\2\u01f2\u01f3")
        buf.write("\3\2\2\2\u01f3\u01f9\7\25\2\2\u01f4\u01fa\5\u00acW\2\u01f5")
        buf.write("\u01f6\5\2\2\2\u01f6\u01f7\5\u00acW\2\u01f7\u01f8\5\6")
        buf.write("\4\2\u01f8\u01fa\3\2\2\2\u01f9\u01f4\3\2\2\2\u01f9\u01f5")
        buf.write("\3\2\2\2\u01faY\3\2\2\2\u01fb\u01fc\5t;\2\u01fc[\3\2\2")
        buf.write("\2\u01fd\u0200\5&\24\2\u01fe\u0200\5\u008aF\2\u01ff\u01fd")
        buf.write("\3\2\2\2\u01ff\u01fe\3\2\2\2\u0200]\3\2\2\2\u0201\u0204")
        buf.write("\5&\24\2\u0202\u0204\5\u008aF\2\u0203\u0201\3\2\2\2\u0203")
        buf.write("\u0202\3\2\2\2\u0204\u0214\3\2\2\2\u0205\u0208\79\2\2")
        buf.write("\u0206\u0209\5\u008aF\2\u0207\u0209\5&\24\2\u0208\u0206")
        buf.write("\3\2\2\2\u0208\u0207\3\2\2\2\u0209\u020a\3\2\2\2\u020a")
        buf.write("\u0210\7\25\2\2\u020b\u020c\5\2\2\2\u020c\u020d\5\\/\2")
        buf.write("\u020d\u020e\5\6\4\2\u020e\u0211\3\2\2\2\u020f\u0211\5")
        buf.write("\\/\2\u0210\u020b\3\2\2\2\u0210\u020f\3\2\2\2\u0211\u0213")
        buf.write("\3\2\2\2\u0212\u0205\3\2\2\2\u0213\u0216\3\2\2\2\u0214")
        buf.write("\u0212\3\2\2\2\u0214\u0215\3\2\2\2\u0215\u0217\3\2\2\2")
        buf.write("\u0216\u0214\3\2\2\2\u0217\u0218\7:\2\2\u0218\u021e\7")
        buf.write("\25\2\2\u0219\u021a\5\2\2\2\u021a\u021b\5,\27\2\u021b")
        buf.write("\u021c\5\6\4\2\u021c\u021f\3\2\2\2\u021d\u021f\5\\/\2")
        buf.write("\u021e\u0219\3\2\2\2\u021e\u021d\3\2\2\2\u021f_\3\2\2")
        buf.write("\2\u0220\u0223\5&\24\2\u0221\u0223\5\u008aF\2\u0222\u0220")
        buf.write("\3\2\2\2\u0222\u0221\3\2\2\2\u0223\u0224\3\2\2\2\u0224")
        buf.write("\u022a\7\25\2\2\u0225\u0226\5\2\2\2\u0226\u0227\5^\60")
        buf.write("\2\u0227\u0228\5\6\4\2\u0228\u022b\3\2\2\2\u0229\u022b")
        buf.write("\5^\60\2\u022a\u0225\3\2\2\2\u022a\u0229\3\2\2\2\u022b")
        buf.write("a\3\2\2\2\u022c\u022f\7\67\2\2\u022d\u0230\5&\24\2\u022e")
        buf.write("\u0230\5\u008aF\2\u022f\u022d\3\2\2\2\u022f\u022e\3\2")
        buf.write("\2\2\u0230\u0236\3\2\2\2\u0231\u0232\5\2\2\2\u0232\u0233")
        buf.write("\5l\67\2\u0233\u0234\5\6\4\2\u0234\u0237\3\2\2\2\u0235")
        buf.write("\u0237\5l\67\2\u0236\u0231\3\2\2\2\u0236\u0235\3\2\2\2")
        buf.write("\u0237c\3\2\2\2\u0238\u0239\7D\2\2\u0239\u023a\5`\61\2")
        buf.write("\u023ae\3\2\2\2\u023b\u023d\78\2\2\u023c\u023e\7\32\2")
        buf.write("\2\u023d\u023c\3\2\2\2\u023d\u023e\3\2\2\2\u023e\u023f")
        buf.write("\3\2\2\2\u023f\u0240\5`\61\2\u0240g\3\2\2\2\u0241\u0244")
        buf.write("\5&\24\2\u0242\u0244\5\u008aF\2\u0243\u0241\3\2\2\2\u0243")
        buf.write("\u0242\3\2\2\2\u0244\u024c\3\2\2\2\u0245\u0248\7\b\2\2")
        buf.write("\u0246\u0249\5&\24\2\u0247\u0249\5\u008aF\2\u0248\u0246")
        buf.write("\3\2\2\2\u0248\u0247\3\2\2\2\u0249\u024b\3\2\2\2\u024a")
        buf.write("\u0245\3\2\2\2\u024b\u024e\3\2\2\2\u024c\u024a\3\2\2\2")
        buf.write("\u024c\u024d\3\2\2\2\u024di\3\2\2\2\u024e\u024c\3\2\2")
        buf.write("\2\u024f\u0250\7\31\2\2\u0250\u0251\5h\65\2\u0251\u025f")
        buf.write("\7\25\2\2\u0252\u0255\5\2\2\2\u0253\u0256\5\u00a8U\2\u0254")
        buf.write("\u0256\5\u00acW\2\u0255\u0253\3\2\2\2\u0255\u0254\3\2")
        buf.write("\2\2\u0256\u0257\3\2\2\2\u0257\u0255\3\2\2\2\u0257\u0258")
        buf.write("\3\2\2\2\u0258\u0259\3\2\2\2\u0259\u025a\5\6\4\2\u025a")
        buf.write("\u0260\3\2\2\2\u025b\u025e\5\u00a8U\2\u025c\u025e\5\u00ac")
        buf.write("W\2\u025d\u025b\3\2\2\2\u025d\u025c\3\2\2\2\u025e\u0260")
        buf.write("\3\2\2\2\u025f\u0252\3\2\2\2\u025f\u025d\3\2\2\2\u0260")
        buf.write("k\3\2\2\2\u0261\u0263\5j\66\2\u0262\u0261\3\2\2\2\u0263")
        buf.write("\u0264\3\2\2\2\u0264\u0262\3\2\2\2\u0264\u0265\3\2\2\2")
        buf.write("\u0265\u0277\3\2\2\2\u0266\u0267\7:\2\2\u0267\u0275\7")
        buf.write("\25\2\2\u0268\u026b\5\2\2\2\u0269\u026c\5\u00a8U\2\u026a")
        buf.write("\u026c\5\u00acW\2\u026b\u0269\3\2\2\2\u026b\u026a\3\2")
        buf.write("\2\2\u026c\u026d\3\2\2\2\u026d\u026b\3\2\2\2\u026d\u026e")
        buf.write("\3\2\2\2\u026e\u026f\3\2\2\2\u026f\u0270\5\6\4\2\u0270")
        buf.write("\u0276\3\2\2\2\u0271\u0274\5\u00a8U\2\u0272\u0274\5\u00ac")
        buf.write("W\2\u0273\u0271\3\2\2\2\u0273\u0272\3\2\2\2\u0274\u0276")
        buf.write("\3\2\2\2\u0275\u0268\3\2\2\2\u0275\u0273\3\2\2\2\u0276")
        buf.write("\u0278\3\2\2\2\u0277\u0266\3\2\2\2\u0277\u0278\3\2\2\2")
        buf.write("\u0278m\3\2\2\2\u0279\u027c\7\67\2\2\u027a\u027d\5&\24")
        buf.write("\2\u027b\u027d\5\u008aF\2\u027c\u027a\3\2\2\2\u027c\u027b")
        buf.write("\3\2\2\2\u027d\u0283\3\2\2\2\u027e\u027f\5\2\2\2\u027f")
        buf.write("\u0280\5l\67\2\u0280\u0281\5\6\4\2\u0281\u0284\3\2\2\2")
        buf.write("\u0282\u0284\5l\67\2\u0283\u027e\3\2\2\2\u0283\u0282\3")
        buf.write("\2\2\2\u0284o\3\2\2\2\u0285\u0288\7<\2\2\u0286\u0289\5")
        buf.write("&\24\2\u0287\u0289\5\u008aF\2\u0288\u0286\3\2\2\2\u0288")
        buf.write("\u0287\3\2\2\2\u0289\u028a\3\2\2\2\u028a\u028b\7\25\2")
        buf.write("\2\u028b\u0294\5\2\2\2\u028c\u0295\5\u00a8U\2\u028d\u0293")
        buf.write("\5\u00acW\2\u028e\u028f\5\2\2\2\u028f\u0290\5\u00acW\2")
        buf.write("\u0290\u0291\5\6\4\2\u0291\u0293\3\2\2\2\u0292\u028d\3")
        buf.write("\2\2\2\u0292\u028e\3\2\2\2\u0293\u0295\3\2\2\2\u0294\u028c")
        buf.write("\3\2\2\2\u0294\u0292\3\2\2\2\u0295\u0296\3\2\2\2\u0296")
        buf.write("\u0297\5\6\4\2\u0297\u02a3\3\2\2\2\u0298\u02a1\5\u00a8")
        buf.write("U\2\u0299\u029f\5\u00acW\2\u029a\u029b\5\2\2\2\u029b\u029c")
        buf.write("\5\u00acW\2\u029c\u029d\5\6\4\2\u029d\u029f\3\2\2\2\u029e")
        buf.write("\u0299\3\2\2\2\u029e\u029a\3\2\2\2\u029f\u02a1\3\2\2\2")
        buf.write("\u02a0\u0298\3\2\2\2\u02a0\u029e\3\2\2\2\u02a1\u02a3\3")
        buf.write("\2\2\2\u02a2\u0285\3\2\2\2\u02a2\u02a0\3\2\2\2\u02a3q")
        buf.write("\3\2\2\2\u02a4\u02a6\7D\2\2\u02a5\u02a7\7\32\2\2\u02a6")
        buf.write("\u02a5\3\2\2\2\u02a6\u02a7\3\2\2\2\u02a7\u02a8\3\2\2\2")
        buf.write("\u02a8\u02a9\5~@\2\u02a9s\3\2\2\2\u02aa\u02ab\7>\2\2\u02ab")
        buf.write("\u02b0\7X\2\2\u02ac\u02ad\7\b\2\2\u02ad\u02af\7X\2\2\u02ae")
        buf.write("\u02ac\3\2\2\2\u02af\u02b2\3\2\2\2\u02b0\u02ae\3\2\2\2")
        buf.write("\u02b0\u02b1\3\2\2\2\u02b1\u02b3\3\2\2\2\u02b2\u02b0\3")
        buf.write("\2\2\2\u02b3\u02b4\7\30\2\2\u02b4\u02b5\5&\24\2\u02b5")
        buf.write("\u02c2\7\25\2\2\u02b6\u02b8\5\2\2\2\u02b7\u02b9\5\u00ac")
        buf.write("W\2\u02b8\u02b7\3\2\2\2\u02b9\u02ba\3\2\2\2\u02ba\u02b8")
        buf.write("\3\2\2\2\u02ba\u02bb\3\2\2\2\u02bb\u02bc\3\2\2\2\u02bc")
        buf.write("\u02bd\5\6\4\2\u02bd\u02c3\3\2\2\2\u02be\u02c1\5\u00ac")
        buf.write("W\2\u02bf\u02c1\5\u00a8U\2\u02c0\u02be\3\2\2\2\u02c0\u02bf")
        buf.write("\3\2\2\2\u02c1\u02c3\3\2\2\2\u02c2\u02b6\3\2\2\2\u02c2")
        buf.write("\u02c0\3\2\2\2\u02c3u\3\2\2\2\u02c4\u02c6\78\2\2\u02c5")
        buf.write("\u02c7\7\32\2\2\u02c6\u02c5\3\2\2\2\u02c6\u02c7\3\2\2")
        buf.write("\2\u02c7\u02c8\3\2\2\2\u02c8\u02c9\5~@\2\u02c9w\3\2\2")
        buf.write("\2\u02ca\u02cd\79\2\2\u02cb\u02ce\5&\24\2\u02cc\u02ce")
        buf.write("\5\u008aF\2\u02cd\u02cb\3\2\2\2\u02cd\u02cc\3\2\2\2\u02ce")
        buf.write("\u02cf\3\2\2\2\u02cf\u02e3\7\25\2\2\u02d0\u02d7\5\2\2")
        buf.write("\2\u02d1\u02d3\5\u00a8U\2\u02d2\u02d1\3\2\2\2\u02d3\u02d4")
        buf.write("\3\2\2\2\u02d4\u02d2\3\2\2\2\u02d4\u02d5\3\2\2\2\u02d5")
        buf.write("\u02d8\3\2\2\2\u02d6\u02d8\5\u00aaV\2\u02d7\u02d2\3\2")
        buf.write("\2\2\u02d7\u02d6\3\2\2\2\u02d8\u02d9\3\2\2\2\u02d9\u02da")
        buf.write("\5\6\4\2\u02da\u02e4\3\2\2\2\u02db\u02dd\5\u00a8U\2\u02dc")
        buf.write("\u02db\3\2\2\2\u02dd\u02de\3\2\2\2\u02de\u02dc\3\2\2\2")
        buf.write("\u02de\u02df\3\2\2\2\u02df\u02e2\3\2\2\2\u02e0\u02e2\5")
        buf.write("\u00aaV\2\u02e1\u02dc\3\2\2\2\u02e1\u02e0\3\2\2\2\u02e2")
        buf.write("\u02e4\3\2\2\2\u02e3\u02d0\3\2\2\2\u02e3\u02e1\3\2\2\2")
        buf.write("\u02e4y\3\2\2\2\u02e5\u02e6\7:\2\2\u02e6\u02fa\7\25\2")
        buf.write("\2\u02e7\u02ee\5\2\2\2\u02e8\u02ea\5\u00a8U\2\u02e9\u02e8")
        buf.write("\3\2\2\2\u02ea\u02eb\3\2\2\2\u02eb\u02e9\3\2\2\2\u02eb")
        buf.write("\u02ec\3\2\2\2\u02ec\u02ef\3\2\2\2\u02ed\u02ef\5\u00aa")
        buf.write("V\2\u02ee\u02e9\3\2\2\2\u02ee\u02ed\3\2\2\2\u02ef\u02f0")
        buf.write("\3\2\2\2\u02f0\u02f1\5\6\4\2\u02f1\u02fb\3\2\2\2\u02f2")
        buf.write("\u02f4\5\u00a8U\2\u02f3\u02f2\3\2\2\2\u02f4\u02f5\3\2")
        buf.write("\2\2\u02f5\u02f3\3\2\2\2\u02f5\u02f6\3\2\2\2\u02f6\u02f9")
        buf.write("\3\2\2\2\u02f7\u02f9\5\u00aaV\2\u02f8\u02f3\3\2\2\2\u02f8")
        buf.write("\u02f7\3\2\2\2\u02f9\u02fb\3\2\2\2\u02fa\u02e7\3\2\2\2")
        buf.write("\u02fa\u02f8\3\2\2\2\u02fb{\3\2\2\2\u02fc\u02ff\5\u00a8")
        buf.write("U\2\u02fd\u02ff\5\u00aaV\2\u02fe\u02fc\3\2\2\2\u02fe\u02fd")
        buf.write("\3\2\2\2\u02ff\u0321\3\2\2\2\u0300\u0304\5\2\2\2\u0301")
        buf.write("\u0303\5x=\2\u0302\u0301\3\2\2\2\u0303\u0306\3\2\2\2\u0304")
        buf.write("\u0302\3\2\2\2\u0304\u0305\3\2\2\2\u0305\u0308\3\2\2\2")
        buf.write("\u0306\u0304\3\2\2\2\u0307\u0309\5z>\2\u0308\u0307\3\2")
        buf.write("\2\2\u0308\u0309\3\2\2\2\u0309\u030a\3\2\2\2\u030a\u030b")
        buf.write("\5\6\4\2\u030b\u0322\3\2\2\2\u030c\u030e\5x=\2\u030d\u030c")
        buf.write("\3\2\2\2\u030e\u0311\3\2\2\2\u030f\u030d\3\2\2\2\u030f")
        buf.write("\u0310\3\2\2\2\u0310\u0312\3\2\2\2\u0311\u030f\3\2\2\2")
        buf.write("\u0312\u0314\5\2\2\2\u0313\u0315\5z>\2\u0314\u0313\3\2")
        buf.write("\2\2\u0314\u0315\3\2\2\2\u0315\u0316\3\2\2\2\u0316\u0317")
        buf.write("\5\6\4\2\u0317\u0322\3\2\2\2\u0318\u031a\5x=\2\u0319\u0318")
        buf.write("\3\2\2\2\u031a\u031d\3\2\2\2\u031b\u0319\3\2\2\2\u031b")
        buf.write("\u031c\3\2\2\2\u031c\u031f\3\2\2\2\u031d\u031b\3\2\2\2")
        buf.write("\u031e\u0320\5z>\2\u031f\u031e\3\2\2\2\u031f\u0320\3\2")
        buf.write("\2\2\u0320\u0322\3\2\2\2\u0321\u0300\3\2\2\2\u0321\u030f")
        buf.write("\3\2\2\2\u0321\u031b\3\2\2\2\u0322}\3\2\2\2\u0323\u0326")
        buf.write("\5&\24\2\u0324\u0326\5\u008aF\2\u0325\u0323\3\2\2\2\u0325")
        buf.write("\u0324\3\2\2\2\u0326\u0327\3\2\2\2\u0327\u032d\7\25\2")
        buf.write("\2\u0328\u0329\5\2\2\2\u0329\u032a\5|?\2\u032a\u032b\5")
        buf.write("\6\4\2\u032b\u032e\3\2\2\2\u032c\u032e\5|?\2\u032d\u0328")
        buf.write("\3\2\2\2\u032d\u032c\3\2\2\2\u032e\177\3\2\2\2\u032f\u0331")
        buf.write("\7O\2\2\u0330\u0332\5> \2\u0331\u0330\3\2\2\2\u0331\u0332")
        buf.write("\3\2\2\2\u0332\u0333\3\2\2\2\u0333\u0339\7\25\2\2\u0334")
        buf.write("\u0335\5\2\2\2\u0335\u0336\5\u00acW\2\u0336\u0337\5\6")
        buf.write("\4\2\u0337\u033a\3\2\2\2\u0338\u033a\5\u00acW\2\u0339")
        buf.write("\u0334\3\2\2\2\u0339\u0338\3\2\2\2\u033a\u0081\3\2\2\2")
        buf.write("\u033b\u033d\7U\2\2\u033c\u033e\5&\24\2\u033d\u033c\3")
        buf.write("\2\2\2\u033d\u033e\3\2\2\2\u033e\u0083\3\2\2\2\u033f\u0341")
        buf.write("\7\62\2\2\u0340\u0342\5&\24\2\u0341\u0340\3\2\2\2\u0341")
        buf.write("\u0342\3\2\2\2\u0342\u0085\3\2\2\2\u0343\u0345\7@\2\2")
        buf.write("\u0344\u0346\5&\24\2\u0345\u0344\3\2\2\2\u0345\u0346\3")
        buf.write("\2\2\2\u0346\u0087\3\2\2\2\u0347\u0348\5\u008cG\2\u0348")
        buf.write("\u0089\3\2\2\2\u0349\u034e\5X-\2\u034a\u034e\5Z.\2\u034b")
        buf.write("\u034e\5f\64\2\u034c\u034e\5d\63\2\u034d\u0349\3\2\2\2")
        buf.write("\u034d\u034a\3\2\2\2\u034d\u034b\3\2\2\2\u034d\u034c\3")
        buf.write("\2\2\2\u034e\u008b\3\2\2\2\u034f\u0350\7\f\2\2\u0350\u0351")
        buf.write("\7\26\2\2\u0351\u0353\7X\2\2\u0352\u0354\7\26\2\2\u0353")
        buf.write("\u0352\3\2\2\2\u0353\u0354\3\2\2\2\u0354\u0355\3\2\2\2")
        buf.write("\u0355\u0356\7\r\2\2\u0356\u008d\3\2\2\2\u0357\u035c\5")
        buf.write("R*\2\u0358\u0359\7\25\2\2\u0359\u035b\5\u00aaV\2\u035a")
        buf.write("\u0358\3\2\2\2\u035b\u035e\3\2\2\2\u035c\u035a\3\2\2\2")
        buf.write("\u035c\u035d\3\2\2\2\u035d\u008f\3\2\2\2\u035e\u035c\3")
        buf.write("\2\2\2\u035f\u0360\7\f\2\2\u0360\u0091\3\2\2\2\u0361\u0363")
        buf.write("\5\u009cO\2\u0362\u0361\3\2\2\2\u0363\u0364\3\2\2\2\u0364")
        buf.write("\u0362\3\2\2\2\u0364\u0365\3\2\2\2\u0365\u036f\3\2\2\2")
        buf.write("\u0366\u0368\5\2\2\2\u0367\u0369\5\u009cO\2\u0368\u0367")
        buf.write("\3\2\2\2\u0369\u036a\3\2\2\2\u036a\u0368\3\2\2\2\u036a")
        buf.write("\u036b\3\2\2\2\u036b\u036c\3\2\2\2\u036c\u036d\5\6\4\2")
        buf.write("\u036d\u036f\3\2\2\2\u036e\u0362\3\2\2\2\u036e\u0366\3")
        buf.write("\2\2\2\u036f\u0093\3\2\2\2\u0370\u0372\5\u009aN\2\u0371")
        buf.write("\u0370\3\2\2\2\u0372\u0373\3\2\2\2\u0373\u0371\3\2\2\2")
        buf.write("\u0373\u0374\3\2\2\2\u0374\u037e\3\2\2\2\u0375\u0377\5")
        buf.write("\2\2\2\u0376\u0378\5\u009aN\2\u0377\u0376\3\2\2\2\u0378")
        buf.write("\u0379\3\2\2\2\u0379\u0377\3\2\2\2\u0379\u037a\3\2\2\2")
        buf.write("\u037a\u037b\3\2\2\2\u037b\u037c\5\6\4\2\u037c\u037e\3")
        buf.write("\2\2\2\u037d\u0371\3\2\2\2\u037d\u0375\3\2\2\2\u037e\u0095")
        buf.write("\3\2\2\2\u037f\u0381\5> \2\u0380\u0382\5\"\22\2\u0381")
        buf.write("\u0380\3\2\2\2\u0381\u0382\3\2\2\2\u0382\u0097\3\2\2\2")
        buf.write("\u0383\u0384\7\f\2\2\u0384\u0389\5\u0096L\2\u0385\u0386")
        buf.write("\7\b\2\2\u0386\u0388\5\u0096L\2\u0387\u0385\3\2\2\2\u0388")
        buf.write("\u038b\3\2\2\2\u0389\u0387\3\2\2\2\u0389\u038a\3\2\2\2")
        buf.write("\u038a\u0391\3\2\2\2\u038b\u0389\3\2\2\2\u038c\u038d\5")
        buf.write("\2\2\2\u038d\u038e\7\r\2\2\u038e\u038f\5\6\4\2\u038f\u0392")
        buf.write("\3\2\2\2\u0390\u0392\7\r\2\2\u0391\u038c\3\2\2\2\u0391")
        buf.write("\u0390\3\2\2\2\u0392\u0393\3\2\2\2\u0393\u0395\7\27\2")
        buf.write("\2\u0394\u0396\5\6\4\2\u0395\u0394\3\2\2\2\u0395\u0396")
        buf.write("\3\2\2\2\u0396\u03a0\3\2\2\2\u0397\u039a\5\2\2\2\u0398")
        buf.write("\u039b\5&\24\2\u0399\u039b\5\u008aF\2\u039a\u0398\3\2")
        buf.write("\2\2\u039a\u0399\3\2\2\2\u039b\u03a1\3\2\2\2\u039c\u039f")
        buf.write("\5&\24\2\u039d\u039f\5\u008aF\2\u039e\u039c\3\2\2\2\u039e")
        buf.write("\u039d\3\2\2\2\u039f\u03a1\3\2\2\2\u03a0\u0397\3\2\2\2")
        buf.write("\u03a0\u039e\3\2\2\2\u03a1\u0099\3\2\2\2\u03a2\u03a7\7")
        buf.write("X\2\2\u03a3\u03a4\7\b\2\2\u03a4\u03a6\7X\2\2\u03a5\u03a3")
        buf.write("\3\2\2\2\u03a6\u03a9\3\2\2\2\u03a7\u03a5\3\2\2\2\u03a7")
        buf.write("\u03a8\3\2\2\2\u03a8\u03ac\3\2\2\2\u03a9\u03a7\3\2\2\2")
        buf.write("\u03aa\u03ab\7\25\2\2\u03ab\u03ad\5&\24\2\u03ac\u03aa")
        buf.write("\3\2\2\2\u03ac\u03ad\3\2\2\2\u03ad\u03ae\3\2\2\2\u03ae")
        buf.write("\u03b4\7\27\2\2\u03af\u03b0\5\2\2\2\u03b0\u03b1\5\u008a")
        buf.write("F\2\u03b1\u03b2\5\6\4\2\u03b2\u03b5\3\2\2\2\u03b3\u03b5")
        buf.write("\5\u008aF\2\u03b4\u03af\3\2\2\2\u03b4\u03b3\3\2\2\2\u03b5")
        buf.write("\u009b\3\2\2\2\u03b6\u03b7\5\u009eP\2\u03b7\u009d\3\2")
        buf.write("\2\2\u03b8\u03bd\7X\2\2\u03b9\u03ba\7\b\2\2\u03ba\u03bc")
        buf.write("\7X\2\2\u03bb\u03b9\3\2\2\2\u03bc\u03bf\3\2\2\2\u03bd")
        buf.write("\u03bb\3\2\2\2\u03bd\u03be\3\2\2\2\u03be\u03c1\3\2\2\2")
        buf.write("\u03bf\u03bd\3\2\2\2\u03c0\u03c2\7\b\2\2\u03c1\u03c0\3")
        buf.write("\2\2\2\u03c1\u03c2\3\2\2\2\u03c2\u03cb\3\2\2\2\u03c3\u03c9")
        buf.write("\7\25\2\2\u03c4\u03c5\5\2\2\2\u03c5\u03c6\5&\24\2\u03c6")
        buf.write("\u03c7\5\6\4\2\u03c7\u03ca\3\2\2\2\u03c8\u03ca\5&\24\2")
        buf.write("\u03c9\u03c4\3\2\2\2\u03c9\u03c8\3\2\2\2\u03ca\u03cc\3")
        buf.write("\2\2\2\u03cb\u03c3\3\2\2\2\u03cb\u03cc\3\2\2\2\u03cc\u03d8")
        buf.write("\3\2\2\2\u03cd\u03d6\7\27\2\2\u03ce\u03d1\5\2\2\2\u03cf")
        buf.write("\u03d2\5\u008aF\2\u03d0\u03d2\5&\24\2\u03d1\u03cf\3\2")
        buf.write("\2\2\u03d1\u03d0\3\2\2\2\u03d2\u03d3\3\2\2\2\u03d3\u03d4")
        buf.write("\5\6\4\2\u03d4\u03d7\3\2\2\2\u03d5\u03d7\5\\/\2\u03d6")
        buf.write("\u03ce\3\2\2\2\u03d6\u03d5\3\2\2\2\u03d7\u03d9\3\2\2\2")
        buf.write("\u03d8\u03cd\3\2\2\2\u03d8\u03d9\3\2\2\2\u03d9\u009f\3")
        buf.write("\2\2\2\u03da\u03dd\5\u00a2R\2\u03db\u03dd\5\u00a4S\2\u03dc")
        buf.write("\u03da\3\2\2\2\u03dc\u03db\3\2\2\2\u03dd\u00a1\3\2\2\2")
        buf.write("\u03de\u03e2\5T+\2\u03df\u03e2\5V,\2\u03e0\u03e2\5\u0088")
        buf.write("E\2\u03e1\u03de\3\2\2\2\u03e1\u03df\3\2\2\2\u03e1\u03e0")
        buf.write("\3\2\2\2\u03e2\u00a3\3\2\2\2\u03e3\u03f0\5t;\2\u03e4\u03f0")
        buf.write("\5v<\2\u03e5\u03f0\5\u0080A\2\u03e6\u03f0\5r:\2\u03e7")
        buf.write("\u03e8\t\t\2\2\u03e8\u03f0\5\u008eH\2\u03e9\u03ea\7\24")
        buf.write("\2\2\u03ea\u03f0\5\u0090I\2\u03eb\u03ec\7)\2\2\u03ec\u03f0")
        buf.write("\5\u0094K\2\u03ed\u03ee\t\n\2\2\u03ee\u03f0\5\u0092J\2")
        buf.write("\u03ef\u03e3\3\2\2\2\u03ef\u03e4\3\2\2\2\u03ef\u03e5\3")
        buf.write("\2\2\2\u03ef\u03e6\3\2\2\2\u03ef\u03e7\3\2\2\2\u03ef\u03e9")
        buf.write("\3\2\2\2\u03ef\u03eb\3\2\2\2\u03ef\u03ed\3\2\2\2\u03f0")
        buf.write("\u00a5\3\2\2\2\u03f1\u03f2\7\25\2\2\u03f2\u03f3\5\u00aa")
        buf.write("V\2\u03f3\u00a7\3\2\2\2\u03f4\u03f5\5&\24\2\u03f5\u03f8")
        buf.write("\7\27\2\2\u03f6\u03f9\5\u008aF\2\u03f7\u03f9\5&\24\2\u03f8")
        buf.write("\u03f6\3\2\2\2\u03f8\u03f7\3\2\2\2\u03f9\u03fb\3\2\2\2")
        buf.write("\u03fa\u03fc\5\u00a6T\2\u03fb\u03fa\3\2\2\2\u03fb\u03fc")
        buf.write("\3\2\2\2\u03fc\u00a9\3\2\2\2\u03fd\u03fe\5\2\2\2\u03fe")
        buf.write("\u0405\5\u00a0Q\2\u03ff\u0401\7\t\2\2\u0400\u03ff\3\2")
        buf.write("\2\2\u0400\u0401\3\2\2\2\u0401\u0402\3\2\2\2\u0402\u0404")
        buf.write("\5\u00a0Q\2\u0403\u0400\3\2\2\2\u0404\u0407\3\2\2\2\u0405")
        buf.write("\u0403\3\2\2\2\u0405\u0406\3\2\2\2\u0406\u0408\3\2\2\2")
        buf.write("\u0407\u0405\3\2\2\2\u0408\u0409\5\6\4\2\u0409\u040c\3")
        buf.write("\2\2\2\u040a\u040c\5\u00a0Q\2\u040b\u03fd\3\2\2\2\u040b")
        buf.write("\u040a\3\2\2\2\u040c\u00ab\3\2\2\2\u040d\u0414\5\u00a0")
        buf.write("Q\2\u040e\u0410\7\t\2\2\u040f\u040e\3\2\2\2\u040f\u0410")
        buf.write("\3\2\2\2\u0410\u0411\3\2\2\2\u0411\u0413\5\u00a0Q\2\u0412")
        buf.write("\u040f\3\2\2\2\u0413\u0416\3\2\2\2\u0414\u0412\3\2\2\2")
        buf.write("\u0414\u0415\3\2\2\2\u0415\u00ad\3\2\2\2\u0416\u0414\3")
        buf.write("\2\2\2\u0417\u0419\5\u00acW\2\u0418\u0417\3\2\2\2\u0419")
        buf.write("\u041a\3\2\2\2\u041a\u0418\3\2\2\2\u041a\u041b\3\2\2\2")
        buf.write("\u041b\u00af\3\2\2\2\u041c\u041d\5\u00aeX\2\u041d\u00b1")
        buf.write("\3\2\2\2\u0094\u00b5\u00c5\u00d1\u00e6\u00ef\u00f7\u00ff")
        buf.write("\u0107\u010f\u0117\u011f\u0127\u012f\u0137\u0144\u014e")
        buf.write("\u0150\u0153\u0157\u015d\u015f\u0167\u0172\u017c\u0182")
        buf.write("\u018a\u0192\u0197\u019c\u01a0\u01a7\u01af\u01b6\u01bc")
        buf.write("\u01be\u01c0\u01c6\u01cc\u01d2\u01d8\u01da\u01dc\u01e8")
        buf.write("\u01f1\u01f9\u01ff\u0203\u0208\u0210\u0214\u021e\u0222")
        buf.write("\u022a\u022f\u0236\u023d\u0243\u0248\u024c\u0255\u0257")
        buf.write("\u025d\u025f\u0264\u026b\u026d\u0273\u0275\u0277\u027c")
        buf.write("\u0283\u0288\u0292\u0294\u029e\u02a0\u02a2\u02a6\u02b0")
        buf.write("\u02ba\u02c0\u02c2\u02c6\u02cd\u02d4\u02d7\u02de\u02e1")
        buf.write("\u02e3\u02eb\u02ee\u02f5\u02f8\u02fa\u02fe\u0304\u0308")
        buf.write("\u030f\u0314\u031b\u031f\u0321\u0325\u032d\u0331\u0339")
        buf.write("\u033d\u0341\u0345\u034d\u0353\u035c\u0364\u036a\u036e")
        buf.write("\u0373\u0379\u037d\u0381\u0389\u0391\u0395\u039a\u039e")
        buf.write("\u03a0\u03a7\u03ac\u03b4\u03bd\u03c1\u03c9\u03cb\u03d1")
        buf.write("\u03d6\u03d8\u03dc\u03e1\u03ef\u03f8\u03fb\u0400\u0405")
        buf.write("\u040b\u040f\u0414\u041a")
        return buf.getvalue()


class nim_Parser ( Parser ):

    grammarFileName = "nim_Parser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "' '", "','", "';'", "'('", "')'", "'{'", 
                     "'}'", "'['", "']'", "'interface'", "'enum'", "'object'", 
                     "'concept'", "'type'", "':'", "'.'", "'='", "'in'", 
                     "'of'", "'not'", "'$'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'var'", "'let'", "'const'", "'bind'", "'proc'", "'static'", 
                     "'method'", "'func'", "'mixin'", "'end'", "'except'", 
                     "'return'", "'try'", "'raise'", "'finally'", "'out'", 
                     "'case'", "'if'", "'elif'", "'else'", "'do'", "'while'", 
                     "'iterator'", "'for'", "'continue'", "'break'", "'template'", 
                     "'tuple'", "'using'", "'when'", "'yield'", "'include'", 
                     "'import'", "'from'", "'as'", "'export'", "'ref'", 
                     "'ptr'", "'addr'", "'asm'", "'block'", "'macro'", "'nil'", 
                     "'cast'", "'converter'", "'defer'", "'discard'", "'distinct'", 
                     "'`'" ]

    symbolicNames = [ "<INVALID>", "DOCUMENTATION_COMMENT", "MULTILINE_COMMENT", 
                      "COMMENT", "UNCONDITIONAL_NEWLINE", "WS", "COMMA", 
                      "SEMI_COLON", "OPEN_PAREN", "CLOSE_PAREN", "OPEN_BRACE", 
                      "CLOSE_BRACE", "OPEN_BRACK", "CLOSE_BRACK", "INTERFACE", 
                      "ENUM", "OBJECT", "CONCEPT", "TYPE", "COLON", "DOT", 
                      "EQUALS", "IN", "OF", "NOT", "DOLLAR_SIGN", "OP0", 
                      "OP1", "OP2", "OP3", "OP4", "OP5", "OP6", "OP7", "OP8", 
                      "OP9", "OP10", "VARIABLE", "LET", "CONST", "BIND", 
                      "PROC", "STATIC", "METHOD", "FUNC", "MIXIN", "END", 
                      "EXCEPT", "RETURN", "TRY", "RAISE", "FINALLY", "OUT", 
                      "CASE", "IF", "ELIF", "ELSE", "DO", "WHILE", "ITERATOR", 
                      "FOR", "CONTINUE", "BREAK", "TEMPLATE", "TUPLE", "USING", 
                      "WHEN", "YIELD", "INCLUDE", "IMPORT", "FROM", "AS", 
                      "EXPORT", "REF", "PTR", "ADDR", "ASM", "BLOCK", "MACRO", 
                      "NIL", "CAST", "CONVERTER", "DEFER", "DISCARD", "DISTINCT", 
                      "SYM_HEADER", "IDENTIFIER", "INT_LIT", "INT8_LIT", 
                      "INT16_LIT", "INT32_LIT", "INT64_LIT", "UINT_LIT", 
                      "UINT8_LIT", "UINT16_LIT", "UINT32_LIT", "UINT64_LIT", 
                      "EXP", "FLOAT_LIT", "FLOAT32_LIT", "FLOAT64_LIT", 
                      "CHAR_LIT", "STR_LIT", "TRIPLESTR_LIT", "RSTR_LIT", 
                      "GENERALIZED_STR_LIT", "GENERALIZED_TRIPLESTR_LIT", 
                      "DEDENT", "EXIT", "USELESS_LINE", "USELSSS_INDENTS", 
                      "INDENT", "INDENTS_PASS", "ERROR_INDENT" ]

    RULE_ind = 0
    RULE_optInd = 1
    RULE_ded = 2
    RULE_typeKeyw = 3
    RULE_parKeyw = 4
    RULE_op0 = 5
    RULE_op1 = 6
    RULE_op2 = 7
    RULE_op3 = 8
    RULE_op4 = 9
    RULE_op5 = 10
    RULE_op6 = 11
    RULE_op7 = 12
    RULE_op8 = 13
    RULE_op9 = 14
    RULE_op10 = 15
    RULE_operator = 16
    RULE_prefixOperator = 17
    RULE_simpleExpr = 18
    RULE_assignExpr = 19
    RULE_orExpr = 20
    RULE_andExpr = 21
    RULE_cmpExpr = 22
    RULE_sliceExpr = 23
    RULE_ampExpr = 24
    RULE_plusExpr = 25
    RULE_mulExpr = 26
    RULE_dollarExpr = 27
    RULE_literal = 28
    RULE_generalizedLit = 29
    RULE_symbol = 30
    RULE_symbolBody = 31
    RULE_exprColonEqExpr = 32
    RULE_arrayConstr = 33
    RULE_tupleConstr = 34
    RULE_identOrLiteral = 35
    RULE_identGeneral = 36
    RULE_primarySuffix = 37
    RULE_primary = 38
    RULE_parBody = 39
    RULE_par = 40
    RULE_importStmt = 41
    RULE_fromStmt = 42
    RULE_blockExpr = 43
    RULE_forExpr = 44
    RULE_anyExpr = 45
    RULE_condExprBody = 46
    RULE_condExpr = 47
    RULE_caseExpr = 48
    RULE_whenExpr = 49
    RULE_ifExpr = 50
    RULE_exprList = 51
    RULE_ofBranch = 52
    RULE_ofBranches = 53
    RULE_caseStmt = 54
    RULE_whileStmt = 55
    RULE_whenStmt = 56
    RULE_forStmt = 57
    RULE_ifStmt = 58
    RULE_condStmtElif = 59
    RULE_condStmtElse = 60
    RULE_condStmtBody = 61
    RULE_condStmt = 62
    RULE_blockStmt = 63
    RULE_discardStmt = 64
    RULE_returnStmt = 65
    RULE_breakStmt = 66
    RULE_pragmaStmt = 67
    RULE_expr = 68
    RULE_pragma = 69
    RULE_routine = 70
    RULE_typeSection = 71
    RULE_variableSection = 72
    RULE_constantSection = 73
    RULE_identVis = 74
    RULE_varTuple = 75
    RULE_constant = 76
    RULE_variable = 77
    RULE_idColonEq = 78
    RULE_simple_complexStmt = 79
    RULE_simpleStmt = 80
    RULE_complexStmt = 81
    RULE_colonBody = 82
    RULE_exprStmt = 83
    RULE_substmt = 84
    RULE_stmt = 85
    RULE_module = 86
    RULE_start = 87

    ruleNames =  [ "ind", "optInd", "ded", "typeKeyw", "parKeyw", "op0", 
                   "op1", "op2", "op3", "op4", "op5", "op6", "op7", "op8", 
                   "op9", "op10", "operator", "prefixOperator", "simpleExpr", 
                   "assignExpr", "orExpr", "andExpr", "cmpExpr", "sliceExpr", 
                   "ampExpr", "plusExpr", "mulExpr", "dollarExpr", "literal", 
                   "generalizedLit", "symbol", "symbolBody", "exprColonEqExpr", 
                   "arrayConstr", "tupleConstr", "identOrLiteral", "identGeneral", 
                   "primarySuffix", "primary", "parBody", "par", "importStmt", 
                   "fromStmt", "blockExpr", "forExpr", "anyExpr", "condExprBody", 
                   "condExpr", "caseExpr", "whenExpr", "ifExpr", "exprList", 
                   "ofBranch", "ofBranches", "caseStmt", "whileStmt", "whenStmt", 
                   "forStmt", "ifStmt", "condStmtElif", "condStmtElse", 
                   "condStmtBody", "condStmt", "blockStmt", "discardStmt", 
                   "returnStmt", "breakStmt", "pragmaStmt", "expr", "pragma", 
                   "routine", "typeSection", "variableSection", "constantSection", 
                   "identVis", "varTuple", "constant", "variable", "idColonEq", 
                   "simple_complexStmt", "simpleStmt", "complexStmt", "colonBody", 
                   "exprStmt", "substmt", "stmt", "module", "start" ]

    EOF = Token.EOF
    DOCUMENTATION_COMMENT=1
    MULTILINE_COMMENT=2
    COMMENT=3
    UNCONDITIONAL_NEWLINE=4
    WS=5
    COMMA=6
    SEMI_COLON=7
    OPEN_PAREN=8
    CLOSE_PAREN=9
    OPEN_BRACE=10
    CLOSE_BRACE=11
    OPEN_BRACK=12
    CLOSE_BRACK=13
    INTERFACE=14
    ENUM=15
    OBJECT=16
    CONCEPT=17
    TYPE=18
    COLON=19
    DOT=20
    EQUALS=21
    IN=22
    OF=23
    NOT=24
    DOLLAR_SIGN=25
    OP0=26
    OP1=27
    OP2=28
    OP3=29
    OP4=30
    OP5=31
    OP6=32
    OP7=33
    OP8=34
    OP9=35
    OP10=36
    VARIABLE=37
    LET=38
    CONST=39
    BIND=40
    PROC=41
    STATIC=42
    METHOD=43
    FUNC=44
    MIXIN=45
    END=46
    EXCEPT=47
    RETURN=48
    TRY=49
    RAISE=50
    FINALLY=51
    OUT=52
    CASE=53
    IF=54
    ELIF=55
    ELSE=56
    DO=57
    WHILE=58
    ITERATOR=59
    FOR=60
    CONTINUE=61
    BREAK=62
    TEMPLATE=63
    TUPLE=64
    USING=65
    WHEN=66
    YIELD=67
    INCLUDE=68
    IMPORT=69
    FROM=70
    AS=71
    EXPORT=72
    REF=73
    PTR=74
    ADDR=75
    ASM=76
    BLOCK=77
    MACRO=78
    NIL=79
    CAST=80
    CONVERTER=81
    DEFER=82
    DISCARD=83
    DISTINCT=84
    SYM_HEADER=85
    IDENTIFIER=86
    INT_LIT=87
    INT8_LIT=88
    INT16_LIT=89
    INT32_LIT=90
    INT64_LIT=91
    UINT_LIT=92
    UINT8_LIT=93
    UINT16_LIT=94
    UINT32_LIT=95
    UINT64_LIT=96
    EXP=97
    FLOAT_LIT=98
    FLOAT32_LIT=99
    FLOAT64_LIT=100
    CHAR_LIT=101
    STR_LIT=102
    TRIPLESTR_LIT=103
    RSTR_LIT=104
    GENERALIZED_STR_LIT=105
    GENERALIZED_TRIPLESTR_LIT=106
    DEDENT=107
    EXIT=108
    USELESS_LINE=109
    USELSSS_INDENTS=110
    INDENT=111
    INDENTS_PASS=112
    ERROR_INDENT=113

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None



    parKeyWList = [IF, WHILE, CASE, FOR, BLOCK, CONST, LET, WHEN, VARIABLE]
    literals = [INT_LIT, INT8_LIT, INT16_LIT , INT32_LIT , INT64_LIT, UINT_LIT , UINT8_LIT , 
    UINT16_LIT , UINT32_LIT , UINT64_LIT, FLOAT_LIT , FLOAT32_LIT , FLOAT64_LIT, STR_LIT, 
    RSTR_LIT , TRIPLESTR_LIT, CHAR_LIT, NIL ]
    primarySuffixList = [SYM_HEADER, IDENTIFIER, TYPE] + literals


    class IndContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INDENT(self):
            return self.getToken(nim_Parser.INDENT, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_ind

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInd" ):
                listener.enterInd(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInd" ):
                listener.exitInd(self)




    def ind(self):

        localctx = nim_Parser.IndContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_ind)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 176
            self.match(nim_Parser.INDENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OptIndContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ind(self):
            return self.getTypedRuleContext(nim_Parser.IndContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_optInd

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptInd" ):
                listener.enterOptInd(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptInd" ):
                listener.exitOptInd(self)




    def optInd(self):

        localctx = nim_Parser.OptIndContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_optInd)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 179
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==nim_Parser.INDENT:
                self.state = 178
                self.ind()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DedContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEDENT(self):
            return self.getToken(nim_Parser.DEDENT, 0)

        def EOF(self):
            return self.getToken(nim_Parser.EOF, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_ded

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDed" ):
                listener.enterDed(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDed" ):
                listener.exitDed(self)




    def ded(self):

        localctx = nim_Parser.DedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_ded)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 181
            _la = self._input.LA(1)
            if not(_la==nim_Parser.EOF or _la==nim_Parser.DEDENT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeKeywContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VARIABLE(self):
            return self.getToken(nim_Parser.VARIABLE, 0)

        def REF(self):
            return self.getToken(nim_Parser.REF, 0)

        def PROC(self):
            return self.getToken(nim_Parser.PROC, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_typeKeyw

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeKeyw" ):
                listener.enterTypeKeyw(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeKeyw" ):
                listener.exitTypeKeyw(self)




    def typeKeyw(self):

        localctx = nim_Parser.TypeKeywContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_typeKeyw)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 183
            _la = self._input.LA(1)
            if not(((((_la - 37)) & ~0x3f) == 0 and ((1 << (_la - 37)) & ((1 << (nim_Parser.VARIABLE - 37)) | (1 << (nim_Parser.PROC - 37)) | (1 << (nim_Parser.REF - 37)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParKeywContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DISCARD(self):
            return self.getToken(nim_Parser.DISCARD, 0)

        def IF(self):
            return self.getToken(nim_Parser.IF, 0)

        def WHILE(self):
            return self.getToken(nim_Parser.WHILE, 0)

        def CASE(self):
            return self.getToken(nim_Parser.CASE, 0)

        def FOR(self):
            return self.getToken(nim_Parser.FOR, 0)

        def BLOCK(self):
            return self.getToken(nim_Parser.BLOCK, 0)

        def CONST(self):
            return self.getToken(nim_Parser.CONST, 0)

        def LET(self):
            return self.getToken(nim_Parser.LET, 0)

        def WHEN(self):
            return self.getToken(nim_Parser.WHEN, 0)

        def VARIABLE(self):
            return self.getToken(nim_Parser.VARIABLE, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_parKeyw

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParKeyw" ):
                listener.enterParKeyw(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParKeyw" ):
                listener.exitParKeyw(self)




    def parKeyw(self):

        localctx = nim_Parser.ParKeywContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_parKeyw)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 185
            _la = self._input.LA(1)
            if not(((((_la - 37)) & ~0x3f) == 0 and ((1 << (_la - 37)) & ((1 << (nim_Parser.VARIABLE - 37)) | (1 << (nim_Parser.LET - 37)) | (1 << (nim_Parser.CONST - 37)) | (1 << (nim_Parser.CASE - 37)) | (1 << (nim_Parser.IF - 37)) | (1 << (nim_Parser.WHILE - 37)) | (1 << (nim_Parser.FOR - 37)) | (1 << (nim_Parser.WHEN - 37)) | (1 << (nim_Parser.BLOCK - 37)) | (1 << (nim_Parser.DISCARD - 37)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Op0Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OP0(self):
            return self.getToken(nim_Parser.OP0, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_op0

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOp0" ):
                listener.enterOp0(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOp0" ):
                listener.exitOp0(self)




    def op0(self):

        localctx = nim_Parser.Op0Context(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_op0)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 187
            self.match(nim_Parser.OP0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Op1Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OP1(self):
            return self.getToken(nim_Parser.OP1, 0)

        def EQUALS(self):
            return self.getToken(nim_Parser.EQUALS, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_op1

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOp1" ):
                listener.enterOp1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOp1" ):
                listener.exitOp1(self)




    def op1(self):

        localctx = nim_Parser.Op1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_op1)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 189
            _la = self._input.LA(1)
            if not(_la==nim_Parser.EQUALS or _la==nim_Parser.OP1):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Op2Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OP2(self):
            return self.getToken(nim_Parser.OP2, 0)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.COLON)
            else:
                return self.getToken(nim_Parser.COLON, i)

        def getRuleIndex(self):
            return nim_Parser.RULE_op2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOp2" ):
                listener.enterOp2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOp2" ):
                listener.exitOp2(self)




    def op2(self):

        localctx = nim_Parser.Op2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_op2)
        try:
            self.state = 195
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 191
                self.match(nim_Parser.OP2)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 192
                self.match(nim_Parser.COLON)
                self.state = 193
                self.match(nim_Parser.COLON)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 194
                self.match(nim_Parser.COLON)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Op3Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OP3(self):
            return self.getToken(nim_Parser.OP3, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_op3

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOp3" ):
                listener.enterOp3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOp3" ):
                listener.exitOp3(self)




    def op3(self):

        localctx = nim_Parser.Op3Context(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_op3)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 197
            self.match(nim_Parser.OP3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Op4Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OP4(self):
            return self.getToken(nim_Parser.OP4, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_op4

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOp4" ):
                listener.enterOp4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOp4" ):
                listener.exitOp4(self)




    def op4(self):

        localctx = nim_Parser.Op4Context(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_op4)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 199
            self.match(nim_Parser.OP4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Op5Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OP5(self):
            return self.getToken(nim_Parser.OP5, 0)

        def IN(self):
            return self.getToken(nim_Parser.IN, 0)

        def OF(self):
            return self.getToken(nim_Parser.OF, 0)

        def NOT(self):
            return self.getToken(nim_Parser.NOT, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_op5

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOp5" ):
                listener.enterOp5(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOp5" ):
                listener.exitOp5(self)




    def op5(self):

        localctx = nim_Parser.Op5Context(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_op5)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 201
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nim_Parser.IN) | (1 << nim_Parser.OF) | (1 << nim_Parser.NOT) | (1 << nim_Parser.OP5))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Op6Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OP6(self):
            return self.getToken(nim_Parser.OP6, 0)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.DOT)
            else:
                return self.getToken(nim_Parser.DOT, i)

        def getRuleIndex(self):
            return nim_Parser.RULE_op6

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOp6" ):
                listener.enterOp6(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOp6" ):
                listener.exitOp6(self)




    def op6(self):

        localctx = nim_Parser.Op6Context(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_op6)
        try:
            self.state = 207
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 203
                self.match(nim_Parser.OP6)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 204
                self.match(nim_Parser.DOT)
                self.state = 205
                self.match(nim_Parser.DOT)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 206
                self.match(nim_Parser.DOT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Op7Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OP7(self):
            return self.getToken(nim_Parser.OP7, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_op7

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOp7" ):
                listener.enterOp7(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOp7" ):
                listener.exitOp7(self)




    def op7(self):

        localctx = nim_Parser.Op7Context(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_op7)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 209
            self.match(nim_Parser.OP7)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Op8Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OP8(self):
            return self.getToken(nim_Parser.OP8, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_op8

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOp8" ):
                listener.enterOp8(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOp8" ):
                listener.exitOp8(self)




    def op8(self):

        localctx = nim_Parser.Op8Context(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_op8)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 211
            self.match(nim_Parser.OP8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Op9Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OP9(self):
            return self.getToken(nim_Parser.OP9, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_op9

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOp9" ):
                listener.enterOp9(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOp9" ):
                listener.exitOp9(self)




    def op9(self):

        localctx = nim_Parser.Op9Context(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_op9)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 213
            self.match(nim_Parser.OP9)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Op10Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OP10(self):
            return self.getToken(nim_Parser.OP10, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_op10

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOp10" ):
                listener.enterOp10(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOp10" ):
                listener.exitOp10(self)




    def op10(self):

        localctx = nim_Parser.Op10Context(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_op10)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 215
            self.match(nim_Parser.OP10)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def op0(self):
            return self.getTypedRuleContext(nim_Parser.Op0Context,0)


        def op1(self):
            return self.getTypedRuleContext(nim_Parser.Op1Context,0)


        def op2(self):
            return self.getTypedRuleContext(nim_Parser.Op2Context,0)


        def op3(self):
            return self.getTypedRuleContext(nim_Parser.Op3Context,0)


        def op4(self):
            return self.getTypedRuleContext(nim_Parser.Op4Context,0)


        def op5(self):
            return self.getTypedRuleContext(nim_Parser.Op5Context,0)


        def op6(self):
            return self.getTypedRuleContext(nim_Parser.Op6Context,0)


        def op7(self):
            return self.getTypedRuleContext(nim_Parser.Op7Context,0)


        def op8(self):
            return self.getTypedRuleContext(nim_Parser.Op8Context,0)


        def op9(self):
            return self.getTypedRuleContext(nim_Parser.Op9Context,0)


        def op10(self):
            return self.getTypedRuleContext(nim_Parser.Op10Context,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperator" ):
                listener.enterOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperator" ):
                listener.exitOperator(self)




    def operator(self):

        localctx = nim_Parser.OperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_operator)
        try:
            self.state = 228
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [nim_Parser.OP0]:
                self.enterOuterAlt(localctx, 1)
                self.state = 217
                self.op0()
                pass
            elif token in [nim_Parser.EQUALS, nim_Parser.OP1]:
                self.enterOuterAlt(localctx, 2)
                self.state = 218
                self.op1()
                pass
            elif token in [nim_Parser.COLON, nim_Parser.OP2]:
                self.enterOuterAlt(localctx, 3)
                self.state = 219
                self.op2()
                pass
            elif token in [nim_Parser.OP3]:
                self.enterOuterAlt(localctx, 4)
                self.state = 220
                self.op3()
                pass
            elif token in [nim_Parser.OP4]:
                self.enterOuterAlt(localctx, 5)
                self.state = 221
                self.op4()
                pass
            elif token in [nim_Parser.IN, nim_Parser.OF, nim_Parser.NOT, nim_Parser.OP5]:
                self.enterOuterAlt(localctx, 6)
                self.state = 222
                self.op5()
                pass
            elif token in [nim_Parser.DOT, nim_Parser.OP6]:
                self.enterOuterAlt(localctx, 7)
                self.state = 223
                self.op6()
                pass
            elif token in [nim_Parser.OP7]:
                self.enterOuterAlt(localctx, 8)
                self.state = 224
                self.op7()
                pass
            elif token in [nim_Parser.OP8]:
                self.enterOuterAlt(localctx, 9)
                self.state = 225
                self.op8()
                pass
            elif token in [nim_Parser.OP9]:
                self.enterOuterAlt(localctx, 10)
                self.state = 226
                self.op9()
                pass
            elif token in [nim_Parser.OP10]:
                self.enterOuterAlt(localctx, 11)
                self.state = 227
                self.op10()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PrefixOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def operator(self):
            return self.getTypedRuleContext(nim_Parser.OperatorContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_prefixOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrefixOperator" ):
                listener.enterPrefixOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrefixOperator" ):
                listener.exitPrefixOperator(self)




    def prefixOperator(self):

        localctx = nim_Parser.PrefixOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_prefixOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 230
            self.operator()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SimpleExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.AssignExprContext)
            else:
                return self.getTypedRuleContext(nim_Parser.AssignExprContext,i)


        def OP1(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.OP1)
            else:
                return self.getToken(nim_Parser.OP1, i)

        def getRuleIndex(self):
            return nim_Parser.RULE_simpleExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleExpr" ):
                listener.enterSimpleExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleExpr" ):
                listener.exitSimpleExpr(self)




    def simpleExpr(self):

        localctx = nim_Parser.SimpleExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_simpleExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 232
            self.assignExpr()
            self.state = 237
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,4,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 233
                    self.match(nim_Parser.OP1)
                    self.state = 234
                    self.assignExpr() 
                self.state = 239
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,4,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssignExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def orExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.OrExprContext)
            else:
                return self.getTypedRuleContext(nim_Parser.OrExprContext,i)


        def OP2(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.OP2)
            else:
                return self.getToken(nim_Parser.OP2, i)

        def getRuleIndex(self):
            return nim_Parser.RULE_assignExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignExpr" ):
                listener.enterAssignExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignExpr" ):
                listener.exitAssignExpr(self)




    def assignExpr(self):

        localctx = nim_Parser.AssignExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_assignExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 240
            self.orExpr()
            self.state = 245
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,5,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 241
                    self.match(nim_Parser.OP2)
                    self.state = 242
                    self.orExpr() 
                self.state = 247
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,5,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OrExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def andExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.AndExprContext)
            else:
                return self.getTypedRuleContext(nim_Parser.AndExprContext,i)


        def OP3(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.OP3)
            else:
                return self.getToken(nim_Parser.OP3, i)

        def getRuleIndex(self):
            return nim_Parser.RULE_orExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrExpr" ):
                listener.enterOrExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrExpr" ):
                listener.exitOrExpr(self)




    def orExpr(self):

        localctx = nim_Parser.OrExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_orExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 248
            self.andExpr()
            self.state = 253
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,6,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 249
                    self.match(nim_Parser.OP3)
                    self.state = 250
                    self.andExpr() 
                self.state = 255
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,6,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AndExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def cmpExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.CmpExprContext)
            else:
                return self.getTypedRuleContext(nim_Parser.CmpExprContext,i)


        def OP4(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.OP4)
            else:
                return self.getToken(nim_Parser.OP4, i)

        def getRuleIndex(self):
            return nim_Parser.RULE_andExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAndExpr" ):
                listener.enterAndExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAndExpr" ):
                listener.exitAndExpr(self)




    def andExpr(self):

        localctx = nim_Parser.AndExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_andExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 256
            self.cmpExpr()
            self.state = 261
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,7,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 257
                    self.match(nim_Parser.OP4)
                    self.state = 258
                    self.cmpExpr() 
                self.state = 263
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,7,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CmpExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sliceExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.SliceExprContext)
            else:
                return self.getTypedRuleContext(nim_Parser.SliceExprContext,i)


        def OP5(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.OP5)
            else:
                return self.getToken(nim_Parser.OP5, i)

        def getRuleIndex(self):
            return nim_Parser.RULE_cmpExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCmpExpr" ):
                listener.enterCmpExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCmpExpr" ):
                listener.exitCmpExpr(self)




    def cmpExpr(self):

        localctx = nim_Parser.CmpExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_cmpExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 264
            self.sliceExpr()
            self.state = 269
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,8,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 265
                    self.match(nim_Parser.OP5)
                    self.state = 266
                    self.sliceExpr() 
                self.state = 271
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,8,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SliceExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ampExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.AmpExprContext)
            else:
                return self.getTypedRuleContext(nim_Parser.AmpExprContext,i)


        def OP6(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.OP6)
            else:
                return self.getToken(nim_Parser.OP6, i)

        def getRuleIndex(self):
            return nim_Parser.RULE_sliceExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSliceExpr" ):
                listener.enterSliceExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSliceExpr" ):
                listener.exitSliceExpr(self)




    def sliceExpr(self):

        localctx = nim_Parser.SliceExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_sliceExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 272
            self.ampExpr()
            self.state = 277
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,9,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 273
                    self.match(nim_Parser.OP6)
                    self.state = 274
                    self.ampExpr() 
                self.state = 279
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,9,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AmpExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def plusExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.PlusExprContext)
            else:
                return self.getTypedRuleContext(nim_Parser.PlusExprContext,i)


        def OP7(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.OP7)
            else:
                return self.getToken(nim_Parser.OP7, i)

        def getRuleIndex(self):
            return nim_Parser.RULE_ampExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAmpExpr" ):
                listener.enterAmpExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAmpExpr" ):
                listener.exitAmpExpr(self)




    def ampExpr(self):

        localctx = nim_Parser.AmpExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_ampExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 280
            self.plusExpr()
            self.state = 285
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,10,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 281
                    self.match(nim_Parser.OP7)
                    self.state = 282
                    self.plusExpr() 
                self.state = 287
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,10,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PlusExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mulExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.MulExprContext)
            else:
                return self.getTypedRuleContext(nim_Parser.MulExprContext,i)


        def OP8(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.OP8)
            else:
                return self.getToken(nim_Parser.OP8, i)

        def getRuleIndex(self):
            return nim_Parser.RULE_plusExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlusExpr" ):
                listener.enterPlusExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlusExpr" ):
                listener.exitPlusExpr(self)




    def plusExpr(self):

        localctx = nim_Parser.PlusExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_plusExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 288
            self.mulExpr()
            self.state = 293
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,11,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 289
                    self.match(nim_Parser.OP8)
                    self.state = 290
                    self.mulExpr() 
                self.state = 295
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,11,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MulExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dollarExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.DollarExprContext)
            else:
                return self.getTypedRuleContext(nim_Parser.DollarExprContext,i)


        def OP9(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.OP9)
            else:
                return self.getToken(nim_Parser.OP9, i)

        def getRuleIndex(self):
            return nim_Parser.RULE_mulExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMulExpr" ):
                listener.enterMulExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMulExpr" ):
                listener.exitMulExpr(self)




    def mulExpr(self):

        localctx = nim_Parser.MulExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_mulExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 296
            self.dollarExpr()
            self.state = 301
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,12,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 297
                    self.match(nim_Parser.OP9)
                    self.state = 298
                    self.dollarExpr() 
                self.state = 303
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,12,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DollarExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primary(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.PrimaryContext)
            else:
                return self.getTypedRuleContext(nim_Parser.PrimaryContext,i)


        def OP10(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.OP10)
            else:
                return self.getToken(nim_Parser.OP10, i)

        def getRuleIndex(self):
            return nim_Parser.RULE_dollarExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDollarExpr" ):
                listener.enterDollarExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDollarExpr" ):
                listener.exitDollarExpr(self)




    def dollarExpr(self):

        localctx = nim_Parser.DollarExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_dollarExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 304
            self.primary()
            self.state = 309
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,13,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 305
                    self.match(nim_Parser.OP10)
                    self.state = 306
                    self.primary() 
                self.state = 311
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,13,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT_LIT(self):
            return self.getToken(nim_Parser.INT_LIT, 0)

        def INT8_LIT(self):
            return self.getToken(nim_Parser.INT8_LIT, 0)

        def INT16_LIT(self):
            return self.getToken(nim_Parser.INT16_LIT, 0)

        def INT32_LIT(self):
            return self.getToken(nim_Parser.INT32_LIT, 0)

        def INT64_LIT(self):
            return self.getToken(nim_Parser.INT64_LIT, 0)

        def UINT_LIT(self):
            return self.getToken(nim_Parser.UINT_LIT, 0)

        def UINT8_LIT(self):
            return self.getToken(nim_Parser.UINT8_LIT, 0)

        def UINT16_LIT(self):
            return self.getToken(nim_Parser.UINT16_LIT, 0)

        def UINT32_LIT(self):
            return self.getToken(nim_Parser.UINT32_LIT, 0)

        def UINT64_LIT(self):
            return self.getToken(nim_Parser.UINT64_LIT, 0)

        def FLOAT_LIT(self):
            return self.getToken(nim_Parser.FLOAT_LIT, 0)

        def FLOAT32_LIT(self):
            return self.getToken(nim_Parser.FLOAT32_LIT, 0)

        def FLOAT64_LIT(self):
            return self.getToken(nim_Parser.FLOAT64_LIT, 0)

        def STR_LIT(self):
            return self.getToken(nim_Parser.STR_LIT, 0)

        def RSTR_LIT(self):
            return self.getToken(nim_Parser.RSTR_LIT, 0)

        def TRIPLESTR_LIT(self):
            return self.getToken(nim_Parser.TRIPLESTR_LIT, 0)

        def CHAR_LIT(self):
            return self.getToken(nim_Parser.CHAR_LIT, 0)

        def NIL(self):
            return self.getToken(nim_Parser.NIL, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral" ):
                listener.enterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral" ):
                listener.exitLiteral(self)




    def literal(self):

        localctx = nim_Parser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 312
            _la = self._input.LA(1)
            if not(((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & ((1 << (nim_Parser.NIL - 79)) | (1 << (nim_Parser.INT_LIT - 79)) | (1 << (nim_Parser.INT8_LIT - 79)) | (1 << (nim_Parser.INT16_LIT - 79)) | (1 << (nim_Parser.INT32_LIT - 79)) | (1 << (nim_Parser.INT64_LIT - 79)) | (1 << (nim_Parser.UINT_LIT - 79)) | (1 << (nim_Parser.UINT8_LIT - 79)) | (1 << (nim_Parser.UINT16_LIT - 79)) | (1 << (nim_Parser.UINT32_LIT - 79)) | (1 << (nim_Parser.UINT64_LIT - 79)) | (1 << (nim_Parser.FLOAT_LIT - 79)) | (1 << (nim_Parser.FLOAT32_LIT - 79)) | (1 << (nim_Parser.FLOAT64_LIT - 79)) | (1 << (nim_Parser.CHAR_LIT - 79)) | (1 << (nim_Parser.STR_LIT - 79)) | (1 << (nim_Parser.TRIPLESTR_LIT - 79)) | (1 << (nim_Parser.RSTR_LIT - 79)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GeneralizedLitContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GENERALIZED_STR_LIT(self):
            return self.getToken(nim_Parser.GENERALIZED_STR_LIT, 0)

        def GENERALIZED_TRIPLESTR_LIT(self):
            return self.getToken(nim_Parser.GENERALIZED_TRIPLESTR_LIT, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_generalizedLit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneralizedLit" ):
                listener.enterGeneralizedLit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneralizedLit" ):
                listener.exitGeneralizedLit(self)




    def generalizedLit(self):

        localctx = nim_Parser.GeneralizedLitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_generalizedLit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 314
            _la = self._input.LA(1)
            if not(_la==nim_Parser.GENERALIZED_STR_LIT or _la==nim_Parser.GENERALIZED_TRIPLESTR_LIT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SymbolContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbolBody(self):
            return self.getTypedRuleContext(nim_Parser.SymbolBodyContext,0)


        def SYM_HEADER(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.SYM_HEADER)
            else:
                return self.getToken(nim_Parser.SYM_HEADER, i)

        def IDENTIFIER(self):
            return self.getToken(nim_Parser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_symbol

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSymbol" ):
                listener.enterSymbol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSymbol" ):
                listener.exitSymbol(self)




    def symbol(self):

        localctx = nim_Parser.SymbolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_symbol)
        try:
            self.state = 322
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 316
                self.symbolBody()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 317
                self.match(nim_Parser.SYM_HEADER)
                self.state = 318
                self.symbolBody()
                self.state = 319
                self.match(nim_Parser.SYM_HEADER)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 321
                self.match(nim_Parser.IDENTIFIER)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SymbolBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(nim_Parser.IDENTIFIER, 0)

        def literal(self):
            return self.getTypedRuleContext(nim_Parser.LiteralContext,0)


        def operator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.OperatorContext)
            else:
                return self.getTypedRuleContext(nim_Parser.OperatorContext,i)


        def OPEN_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.OPEN_PAREN)
            else:
                return self.getToken(nim_Parser.OPEN_PAREN, i)

        def CLOSE_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.CLOSE_PAREN)
            else:
                return self.getToken(nim_Parser.CLOSE_PAREN, i)

        def OPEN_BRACK(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.OPEN_BRACK)
            else:
                return self.getToken(nim_Parser.OPEN_BRACK, i)

        def CLOSE_BRACK(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.CLOSE_BRACK)
            else:
                return self.getToken(nim_Parser.CLOSE_BRACK, i)

        def EQUALS(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.EQUALS)
            else:
                return self.getToken(nim_Parser.EQUALS, i)

        def getRuleIndex(self):
            return nim_Parser.RULE_symbolBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSymbolBody" ):
                listener.enterSymbolBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSymbolBody" ):
                listener.exitSymbolBody(self)




    def symbolBody(self):

        localctx = nim_Parser.SymbolBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_symbolBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 337
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,17,self._ctx)
            if la_ == 1:
                self.state = 324
                self.match(nim_Parser.IDENTIFIER)
                pass

            elif la_ == 2:
                self.state = 325
                self.literal()
                pass

            elif la_ == 3:
                self.state = 334
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,16,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 332
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
                        if la_ == 1:
                            self.state = 326
                            self.operator()
                            pass

                        elif la_ == 2:
                            self.state = 327
                            self.match(nim_Parser.OPEN_PAREN)
                            pass

                        elif la_ == 3:
                            self.state = 328
                            self.match(nim_Parser.CLOSE_PAREN)
                            pass

                        elif la_ == 4:
                            self.state = 329
                            self.match(nim_Parser.OPEN_BRACK)
                            pass

                        elif la_ == 5:
                            self.state = 330
                            self.match(nim_Parser.CLOSE_BRACK)
                            pass

                        elif la_ == 6:
                            self.state = 331
                            self.match(nim_Parser.EQUALS)
                            pass

                 
                    self.state = 336
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,16,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExprColonEqExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.ExprContext)
            else:
                return self.getTypedRuleContext(nim_Parser.ExprContext,i)


        def simpleExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.SimpleExprContext)
            else:
                return self.getTypedRuleContext(nim_Parser.SimpleExprContext,i)


        def COLON(self):
            return self.getToken(nim_Parser.COLON, 0)

        def EQUALS(self):
            return self.getToken(nim_Parser.EQUALS, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_exprColonEqExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprColonEqExpr" ):
                listener.enterExprColonEqExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprColonEqExpr" ):
                listener.exitExprColonEqExpr(self)




    def exprColonEqExpr(self):

        localctx = nim_Parser.ExprColonEqExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_exprColonEqExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 341
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
            if la_ == 1:
                self.state = 339
                self.expr()
                pass

            elif la_ == 2:
                self.state = 340
                self.simpleExpr()
                pass


            self.state = 349
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [nim_Parser.COLON]:
                self.state = 343
                self.match(nim_Parser.COLON)
                pass
            elif token in [nim_Parser.EQUALS]:
                self.state = 344
                self.match(nim_Parser.EQUALS)
                self.state = 347
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,19,self._ctx)
                if la_ == 1:
                    self.state = 345
                    self.expr()
                    pass

                elif la_ == 2:
                    self.state = 346
                    self.simpleExpr()
                    pass


                pass
            elif token in [nim_Parser.COMMA, nim_Parser.CLOSE_PAREN, nim_Parser.CLOSE_BRACK]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArrayConstrContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACK(self):
            return self.getToken(nim_Parser.OPEN_BRACK, 0)

        def exprColonEqExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.ExprColonEqExprContext)
            else:
                return self.getTypedRuleContext(nim_Parser.ExprColonEqExprContext,i)


        def CLOSE_BRACK(self):
            return self.getToken(nim_Parser.CLOSE_BRACK, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.COMMA)
            else:
                return self.getToken(nim_Parser.COMMA, i)

        def getRuleIndex(self):
            return nim_Parser.RULE_arrayConstr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayConstr" ):
                listener.enterArrayConstr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayConstr" ):
                listener.exitArrayConstr(self)




    def arrayConstr(self):

        localctx = nim_Parser.ArrayConstrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_arrayConstr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 351
            self.match(nim_Parser.OPEN_BRACK)
            self.state = 352
            self.exprColonEqExpr()
            self.state = 357
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==nim_Parser.COMMA:
                self.state = 353
                self.match(nim_Parser.COMMA)
                self.state = 354
                self.exprColonEqExpr()
                self.state = 359
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 360
            self.match(nim_Parser.CLOSE_BRACK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TupleConstrContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(nim_Parser.OPEN_PAREN, 0)

        def exprColonEqExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.ExprColonEqExprContext)
            else:
                return self.getTypedRuleContext(nim_Parser.ExprColonEqExprContext,i)


        def CLOSE_PAREN(self):
            return self.getToken(nim_Parser.CLOSE_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.COMMA)
            else:
                return self.getToken(nim_Parser.COMMA, i)

        def getRuleIndex(self):
            return nim_Parser.RULE_tupleConstr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTupleConstr" ):
                listener.enterTupleConstr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTupleConstr" ):
                listener.exitTupleConstr(self)




    def tupleConstr(self):

        localctx = nim_Parser.TupleConstrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_tupleConstr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 362
            self.match(nim_Parser.OPEN_PAREN)
            self.state = 363
            self.exprColonEqExpr()
            self.state = 368
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==nim_Parser.COMMA:
                self.state = 364
                self.match(nim_Parser.COMMA)
                self.state = 365
                self.exprColonEqExpr()
                self.state = 370
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 371
            self.match(nim_Parser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IdentOrLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def generalizedLit(self):
            return self.getTypedRuleContext(nim_Parser.GeneralizedLitContext,0)


        def symbol(self):
            return self.getTypedRuleContext(nim_Parser.SymbolContext,0)


        def literal(self):
            return self.getTypedRuleContext(nim_Parser.LiteralContext,0)


        def par(self):
            return self.getTypedRuleContext(nim_Parser.ParContext,0)


        def arrayConstr(self):
            return self.getTypedRuleContext(nim_Parser.ArrayConstrContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_identOrLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentOrLiteral" ):
                listener.enterIdentOrLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentOrLiteral" ):
                listener.exitIdentOrLiteral(self)




    def identOrLiteral(self):

        localctx = nim_Parser.IdentOrLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_identOrLiteral)
        try:
            self.state = 378
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,23,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 373
                self.generalizedLit()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 374
                self.symbol()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 375
                self.literal()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 376
                self.par()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 377
                self.arrayConstr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IdentGeneralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def generalizedLit(self):
            return self.getTypedRuleContext(nim_Parser.GeneralizedLitContext,0)


        def symbol(self):
            return self.getTypedRuleContext(nim_Parser.SymbolContext,0)


        def par(self):
            return self.getTypedRuleContext(nim_Parser.ParContext,0)


        def arrayConstr(self):
            return self.getTypedRuleContext(nim_Parser.ArrayConstrContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_identGeneral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentGeneral" ):
                listener.enterIdentGeneral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentGeneral" ):
                listener.exitIdentGeneral(self)




    def identGeneral(self):

        localctx = nim_Parser.IdentGeneralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_identGeneral)
        try:
            self.state = 384
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,24,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 380
                self.generalizedLit()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 381
                self.symbol()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 382
                self.par()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 383
                self.arrayConstr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PrimarySuffixContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(nim_Parser.OPEN_PAREN, 0)

        def exprColonEqExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.ExprColonEqExprContext)
            else:
                return self.getTypedRuleContext(nim_Parser.ExprColonEqExprContext,i)


        def CLOSE_PAREN(self):
            return self.getToken(nim_Parser.CLOSE_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.COMMA)
            else:
                return self.getToken(nim_Parser.COMMA, i)

        def DOT(self):
            return self.getToken(nim_Parser.DOT, 0)

        def symbol(self):
            return self.getTypedRuleContext(nim_Parser.SymbolContext,0)


        def generalizedLit(self):
            return self.getTypedRuleContext(nim_Parser.GeneralizedLitContext,0)


        def OPEN_BRACK(self):
            return self.getToken(nim_Parser.OPEN_BRACK, 0)

        def CLOSE_BRACK(self):
            return self.getToken(nim_Parser.CLOSE_BRACK, 0)

        def simpleExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.SimpleExprContext)
            else:
                return self.getTypedRuleContext(nim_Parser.SimpleExprContext,i)


        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.ExprContext)
            else:
                return self.getTypedRuleContext(nim_Parser.ExprContext,i)


        def getRuleIndex(self):
            return nim_Parser.RULE_primarySuffix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimarySuffix" ):
                listener.enterPrimarySuffix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimarySuffix" ):
                listener.exitPrimarySuffix(self)




    def primarySuffix(self):

        localctx = nim_Parser.PrimarySuffixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_primarySuffix)
        self._la = 0 # Token type
        try:
            self.state = 421
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 386
                self.match(nim_Parser.OPEN_PAREN)
                self.state = 387
                self.exprColonEqExpr()
                self.state = 392
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==nim_Parser.COMMA:
                    self.state = 388
                    self.match(nim_Parser.COMMA)
                    self.state = 389
                    self.exprColonEqExpr()
                    self.state = 394
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 395
                self.match(nim_Parser.CLOSE_PAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 397
                self.match(nim_Parser.DOT)
                self.state = 398
                self.symbol()
                self.state = 400
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,26,self._ctx)
                if la_ == 1:
                    self.state = 399
                    self.generalizedLit()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 402
                self.match(nim_Parser.OPEN_BRACK)
                self.state = 405
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
                if la_ == 1:
                    self.state = 403
                    self.simpleExpr()
                    pass

                elif la_ == 2:
                    self.state = 404
                    self.expr()
                    pass


                self.state = 414
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==nim_Parser.COMMA:
                    self.state = 407
                    self.match(nim_Parser.COMMA)
                    self.state = 410
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
                    if la_ == 1:
                        self.state = 408
                        self.simpleExpr()
                        pass

                    elif la_ == 2:
                        self.state = 409
                        self.expr()
                        pass


                    self.state = 416
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 417
                self.match(nim_Parser.CLOSE_BRACK)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 419
                if not self._input.LT(1).type in self.primarySuffixList:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self._input.LT(1).type in self.primarySuffixList")
                self.state = 420
                self.expr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PrimaryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleExpr(self):
            return self.getTypedRuleContext(nim_Parser.SimpleExprContext,0)


        def typeKeyw(self):
            return self.getTypedRuleContext(nim_Parser.TypeKeywContext,0)


        def prefixOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.PrefixOperatorContext)
            else:
                return self.getTypedRuleContext(nim_Parser.PrefixOperatorContext,i)


        def identOrLiteral(self):
            return self.getTypedRuleContext(nim_Parser.IdentOrLiteralContext,0)


        def primarySuffix(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.PrimarySuffixContext)
            else:
                return self.getTypedRuleContext(nim_Parser.PrimarySuffixContext,i)


        def getRuleIndex(self):
            return nim_Parser.RULE_primary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimary" ):
                listener.enterPrimary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimary" ):
                listener.exitPrimary(self)




    def primary(self):

        localctx = nim_Parser.PrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_primary)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 446
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
            if la_ == 1:
                self.state = 423
                self.typeKeyw()
                self.state = 424
                self.simpleExpr()
                pass

            elif la_ == 2:
                self.state = 429
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,31,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 426
                        self.prefixOperator() 
                    self.state = 431
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,31,self._ctx)

                self.state = 444
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
                if la_ == 1:
                    self.state = 432
                    self.identOrLiteral()
                    self.state = 436
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,32,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 433
                            self.primarySuffix() 
                        self.state = 438
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,32,self._ctx)

                    pass

                elif la_ == 2:
                    self.state = 440 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 439
                            self.primarySuffix()

                        else:
                            raise NoViableAltException(self)
                        self.state = 442 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,33,self._ctx)

                    pass


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_complexStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.Simple_complexStmtContext)
            else:
                return self.getTypedRuleContext(nim_Parser.Simple_complexStmtContext,i)


        def expr(self):
            return self.getTypedRuleContext(nim_Parser.ExprContext,0)


        def COLON(self):
            return self.getToken(nim_Parser.COLON, 0)

        def EQUALS(self):
            return self.getToken(nim_Parser.EQUALS, 0)

        def SEMI_COLON(self):
            return self.getToken(nim_Parser.SEMI_COLON, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.COMMA)
            else:
                return self.getToken(nim_Parser.COMMA, i)

        def exprColonEqExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.ExprColonEqExprContext)
            else:
                return self.getTypedRuleContext(nim_Parser.ExprColonEqExprContext,i)


        def getRuleIndex(self):
            return nim_Parser.RULE_parBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParBody" ):
                listener.enterParBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParBody" ):
                listener.exitParBody(self)




    def parBody(self):

        localctx = nim_Parser.ParBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_parBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 474
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
            if la_ == 1:
                self.state = 448
                if not self._input.LT(1).type in self.parKeyWList:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self._input.LT(1).type in self.parKeyWList")
                self.state = 449
                self.simple_complexStmt()
                self.state = 452
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nim_Parser.SEMI_COLON:
                    self.state = 450
                    self.match(nim_Parser.SEMI_COLON)
                    self.state = 451
                    self.simple_complexStmt()


                pass

            elif la_ == 2:
                self.state = 454
                self.expr()
                pass

            elif la_ == 3:
                self.state = 458
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [nim_Parser.COLON]:
                    self.state = 455
                    self.match(nim_Parser.COLON)
                    pass
                elif token in [nim_Parser.EQUALS]:
                    self.state = 456
                    self.match(nim_Parser.EQUALS)

                    self.state = 457
                    self.expr()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 472
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [nim_Parser.COMMA]:
                    self.state = 462 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 460
                        self.match(nim_Parser.COMMA)
                        self.state = 461
                        self.exprColonEqExpr()
                        self.state = 464 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==nim_Parser.COMMA):
                            break

                    pass
                elif token in [nim_Parser.SEMI_COLON]:
                    self.state = 466
                    self.match(nim_Parser.SEMI_COLON)
                    self.state = 468 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 467
                        self.simple_complexStmt()
                        self.state = 470 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nim_Parser.OPEN_BRACE) | (1 << nim_Parser.TYPE) | (1 << nim_Parser.VARIABLE) | (1 << nim_Parser.LET) | (1 << nim_Parser.CONST) | (1 << nim_Parser.PROC) | (1 << nim_Parser.IF) | (1 << nim_Parser.FOR) | (1 << nim_Parser.TEMPLATE))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (nim_Parser.WHEN - 66)) | (1 << (nim_Parser.IMPORT - 66)) | (1 << (nim_Parser.FROM - 66)) | (1 << (nim_Parser.BLOCK - 66)) | (1 << (nim_Parser.MACRO - 66)))) != 0)):
                            break

                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(nim_Parser.OPEN_PAREN, 0)

        def parBody(self):
            return self.getTypedRuleContext(nim_Parser.ParBodyContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(nim_Parser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_par

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPar" ):
                listener.enterPar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPar" ):
                listener.exitPar(self)




    def par(self):

        localctx = nim_Parser.ParContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_par)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 476
            self.match(nim_Parser.OPEN_PAREN)
            self.state = 477
            self.parBody()
            self.state = 478
            self.match(nim_Parser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ImportStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPORT(self):
            return self.getToken(nim_Parser.IMPORT, 0)

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.IDENTIFIER)
            else:
                return self.getToken(nim_Parser.IDENTIFIER, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.COMMA)
            else:
                return self.getToken(nim_Parser.COMMA, i)

        def getRuleIndex(self):
            return nim_Parser.RULE_importStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportStmt" ):
                listener.enterImportStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportStmt" ):
                listener.exitImportStmt(self)




    def importStmt(self):

        localctx = nim_Parser.ImportStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_importStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 480
            self.match(nim_Parser.IMPORT)
            self.state = 481
            self.match(nim_Parser.IDENTIFIER)
            self.state = 486
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,42,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 482
                    self.match(nim_Parser.COMMA)
                    self.state = 483
                    self.match(nim_Parser.IDENTIFIER) 
                self.state = 488
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,42,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FromStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(nim_Parser.FROM, 0)

        def IDENTIFIER(self):
            return self.getToken(nim_Parser.IDENTIFIER, 0)

        def importStmt(self):
            return self.getTypedRuleContext(nim_Parser.ImportStmtContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_fromStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFromStmt" ):
                listener.enterFromStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFromStmt" ):
                listener.exitFromStmt(self)




    def fromStmt(self):

        localctx = nim_Parser.FromStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_fromStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 489
            self.match(nim_Parser.FROM)
            self.state = 490
            self.match(nim_Parser.IDENTIFIER)
            self.state = 491
            self.importStmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BlockExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BLOCK(self):
            return self.getToken(nim_Parser.BLOCK, 0)

        def COLON(self):
            return self.getToken(nim_Parser.COLON, 0)

        def stmt(self):
            return self.getTypedRuleContext(nim_Parser.StmtContext,0)


        def symbol(self):
            return self.getTypedRuleContext(nim_Parser.SymbolContext,0)


        def ind(self):
            return self.getTypedRuleContext(nim_Parser.IndContext,0)


        def ded(self):
            return self.getTypedRuleContext(nim_Parser.DedContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_blockExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockExpr" ):
                listener.enterBlockExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockExpr" ):
                listener.exitBlockExpr(self)




    def blockExpr(self):

        localctx = nim_Parser.BlockExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_blockExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 493
            self.match(nim_Parser.BLOCK)
            self.state = 495
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
            if la_ == 1:
                self.state = 494
                self.symbol()


            self.state = 497
            self.match(nim_Parser.COLON)
            self.state = 503
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [nim_Parser.OPEN_BRACE, nim_Parser.TYPE, nim_Parser.VARIABLE, nim_Parser.LET, nim_Parser.CONST, nim_Parser.PROC, nim_Parser.IF, nim_Parser.FOR, nim_Parser.TEMPLATE, nim_Parser.WHEN, nim_Parser.IMPORT, nim_Parser.FROM, nim_Parser.BLOCK, nim_Parser.MACRO]:
                self.state = 498
                self.stmt()
                pass
            elif token in [nim_Parser.INDENT]:
                self.state = 499
                self.ind()
                self.state = 500
                self.stmt()
                self.state = 501
                self.ded()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ForExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def forStmt(self):
            return self.getTypedRuleContext(nim_Parser.ForStmtContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_forExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForExpr" ):
                listener.enterForExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForExpr" ):
                listener.exitForExpr(self)




    def forExpr(self):

        localctx = nim_Parser.ForExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_forExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 505
            self.forStmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AnyExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleExpr(self):
            return self.getTypedRuleContext(nim_Parser.SimpleExprContext,0)


        def expr(self):
            return self.getTypedRuleContext(nim_Parser.ExprContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_anyExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnyExpr" ):
                listener.enterAnyExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnyExpr" ):
                listener.exitAnyExpr(self)




    def anyExpr(self):

        localctx = nim_Parser.AnyExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_anyExpr)
        try:
            self.state = 509
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,45,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 507
                self.simpleExpr()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 508
                self.expr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CondExprBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.SimpleExprContext)
            else:
                return self.getTypedRuleContext(nim_Parser.SimpleExprContext,i)


        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.ExprContext)
            else:
                return self.getTypedRuleContext(nim_Parser.ExprContext,i)


        def ELSE(self):
            return self.getToken(nim_Parser.ELSE, 0)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.COLON)
            else:
                return self.getToken(nim_Parser.COLON, i)

        def ELIF(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.ELIF)
            else:
                return self.getToken(nim_Parser.ELIF, i)

        def ind(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.IndContext)
            else:
                return self.getTypedRuleContext(nim_Parser.IndContext,i)


        def andExpr(self):
            return self.getTypedRuleContext(nim_Parser.AndExprContext,0)


        def ded(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.DedContext)
            else:
                return self.getTypedRuleContext(nim_Parser.DedContext,i)


        def anyExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.AnyExprContext)
            else:
                return self.getTypedRuleContext(nim_Parser.AnyExprContext,i)


        def getRuleIndex(self):
            return nim_Parser.RULE_condExprBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondExprBody" ):
                listener.enterCondExprBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondExprBody" ):
                listener.exitCondExprBody(self)




    def condExprBody(self):

        localctx = nim_Parser.CondExprBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_condExprBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 513
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
            if la_ == 1:
                self.state = 511
                self.simpleExpr()
                pass

            elif la_ == 2:
                self.state = 512
                self.expr()
                pass


            self.state = 530
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==nim_Parser.ELIF:
                self.state = 515
                self.match(nim_Parser.ELIF)
                self.state = 518
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
                if la_ == 1:
                    self.state = 516
                    self.expr()
                    pass

                elif la_ == 2:
                    self.state = 517
                    self.simpleExpr()
                    pass


                self.state = 520
                self.match(nim_Parser.COLON)
                self.state = 526
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
                if la_ == 1:
                    self.state = 521
                    self.ind()
                    self.state = 522
                    self.anyExpr()
                    self.state = 523
                    self.ded()
                    pass

                elif la_ == 2:
                    self.state = 525
                    self.anyExpr()
                    pass


                self.state = 532
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 533
            self.match(nim_Parser.ELSE)
            self.state = 534
            self.match(nim_Parser.COLON)
            self.state = 540
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
            if la_ == 1:
                self.state = 535
                self.ind()
                self.state = 536
                self.andExpr()
                self.state = 537
                self.ded()
                pass

            elif la_ == 2:
                self.state = 539
                self.anyExpr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CondExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(nim_Parser.COLON, 0)

        def simpleExpr(self):
            return self.getTypedRuleContext(nim_Parser.SimpleExprContext,0)


        def expr(self):
            return self.getTypedRuleContext(nim_Parser.ExprContext,0)


        def ind(self):
            return self.getTypedRuleContext(nim_Parser.IndContext,0)


        def condExprBody(self):
            return self.getTypedRuleContext(nim_Parser.CondExprBodyContext,0)


        def ded(self):
            return self.getTypedRuleContext(nim_Parser.DedContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_condExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondExpr" ):
                listener.enterCondExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondExpr" ):
                listener.exitCondExpr(self)




    def condExpr(self):

        localctx = nim_Parser.CondExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_condExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 544
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
            if la_ == 1:
                self.state = 542
                self.simpleExpr()
                pass

            elif la_ == 2:
                self.state = 543
                self.expr()
                pass


            self.state = 546
            self.match(nim_Parser.COLON)
            self.state = 552
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
            if la_ == 1:
                self.state = 547
                self.ind()
                self.state = 548
                self.condExprBody()
                self.state = 549
                self.ded()
                pass

            elif la_ == 2:
                self.state = 551
                self.condExprBody()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CaseExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(nim_Parser.CASE, 0)

        def simpleExpr(self):
            return self.getTypedRuleContext(nim_Parser.SimpleExprContext,0)


        def expr(self):
            return self.getTypedRuleContext(nim_Parser.ExprContext,0)


        def ofBranches(self):
            return self.getTypedRuleContext(nim_Parser.OfBranchesContext,0)


        def ind(self):
            return self.getTypedRuleContext(nim_Parser.IndContext,0)


        def ded(self):
            return self.getTypedRuleContext(nim_Parser.DedContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_caseExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseExpr" ):
                listener.enterCaseExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseExpr" ):
                listener.exitCaseExpr(self)




    def caseExpr(self):

        localctx = nim_Parser.CaseExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_caseExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 554
            self.match(nim_Parser.CASE)
            self.state = 557
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,53,self._ctx)
            if la_ == 1:
                self.state = 555
                self.simpleExpr()
                pass

            elif la_ == 2:
                self.state = 556
                self.expr()
                pass


            self.state = 564
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [nim_Parser.INDENT]:
                self.state = 559
                self.ind()
                self.state = 560
                self.ofBranches()
                self.state = 561
                self.ded()
                pass
            elif token in [nim_Parser.OF]:
                self.state = 563
                self.ofBranches()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class WhenExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(nim_Parser.WHEN, 0)

        def condExpr(self):
            return self.getTypedRuleContext(nim_Parser.CondExprContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_whenExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhenExpr" ):
                listener.enterWhenExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhenExpr" ):
                listener.exitWhenExpr(self)




    def whenExpr(self):

        localctx = nim_Parser.WhenExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_whenExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 566
            self.match(nim_Parser.WHEN)
            self.state = 567
            self.condExpr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IfExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(nim_Parser.IF, 0)

        def condExpr(self):
            return self.getTypedRuleContext(nim_Parser.CondExprContext,0)


        def NOT(self):
            return self.getToken(nim_Parser.NOT, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_ifExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfExpr" ):
                listener.enterIfExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfExpr" ):
                listener.exitIfExpr(self)




    def ifExpr(self):

        localctx = nim_Parser.IfExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_ifExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 569
            self.match(nim_Parser.IF)
            self.state = 571
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,55,self._ctx)
            if la_ == 1:
                self.state = 570
                self.match(nim_Parser.NOT)


            self.state = 573
            self.condExpr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExprListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.SimpleExprContext)
            else:
                return self.getTypedRuleContext(nim_Parser.SimpleExprContext,i)


        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.ExprContext)
            else:
                return self.getTypedRuleContext(nim_Parser.ExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.COMMA)
            else:
                return self.getToken(nim_Parser.COMMA, i)

        def getRuleIndex(self):
            return nim_Parser.RULE_exprList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprList" ):
                listener.enterExprList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprList" ):
                listener.exitExprList(self)




    def exprList(self):

        localctx = nim_Parser.ExprListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_exprList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 577
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,56,self._ctx)
            if la_ == 1:
                self.state = 575
                self.simpleExpr()
                pass

            elif la_ == 2:
                self.state = 576
                self.expr()
                pass


            self.state = 586
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==nim_Parser.COMMA:
                self.state = 579
                self.match(nim_Parser.COMMA)
                self.state = 582
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
                if la_ == 1:
                    self.state = 580
                    self.simpleExpr()
                    pass

                elif la_ == 2:
                    self.state = 581
                    self.expr()
                    pass


                self.state = 588
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OfBranchContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OF(self):
            return self.getToken(nim_Parser.OF, 0)

        def exprList(self):
            return self.getTypedRuleContext(nim_Parser.ExprListContext,0)


        def COLON(self):
            return self.getToken(nim_Parser.COLON, 0)

        def ind(self):
            return self.getTypedRuleContext(nim_Parser.IndContext,0)


        def ded(self):
            return self.getTypedRuleContext(nim_Parser.DedContext,0)


        def exprStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.ExprStmtContext)
            else:
                return self.getTypedRuleContext(nim_Parser.ExprStmtContext,i)


        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.StmtContext)
            else:
                return self.getTypedRuleContext(nim_Parser.StmtContext,i)


        def getRuleIndex(self):
            return nim_Parser.RULE_ofBranch

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOfBranch" ):
                listener.enterOfBranch(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOfBranch" ):
                listener.exitOfBranch(self)




    def ofBranch(self):

        localctx = nim_Parser.OfBranchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_ofBranch)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 589
            self.match(nim_Parser.OF)
            self.state = 590
            self.exprList()
            self.state = 591
            self.match(nim_Parser.COLON)
            self.state = 605
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
            if la_ == 1:
                self.state = 592
                self.ind()
                self.state = 595 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 595
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
                        if la_ == 1:
                            self.state = 593
                            self.exprStmt()
                            pass

                        elif la_ == 2:
                            self.state = 594
                            self.stmt()
                            pass



                    else:
                        raise NoViableAltException(self)
                    self.state = 597 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,60,self._ctx)

                self.state = 599
                self.ded()
                pass

            elif la_ == 2:
                self.state = 603
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
                if la_ == 1:
                    self.state = 601
                    self.exprStmt()
                    pass

                elif la_ == 2:
                    self.state = 602
                    self.stmt()
                    pass


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OfBranchesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ofBranch(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.OfBranchContext)
            else:
                return self.getTypedRuleContext(nim_Parser.OfBranchContext,i)


        def ELSE(self):
            return self.getToken(nim_Parser.ELSE, 0)

        def COLON(self):
            return self.getToken(nim_Parser.COLON, 0)

        def ind(self):
            return self.getTypedRuleContext(nim_Parser.IndContext,0)


        def ded(self):
            return self.getTypedRuleContext(nim_Parser.DedContext,0)


        def exprStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.ExprStmtContext)
            else:
                return self.getTypedRuleContext(nim_Parser.ExprStmtContext,i)


        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.StmtContext)
            else:
                return self.getTypedRuleContext(nim_Parser.StmtContext,i)


        def getRuleIndex(self):
            return nim_Parser.RULE_ofBranches

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOfBranches" ):
                listener.enterOfBranches(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOfBranches" ):
                listener.exitOfBranches(self)




    def ofBranches(self):

        localctx = nim_Parser.OfBranchesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_ofBranches)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 608 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 607
                self.ofBranch()
                self.state = 610 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==nim_Parser.OF):
                    break

            self.state = 629
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==nim_Parser.ELSE:
                self.state = 612
                self.match(nim_Parser.ELSE)
                self.state = 613
                self.match(nim_Parser.COLON)
                self.state = 627
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,67,self._ctx)
                if la_ == 1:
                    self.state = 614
                    self.ind()
                    self.state = 617 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 617
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
                            if la_ == 1:
                                self.state = 615
                                self.exprStmt()
                                pass

                            elif la_ == 2:
                                self.state = 616
                                self.stmt()
                                pass



                        else:
                            raise NoViableAltException(self)
                        self.state = 619 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,65,self._ctx)

                    self.state = 621
                    self.ded()
                    pass

                elif la_ == 2:
                    self.state = 625
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
                    if la_ == 1:
                        self.state = 623
                        self.exprStmt()
                        pass

                    elif la_ == 2:
                        self.state = 624
                        self.stmt()
                        pass


                    pass




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CaseStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(nim_Parser.CASE, 0)

        def simpleExpr(self):
            return self.getTypedRuleContext(nim_Parser.SimpleExprContext,0)


        def expr(self):
            return self.getTypedRuleContext(nim_Parser.ExprContext,0)


        def ofBranches(self):
            return self.getTypedRuleContext(nim_Parser.OfBranchesContext,0)


        def ind(self):
            return self.getTypedRuleContext(nim_Parser.IndContext,0)


        def ded(self):
            return self.getTypedRuleContext(nim_Parser.DedContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_caseStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseStmt" ):
                listener.enterCaseStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseStmt" ):
                listener.exitCaseStmt(self)




    def caseStmt(self):

        localctx = nim_Parser.CaseStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_caseStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 631
            self.match(nim_Parser.CASE)
            self.state = 634
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,69,self._ctx)
            if la_ == 1:
                self.state = 632
                self.simpleExpr()
                pass

            elif la_ == 2:
                self.state = 633
                self.expr()
                pass


            self.state = 641
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [nim_Parser.INDENT]:
                self.state = 636
                self.ind()
                self.state = 637
                self.ofBranches()
                self.state = 638
                self.ded()
                pass
            elif token in [nim_Parser.OF]:
                self.state = 640
                self.ofBranches()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class WhileStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(nim_Parser.WHILE, 0)

        def COLON(self):
            return self.getToken(nim_Parser.COLON, 0)

        def simpleExpr(self):
            return self.getTypedRuleContext(nim_Parser.SimpleExprContext,0)


        def expr(self):
            return self.getTypedRuleContext(nim_Parser.ExprContext,0)


        def ind(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.IndContext)
            else:
                return self.getTypedRuleContext(nim_Parser.IndContext,i)


        def ded(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.DedContext)
            else:
                return self.getTypedRuleContext(nim_Parser.DedContext,i)


        def exprStmt(self):
            return self.getTypedRuleContext(nim_Parser.ExprStmtContext,0)


        def stmt(self):
            return self.getTypedRuleContext(nim_Parser.StmtContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_whileStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileStmt" ):
                listener.enterWhileStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileStmt" ):
                listener.exitWhileStmt(self)




    def whileStmt(self):

        localctx = nim_Parser.WhileStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_whileStmt)
        try:
            self.state = 672
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 643
                self.match(nim_Parser.WHILE)
                self.state = 646
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
                if la_ == 1:
                    self.state = 644
                    self.simpleExpr()
                    pass

                elif la_ == 2:
                    self.state = 645
                    self.expr()
                    pass


                self.state = 648
                self.match(nim_Parser.COLON)

                self.state = 649
                self.ind()
                self.state = 658
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
                if la_ == 1:
                    self.state = 650
                    self.exprStmt()
                    pass

                elif la_ == 2:
                    self.state = 656
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [nim_Parser.OPEN_BRACE, nim_Parser.TYPE, nim_Parser.VARIABLE, nim_Parser.LET, nim_Parser.CONST, nim_Parser.PROC, nim_Parser.IF, nim_Parser.FOR, nim_Parser.TEMPLATE, nim_Parser.WHEN, nim_Parser.IMPORT, nim_Parser.FROM, nim_Parser.BLOCK, nim_Parser.MACRO]:
                        self.state = 651
                        self.stmt()
                        pass
                    elif token in [nim_Parser.INDENT]:
                        self.state = 652
                        self.ind()
                        self.state = 653
                        self.stmt()
                        self.state = 654
                        self.ded()
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass


                self.state = 660
                self.ded()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 670
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
                if la_ == 1:
                    self.state = 662
                    self.exprStmt()
                    pass

                elif la_ == 2:
                    self.state = 668
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [nim_Parser.OPEN_BRACE, nim_Parser.TYPE, nim_Parser.VARIABLE, nim_Parser.LET, nim_Parser.CONST, nim_Parser.PROC, nim_Parser.IF, nim_Parser.FOR, nim_Parser.TEMPLATE, nim_Parser.WHEN, nim_Parser.IMPORT, nim_Parser.FROM, nim_Parser.BLOCK, nim_Parser.MACRO]:
                        self.state = 663
                        self.stmt()
                        pass
                    elif token in [nim_Parser.INDENT]:
                        self.state = 664
                        self.ind()
                        self.state = 665
                        self.stmt()
                        self.state = 666
                        self.ded()
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class WhenStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(nim_Parser.WHEN, 0)

        def condStmt(self):
            return self.getTypedRuleContext(nim_Parser.CondStmtContext,0)


        def NOT(self):
            return self.getToken(nim_Parser.NOT, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_whenStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhenStmt" ):
                listener.enterWhenStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhenStmt" ):
                listener.exitWhenStmt(self)




    def whenStmt(self):

        localctx = nim_Parser.WhenStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_whenStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 674
            self.match(nim_Parser.WHEN)
            self.state = 676
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
            if la_ == 1:
                self.state = 675
                self.match(nim_Parser.NOT)


            self.state = 678
            self.condStmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ForStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(nim_Parser.FOR, 0)

        def IN(self):
            return self.getToken(nim_Parser.IN, 0)

        def simpleExpr(self):
            return self.getTypedRuleContext(nim_Parser.SimpleExprContext,0)


        def COLON(self):
            return self.getToken(nim_Parser.COLON, 0)

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.IDENTIFIER)
            else:
                return self.getToken(nim_Parser.IDENTIFIER, i)

        def ind(self):
            return self.getTypedRuleContext(nim_Parser.IndContext,0)


        def ded(self):
            return self.getTypedRuleContext(nim_Parser.DedContext,0)


        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.StmtContext)
            else:
                return self.getTypedRuleContext(nim_Parser.StmtContext,i)


        def exprStmt(self):
            return self.getTypedRuleContext(nim_Parser.ExprStmtContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.COMMA)
            else:
                return self.getToken(nim_Parser.COMMA, i)

        def getRuleIndex(self):
            return nim_Parser.RULE_forStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForStmt" ):
                listener.enterForStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForStmt" ):
                listener.exitForStmt(self)




    def forStmt(self):

        localctx = nim_Parser.ForStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_forStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 680
            self.match(nim_Parser.FOR)

            self.state = 681
            self.match(nim_Parser.IDENTIFIER)
            self.state = 686
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==nim_Parser.COMMA:
                self.state = 682
                self.match(nim_Parser.COMMA)
                self.state = 683
                self.match(nim_Parser.IDENTIFIER)
                self.state = 688
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 689
            self.match(nim_Parser.IN)
            self.state = 690
            self.simpleExpr()
            self.state = 691
            self.match(nim_Parser.COLON)
            self.state = 704
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
            if la_ == 1:
                self.state = 692
                self.ind()
                self.state = 694 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 693
                    self.stmt()
                    self.state = 696 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nim_Parser.OPEN_BRACE) | (1 << nim_Parser.TYPE) | (1 << nim_Parser.VARIABLE) | (1 << nim_Parser.LET) | (1 << nim_Parser.CONST) | (1 << nim_Parser.PROC) | (1 << nim_Parser.IF) | (1 << nim_Parser.FOR) | (1 << nim_Parser.TEMPLATE))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (nim_Parser.WHEN - 66)) | (1 << (nim_Parser.IMPORT - 66)) | (1 << (nim_Parser.FROM - 66)) | (1 << (nim_Parser.BLOCK - 66)) | (1 << (nim_Parser.MACRO - 66)))) != 0)):
                        break

                self.state = 698
                self.ded()
                pass

            elif la_ == 2:
                self.state = 702
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
                if la_ == 1:
                    self.state = 700
                    self.stmt()
                    pass

                elif la_ == 2:
                    self.state = 701
                    self.exprStmt()
                    pass


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IfStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(nim_Parser.IF, 0)

        def condStmt(self):
            return self.getTypedRuleContext(nim_Parser.CondStmtContext,0)


        def NOT(self):
            return self.getToken(nim_Parser.NOT, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_ifStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfStmt" ):
                listener.enterIfStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfStmt" ):
                listener.exitIfStmt(self)




    def ifStmt(self):

        localctx = nim_Parser.IfStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_ifStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 706
            self.match(nim_Parser.IF)
            self.state = 708
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
            if la_ == 1:
                self.state = 707
                self.match(nim_Parser.NOT)


            self.state = 710
            self.condStmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CondStmtElifContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELIF(self):
            return self.getToken(nim_Parser.ELIF, 0)

        def COLON(self):
            return self.getToken(nim_Parser.COLON, 0)

        def simpleExpr(self):
            return self.getTypedRuleContext(nim_Parser.SimpleExprContext,0)


        def expr(self):
            return self.getTypedRuleContext(nim_Parser.ExprContext,0)


        def ind(self):
            return self.getTypedRuleContext(nim_Parser.IndContext,0)


        def ded(self):
            return self.getTypedRuleContext(nim_Parser.DedContext,0)


        def substmt(self):
            return self.getTypedRuleContext(nim_Parser.SubstmtContext,0)


        def exprStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.ExprStmtContext)
            else:
                return self.getTypedRuleContext(nim_Parser.ExprStmtContext,i)


        def getRuleIndex(self):
            return nim_Parser.RULE_condStmtElif

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondStmtElif" ):
                listener.enterCondStmtElif(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondStmtElif" ):
                listener.exitCondStmtElif(self)




    def condStmtElif(self):

        localctx = nim_Parser.CondStmtElifContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_condStmtElif)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 712
            self.match(nim_Parser.ELIF)

            self.state = 715
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
            if la_ == 1:
                self.state = 713
                self.simpleExpr()
                pass

            elif la_ == 2:
                self.state = 714
                self.expr()
                pass


            self.state = 717
            self.match(nim_Parser.COLON)
            self.state = 737
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
            if la_ == 1:
                self.state = 718
                self.ind()
                self.state = 725
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
                if la_ == 1:
                    self.state = 720 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 719
                            self.exprStmt()

                        else:
                            raise NoViableAltException(self)
                        self.state = 722 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,84,self._ctx)

                    pass

                elif la_ == 2:
                    self.state = 724
                    self.substmt()
                    pass


                self.state = 727
                self.ded()
                pass

            elif la_ == 2:
                self.state = 735
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
                if la_ == 1:
                    self.state = 730 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 729
                            self.exprStmt()

                        else:
                            raise NoViableAltException(self)
                        self.state = 732 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,86,self._ctx)

                    pass

                elif la_ == 2:
                    self.state = 734
                    self.substmt()
                    pass


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CondStmtElseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(nim_Parser.ELSE, 0)

        def COLON(self):
            return self.getToken(nim_Parser.COLON, 0)

        def ind(self):
            return self.getTypedRuleContext(nim_Parser.IndContext,0)


        def ded(self):
            return self.getTypedRuleContext(nim_Parser.DedContext,0)


        def substmt(self):
            return self.getTypedRuleContext(nim_Parser.SubstmtContext,0)


        def exprStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.ExprStmtContext)
            else:
                return self.getTypedRuleContext(nim_Parser.ExprStmtContext,i)


        def getRuleIndex(self):
            return nim_Parser.RULE_condStmtElse

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondStmtElse" ):
                listener.enterCondStmtElse(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondStmtElse" ):
                listener.exitCondStmtElse(self)




    def condStmtElse(self):

        localctx = nim_Parser.CondStmtElseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_condStmtElse)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 739
            self.match(nim_Parser.ELSE)
            self.state = 740
            self.match(nim_Parser.COLON)
            self.state = 760
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
            if la_ == 1:
                self.state = 741
                self.ind()
                self.state = 748
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
                if la_ == 1:
                    self.state = 743 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 742
                            self.exprStmt()

                        else:
                            raise NoViableAltException(self)
                        self.state = 745 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,89,self._ctx)

                    pass

                elif la_ == 2:
                    self.state = 747
                    self.substmt()
                    pass


                self.state = 750
                self.ded()
                pass

            elif la_ == 2:
                self.state = 758
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
                if la_ == 1:
                    self.state = 753 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 752
                            self.exprStmt()

                        else:
                            raise NoViableAltException(self)
                        self.state = 755 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,91,self._ctx)

                    pass

                elif la_ == 2:
                    self.state = 757
                    self.substmt()
                    pass


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CondStmtBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exprStmt(self):
            return self.getTypedRuleContext(nim_Parser.ExprStmtContext,0)


        def substmt(self):
            return self.getTypedRuleContext(nim_Parser.SubstmtContext,0)


        def ind(self):
            return self.getTypedRuleContext(nim_Parser.IndContext,0)


        def ded(self):
            return self.getTypedRuleContext(nim_Parser.DedContext,0)


        def condStmtElif(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.CondStmtElifContext)
            else:
                return self.getTypedRuleContext(nim_Parser.CondStmtElifContext,i)


        def condStmtElse(self):
            return self.getTypedRuleContext(nim_Parser.CondStmtElseContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_condStmtBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondStmtBody" ):
                listener.enterCondStmtBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondStmtBody" ):
                listener.exitCondStmtBody(self)




    def condStmtBody(self):

        localctx = nim_Parser.CondStmtBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_condStmtBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 764
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,94,self._ctx)
            if la_ == 1:
                self.state = 762
                self.exprStmt()
                pass

            elif la_ == 2:
                self.state = 763
                self.substmt()
                pass


            self.state = 799
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,101,self._ctx)
            if la_ == 1:
                self.state = 766
                self.ind()
                self.state = 770
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==nim_Parser.ELIF:
                    self.state = 767
                    self.condStmtElif()
                    self.state = 772
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 774
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nim_Parser.ELSE:
                    self.state = 773
                    self.condStmtElse()


                self.state = 776
                self.ded()
                pass

            elif la_ == 2:
                self.state = 781
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==nim_Parser.ELIF:
                    self.state = 778
                    self.condStmtElif()
                    self.state = 783
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 784
                self.ind()
                self.state = 786
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nim_Parser.ELSE:
                    self.state = 785
                    self.condStmtElse()


                self.state = 788
                self.ded()
                pass

            elif la_ == 3:
                self.state = 793
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,99,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 790
                        self.condStmtElif() 
                    self.state = 795
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,99,self._ctx)

                self.state = 797
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,100,self._ctx)
                if la_ == 1:
                    self.state = 796
                    self.condStmtElse()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CondStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(nim_Parser.COLON, 0)

        def simpleExpr(self):
            return self.getTypedRuleContext(nim_Parser.SimpleExprContext,0)


        def expr(self):
            return self.getTypedRuleContext(nim_Parser.ExprContext,0)


        def ind(self):
            return self.getTypedRuleContext(nim_Parser.IndContext,0)


        def condStmtBody(self):
            return self.getTypedRuleContext(nim_Parser.CondStmtBodyContext,0)


        def ded(self):
            return self.getTypedRuleContext(nim_Parser.DedContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_condStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondStmt" ):
                listener.enterCondStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondStmt" ):
                listener.exitCondStmt(self)




    def condStmt(self):

        localctx = nim_Parser.CondStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_condStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 803
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,102,self._ctx)
            if la_ == 1:
                self.state = 801
                self.simpleExpr()
                pass

            elif la_ == 2:
                self.state = 802
                self.expr()
                pass


            self.state = 805
            self.match(nim_Parser.COLON)
            self.state = 811
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
            if la_ == 1:
                self.state = 806
                self.ind()
                self.state = 807
                self.condStmtBody()
                self.state = 808
                self.ded()
                pass

            elif la_ == 2:
                self.state = 810
                self.condStmtBody()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BlockStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BLOCK(self):
            return self.getToken(nim_Parser.BLOCK, 0)

        def COLON(self):
            return self.getToken(nim_Parser.COLON, 0)

        def ind(self):
            return self.getTypedRuleContext(nim_Parser.IndContext,0)


        def stmt(self):
            return self.getTypedRuleContext(nim_Parser.StmtContext,0)


        def ded(self):
            return self.getTypedRuleContext(nim_Parser.DedContext,0)


        def symbol(self):
            return self.getTypedRuleContext(nim_Parser.SymbolContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_blockStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockStmt" ):
                listener.enterBlockStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockStmt" ):
                listener.exitBlockStmt(self)




    def blockStmt(self):

        localctx = nim_Parser.BlockStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_blockStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 813
            self.match(nim_Parser.BLOCK)
            self.state = 815
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,104,self._ctx)
            if la_ == 1:
                self.state = 814
                self.symbol()


            self.state = 817
            self.match(nim_Parser.COLON)
            self.state = 823
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [nim_Parser.INDENT]:
                self.state = 818
                self.ind()
                self.state = 819
                self.stmt()
                self.state = 820
                self.ded()
                pass
            elif token in [nim_Parser.OPEN_BRACE, nim_Parser.TYPE, nim_Parser.VARIABLE, nim_Parser.LET, nim_Parser.CONST, nim_Parser.PROC, nim_Parser.IF, nim_Parser.FOR, nim_Parser.TEMPLATE, nim_Parser.WHEN, nim_Parser.IMPORT, nim_Parser.FROM, nim_Parser.BLOCK, nim_Parser.MACRO]:
                self.state = 822
                self.stmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DiscardStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DISCARD(self):
            return self.getToken(nim_Parser.DISCARD, 0)

        def simpleExpr(self):
            return self.getTypedRuleContext(nim_Parser.SimpleExprContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_discardStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiscardStmt" ):
                listener.enterDiscardStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiscardStmt" ):
                listener.exitDiscardStmt(self)




    def discardStmt(self):

        localctx = nim_Parser.DiscardStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_discardStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 825
            self.match(nim_Parser.DISCARD)
            self.state = 827
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
            if la_ == 1:
                self.state = 826
                self.simpleExpr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReturnStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(nim_Parser.RETURN, 0)

        def simpleExpr(self):
            return self.getTypedRuleContext(nim_Parser.SimpleExprContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_returnStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnStmt" ):
                listener.enterReturnStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnStmt" ):
                listener.exitReturnStmt(self)




    def returnStmt(self):

        localctx = nim_Parser.ReturnStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_returnStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 829
            self.match(nim_Parser.RETURN)
            self.state = 831
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
            if la_ == 1:
                self.state = 830
                self.simpleExpr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BreakStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BREAK(self):
            return self.getToken(nim_Parser.BREAK, 0)

        def simpleExpr(self):
            return self.getTypedRuleContext(nim_Parser.SimpleExprContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_breakStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBreakStmt" ):
                listener.enterBreakStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBreakStmt" ):
                listener.exitBreakStmt(self)




    def breakStmt(self):

        localctx = nim_Parser.BreakStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_breakStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 833
            self.match(nim_Parser.BREAK)
            self.state = 835
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
            if la_ == 1:
                self.state = 834
                self.simpleExpr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PragmaStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pragma(self):
            return self.getTypedRuleContext(nim_Parser.PragmaContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_pragmaStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragmaStmt" ):
                listener.enterPragmaStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragmaStmt" ):
                listener.exitPragmaStmt(self)




    def pragmaStmt(self):

        localctx = nim_Parser.PragmaStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_pragmaStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 837
            self.pragma()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def blockExpr(self):
            return self.getTypedRuleContext(nim_Parser.BlockExprContext,0)


        def forExpr(self):
            return self.getTypedRuleContext(nim_Parser.ForExprContext,0)


        def ifExpr(self):
            return self.getTypedRuleContext(nim_Parser.IfExprContext,0)


        def whenExpr(self):
            return self.getTypedRuleContext(nim_Parser.WhenExprContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr" ):
                listener.enterExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr" ):
                listener.exitExpr(self)




    def expr(self):

        localctx = nim_Parser.ExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_expr)
        try:
            self.state = 843
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [nim_Parser.BLOCK]:
                self.enterOuterAlt(localctx, 1)
                self.state = 839
                self.blockExpr()
                pass
            elif token in [nim_Parser.FOR]:
                self.enterOuterAlt(localctx, 2)
                self.state = 840
                self.forExpr()
                pass
            elif token in [nim_Parser.IF]:
                self.enterOuterAlt(localctx, 3)
                self.state = 841
                self.ifExpr()
                pass
            elif token in [nim_Parser.WHEN]:
                self.enterOuterAlt(localctx, 4)
                self.state = 842
                self.whenExpr()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PragmaContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(nim_Parser.OPEN_BRACE, 0)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.DOT)
            else:
                return self.getToken(nim_Parser.DOT, i)

        def IDENTIFIER(self):
            return self.getToken(nim_Parser.IDENTIFIER, 0)

        def CLOSE_BRACE(self):
            return self.getToken(nim_Parser.CLOSE_BRACE, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_pragma

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragma" ):
                listener.enterPragma(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragma" ):
                listener.exitPragma(self)




    def pragma(self):

        localctx = nim_Parser.PragmaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_pragma)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 845
            self.match(nim_Parser.OPEN_BRACE)
            self.state = 846
            self.match(nim_Parser.DOT)
            self.state = 847
            self.match(nim_Parser.IDENTIFIER)
            self.state = 849
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==nim_Parser.DOT:
                self.state = 848
                self.match(nim_Parser.DOT)


            self.state = 851
            self.match(nim_Parser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RoutineContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def par(self):
            return self.getTypedRuleContext(nim_Parser.ParContext,0)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.COLON)
            else:
                return self.getToken(nim_Parser.COLON, i)

        def substmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.SubstmtContext)
            else:
                return self.getTypedRuleContext(nim_Parser.SubstmtContext,i)


        def getRuleIndex(self):
            return nim_Parser.RULE_routine

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoutine" ):
                listener.enterRoutine(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoutine" ):
                listener.exitRoutine(self)




    def routine(self):

        localctx = nim_Parser.RoutineContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_routine)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 853
            self.par()
            self.state = 858
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,111,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 854
                    self.match(nim_Parser.COLON)
                    self.state = 855
                    self.substmt() 
                self.state = 860
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,111,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeSectionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(nim_Parser.OPEN_BRACE, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_typeSection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeSection" ):
                listener.enterTypeSection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeSection" ):
                listener.exitTypeSection(self)




    def typeSection(self):

        localctx = nim_Parser.TypeSectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_typeSection)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 861
            self.match(nim_Parser.OPEN_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VariableSectionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ind(self):
            return self.getTypedRuleContext(nim_Parser.IndContext,0)


        def ded(self):
            return self.getTypedRuleContext(nim_Parser.DedContext,0)


        def variable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.VariableContext)
            else:
                return self.getTypedRuleContext(nim_Parser.VariableContext,i)


        def getRuleIndex(self):
            return nim_Parser.RULE_variableSection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableSection" ):
                listener.enterVariableSection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableSection" ):
                listener.exitVariableSection(self)




    def variableSection(self):

        localctx = nim_Parser.VariableSectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_variableSection)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 876
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [nim_Parser.IDENTIFIER]:
                self.state = 864 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 863
                        self.variable()

                    else:
                        raise NoViableAltException(self)
                    self.state = 866 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,112,self._ctx)

                pass
            elif token in [nim_Parser.INDENT]:
                self.state = 868
                self.ind()
                self.state = 870 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 869
                    self.variable()
                    self.state = 872 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==nim_Parser.IDENTIFIER):
                        break

                self.state = 874
                self.ded()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstantSectionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ind(self):
            return self.getTypedRuleContext(nim_Parser.IndContext,0)


        def ded(self):
            return self.getTypedRuleContext(nim_Parser.DedContext,0)


        def constant(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.ConstantContext)
            else:
                return self.getTypedRuleContext(nim_Parser.ConstantContext,i)


        def getRuleIndex(self):
            return nim_Parser.RULE_constantSection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantSection" ):
                listener.enterConstantSection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantSection" ):
                listener.exitConstantSection(self)




    def constantSection(self):

        localctx = nim_Parser.ConstantSectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_constantSection)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 891
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [nim_Parser.IDENTIFIER]:
                self.state = 879 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 878
                        self.constant()

                    else:
                        raise NoViableAltException(self)
                    self.state = 881 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,115,self._ctx)

                pass
            elif token in [nim_Parser.INDENT]:
                self.state = 883
                self.ind()
                self.state = 885 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 884
                    self.constant()
                    self.state = 887 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==nim_Parser.IDENTIFIER):
                        break

                self.state = 889
                self.ded()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IdentVisContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self):
            return self.getTypedRuleContext(nim_Parser.SymbolContext,0)


        def operator(self):
            return self.getTypedRuleContext(nim_Parser.OperatorContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_identVis

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentVis" ):
                listener.enterIdentVis(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentVis" ):
                listener.exitIdentVis(self)




    def identVis(self):

        localctx = nim_Parser.IdentVisContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_identVis)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 893
            self.symbol()
            self.state = 895
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nim_Parser.COLON) | (1 << nim_Parser.DOT) | (1 << nim_Parser.EQUALS) | (1 << nim_Parser.IN) | (1 << nim_Parser.OF) | (1 << nim_Parser.NOT) | (1 << nim_Parser.OP0) | (1 << nim_Parser.OP1) | (1 << nim_Parser.OP2) | (1 << nim_Parser.OP3) | (1 << nim_Parser.OP4) | (1 << nim_Parser.OP5) | (1 << nim_Parser.OP6) | (1 << nim_Parser.OP7) | (1 << nim_Parser.OP8) | (1 << nim_Parser.OP9) | (1 << nim_Parser.OP10))) != 0):
                self.state = 894
                self.operator()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VarTupleContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(nim_Parser.OPEN_BRACE, 0)

        def identVis(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.IdentVisContext)
            else:
                return self.getTypedRuleContext(nim_Parser.IdentVisContext,i)


        def EQUALS(self):
            return self.getToken(nim_Parser.EQUALS, 0)

        def ind(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.IndContext)
            else:
                return self.getTypedRuleContext(nim_Parser.IndContext,i)


        def CLOSE_BRACE(self):
            return self.getToken(nim_Parser.CLOSE_BRACE, 0)

        def ded(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.DedContext)
            else:
                return self.getTypedRuleContext(nim_Parser.DedContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.COMMA)
            else:
                return self.getToken(nim_Parser.COMMA, i)

        def simpleExpr(self):
            return self.getTypedRuleContext(nim_Parser.SimpleExprContext,0)


        def expr(self):
            return self.getTypedRuleContext(nim_Parser.ExprContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_varTuple

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarTuple" ):
                listener.enterVarTuple(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarTuple" ):
                listener.exitVarTuple(self)




    def varTuple(self):

        localctx = nim_Parser.VarTupleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_varTuple)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 897
            self.match(nim_Parser.OPEN_BRACE)
            self.state = 898
            self.identVis()
            self.state = 903
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==nim_Parser.COMMA:
                self.state = 899
                self.match(nim_Parser.COMMA)
                self.state = 900
                self.identVis()
                self.state = 905
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 911
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [nim_Parser.INDENT]:
                self.state = 906
                self.ind()
                self.state = 907
                self.match(nim_Parser.CLOSE_BRACE)
                self.state = 908
                self.ded()
                pass
            elif token in [nim_Parser.CLOSE_BRACE]:
                self.state = 910
                self.match(nim_Parser.CLOSE_BRACE)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 913
            self.match(nim_Parser.EQUALS)
            self.state = 915
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,121,self._ctx)
            if la_ == 1:
                self.state = 914
                self.ded()


            self.state = 926
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,124,self._ctx)
            if la_ == 1:
                self.state = 917
                self.ind()
                self.state = 920
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,122,self._ctx)
                if la_ == 1:
                    self.state = 918
                    self.simpleExpr()
                    pass

                elif la_ == 2:
                    self.state = 919
                    self.expr()
                    pass


                pass

            elif la_ == 2:
                self.state = 924
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,123,self._ctx)
                if la_ == 1:
                    self.state = 922
                    self.simpleExpr()
                    pass

                elif la_ == 2:
                    self.state = 923
                    self.expr()
                    pass


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstantContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.IDENTIFIER)
            else:
                return self.getToken(nim_Parser.IDENTIFIER, i)

        def EQUALS(self):
            return self.getToken(nim_Parser.EQUALS, 0)

        def ind(self):
            return self.getTypedRuleContext(nim_Parser.IndContext,0)


        def expr(self):
            return self.getTypedRuleContext(nim_Parser.ExprContext,0)


        def ded(self):
            return self.getTypedRuleContext(nim_Parser.DedContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.COMMA)
            else:
                return self.getToken(nim_Parser.COMMA, i)

        def COLON(self):
            return self.getToken(nim_Parser.COLON, 0)

        def simpleExpr(self):
            return self.getTypedRuleContext(nim_Parser.SimpleExprContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_constant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant" ):
                listener.enterConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant" ):
                listener.exitConstant(self)




    def constant(self):

        localctx = nim_Parser.ConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_constant)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 928
            self.match(nim_Parser.IDENTIFIER)
            self.state = 933
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==nim_Parser.COMMA:
                self.state = 929
                self.match(nim_Parser.COMMA)
                self.state = 930
                self.match(nim_Parser.IDENTIFIER)
                self.state = 935
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 938
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==nim_Parser.COLON:
                self.state = 936
                self.match(nim_Parser.COLON)
                self.state = 937
                self.simpleExpr()


            self.state = 940
            self.match(nim_Parser.EQUALS)
            self.state = 946
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [nim_Parser.INDENT]:
                self.state = 941
                self.ind()
                self.state = 942
                self.expr()
                self.state = 943
                self.ded()
                pass
            elif token in [nim_Parser.IF, nim_Parser.FOR, nim_Parser.WHEN, nim_Parser.BLOCK]:
                self.state = 945
                self.expr()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VariableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def idColonEq(self):
            return self.getTypedRuleContext(nim_Parser.IdColonEqContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_variable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable" ):
                listener.enterVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable" ):
                listener.exitVariable(self)




    def variable(self):

        localctx = nim_Parser.VariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_variable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 948
            self.idColonEq()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IdColonEqContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.IDENTIFIER)
            else:
                return self.getToken(nim_Parser.IDENTIFIER, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.COMMA)
            else:
                return self.getToken(nim_Parser.COMMA, i)

        def COLON(self):
            return self.getToken(nim_Parser.COLON, 0)

        def EQUALS(self):
            return self.getToken(nim_Parser.EQUALS, 0)

        def ind(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.IndContext)
            else:
                return self.getTypedRuleContext(nim_Parser.IndContext,i)


        def simpleExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.SimpleExprContext)
            else:
                return self.getTypedRuleContext(nim_Parser.SimpleExprContext,i)


        def ded(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.DedContext)
            else:
                return self.getTypedRuleContext(nim_Parser.DedContext,i)


        def anyExpr(self):
            return self.getTypedRuleContext(nim_Parser.AnyExprContext,0)


        def expr(self):
            return self.getTypedRuleContext(nim_Parser.ExprContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_idColonEq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdColonEq" ):
                listener.enterIdColonEq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdColonEq" ):
                listener.exitIdColonEq(self)




    def idColonEq(self):

        localctx = nim_Parser.IdColonEqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_idColonEq)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 950
            self.match(nim_Parser.IDENTIFIER)
            self.state = 955
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,128,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 951
                    self.match(nim_Parser.COMMA)
                    self.state = 952
                    self.match(nim_Parser.IDENTIFIER) 
                self.state = 957
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,128,self._ctx)

            self.state = 959
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,129,self._ctx)
            if la_ == 1:
                self.state = 958
                self.match(nim_Parser.COMMA)


            self.state = 969
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,131,self._ctx)
            if la_ == 1:
                self.state = 961
                self.match(nim_Parser.COLON)
                self.state = 967
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,130,self._ctx)
                if la_ == 1:
                    self.state = 962
                    self.ind()
                    self.state = 963
                    self.simpleExpr()
                    self.state = 964
                    self.ded()
                    pass

                elif la_ == 2:
                    self.state = 966
                    self.simpleExpr()
                    pass




            self.state = 982
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,134,self._ctx)
            if la_ == 1:
                self.state = 971
                self.match(nim_Parser.EQUALS)
                self.state = 980
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,133,self._ctx)
                if la_ == 1:
                    self.state = 972
                    self.ind()
                    self.state = 975
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,132,self._ctx)
                    if la_ == 1:
                        self.state = 973
                        self.expr()
                        pass

                    elif la_ == 2:
                        self.state = 974
                        self.simpleExpr()
                        pass


                    self.state = 977
                    self.ded()
                    pass

                elif la_ == 2:
                    self.state = 979
                    self.anyExpr()
                    pass




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Simple_complexStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleStmt(self):
            return self.getTypedRuleContext(nim_Parser.SimpleStmtContext,0)


        def complexStmt(self):
            return self.getTypedRuleContext(nim_Parser.ComplexStmtContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_simple_complexStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_complexStmt" ):
                listener.enterSimple_complexStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_complexStmt" ):
                listener.exitSimple_complexStmt(self)




    def simple_complexStmt(self):

        localctx = nim_Parser.Simple_complexStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_simple_complexStmt)
        try:
            self.state = 986
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [nim_Parser.OPEN_BRACE, nim_Parser.IMPORT, nim_Parser.FROM]:
                self.enterOuterAlt(localctx, 1)
                self.state = 984
                self.simpleStmt()
                pass
            elif token in [nim_Parser.TYPE, nim_Parser.VARIABLE, nim_Parser.LET, nim_Parser.CONST, nim_Parser.PROC, nim_Parser.IF, nim_Parser.FOR, nim_Parser.TEMPLATE, nim_Parser.WHEN, nim_Parser.BLOCK, nim_Parser.MACRO]:
                self.enterOuterAlt(localctx, 2)
                self.state = 985
                self.complexStmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SimpleStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def importStmt(self):
            return self.getTypedRuleContext(nim_Parser.ImportStmtContext,0)


        def fromStmt(self):
            return self.getTypedRuleContext(nim_Parser.FromStmtContext,0)


        def pragmaStmt(self):
            return self.getTypedRuleContext(nim_Parser.PragmaStmtContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_simpleStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleStmt" ):
                listener.enterSimpleStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleStmt" ):
                listener.exitSimpleStmt(self)




    def simpleStmt(self):

        localctx = nim_Parser.SimpleStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_simpleStmt)
        try:
            self.state = 991
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [nim_Parser.IMPORT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 988
                self.importStmt()
                pass
            elif token in [nim_Parser.FROM]:
                self.enterOuterAlt(localctx, 2)
                self.state = 989
                self.fromStmt()
                pass
            elif token in [nim_Parser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 990
                self.pragmaStmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ComplexStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def forStmt(self):
            return self.getTypedRuleContext(nim_Parser.ForStmtContext,0)


        def ifStmt(self):
            return self.getTypedRuleContext(nim_Parser.IfStmtContext,0)


        def blockStmt(self):
            return self.getTypedRuleContext(nim_Parser.BlockStmtContext,0)


        def whenStmt(self):
            return self.getTypedRuleContext(nim_Parser.WhenStmtContext,0)


        def routine(self):
            return self.getTypedRuleContext(nim_Parser.RoutineContext,0)


        def TEMPLATE(self):
            return self.getToken(nim_Parser.TEMPLATE, 0)

        def PROC(self):
            return self.getToken(nim_Parser.PROC, 0)

        def MACRO(self):
            return self.getToken(nim_Parser.MACRO, 0)

        def TYPE(self):
            return self.getToken(nim_Parser.TYPE, 0)

        def typeSection(self):
            return self.getTypedRuleContext(nim_Parser.TypeSectionContext,0)


        def CONST(self):
            return self.getToken(nim_Parser.CONST, 0)

        def constantSection(self):
            return self.getTypedRuleContext(nim_Parser.ConstantSectionContext,0)


        def variableSection(self):
            return self.getTypedRuleContext(nim_Parser.VariableSectionContext,0)


        def LET(self):
            return self.getToken(nim_Parser.LET, 0)

        def VARIABLE(self):
            return self.getToken(nim_Parser.VARIABLE, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_complexStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComplexStmt" ):
                listener.enterComplexStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComplexStmt" ):
                listener.exitComplexStmt(self)




    def complexStmt(self):

        localctx = nim_Parser.ComplexStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_complexStmt)
        self._la = 0 # Token type
        try:
            self.state = 1005
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [nim_Parser.FOR]:
                self.enterOuterAlt(localctx, 1)
                self.state = 993
                self.forStmt()
                pass
            elif token in [nim_Parser.IF]:
                self.enterOuterAlt(localctx, 2)
                self.state = 994
                self.ifStmt()
                pass
            elif token in [nim_Parser.BLOCK]:
                self.enterOuterAlt(localctx, 3)
                self.state = 995
                self.blockStmt()
                pass
            elif token in [nim_Parser.WHEN]:
                self.enterOuterAlt(localctx, 4)
                self.state = 996
                self.whenStmt()
                pass
            elif token in [nim_Parser.PROC, nim_Parser.TEMPLATE, nim_Parser.MACRO]:
                self.enterOuterAlt(localctx, 5)
                self.state = 997
                _la = self._input.LA(1)
                if not(((((_la - 41)) & ~0x3f) == 0 and ((1 << (_la - 41)) & ((1 << (nim_Parser.PROC - 41)) | (1 << (nim_Parser.TEMPLATE - 41)) | (1 << (nim_Parser.MACRO - 41)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 998
                self.routine()
                pass
            elif token in [nim_Parser.TYPE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 999
                self.match(nim_Parser.TYPE)
                self.state = 1000
                self.typeSection()
                pass
            elif token in [nim_Parser.CONST]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1001
                self.match(nim_Parser.CONST)
                self.state = 1002
                self.constantSection()
                pass
            elif token in [nim_Parser.VARIABLE, nim_Parser.LET]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1003
                _la = self._input.LA(1)
                if not(_la==nim_Parser.VARIABLE or _la==nim_Parser.LET):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1004
                self.variableSection()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ColonBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(nim_Parser.COLON, 0)

        def substmt(self):
            return self.getTypedRuleContext(nim_Parser.SubstmtContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_colonBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColonBody" ):
                listener.enterColonBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColonBody" ):
                listener.exitColonBody(self)




    def colonBody(self):

        localctx = nim_Parser.ColonBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_colonBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1007
            self.match(nim_Parser.COLON)
            self.state = 1008
            self.substmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExprStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.SimpleExprContext)
            else:
                return self.getTypedRuleContext(nim_Parser.SimpleExprContext,i)


        def EQUALS(self):
            return self.getToken(nim_Parser.EQUALS, 0)

        def expr(self):
            return self.getTypedRuleContext(nim_Parser.ExprContext,0)


        def colonBody(self):
            return self.getTypedRuleContext(nim_Parser.ColonBodyContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_exprStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprStmt" ):
                listener.enterExprStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprStmt" ):
                listener.exitExprStmt(self)




    def exprStmt(self):

        localctx = nim_Parser.ExprStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_exprStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1010
            self.simpleExpr()

            self.state = 1011
            self.match(nim_Parser.EQUALS)
            self.state = 1014
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,138,self._ctx)
            if la_ == 1:
                self.state = 1012
                self.expr()
                pass

            elif la_ == 2:
                self.state = 1013
                self.simpleExpr()
                pass


            self.state = 1017
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,139,self._ctx)
            if la_ == 1:
                self.state = 1016
                self.colonBody()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SubstmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ind(self):
            return self.getTypedRuleContext(nim_Parser.IndContext,0)


        def simple_complexStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.Simple_complexStmtContext)
            else:
                return self.getTypedRuleContext(nim_Parser.Simple_complexStmtContext,i)


        def ded(self):
            return self.getTypedRuleContext(nim_Parser.DedContext,0)


        def SEMI_COLON(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.SEMI_COLON)
            else:
                return self.getToken(nim_Parser.SEMI_COLON, i)

        def getRuleIndex(self):
            return nim_Parser.RULE_substmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubstmt" ):
                listener.enterSubstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubstmt" ):
                listener.exitSubstmt(self)




    def substmt(self):

        localctx = nim_Parser.SubstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_substmt)
        self._la = 0 # Token type
        try:
            self.state = 1033
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [nim_Parser.INDENT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1019
                self.ind()
                self.state = 1020
                self.simple_complexStmt()
                self.state = 1027
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nim_Parser.SEMI_COLON) | (1 << nim_Parser.OPEN_BRACE) | (1 << nim_Parser.TYPE) | (1 << nim_Parser.VARIABLE) | (1 << nim_Parser.LET) | (1 << nim_Parser.CONST) | (1 << nim_Parser.PROC) | (1 << nim_Parser.IF) | (1 << nim_Parser.FOR) | (1 << nim_Parser.TEMPLATE))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (nim_Parser.WHEN - 66)) | (1 << (nim_Parser.IMPORT - 66)) | (1 << (nim_Parser.FROM - 66)) | (1 << (nim_Parser.BLOCK - 66)) | (1 << (nim_Parser.MACRO - 66)))) != 0):
                    self.state = 1022
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==nim_Parser.SEMI_COLON:
                        self.state = 1021
                        self.match(nim_Parser.SEMI_COLON)


                    self.state = 1024
                    self.simple_complexStmt()
                    self.state = 1029
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1030
                self.ded()
                pass
            elif token in [nim_Parser.OPEN_BRACE, nim_Parser.TYPE, nim_Parser.VARIABLE, nim_Parser.LET, nim_Parser.CONST, nim_Parser.PROC, nim_Parser.IF, nim_Parser.FOR, nim_Parser.TEMPLATE, nim_Parser.WHEN, nim_Parser.IMPORT, nim_Parser.FROM, nim_Parser.BLOCK, nim_Parser.MACRO]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1032
                self.simple_complexStmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_complexStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.Simple_complexStmtContext)
            else:
                return self.getTypedRuleContext(nim_Parser.Simple_complexStmtContext,i)


        def SEMI_COLON(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.SEMI_COLON)
            else:
                return self.getToken(nim_Parser.SEMI_COLON, i)

        def getRuleIndex(self):
            return nim_Parser.RULE_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStmt" ):
                listener.enterStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStmt" ):
                listener.exitStmt(self)




    def stmt(self):

        localctx = nim_Parser.StmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1035
            self.simple_complexStmt()
            self.state = 1042
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,144,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1037
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==nim_Parser.SEMI_COLON:
                        self.state = 1036
                        self.match(nim_Parser.SEMI_COLON)


                    self.state = 1039
                    self.simple_complexStmt() 
                self.state = 1044
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,144,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ModuleContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.StmtContext)
            else:
                return self.getTypedRuleContext(nim_Parser.StmtContext,i)


        def getRuleIndex(self):
            return nim_Parser.RULE_module

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModule" ):
                listener.enterModule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModule" ):
                listener.exitModule(self)




    def module(self):

        localctx = nim_Parser.ModuleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_module)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1046 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1045
                self.stmt()
                self.state = 1048 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nim_Parser.OPEN_BRACE) | (1 << nim_Parser.TYPE) | (1 << nim_Parser.VARIABLE) | (1 << nim_Parser.LET) | (1 << nim_Parser.CONST) | (1 << nim_Parser.PROC) | (1 << nim_Parser.IF) | (1 << nim_Parser.FOR) | (1 << nim_Parser.TEMPLATE))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (nim_Parser.WHEN - 66)) | (1 << (nim_Parser.IMPORT - 66)) | (1 << (nim_Parser.FROM - 66)) | (1 << (nim_Parser.BLOCK - 66)) | (1 << (nim_Parser.MACRO - 66)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StartContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def module(self):
            return self.getTypedRuleContext(nim_Parser.ModuleContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_start

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStart" ):
                listener.enterStart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStart" ):
                listener.exitStart(self)




    def start(self):

        localctx = nim_Parser.StartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_start)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1050
            self.module()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[37] = self.primarySuffix_sempred
        self._predicates[39] = self.parBody_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def primarySuffix_sempred(self, localctx:PrimarySuffixContext, predIndex:int):
            if predIndex == 0:
                return self._input.LT(1).type in self.primarySuffixList
         

    def parBody_sempred(self, localctx:ParBodyContext, predIndex:int):
            if predIndex == 1:
                return self._input.LT(1).type in self.parKeyWList
         




