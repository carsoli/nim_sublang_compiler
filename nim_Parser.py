# Generated from nim_Parser.g4 by ANTLR 4.7.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys

def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3s")
        buf.write("\u0428\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\3\2\3\2\3\3\5\3\u00b8\n\3\3")
        buf.write("\4\3\4\3\5\3\5\3\6\3\6\3\7\3\7\3\b\3\b\3\t\3\t\3\t\3\t")
        buf.write("\5\t\u00c8\n\t\3\n\3\n\3\13\3\13\3\f\3\f\3\r\3\r\3\r\3")
        buf.write("\r\5\r\u00d4\n\r\3\16\3\16\3\17\3\17\3\20\3\20\3\21\3")
        buf.write("\21\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22")
        buf.write("\3\22\5\22\u00e9\n\22\3\23\3\23\3\24\3\24\3\24\7\24\u00f0")
        buf.write("\n\24\f\24\16\24\u00f3\13\24\3\25\3\25\3\25\7\25\u00f8")
        buf.write("\n\25\f\25\16\25\u00fb\13\25\3\26\3\26\3\26\7\26\u0100")
        buf.write("\n\26\f\26\16\26\u0103\13\26\3\27\3\27\3\27\7\27\u0108")
        buf.write("\n\27\f\27\16\27\u010b\13\27\3\30\3\30\3\30\7\30\u0110")
        buf.write("\n\30\f\30\16\30\u0113\13\30\3\31\3\31\3\31\7\31\u0118")
        buf.write("\n\31\f\31\16\31\u011b\13\31\3\32\3\32\3\32\7\32\u0120")
        buf.write("\n\32\f\32\16\32\u0123\13\32\3\33\3\33\3\33\7\33\u0128")
        buf.write("\n\33\f\33\16\33\u012b\13\33\3\34\3\34\3\34\7\34\u0130")
        buf.write("\n\34\f\34\16\34\u0133\13\34\3\35\3\35\3\35\7\35\u0138")
        buf.write("\n\35\f\35\16\35\u013b\13\35\3\36\3\36\3\37\3\37\3 \3")
        buf.write(" \3 \3 \3 \3 \5 \u0147\n \3!\3!\3!\3!\3!\3!\3!\3!\7!\u0151")
        buf.write("\n!\f!\16!\u0154\13!\5!\u0156\n!\3\"\3\"\5\"\u015a\n\"")
        buf.write("\3\"\3\"\3\"\3\"\5\"\u0160\n\"\5\"\u0162\n\"\3#\3#\3#")
        buf.write("\3#\7#\u0168\n#\f#\16#\u016b\13#\3#\3#\3$\3$\3$\3$\7$")
        buf.write("\u0173\n$\f$\16$\u0176\13$\3$\3$\3%\3%\3%\3%\3%\5%\u017f")
        buf.write("\n%\3&\3&\3&\3&\5&\u0185\n&\3\'\3\'\3\'\3(\3(\3(\3(\3")
        buf.write("(\3(\5(\u0190\n(\3(\5(\u0193\n(\3)\3)\3)\7)\u0198\n)\f")
        buf.write(")\16)\u019b\13)\3)\3)\3)\3)\7)\u01a1\n)\f)\16)\u01a4\13")
        buf.write(")\3)\3)\3)\3)\3)\5)\u01ab\n)\3)\3)\3)\5)\u01b0\n)\3)\3")
        buf.write(")\3)\5)\u01b5\n)\7)\u01b7\n)\f)\16)\u01ba\13)\3)\3)\3")
        buf.write(")\3)\5)\u01c0\n)\3*\3*\3*\3*\7*\u01c6\n*\f*\16*\u01c9")
        buf.write("\13*\3*\3*\7*\u01cd\n*\f*\16*\u01d0\13*\3*\6*\u01d3\n")
        buf.write("*\r*\16*\u01d4\5*\u01d7\n*\5*\u01d9\n*\3+\3+\3+\3+\5+")
        buf.write("\u01df\n+\3+\3+\3+\3+\5+\u01e5\n+\3+\3+\6+\u01e9\n+\r")
        buf.write("+\16+\u01ea\3+\3+\6+\u01ef\n+\r+\16+\u01f0\5+\u01f3\n")
        buf.write("+\5+\u01f5\n+\3,\3,\3,\3,\3-\3-\3-\3-\7-\u01ff\n-\f-\16")
        buf.write("-\u0202\13-\3.\3.\3.\3.\3/\3/\5/\u020a\n/\3/\3/\3/\3/")
        buf.write("\3/\3/\5/\u0212\n/\3\60\3\60\3\61\3\61\5\61\u0218\n\61")
        buf.write("\3\62\3\62\5\62\u021c\n\62\3\62\3\62\3\62\5\62\u0221\n")
        buf.write("\62\3\62\3\62\3\62\3\62\3\62\3\62\5\62\u0229\n\62\7\62")
        buf.write("\u022b\n\62\f\62\16\62\u022e\13\62\3\62\3\62\3\62\3\62")
        buf.write("\3\62\3\62\3\62\5\62\u0237\n\62\3\63\3\63\5\63\u023b\n")
        buf.write("\63\3\63\3\63\3\63\3\63\3\63\3\63\5\63\u0243\n\63\3\64")
        buf.write("\3\64\3\64\5\64\u0248\n\64\3\64\3\64\3\64\3\64\3\64\5")
        buf.write("\64\u024f\n\64\3\65\3\65\3\65\3\66\3\66\5\66\u0256\n\66")
        buf.write("\3\66\3\66\3\67\3\67\5\67\u025c\n\67\3\67\3\67\3\67\5")
        buf.write("\67\u0261\n\67\7\67\u0263\n\67\f\67\16\67\u0266\13\67")
        buf.write("\38\38\38\38\38\38\68\u026e\n8\r8\168\u026f\38\38\38\3")
        buf.write("8\58\u0276\n8\58\u0278\n8\39\69\u027b\n9\r9\169\u027c")
        buf.write("\39\39\39\39\39\69\u0284\n9\r9\169\u0285\39\39\39\39\5")
        buf.write("9\u028c\n9\59\u028e\n9\59\u0290\n9\3:\3:\3:\5:\u0295\n")
        buf.write(":\3:\3:\3:\3:\3:\5:\u029c\n:\3;\3;\3;\5;\u02a1\n;\3;\3")
        buf.write(";\3;\6;\u02a6\n;\r;\16;\u02a7\3;\5;\u02ab\n;\3;\3;\3;")
        buf.write("\6;\u02b0\n;\r;\16;\u02b1\3;\5;\u02b5\n;\5;\u02b7\n;\3")
        buf.write("<\3<\5<\u02bb\n<\3<\3<\3=\3=\3=\3=\7=\u02c3\n=\f=\16=")
        buf.write("\u02c6\13=\3=\3=\3=\3=\3=\6=\u02cd\n=\r=\16=\u02ce\3=")
        buf.write("\3=\3=\3=\5=\u02d5\n=\5=\u02d7\n=\3>\3>\5>\u02db\n>\3")
        buf.write(">\3>\3?\3?\3?\5?\u02e2\n?\3?\3?\3?\6?\u02e7\n?\r?\16?")
        buf.write("\u02e8\3?\5?\u02ec\n?\3?\3?\3?\6?\u02f1\n?\r?\16?\u02f2")
        buf.write("\3?\5?\u02f6\n?\5?\u02f8\n?\3@\3@\3@\3@\6@\u02fe\n@\r")
        buf.write("@\16@\u02ff\3@\5@\u0303\n@\3@\3@\3@\6@\u0308\n@\r@\16")
        buf.write("@\u0309\3@\5@\u030d\n@\5@\u030f\n@\3A\3A\3A\3A\3A\5A\u0316")
        buf.write("\nA\3A\3A\7A\u031a\nA\fA\16A\u031d\13A\3A\5A\u0320\nA")
        buf.write("\3A\3A\3A\7A\u0325\nA\fA\16A\u0328\13A\3A\3A\5A\u032c")
        buf.write("\nA\3A\3A\3A\7A\u0331\nA\fA\16A\u0334\13A\3A\5A\u0337")
        buf.write("\nA\5A\u0339\nA\3B\3B\5B\u033d\nB\3B\3B\3B\3C\3C\5C\u0344")
        buf.write("\nC\3C\3C\3C\3C\3C\3C\5C\u034c\nC\3D\3D\5D\u0350\nD\3")
        buf.write("E\3E\5E\u0354\nE\3F\3F\5F\u0358\nF\3G\3G\3H\3H\3H\3H\5")
        buf.write("H\u0360\nH\3I\3I\3I\3I\5I\u0366\nI\3I\3I\3J\3J\3J\7J\u036d")
        buf.write("\nJ\fJ\16J\u0370\13J\3K\3K\3L\6L\u0375\nL\rL\16L\u0376")
        buf.write("\3L\3L\6L\u037b\nL\rL\16L\u037c\3L\3L\5L\u0381\nL\3M\6")
        buf.write("M\u0384\nM\rM\16M\u0385\3M\3M\6M\u038a\nM\rM\16M\u038b")
        buf.write("\3M\3M\5M\u0390\nM\3N\3N\5N\u0394\nN\3O\3O\3O\3O\7O\u039a")
        buf.write("\nO\fO\16O\u039d\13O\3O\3O\3O\3O\3O\5O\u03a4\nO\3O\3O")
        buf.write("\5O\u03a8\nO\3O\3O\3O\5O\u03ad\nO\3O\3O\3O\3O\5O\u03b3")
        buf.write("\nO\5O\u03b5\nO\3P\3P\3P\7P\u03ba\nP\fP\16P\u03bd\13P")
        buf.write("\3P\3P\5P\u03c1\nP\3P\3P\3P\3P\3P\3P\5P\u03c9\nP\3Q\3")
        buf.write("Q\3R\3R\3R\7R\u03d0\nR\fR\16R\u03d3\13R\3R\5R\u03d6\n")
        buf.write("R\3R\3R\3R\3R\3R\3R\5R\u03de\nR\5R\u03e0\nR\3R\3R\3R\3")
        buf.write("R\3R\3R\5R\u03e8\nR\5R\u03ea\nR\3S\3S\5S\u03ee\nS\3T\3")
        buf.write("T\3T\3T\5T\u03f4\nT\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\3")
        buf.write("U\3U\3U\3U\5U\u0405\nU\3V\3V\3V\3W\3W\3W\3W\5W\u040e\n")
        buf.write("W\3W\5W\u0411\nW\3W\3W\5W\u0415\nW\3X\3X\5X\u0419\nX\3")
        buf.write("X\7X\u041c\nX\fX\16X\u041f\13X\3Y\6Y\u0422\nY\rY\16Y\u0423")
        buf.write("\3Z\3Z\3Z\2\2[\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36")
        buf.write(" \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprt")
        buf.write("vxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e")
        buf.write("\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0")
        buf.write("\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2")
        buf.write("\2\f\3\3mm\5\2\'\'++KK\t\2\')\678<<>>DDOOUU\4\2\27\27")
        buf.write("\35\35\4\2\30\32!!\4\2\33\33&&\5\2QQYbdj\3\2kl\5\2++A")
        buf.write("APP\3\2\'(\2\u048b\2\u00b4\3\2\2\2\4\u00b7\3\2\2\2\6\u00b9")
        buf.write("\3\2\2\2\b\u00bb\3\2\2\2\n\u00bd\3\2\2\2\f\u00bf\3\2\2")
        buf.write("\2\16\u00c1\3\2\2\2\20\u00c7\3\2\2\2\22\u00c9\3\2\2\2")
        buf.write("\24\u00cb\3\2\2\2\26\u00cd\3\2\2\2\30\u00d3\3\2\2\2\32")
        buf.write("\u00d5\3\2\2\2\34\u00d7\3\2\2\2\36\u00d9\3\2\2\2 \u00db")
        buf.write("\3\2\2\2\"\u00e8\3\2\2\2$\u00ea\3\2\2\2&\u00ec\3\2\2\2")
        buf.write("(\u00f4\3\2\2\2*\u00fc\3\2\2\2,\u0104\3\2\2\2.\u010c\3")
        buf.write("\2\2\2\60\u0114\3\2\2\2\62\u011c\3\2\2\2\64\u0124\3\2")
        buf.write("\2\2\66\u012c\3\2\2\28\u0134\3\2\2\2:\u013c\3\2\2\2<\u013e")
        buf.write("\3\2\2\2>\u0146\3\2\2\2@\u0155\3\2\2\2B\u0159\3\2\2\2")
        buf.write("D\u0163\3\2\2\2F\u016e\3\2\2\2H\u017e\3\2\2\2J\u0184\3")
        buf.write("\2\2\2L\u0186\3\2\2\2N\u0192\3\2\2\2P\u01bf\3\2\2\2R\u01d8")
        buf.write("\3\2\2\2T\u01f4\3\2\2\2V\u01f6\3\2\2\2X\u01fa\3\2\2\2")
        buf.write("Z\u0203\3\2\2\2\\\u0207\3\2\2\2^\u0213\3\2\2\2`\u0217")
        buf.write("\3\2\2\2b\u021b\3\2\2\2d\u023a\3\2\2\2f\u0244\3\2\2\2")
        buf.write("h\u0250\3\2\2\2j\u0253\3\2\2\2l\u025b\3\2\2\2n\u0267\3")
        buf.write("\2\2\2p\u027a\3\2\2\2r\u0291\3\2\2\2t\u029d\3\2\2\2v\u02b8")
        buf.write("\3\2\2\2x\u02be\3\2\2\2z\u02d8\3\2\2\2|\u02de\3\2\2\2")
        buf.write("~\u02f9\3\2\2\2\u0080\u0315\3\2\2\2\u0082\u033c\3\2\2")
        buf.write("\2\u0084\u0341\3\2\2\2\u0086\u034d\3\2\2\2\u0088\u0351")
        buf.write("\3\2\2\2\u008a\u0355\3\2\2\2\u008c\u0359\3\2\2\2\u008e")
        buf.write("\u035f\3\2\2\2\u0090\u0361\3\2\2\2\u0092\u0369\3\2\2\2")
        buf.write("\u0094\u0371\3\2\2\2\u0096\u0380\3\2\2\2\u0098\u038f\3")
        buf.write("\2\2\2\u009a\u0391\3\2\2\2\u009c\u0395\3\2\2\2\u009e\u03b6")
        buf.write("\3\2\2\2\u00a0\u03ca\3\2\2\2\u00a2\u03cc\3\2\2\2\u00a4")
        buf.write("\u03ed\3\2\2\2\u00a6\u03f3\3\2\2\2\u00a8\u0404\3\2\2\2")
        buf.write("\u00aa\u0406\3\2\2\2\u00ac\u0414\3\2\2\2\u00ae\u0416\3")
        buf.write("\2\2\2\u00b0\u0421\3\2\2\2\u00b2\u0425\3\2\2\2\u00b4\u00b5")
        buf.write("\7q\2\2\u00b5\3\3\2\2\2\u00b6\u00b8\5\2\2\2\u00b7\u00b6")
        buf.write("\3\2\2\2\u00b7\u00b8\3\2\2\2\u00b8\5\3\2\2\2\u00b9\u00ba")
        buf.write("\t\2\2\2\u00ba\7\3\2\2\2\u00bb\u00bc\t\3\2\2\u00bc\t\3")
        buf.write("\2\2\2\u00bd\u00be\t\4\2\2\u00be\13\3\2\2\2\u00bf\u00c0")
        buf.write("\7\34\2\2\u00c0\r\3\2\2\2\u00c1\u00c2\t\5\2\2\u00c2\17")
        buf.write("\3\2\2\2\u00c3\u00c8\7\36\2\2\u00c4\u00c5\7\25\2\2\u00c5")
        buf.write("\u00c8\7\25\2\2\u00c6\u00c8\7\25\2\2\u00c7\u00c3\3\2\2")
        buf.write("\2\u00c7\u00c4\3\2\2\2\u00c7\u00c6\3\2\2\2\u00c8\21\3")
        buf.write("\2\2\2\u00c9\u00ca\7\37\2\2\u00ca\23\3\2\2\2\u00cb\u00cc")
        buf.write("\7 \2\2\u00cc\25\3\2\2\2\u00cd\u00ce\t\6\2\2\u00ce\27")
        buf.write("\3\2\2\2\u00cf\u00d4\7\"\2\2\u00d0\u00d1\7\26\2\2\u00d1")
        buf.write("\u00d4\7\26\2\2\u00d2\u00d4\7\26\2\2\u00d3\u00cf\3\2\2")
        buf.write("\2\u00d3\u00d0\3\2\2\2\u00d3\u00d2\3\2\2\2\u00d4\31\3")
        buf.write("\2\2\2\u00d5\u00d6\7#\2\2\u00d6\33\3\2\2\2\u00d7\u00d8")
        buf.write("\7$\2\2\u00d8\35\3\2\2\2\u00d9\u00da\7%\2\2\u00da\37\3")
        buf.write("\2\2\2\u00db\u00dc\t\7\2\2\u00dc!\3\2\2\2\u00dd\u00e9")
        buf.write("\5\f\7\2\u00de\u00e9\5\16\b\2\u00df\u00e9\5\20\t\2\u00e0")
        buf.write("\u00e9\5\22\n\2\u00e1\u00e9\5\24\13\2\u00e2\u00e9\5\26")
        buf.write("\f\2\u00e3\u00e9\5\30\r\2\u00e4\u00e9\5\32\16\2\u00e5")
        buf.write("\u00e9\5\34\17\2\u00e6\u00e9\5\36\20\2\u00e7\u00e9\5 ")
        buf.write("\21\2\u00e8\u00dd\3\2\2\2\u00e8\u00de\3\2\2\2\u00e8\u00df")
        buf.write("\3\2\2\2\u00e8\u00e0\3\2\2\2\u00e8\u00e1\3\2\2\2\u00e8")
        buf.write("\u00e2\3\2\2\2\u00e8\u00e3\3\2\2\2\u00e8\u00e4\3\2\2\2")
        buf.write("\u00e8\u00e5\3\2\2\2\u00e8\u00e6\3\2\2\2\u00e8\u00e7\3")
        buf.write("\2\2\2\u00e9#\3\2\2\2\u00ea\u00eb\5\"\22\2\u00eb%\3\2")
        buf.write("\2\2\u00ec\u00f1\5(\25\2\u00ed\u00ee\7\35\2\2\u00ee\u00f0")
        buf.write("\5(\25\2\u00ef\u00ed\3\2\2\2\u00f0\u00f3\3\2\2\2\u00f1")
        buf.write("\u00ef\3\2\2\2\u00f1\u00f2\3\2\2\2\u00f2\'\3\2\2\2\u00f3")
        buf.write("\u00f1\3\2\2\2\u00f4\u00f9\5*\26\2\u00f5\u00f6\7\36\2")
        buf.write("\2\u00f6\u00f8\5*\26\2\u00f7\u00f5\3\2\2\2\u00f8\u00fb")
        buf.write("\3\2\2\2\u00f9\u00f7\3\2\2\2\u00f9\u00fa\3\2\2\2\u00fa")
        buf.write(")\3\2\2\2\u00fb\u00f9\3\2\2\2\u00fc\u0101\5,\27\2\u00fd")
        buf.write("\u00fe\7\37\2\2\u00fe\u0100\5,\27\2\u00ff\u00fd\3\2\2")
        buf.write("\2\u0100\u0103\3\2\2\2\u0101\u00ff\3\2\2\2\u0101\u0102")
        buf.write("\3\2\2\2\u0102+\3\2\2\2\u0103\u0101\3\2\2\2\u0104\u0109")
        buf.write("\5.\30\2\u0105\u0106\7 \2\2\u0106\u0108\5.\30\2\u0107")
        buf.write("\u0105\3\2\2\2\u0108\u010b\3\2\2\2\u0109\u0107\3\2\2\2")
        buf.write("\u0109\u010a\3\2\2\2\u010a-\3\2\2\2\u010b\u0109\3\2\2")
        buf.write("\2\u010c\u0111\5\60\31\2\u010d\u010e\7!\2\2\u010e\u0110")
        buf.write("\5\60\31\2\u010f\u010d\3\2\2\2\u0110\u0113\3\2\2\2\u0111")
        buf.write("\u010f\3\2\2\2\u0111\u0112\3\2\2\2\u0112/\3\2\2\2\u0113")
        buf.write("\u0111\3\2\2\2\u0114\u0119\5\62\32\2\u0115\u0116\7\"\2")
        buf.write("\2\u0116\u0118\5\62\32\2\u0117\u0115\3\2\2\2\u0118\u011b")
        buf.write("\3\2\2\2\u0119\u0117\3\2\2\2\u0119\u011a\3\2\2\2\u011a")
        buf.write("\61\3\2\2\2\u011b\u0119\3\2\2\2\u011c\u0121\5\64\33\2")
        buf.write("\u011d\u011e\7#\2\2\u011e\u0120\5\64\33\2\u011f\u011d")
        buf.write("\3\2\2\2\u0120\u0123\3\2\2\2\u0121\u011f\3\2\2\2\u0121")
        buf.write("\u0122\3\2\2\2\u0122\63\3\2\2\2\u0123\u0121\3\2\2\2\u0124")
        buf.write("\u0129\5\66\34\2\u0125\u0126\7$\2\2\u0126\u0128\5\66\34")
        buf.write("\2\u0127\u0125\3\2\2\2\u0128\u012b\3\2\2\2\u0129\u0127")
        buf.write("\3\2\2\2\u0129\u012a\3\2\2\2\u012a\65\3\2\2\2\u012b\u0129")
        buf.write("\3\2\2\2\u012c\u0131\58\35\2\u012d\u012e\7%\2\2\u012e")
        buf.write("\u0130\58\35\2\u012f\u012d\3\2\2\2\u0130\u0133\3\2\2\2")
        buf.write("\u0131\u012f\3\2\2\2\u0131\u0132\3\2\2\2\u0132\67\3\2")
        buf.write("\2\2\u0133\u0131\3\2\2\2\u0134\u0139\5R*\2\u0135\u0136")
        buf.write("\7&\2\2\u0136\u0138\5R*\2\u0137\u0135\3\2\2\2\u0138\u013b")
        buf.write("\3\2\2\2\u0139\u0137\3\2\2\2\u0139\u013a\3\2\2\2\u013a")
        buf.write("9\3\2\2\2\u013b\u0139\3\2\2\2\u013c\u013d\t\b\2\2\u013d")
        buf.write(";\3\2\2\2\u013e\u013f\t\t\2\2\u013f=\3\2\2\2\u0140\u0147")
        buf.write("\5@!\2\u0141\u0142\7W\2\2\u0142\u0143\5@!\2\u0143\u0144")
        buf.write("\7W\2\2\u0144\u0147\3\2\2\2\u0145\u0147\7X\2\2\u0146\u0140")
        buf.write("\3\2\2\2\u0146\u0141\3\2\2\2\u0146\u0145\3\2\2\2\u0147")
        buf.write("?\3\2\2\2\u0148\u0156\7X\2\2\u0149\u0156\5:\36\2\u014a")
        buf.write("\u0151\5\"\22\2\u014b\u0151\7\n\2\2\u014c\u0151\7\13\2")
        buf.write("\2\u014d\u0151\7\16\2\2\u014e\u0151\7\17\2\2\u014f\u0151")
        buf.write("\7\27\2\2\u0150\u014a\3\2\2\2\u0150\u014b\3\2\2\2\u0150")
        buf.write("\u014c\3\2\2\2\u0150\u014d\3\2\2\2\u0150\u014e\3\2\2\2")
        buf.write("\u0150\u014f\3\2\2\2\u0151\u0154\3\2\2\2\u0152\u0150\3")
        buf.write("\2\2\2\u0152\u0153\3\2\2\2\u0153\u0156\3\2\2\2\u0154\u0152")
        buf.write("\3\2\2\2\u0155\u0148\3\2\2\2\u0155\u0149\3\2\2\2\u0155")
        buf.write("\u0152\3\2\2\2\u0156A\3\2\2\2\u0157\u015a\5\u008eH\2\u0158")
        buf.write("\u015a\5&\24\2\u0159\u0157\3\2\2\2\u0159\u0158\3\2\2\2")
        buf.write("\u015a\u0161\3\2\2\2\u015b\u0162\7\25\2\2\u015c\u015f")
        buf.write("\7\27\2\2\u015d\u0160\5\u008eH\2\u015e\u0160\5&\24\2\u015f")
        buf.write("\u015d\3\2\2\2\u015f\u015e\3\2\2\2\u0160\u0162\3\2\2\2")
        buf.write("\u0161\u015b\3\2\2\2\u0161\u015c\3\2\2\2\u0161\u0162\3")
        buf.write("\2\2\2\u0162C\3\2\2\2\u0163\u0164\7\16\2\2\u0164\u0169")
        buf.write("\5B\"\2\u0165\u0166\7\b\2\2\u0166\u0168\5B\"\2\u0167\u0165")
        buf.write("\3\2\2\2\u0168\u016b\3\2\2\2\u0169\u0167\3\2\2\2\u0169")
        buf.write("\u016a\3\2\2\2\u016a\u016c\3\2\2\2\u016b\u0169\3\2\2\2")
        buf.write("\u016c\u016d\7\17\2\2\u016dE\3\2\2\2\u016e\u016f\7\n\2")
        buf.write("\2\u016f\u0174\5B\"\2\u0170\u0171\7\b\2\2\u0171\u0173")
        buf.write("\5B\"\2\u0172\u0170\3\2\2\2\u0173\u0176\3\2\2\2\u0174")
        buf.write("\u0172\3\2\2\2\u0174\u0175\3\2\2\2\u0175\u0177\3\2\2\2")
        buf.write("\u0176\u0174\3\2\2\2\u0177\u0178\7\13\2\2\u0178G\3\2\2")
        buf.write("\2\u0179\u017f\5<\37\2\u017a\u017f\5> \2\u017b\u017f\5")
        buf.write(":\36\2\u017c\u017f\5V,\2\u017d\u017f\5D#\2\u017e\u0179")
        buf.write("\3\2\2\2\u017e\u017a\3\2\2\2\u017e\u017b\3\2\2\2\u017e")
        buf.write("\u017c\3\2\2\2\u017e\u017d\3\2\2\2\u017fI\3\2\2\2\u0180")
        buf.write("\u0185\5<\37\2\u0181\u0185\5> \2\u0182\u0185\5V,\2\u0183")
        buf.write("\u0185\5D#\2\u0184\u0180\3\2\2\2\u0184\u0181\3\2\2\2\u0184")
        buf.write("\u0182\3\2\2\2\u0184\u0183\3\2\2\2\u0185K\3\2\2\2\u0186")
        buf.write("\u0187\7\33\2\2\u0187\u0188\5J&\2\u0188M\3\2\2\2\u0189")
        buf.write("\u0193\7X\2\2\u018a\u0193\5:\36\2\u018b\u0193\5<\37\2")
        buf.write("\u018c\u018f\7X\2\2\u018d\u0190\5D#\2\u018e\u0190\5F$")
        buf.write("\2\u018f\u018d\3\2\2\2\u018f\u018e\3\2\2\2\u0190\u0193")
        buf.write("\3\2\2\2\u0191\u0193\5L\'\2\u0192\u0189\3\2\2\2\u0192")
        buf.write("\u018a\3\2\2\2\u0192\u018b\3\2\2\2\u0192\u018c\3\2\2\2")
        buf.write("\u0192\u0191\3\2\2\2\u0193O\3\2\2\2\u0194\u0199\5N(\2")
        buf.write("\u0195\u0196\7\b\2\2\u0196\u0198\5N(\2\u0197\u0195\3\2")
        buf.write("\2\2\u0198\u019b\3\2\2\2\u0199\u0197\3\2\2\2\u0199\u019a")
        buf.write("\3\2\2\2\u019a\u01c0\3\2\2\2\u019b\u0199\3\2\2\2\u019c")
        buf.write("\u019d\7\n\2\2\u019d\u01a2\5B\"\2\u019e\u019f\7\b\2\2")
        buf.write("\u019f\u01a1\5B\"\2\u01a0\u019e\3\2\2\2\u01a1\u01a4\3")
        buf.write("\2\2\2\u01a2\u01a0\3\2\2\2\u01a2\u01a3\3\2\2\2\u01a3\u01a5")
        buf.write("\3\2\2\2\u01a4\u01a2\3\2\2\2\u01a5\u01a6\7\13\2\2\u01a6")
        buf.write("\u01c0\3\2\2\2\u01a7\u01a8\7\26\2\2\u01a8\u01aa\5> \2")
        buf.write("\u01a9\u01ab\5<\37\2\u01aa\u01a9\3\2\2\2\u01aa\u01ab\3")
        buf.write("\2\2\2\u01ab\u01c0\3\2\2\2\u01ac\u01af\7\16\2\2\u01ad")
        buf.write("\u01b0\5&\24\2\u01ae\u01b0\5\u008eH\2\u01af\u01ad\3\2")
        buf.write("\2\2\u01af\u01ae\3\2\2\2\u01b0\u01b8\3\2\2\2\u01b1\u01b4")
        buf.write("\7\b\2\2\u01b2\u01b5\5&\24\2\u01b3\u01b5\5\u008eH\2\u01b4")
        buf.write("\u01b2\3\2\2\2\u01b4\u01b3\3\2\2\2\u01b5\u01b7\3\2\2\2")
        buf.write("\u01b6\u01b1\3\2\2\2\u01b7\u01ba\3\2\2\2\u01b8\u01b6\3")
        buf.write("\2\2\2\u01b8\u01b9\3\2\2\2\u01b9\u01bb\3\2\2\2\u01ba\u01b8")
        buf.write("\3\2\2\2\u01bb\u01bc\7\17\2\2\u01bc\u01c0\3\2\2\2\u01bd")
        buf.write("\u01be\6)\2\2\u01be\u01c0\5\u008eH\2\u01bf\u0194\3\2\2")
        buf.write("\2\u01bf\u019c\3\2\2\2\u01bf\u01a7\3\2\2\2\u01bf\u01ac")
        buf.write("\3\2\2\2\u01bf\u01bd\3\2\2\2\u01c0Q\3\2\2\2\u01c1\u01c2")
        buf.write("\5\b\5\2\u01c2\u01c3\5&\24\2\u01c3\u01d9\3\2\2\2\u01c4")
        buf.write("\u01c6\5$\23\2\u01c5\u01c4\3\2\2\2\u01c6\u01c9\3\2\2\2")
        buf.write("\u01c7\u01c5\3\2\2\2\u01c7\u01c8\3\2\2\2\u01c8\u01d6\3")
        buf.write("\2\2\2\u01c9\u01c7\3\2\2\2\u01ca\u01ce\5H%\2\u01cb\u01cd")
        buf.write("\5P)\2\u01cc\u01cb\3\2\2\2\u01cd\u01d0\3\2\2\2\u01ce\u01cc")
        buf.write("\3\2\2\2\u01ce\u01cf\3\2\2\2\u01cf\u01d7\3\2\2\2\u01d0")
        buf.write("\u01ce\3\2\2\2\u01d1\u01d3\5P)\2\u01d2\u01d1\3\2\2\2\u01d3")
        buf.write("\u01d4\3\2\2\2\u01d4\u01d2\3\2\2\2\u01d4\u01d5\3\2\2\2")
        buf.write("\u01d5\u01d7\3\2\2\2\u01d6\u01ca\3\2\2\2\u01d6\u01d2\3")
        buf.write("\2\2\2\u01d7\u01d9\3\2\2\2\u01d8\u01c1\3\2\2\2\u01d8\u01c7")
        buf.write("\3\2\2\2\u01d9S\3\2\2\2\u01da\u01db\6+\3\2\u01db\u01de")
        buf.write("\5\u00a4S\2\u01dc\u01dd\7\t\2\2\u01dd\u01df\5\u00a4S\2")
        buf.write("\u01de\u01dc\3\2\2\2\u01de\u01df\3\2\2\2\u01df\u01f5\3")
        buf.write("\2\2\2\u01e0\u01f5\5\u008eH\2\u01e1\u01e5\7\25\2\2\u01e2")
        buf.write("\u01e3\7\27\2\2\u01e3\u01e5\5\u008eH\2\u01e4\u01e1\3\2")
        buf.write("\2\2\u01e4\u01e2\3\2\2\2\u01e5\u01f2\3\2\2\2\u01e6\u01e7")
        buf.write("\7\b\2\2\u01e7\u01e9\5B\"\2\u01e8\u01e6\3\2\2\2\u01e9")
        buf.write("\u01ea\3\2\2\2\u01ea\u01e8\3\2\2\2\u01ea\u01eb\3\2\2\2")
        buf.write("\u01eb\u01f3\3\2\2\2\u01ec\u01ee\7\t\2\2\u01ed\u01ef\5")
        buf.write("\u00a4S\2\u01ee\u01ed\3\2\2\2\u01ef\u01f0\3\2\2\2\u01f0")
        buf.write("\u01ee\3\2\2\2\u01f0\u01f1\3\2\2\2\u01f1\u01f3\3\2\2\2")
        buf.write("\u01f2\u01e8\3\2\2\2\u01f2\u01ec\3\2\2\2\u01f3\u01f5\3")
        buf.write("\2\2\2\u01f4\u01da\3\2\2\2\u01f4\u01e0\3\2\2\2\u01f4\u01e4")
        buf.write("\3\2\2\2\u01f5U\3\2\2\2\u01f6\u01f7\7\n\2\2\u01f7\u01f8")
        buf.write("\5T+\2\u01f8\u01f9\7\13\2\2\u01f9W\3\2\2\2\u01fa\u01fb")
        buf.write("\7G\2\2\u01fb\u0200\7X\2\2\u01fc\u01fd\7\b\2\2\u01fd\u01ff")
        buf.write("\7X\2\2\u01fe\u01fc\3\2\2\2\u01ff\u0202\3\2\2\2\u0200")
        buf.write("\u01fe\3\2\2\2\u0200\u0201\3\2\2\2\u0201Y\3\2\2\2\u0202")
        buf.write("\u0200\3\2\2\2\u0203\u0204\7H\2\2\u0204\u0205\7X\2\2\u0205")
        buf.write("\u0206\5X-\2\u0206[\3\2\2\2\u0207\u0209\7O\2\2\u0208\u020a")
        buf.write("\5> \2\u0209\u0208\3\2\2\2\u0209\u020a\3\2\2\2\u020a\u020b")
        buf.write("\3\2\2\2\u020b\u0211\7\25\2\2\u020c\u0212\5\u00aeX\2\u020d")
        buf.write("\u020e\5\2\2\2\u020e\u020f\5\u00aeX\2\u020f\u0210\5\6")
        buf.write("\4\2\u0210\u0212\3\2\2\2\u0211\u020c\3\2\2\2\u0211\u020d")
        buf.write("\3\2\2\2\u0212]\3\2\2\2\u0213\u0214\5x=\2\u0214_\3\2\2")
        buf.write("\2\u0215\u0218\5&\24\2\u0216\u0218\5\u008eH\2\u0217\u0215")
        buf.write("\3\2\2\2\u0217\u0216\3\2\2\2\u0218a\3\2\2\2\u0219\u021c")
        buf.write("\5&\24\2\u021a\u021c\5\u008eH\2\u021b\u0219\3\2\2\2\u021b")
        buf.write("\u021a\3\2\2\2\u021c\u022c\3\2\2\2\u021d\u0220\79\2\2")
        buf.write("\u021e\u0221\5\u008eH\2\u021f\u0221\5&\24\2\u0220\u021e")
        buf.write("\3\2\2\2\u0220\u021f\3\2\2\2\u0221\u0222\3\2\2\2\u0222")
        buf.write("\u0228\7\25\2\2\u0223\u0224\5\2\2\2\u0224\u0225\5`\61")
        buf.write("\2\u0225\u0226\5\6\4\2\u0226\u0229\3\2\2\2\u0227\u0229")
        buf.write("\5`\61\2\u0228\u0223\3\2\2\2\u0228\u0227\3\2\2\2\u0229")
        buf.write("\u022b\3\2\2\2\u022a\u021d\3\2\2\2\u022b\u022e\3\2\2\2")
        buf.write("\u022c\u022a\3\2\2\2\u022c\u022d\3\2\2\2\u022d\u022f\3")
        buf.write("\2\2\2\u022e\u022c\3\2\2\2\u022f\u0230\7:\2\2\u0230\u0236")
        buf.write("\7\25\2\2\u0231\u0232\5\2\2\2\u0232\u0233\5,\27\2\u0233")
        buf.write("\u0234\5\6\4\2\u0234\u0237\3\2\2\2\u0235\u0237\5`\61\2")
        buf.write("\u0236\u0231\3\2\2\2\u0236\u0235\3\2\2\2\u0237c\3\2\2")
        buf.write("\2\u0238\u023b\5&\24\2\u0239\u023b\5\u008eH\2\u023a\u0238")
        buf.write("\3\2\2\2\u023a\u0239\3\2\2\2\u023b\u023c\3\2\2\2\u023c")
        buf.write("\u0242\7\25\2\2\u023d\u023e\5\2\2\2\u023e\u023f\5b\62")
        buf.write("\2\u023f\u0240\5\6\4\2\u0240\u0243\3\2\2\2\u0241\u0243")
        buf.write("\5b\62\2\u0242\u023d\3\2\2\2\u0242\u0241\3\2\2\2\u0243")
        buf.write("e\3\2\2\2\u0244\u0247\7\67\2\2\u0245\u0248\5&\24\2\u0246")
        buf.write("\u0248\5\u008eH\2\u0247\u0245\3\2\2\2\u0247\u0246\3\2")
        buf.write("\2\2\u0248\u024e\3\2\2\2\u0249\u024a\5\2\2\2\u024a\u024b")
        buf.write("\5p9\2\u024b\u024c\5\6\4\2\u024c\u024f\3\2\2\2\u024d\u024f")
        buf.write("\5p9\2\u024e\u0249\3\2\2\2\u024e\u024d\3\2\2\2\u024fg")
        buf.write("\3\2\2\2\u0250\u0251\7D\2\2\u0251\u0252\5d\63\2\u0252")
        buf.write("i\3\2\2\2\u0253\u0255\78\2\2\u0254\u0256\7\32\2\2\u0255")
        buf.write("\u0254\3\2\2\2\u0255\u0256\3\2\2\2\u0256\u0257\3\2\2\2")
        buf.write("\u0257\u0258\5d\63\2\u0258k\3\2\2\2\u0259\u025c\5&\24")
        buf.write("\2\u025a\u025c\5\u008eH\2\u025b\u0259\3\2\2\2\u025b\u025a")
        buf.write("\3\2\2\2\u025c\u0264\3\2\2\2\u025d\u0260\7\b\2\2\u025e")
        buf.write("\u0261\5&\24\2\u025f\u0261\5\u008eH\2\u0260\u025e\3\2")
        buf.write("\2\2\u0260\u025f\3\2\2\2\u0261\u0263\3\2\2\2\u0262\u025d")
        buf.write("\3\2\2\2\u0263\u0266\3\2\2\2\u0264\u0262\3\2\2\2\u0264")
        buf.write("\u0265\3\2\2\2\u0265m\3\2\2\2\u0266\u0264\3\2\2\2\u0267")
        buf.write("\u0268\7\31\2\2\u0268\u0269\5l\67\2\u0269\u0277\7\25\2")
        buf.write("\2\u026a\u026d\5\2\2\2\u026b\u026e\5\u00acW\2\u026c\u026e")
        buf.write("\5\u00aeX\2\u026d\u026b\3\2\2\2\u026d\u026c\3\2\2\2\u026e")
        buf.write("\u026f\3\2\2\2\u026f\u026d\3\2\2\2\u026f\u0270\3\2\2\2")
        buf.write("\u0270\u0271\3\2\2\2\u0271\u0272\5\6\4\2\u0272\u0278\3")
        buf.write("\2\2\2\u0273\u0276\5\u00acW\2\u0274\u0276\5\u00aeX\2\u0275")
        buf.write("\u0273\3\2\2\2\u0275\u0274\3\2\2\2\u0276\u0278\3\2\2\2")
        buf.write("\u0277\u026a\3\2\2\2\u0277\u0275\3\2\2\2\u0278o\3\2\2")
        buf.write("\2\u0279\u027b\5n8\2\u027a\u0279\3\2\2\2\u027b\u027c\3")
        buf.write("\2\2\2\u027c\u027a\3\2\2\2\u027c\u027d\3\2\2\2\u027d\u028f")
        buf.write("\3\2\2\2\u027e\u027f\7:\2\2\u027f\u028d\7\25\2\2\u0280")
        buf.write("\u0283\5\2\2\2\u0281\u0284\5\u00acW\2\u0282\u0284\5\u00ae")
        buf.write("X\2\u0283\u0281\3\2\2\2\u0283\u0282\3\2\2\2\u0284\u0285")
        buf.write("\3\2\2\2\u0285\u0283\3\2\2\2\u0285\u0286\3\2\2\2\u0286")
        buf.write("\u0287\3\2\2\2\u0287\u0288\5\6\4\2\u0288\u028e\3\2\2\2")
        buf.write("\u0289\u028c\5\u00acW\2\u028a\u028c\5\u00aeX\2\u028b\u0289")
        buf.write("\3\2\2\2\u028b\u028a\3\2\2\2\u028c\u028e\3\2\2\2\u028d")
        buf.write("\u0280\3\2\2\2\u028d\u028b\3\2\2\2\u028e\u0290\3\2\2\2")
        buf.write("\u028f\u027e\3\2\2\2\u028f\u0290\3\2\2\2\u0290q\3\2\2")
        buf.write("\2\u0291\u0294\7\67\2\2\u0292\u0295\5&\24\2\u0293\u0295")
        buf.write("\5\u008eH\2\u0294\u0292\3\2\2\2\u0294\u0293\3\2\2\2\u0295")
        buf.write("\u029b\3\2\2\2\u0296\u0297\5\2\2\2\u0297\u0298\5p9\2\u0298")
        buf.write("\u0299\5\6\4\2\u0299\u029c\3\2\2\2\u029a\u029c\5p9\2\u029b")
        buf.write("\u0296\3\2\2\2\u029b\u029a\3\2\2\2\u029cs\3\2\2\2\u029d")
        buf.write("\u02a0\7<\2\2\u029e\u02a1\5&\24\2\u029f\u02a1\5\u008e")
        buf.write("H\2\u02a0\u029e\3\2\2\2\u02a0\u029f\3\2\2\2\u02a1\u02a2")
        buf.write("\3\2\2\2\u02a2\u02b6\7\25\2\2\u02a3\u02aa\5\2\2\2\u02a4")
        buf.write("\u02a6\5\u00acW\2\u02a5\u02a4\3\2\2\2\u02a6\u02a7\3\2")
        buf.write("\2\2\u02a7\u02a5\3\2\2\2\u02a7\u02a8\3\2\2\2\u02a8\u02ab")
        buf.write("\3\2\2\2\u02a9\u02ab\5\u00aeX\2\u02aa\u02a5\3\2\2\2\u02aa")
        buf.write("\u02a9\3\2\2\2\u02ab\u02ac\3\2\2\2\u02ac\u02ad\5\6\4\2")
        buf.write("\u02ad\u02b7\3\2\2\2\u02ae\u02b0\5\u00acW\2\u02af\u02ae")
        buf.write("\3\2\2\2\u02b0\u02b1\3\2\2\2\u02b1\u02af\3\2\2\2\u02b1")
        buf.write("\u02b2\3\2\2\2\u02b2\u02b5\3\2\2\2\u02b3\u02b5\5\u00ae")
        buf.write("X\2\u02b4\u02af\3\2\2\2\u02b4\u02b3\3\2\2\2\u02b5\u02b7")
        buf.write("\3\2\2\2\u02b6\u02a3\3\2\2\2\u02b6\u02b4\3\2\2\2\u02b7")
        buf.write("u\3\2\2\2\u02b8\u02ba\7D\2\2\u02b9\u02bb\7\32\2\2\u02ba")
        buf.write("\u02b9\3\2\2\2\u02ba\u02bb\3\2\2\2\u02bb\u02bc\3\2\2\2")
        buf.write("\u02bc\u02bd\5\u0082B\2\u02bdw\3\2\2\2\u02be\u02bf\7>")
        buf.write("\2\2\u02bf\u02c4\7X\2\2\u02c0\u02c1\7\b\2\2\u02c1\u02c3")
        buf.write("\7X\2\2\u02c2\u02c0\3\2\2\2\u02c3\u02c6\3\2\2\2\u02c4")
        buf.write("\u02c2\3\2\2\2\u02c4\u02c5\3\2\2\2\u02c5\u02c7\3\2\2\2")
        buf.write("\u02c6\u02c4\3\2\2\2\u02c7\u02c8\7\30\2\2\u02c8\u02c9")
        buf.write("\5&\24\2\u02c9\u02d6\7\25\2\2\u02ca\u02cc\5\2\2\2\u02cb")
        buf.write("\u02cd\5\u00aeX\2\u02cc\u02cb\3\2\2\2\u02cd\u02ce\3\2")
        buf.write("\2\2\u02ce\u02cc\3\2\2\2\u02ce\u02cf\3\2\2\2\u02cf\u02d0")
        buf.write("\3\2\2\2\u02d0\u02d1\5\6\4\2\u02d1\u02d7\3\2\2\2\u02d2")
        buf.write("\u02d5\5\u00aeX\2\u02d3\u02d5\5\u00acW\2\u02d4\u02d2\3")
        buf.write("\2\2\2\u02d4\u02d3\3\2\2\2\u02d5\u02d7\3\2\2\2\u02d6\u02ca")
        buf.write("\3\2\2\2\u02d6\u02d4\3\2\2\2\u02d7y\3\2\2\2\u02d8\u02da")
        buf.write("\78\2\2\u02d9\u02db\7\32\2\2\u02da\u02d9\3\2\2\2\u02da")
        buf.write("\u02db\3\2\2\2\u02db\u02dc\3\2\2\2\u02dc\u02dd\5\u0082")
        buf.write("B\2\u02dd{\3\2\2\2\u02de\u02e1\79\2\2\u02df\u02e2\5&\24")
        buf.write("\2\u02e0\u02e2\5\u008eH\2\u02e1\u02df\3\2\2\2\u02e1\u02e0")
        buf.write("\3\2\2\2\u02e2\u02e3\3\2\2\2\u02e3\u02f7\7\25\2\2\u02e4")
        buf.write("\u02eb\5\2\2\2\u02e5\u02e7\5\u00acW\2\u02e6\u02e5\3\2")
        buf.write("\2\2\u02e7\u02e8\3\2\2\2\u02e8\u02e6\3\2\2\2\u02e8\u02e9")
        buf.write("\3\2\2\2\u02e9\u02ec\3\2\2\2\u02ea\u02ec\5\u00aeX\2\u02eb")
        buf.write("\u02e6\3\2\2\2\u02eb\u02ea\3\2\2\2\u02ec\u02ed\3\2\2\2")
        buf.write("\u02ed\u02ee\5\6\4\2\u02ee\u02f8\3\2\2\2\u02ef\u02f1\5")
        buf.write("\u00acW\2\u02f0\u02ef\3\2\2\2\u02f1\u02f2\3\2\2\2\u02f2")
        buf.write("\u02f0\3\2\2\2\u02f2\u02f3\3\2\2\2\u02f3\u02f6\3\2\2\2")
        buf.write("\u02f4\u02f6\5\u00aeX\2\u02f5\u02f0\3\2\2\2\u02f5\u02f4")
        buf.write("\3\2\2\2\u02f6\u02f8\3\2\2\2\u02f7\u02e4\3\2\2\2\u02f7")
        buf.write("\u02f5\3\2\2\2\u02f8}\3\2\2\2\u02f9\u02fa\7:\2\2\u02fa")
        buf.write("\u030e\7\25\2\2\u02fb\u0302\5\2\2\2\u02fc\u02fe\5\u00ac")
        buf.write("W\2\u02fd\u02fc\3\2\2\2\u02fe\u02ff\3\2\2\2\u02ff\u02fd")
        buf.write("\3\2\2\2\u02ff\u0300\3\2\2\2\u0300\u0303\3\2\2\2\u0301")
        buf.write("\u0303\5\u00aeX\2\u0302\u02fd\3\2\2\2\u0302\u0301\3\2")
        buf.write("\2\2\u0303\u0304\3\2\2\2\u0304\u0305\5\6\4\2\u0305\u030f")
        buf.write("\3\2\2\2\u0306\u0308\5\u00acW\2\u0307\u0306\3\2\2\2\u0308")
        buf.write("\u0309\3\2\2\2\u0309\u0307\3\2\2\2\u0309\u030a\3\2\2\2")
        buf.write("\u030a\u030d\3\2\2\2\u030b\u030d\5\u00aeX\2\u030c\u0307")
        buf.write("\3\2\2\2\u030c\u030b\3\2\2\2\u030d\u030f\3\2\2\2\u030e")
        buf.write("\u02fb\3\2\2\2\u030e\u030c\3\2\2\2\u030f\177\3\2\2\2\u0310")
        buf.write("\u0311\5\2\2\2\u0311\u0312\5\u00aeX\2\u0312\u0313\5\6")
        buf.write("\4\2\u0313\u0316\3\2\2\2\u0314\u0316\5\u00aeX\2\u0315")
        buf.write("\u0310\3\2\2\2\u0315\u0314\3\2\2\2\u0316\u0338\3\2\2\2")
        buf.write("\u0317\u031b\5\2\2\2\u0318\u031a\5|?\2\u0319\u0318\3\2")
        buf.write("\2\2\u031a\u031d\3\2\2\2\u031b\u0319\3\2\2\2\u031b\u031c")
        buf.write("\3\2\2\2\u031c\u031f\3\2\2\2\u031d\u031b\3\2\2\2\u031e")
        buf.write("\u0320\5~@\2\u031f\u031e\3\2\2\2\u031f\u0320\3\2\2\2\u0320")
        buf.write("\u0321\3\2\2\2\u0321\u0322\5\6\4\2\u0322\u0339\3\2\2\2")
        buf.write("\u0323\u0325\5|?\2\u0324\u0323\3\2\2\2\u0325\u0328\3\2")
        buf.write("\2\2\u0326\u0324\3\2\2\2\u0326\u0327\3\2\2\2\u0327\u0329")
        buf.write("\3\2\2\2\u0328\u0326\3\2\2\2\u0329\u032b\5\2\2\2\u032a")
        buf.write("\u032c\5~@\2\u032b\u032a\3\2\2\2\u032b\u032c\3\2\2\2\u032c")
        buf.write("\u032d\3\2\2\2\u032d\u032e\5\6\4\2\u032e\u0339\3\2\2\2")
        buf.write("\u032f\u0331\5|?\2\u0330\u032f\3\2\2\2\u0331\u0334\3\2")
        buf.write("\2\2\u0332\u0330\3\2\2\2\u0332\u0333\3\2\2\2\u0333\u0336")
        buf.write("\3\2\2\2\u0334\u0332\3\2\2\2\u0335\u0337\5~@\2\u0336\u0335")
        buf.write("\3\2\2\2\u0336\u0337\3\2\2\2\u0337\u0339\3\2\2\2\u0338")
        buf.write("\u0317\3\2\2\2\u0338\u0326\3\2\2\2\u0338\u0332\3\2\2\2")
        buf.write("\u0339\u0081\3\2\2\2\u033a\u033d\5&\24\2\u033b\u033d\5")
        buf.write("\u008eH\2\u033c\u033a\3\2\2\2\u033c\u033b\3\2\2\2\u033d")
        buf.write("\u033e\3\2\2\2\u033e\u033f\7\25\2\2\u033f\u0340\5\u0080")
        buf.write("A\2\u0340\u0083\3\2\2\2\u0341\u0343\7O\2\2\u0342\u0344")
        buf.write("\5> \2\u0343\u0342\3\2\2\2\u0343\u0344\3\2\2\2\u0344\u0345")
        buf.write("\3\2\2\2\u0345\u034b\7\25\2\2\u0346\u0347\5\2\2\2\u0347")
        buf.write("\u0348\5\u00aeX\2\u0348\u0349\5\6\4\2\u0349\u034c\3\2")
        buf.write("\2\2\u034a\u034c\5\u00aeX\2\u034b\u0346\3\2\2\2\u034b")
        buf.write("\u034a\3\2\2\2\u034c\u0085\3\2\2\2\u034d\u034f\7U\2\2")
        buf.write("\u034e\u0350\5&\24\2\u034f\u034e\3\2\2\2\u034f\u0350\3")
        buf.write("\2\2\2\u0350\u0087\3\2\2\2\u0351\u0353\7\62\2\2\u0352")
        buf.write("\u0354\5&\24\2\u0353\u0352\3\2\2\2\u0353\u0354\3\2\2\2")
        buf.write("\u0354\u0089\3\2\2\2\u0355\u0357\7@\2\2\u0356\u0358\5")
        buf.write("&\24\2\u0357\u0356\3\2\2\2\u0357\u0358\3\2\2\2\u0358\u008b")
        buf.write("\3\2\2\2\u0359\u035a\5\u0090I\2\u035a\u008d\3\2\2\2\u035b")
        buf.write("\u0360\5\\/\2\u035c\u0360\5^\60\2\u035d\u0360\5j\66\2")
        buf.write("\u035e\u0360\5h\65\2\u035f\u035b\3\2\2\2\u035f\u035c\3")
        buf.write("\2\2\2\u035f\u035d\3\2\2\2\u035f\u035e\3\2\2\2\u0360\u008f")
        buf.write("\3\2\2\2\u0361\u0362\7\f\2\2\u0362\u0363\7\26\2\2\u0363")
        buf.write("\u0365\7X\2\2\u0364\u0366\7\26\2\2\u0365\u0364\3\2\2\2")
        buf.write("\u0365\u0366\3\2\2\2\u0366\u0367\3\2\2\2\u0367\u0368\7")
        buf.write("\r\2\2\u0368\u0091\3\2\2\2\u0369\u036e\5V,\2\u036a\u036b")
        buf.write("\7\25\2\2\u036b\u036d\5\u00aeX\2\u036c\u036a\3\2\2\2\u036d")
        buf.write("\u0370\3\2\2\2\u036e\u036c\3\2\2\2\u036e\u036f\3\2\2\2")
        buf.write("\u036f\u0093\3\2\2\2\u0370\u036e\3\2\2\2\u0371\u0372\7")
        buf.write("\f\2\2\u0372\u0095\3\2\2\2\u0373\u0375\5\u00a0Q\2\u0374")
        buf.write("\u0373\3\2\2\2\u0375\u0376\3\2\2\2\u0376\u0374\3\2\2\2")
        buf.write("\u0376\u0377\3\2\2\2\u0377\u0381\3\2\2\2\u0378\u037a\5")
        buf.write("\2\2\2\u0379\u037b\5\u00a0Q\2\u037a\u0379\3\2\2\2\u037b")
        buf.write("\u037c\3\2\2\2\u037c\u037a\3\2\2\2\u037c\u037d\3\2\2\2")
        buf.write("\u037d\u037e\3\2\2\2\u037e\u037f\5\6\4\2\u037f\u0381\3")
        buf.write("\2\2\2\u0380\u0374\3\2\2\2\u0380\u0378\3\2\2\2\u0381\u0097")
        buf.write("\3\2\2\2\u0382\u0384\5\u009eP\2\u0383\u0382\3\2\2\2\u0384")
        buf.write("\u0385\3\2\2\2\u0385\u0383\3\2\2\2\u0385\u0386\3\2\2\2")
        buf.write("\u0386\u0390\3\2\2\2\u0387\u0389\5\2\2\2\u0388\u038a\5")
        buf.write("\u009eP\2\u0389\u0388\3\2\2\2\u038a\u038b\3\2\2\2\u038b")
        buf.write("\u0389\3\2\2\2\u038b\u038c\3\2\2\2\u038c\u038d\3\2\2\2")
        buf.write("\u038d\u038e\5\6\4\2\u038e\u0390\3\2\2\2\u038f\u0383\3")
        buf.write("\2\2\2\u038f\u0387\3\2\2\2\u0390\u0099\3\2\2\2\u0391\u0393")
        buf.write("\5> \2\u0392\u0394\5\"\22\2\u0393\u0392\3\2\2\2\u0393")
        buf.write("\u0394\3\2\2\2\u0394\u009b\3\2\2\2\u0395\u0396\7\f\2\2")
        buf.write("\u0396\u039b\5\u009aN\2\u0397\u0398\7\b\2\2\u0398\u039a")
        buf.write("\5\u009aN\2\u0399\u0397\3\2\2\2\u039a\u039d\3\2\2\2\u039b")
        buf.write("\u0399\3\2\2\2\u039b\u039c\3\2\2\2\u039c\u03a3\3\2\2\2")
        buf.write("\u039d\u039b\3\2\2\2\u039e\u039f\5\2\2\2\u039f\u03a0\7")
        buf.write("\r\2\2\u03a0\u03a1\5\6\4\2\u03a1\u03a4\3\2\2\2\u03a2\u03a4")
        buf.write("\7\r\2\2\u03a3\u039e\3\2\2\2\u03a3\u03a2\3\2\2\2\u03a4")
        buf.write("\u03a5\3\2\2\2\u03a5\u03a7\7\27\2\2\u03a6\u03a8\5\6\4")
        buf.write("\2\u03a7\u03a6\3\2\2\2\u03a7\u03a8\3\2\2\2\u03a8\u03b4")
        buf.write("\3\2\2\2\u03a9\u03ac\5\2\2\2\u03aa\u03ad\5&\24\2\u03ab")
        buf.write("\u03ad\5\u008eH\2\u03ac\u03aa\3\2\2\2\u03ac\u03ab\3\2")
        buf.write("\2\2\u03ad\u03ae\3\2\2\2\u03ae\u03af\5\6\4\2\u03af\u03b5")
        buf.write("\3\2\2\2\u03b0\u03b3\5&\24\2\u03b1\u03b3\5\u008eH\2\u03b2")
        buf.write("\u03b0\3\2\2\2\u03b2\u03b1\3\2\2\2\u03b3\u03b5\3\2\2\2")
        buf.write("\u03b4\u03a9\3\2\2\2\u03b4\u03b2\3\2\2\2\u03b5\u009d\3")
        buf.write("\2\2\2\u03b6\u03bb\7X\2\2\u03b7\u03b8\7\b\2\2\u03b8\u03ba")
        buf.write("\7X\2\2\u03b9\u03b7\3\2\2\2\u03ba\u03bd\3\2\2\2\u03bb")
        buf.write("\u03b9\3\2\2\2\u03bb\u03bc\3\2\2\2\u03bc\u03c0\3\2\2\2")
        buf.write("\u03bd\u03bb\3\2\2\2\u03be\u03bf\7\25\2\2\u03bf\u03c1")
        buf.write("\5&\24\2\u03c0\u03be\3\2\2\2\u03c0\u03c1\3\2\2\2\u03c1")
        buf.write("\u03c2\3\2\2\2\u03c2\u03c8\7\27\2\2\u03c3\u03c4\5\2\2")
        buf.write("\2\u03c4\u03c5\5`\61\2\u03c5\u03c6\5\6\4\2\u03c6\u03c9")
        buf.write("\3\2\2\2\u03c7\u03c9\5`\61\2\u03c8\u03c3\3\2\2\2\u03c8")
        buf.write("\u03c7\3\2\2\2\u03c9\u009f\3\2\2\2\u03ca\u03cb\5\u00a2")
        buf.write("R\2\u03cb\u00a1\3\2\2\2\u03cc\u03d1\7X\2\2\u03cd\u03ce")
        buf.write("\7\b\2\2\u03ce\u03d0\7X\2\2\u03cf\u03cd\3\2\2\2\u03d0")
        buf.write("\u03d3\3\2\2\2\u03d1\u03cf\3\2\2\2\u03d1\u03d2\3\2\2\2")
        buf.write("\u03d2\u03d5\3\2\2\2\u03d3\u03d1\3\2\2\2\u03d4\u03d6\7")
        buf.write("\b\2\2\u03d5\u03d4\3\2\2\2\u03d5\u03d6\3\2\2\2\u03d6\u03df")
        buf.write("\3\2\2\2\u03d7\u03dd\7\25\2\2\u03d8\u03d9\5\2\2\2\u03d9")
        buf.write("\u03da\5&\24\2\u03da\u03db\5\6\4\2\u03db\u03de\3\2\2\2")
        buf.write("\u03dc\u03de\5&\24\2\u03dd\u03d8\3\2\2\2\u03dd\u03dc\3")
        buf.write("\2\2\2\u03de\u03e0\3\2\2\2\u03df\u03d7\3\2\2\2\u03df\u03e0")
        buf.write("\3\2\2\2\u03e0\u03e9\3\2\2\2\u03e1\u03e7\7\27\2\2\u03e2")
        buf.write("\u03e3\5\2\2\2\u03e3\u03e4\5`\61\2\u03e4\u03e5\5\6\4\2")
        buf.write("\u03e5\u03e8\3\2\2\2\u03e6\u03e8\5`\61\2\u03e7\u03e2\3")
        buf.write("\2\2\2\u03e7\u03e6\3\2\2\2\u03e8\u03ea\3\2\2\2\u03e9\u03e1")
        buf.write("\3\2\2\2\u03e9\u03ea\3\2\2\2\u03ea\u00a3\3\2\2\2\u03eb")
        buf.write("\u03ee\5\u00a6T\2\u03ec\u03ee\5\u00a8U\2\u03ed\u03eb\3")
        buf.write("\2\2\2\u03ed\u03ec\3\2\2\2\u03ee\u00a5\3\2\2\2\u03ef\u03f4")
        buf.write("\5X-\2\u03f0\u03f4\5Z.\2\u03f1\u03f4\5\u008aF\2\u03f2")
        buf.write("\u03f4\5\u008cG\2\u03f3\u03ef\3\2\2\2\u03f3\u03f0\3\2")
        buf.write("\2\2\u03f3\u03f1\3\2\2\2\u03f3\u03f2\3\2\2\2\u03f4\u00a7")
        buf.write("\3\2\2\2\u03f5\u0405\5x=\2\u03f6\u0405\5z>\2\u03f7\u0405")
        buf.write("\5r:\2\u03f8\u0405\5\u0084C\2\u03f9\u0405\5t;\2\u03fa")
        buf.write("\u0405\5\u00acW\2\u03fb\u0405\5v<\2\u03fc\u03fd\t\n\2")
        buf.write("\2\u03fd\u0405\5\u0092J\2\u03fe\u03ff\7\24\2\2\u03ff\u0405")
        buf.write("\5\u0094K\2\u0400\u0401\7)\2\2\u0401\u0405\5\u0098M\2")
        buf.write("\u0402\u0403\t\13\2\2\u0403\u0405\5\u0096L\2\u0404\u03f5")
        buf.write("\3\2\2\2\u0404\u03f6\3\2\2\2\u0404\u03f7\3\2\2\2\u0404")
        buf.write("\u03f8\3\2\2\2\u0404\u03f9\3\2\2\2\u0404\u03fa\3\2\2\2")
        buf.write("\u0404\u03fb\3\2\2\2\u0404\u03fc\3\2\2\2\u0404\u03fe\3")
        buf.write("\2\2\2\u0404\u0400\3\2\2\2\u0404\u0402\3\2\2\2\u0405\u00a9")
        buf.write("\3\2\2\2\u0406\u0407\7\25\2\2\u0407\u0408\5\u00aeX\2\u0408")
        buf.write("\u00ab\3\2\2\2\u0409\u040a\5&\24\2\u040a\u040d\7\27\2")
        buf.write("\2\u040b\u040e\5\u008eH\2\u040c\u040e\5&\24\2\u040d\u040b")
        buf.write("\3\2\2\2\u040d\u040c\3\2\2\2\u040e\u0410\3\2\2\2\u040f")
        buf.write("\u0411\5\u00aaV\2\u0410\u040f\3\2\2\2\u0410\u0411\3\2")
        buf.write("\2\2\u0411\u0415\3\2\2\2\u0412\u0413\7X\2\2\u0413\u0415")
        buf.write("\5P)\2\u0414\u0409\3\2\2\2\u0414\u0412\3\2\2\2\u0415\u00ad")
        buf.write("\3\2\2\2\u0416\u041d\5\u00a4S\2\u0417\u0419\7\t\2\2\u0418")
        buf.write("\u0417\3\2\2\2\u0418\u0419\3\2\2\2\u0419\u041a\3\2\2\2")
        buf.write("\u041a\u041c\5\u00a4S\2\u041b\u0418\3\2\2\2\u041c\u041f")
        buf.write("\3\2\2\2\u041d\u041b\3\2\2\2\u041d\u041e\3\2\2\2\u041e")
        buf.write("\u00af\3\2\2\2\u041f\u041d\3\2\2\2\u0420\u0422\5\u00ae")
        buf.write("X\2\u0421\u0420\3\2\2\2\u0422\u0423\3\2\2\2\u0423\u0421")
        buf.write("\3\2\2\2\u0423\u0424\3\2\2\2\u0424\u00b1\3\2\2\2\u0425")
        buf.write("\u0426\5\u00b0Y\2\u0426\u00b3\3\2\2\2\u0093\u00b7\u00c7")
        buf.write("\u00d3\u00e8\u00f1\u00f9\u0101\u0109\u0111\u0119\u0121")
        buf.write("\u0129\u0131\u0139\u0146\u0150\u0152\u0155\u0159\u015f")
        buf.write("\u0161\u0169\u0174\u017e\u0184\u018f\u0192\u0199\u01a2")
        buf.write("\u01aa\u01af\u01b4\u01b8\u01bf\u01c7\u01ce\u01d4\u01d6")
        buf.write("\u01d8\u01de\u01e4\u01ea\u01f0\u01f2\u01f4\u0200\u0209")
        buf.write("\u0211\u0217\u021b\u0220\u0228\u022c\u0236\u023a\u0242")
        buf.write("\u0247\u024e\u0255\u025b\u0260\u0264\u026d\u026f\u0275")
        buf.write("\u0277\u027c\u0283\u0285\u028b\u028d\u028f\u0294\u029b")
        buf.write("\u02a0\u02a7\u02aa\u02b1\u02b4\u02b6\u02ba\u02c4\u02ce")
        buf.write("\u02d4\u02d6\u02da\u02e1\u02e8\u02eb\u02f2\u02f5\u02f7")
        buf.write("\u02ff\u0302\u0309\u030c\u030e\u0315\u031b\u031f\u0326")
        buf.write("\u032b\u0332\u0336\u0338\u033c\u0343\u034b\u034f\u0353")
        buf.write("\u0357\u035f\u0365\u036e\u0376\u037c\u0380\u0385\u038b")
        buf.write("\u038f\u0393\u039b\u03a3\u03a7\u03ac\u03b2\u03b4\u03bb")
        buf.write("\u03c0\u03c8\u03d1\u03d5\u03dd\u03df\u03e7\u03e9\u03ed")
        buf.write("\u03f3\u0404\u040d\u0410\u0414\u0418\u041d\u0423")
        return buf.getvalue()


class nim_Parser ( Parser ):

    grammarFileName = "nim_Parser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "' '", "','", "';'", "'('", "')'", "'{'", 
                     "'}'", "'['", "']'", "'interface'", "'enum'", "'object'", 
                     "'concept'", "'type'", "':'", "'.'", "'='", "'in'", 
                     "'of'", "'not'", "'$'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'var'", "'let'", "'const'", "'bind'", "'proc'", "'static'", 
                     "'method'", "'func'", "'mixin'", "'end'", "'except'", 
                     "'return'", "'try'", "'raise'", "'finally'", "'out'", 
                     "'case'", "'if'", "'elif'", "'else'", "'do'", "'while'", 
                     "'iterator'", "'for'", "'continue'", "'break'", "'template'", 
                     "'tuple'", "'using'", "'when'", "'yield'", "'include'", 
                     "'import'", "'from'", "'as'", "'export'", "'ref'", 
                     "'ptr'", "'addr'", "'asm'", "'block'", "'macro'", "'nil'", 
                     "'cast'", "'converter'", "'defer'", "'discard'", "'distinct'", 
                     "'`'" ]

    symbolicNames = [ "<INVALID>", "DOCUMENTATION_COMMENT", "MULTILINE_COMMENT", 
                      "COMMENT", "UNCONDITIONAL_NEWLINE", "WS", "COMMA", 
                      "SEMI_COLON", "OPEN_PAREN", "CLOSE_PAREN", "OPEN_BRACE", 
                      "CLOSE_BRACE", "OPEN_BRACK", "CLOSE_BRACK", "INTERFACE", 
                      "ENUM", "OBJECT", "CONCEPT", "TYPE", "COLON", "DOT", 
                      "EQUALS", "IN", "OF", "NOT", "DOLLAR_SIGN", "OP0", 
                      "OP1", "OP2", "OP3", "OP4", "OP5", "OP6", "OP7", "OP8", 
                      "OP9", "OP10", "VARIABLE", "LET", "CONST", "BIND", 
                      "PROC", "STATIC", "METHOD", "FUNC", "MIXIN", "END", 
                      "EXCEPT", "RETURN", "TRY", "RAISE", "FINALLY", "OUT", 
                      "CASE", "IF", "ELIF", "ELSE", "DO", "WHILE", "ITERATOR", 
                      "FOR", "CONTINUE", "BREAK", "TEMPLATE", "TUPLE", "USING", 
                      "WHEN", "YIELD", "INCLUDE", "IMPORT", "FROM", "AS", 
                      "EXPORT", "REF", "PTR", "ADDR", "ASM", "BLOCK", "MACRO", 
                      "NIL", "CAST", "CONVERTER", "DEFER", "DISCARD", "DISTINCT", 
                      "SYM_HEADER", "IDENTIFIER", "INT_LIT", "INT8_LIT", 
                      "INT16_LIT", "INT32_LIT", "INT64_LIT", "UINT_LIT", 
                      "UINT8_LIT", "UINT16_LIT", "UINT32_LIT", "UINT64_LIT", 
                      "EXP", "FLOAT_LIT", "FLOAT32_LIT", "FLOAT64_LIT", 
                      "CHAR_LIT", "STR_LIT", "TRIPLESTR_LIT", "RSTR_LIT", 
                      "GENERALIZED_STR_LIT", "GENERALIZED_TRIPLESTR_LIT", 
                      "DEDENT", "EXIT", "USELESS_LINE", "USELSSS_INDENTS", 
                      "INDENT", "INDENTS_PASS", "ERROR_INDENT" ]

    RULE_ind = 0
    RULE_optInd = 1
    RULE_ded = 2
    RULE_typeKeyw = 3
    RULE_parKeyw = 4
    RULE_op0 = 5
    RULE_op1 = 6
    RULE_op2 = 7
    RULE_op3 = 8
    RULE_op4 = 9
    RULE_op5 = 10
    RULE_op6 = 11
    RULE_op7 = 12
    RULE_op8 = 13
    RULE_op9 = 14
    RULE_op10 = 15
    RULE_operator = 16
    RULE_prefixOperator = 17
    RULE_simpleExpr = 18
    RULE_assignExpr = 19
    RULE_orExpr = 20
    RULE_andExpr = 21
    RULE_cmpExpr = 22
    RULE_sliceExpr = 23
    RULE_ampExpr = 24
    RULE_plusExpr = 25
    RULE_mulExpr = 26
    RULE_dollarExpr = 27
    RULE_literal = 28
    RULE_generalizedLit = 29
    RULE_symbol = 30
    RULE_symbolBody = 31
    RULE_exprColonEqExpr = 32
    RULE_arrayConstr = 33
    RULE_tupleConstr = 34
    RULE_identOrLiteral = 35
    RULE_identGeneral = 36
    RULE_addressLiteral = 37
    RULE_primarySuffixSimpleBody = 38
    RULE_primarySuffix = 39
    RULE_primary = 40
    RULE_parBody = 41
    RULE_par = 42
    RULE_importStmt = 43
    RULE_fromStmt = 44
    RULE_blockExpr = 45
    RULE_forExpr = 46
    RULE_anyExpr = 47
    RULE_condExprBody = 48
    RULE_condExpr = 49
    RULE_caseExpr = 50
    RULE_whenExpr = 51
    RULE_ifExpr = 52
    RULE_exprList = 53
    RULE_ofBranch = 54
    RULE_ofBranches = 55
    RULE_caseStmt = 56
    RULE_whileStmt = 57
    RULE_whenStmt = 58
    RULE_forStmt = 59
    RULE_ifStmt = 60
    RULE_condStmtElif = 61
    RULE_condStmtElse = 62
    RULE_condStmtBody = 63
    RULE_condStmt = 64
    RULE_blockStmt = 65
    RULE_discardStmt = 66
    RULE_returnStmt = 67
    RULE_breakStmt = 68
    RULE_pragmaStmt = 69
    RULE_expr = 70
    RULE_pragma = 71
    RULE_routine = 72
    RULE_typeSection = 73
    RULE_variableSection = 74
    RULE_constantSection = 75
    RULE_identVis = 76
    RULE_varTuple = 77
    RULE_constant = 78
    RULE_variable = 79
    RULE_idColonEq = 80
    RULE_simple_complexStmt = 81
    RULE_simpleStmt = 82
    RULE_complexStmt = 83
    RULE_colonBody = 84
    RULE_exprStmt = 85
    RULE_stmt = 86
    RULE_module = 87
    RULE_start = 88

    ruleNames =  [ "ind", "optInd", "ded", "typeKeyw", "parKeyw", "op0", 
                   "op1", "op2", "op3", "op4", "op5", "op6", "op7", "op8", 
                   "op9", "op10", "operator", "prefixOperator", "simpleExpr", 
                   "assignExpr", "orExpr", "andExpr", "cmpExpr", "sliceExpr", 
                   "ampExpr", "plusExpr", "mulExpr", "dollarExpr", "literal", 
                   "generalizedLit", "symbol", "symbolBody", "exprColonEqExpr", 
                   "arrayConstr", "tupleConstr", "identOrLiteral", "identGeneral", 
                   "addressLiteral", "primarySuffixSimpleBody", "primarySuffix", 
                   "primary", "parBody", "par", "importStmt", "fromStmt", 
                   "blockExpr", "forExpr", "anyExpr", "condExprBody", "condExpr", 
                   "caseExpr", "whenExpr", "ifExpr", "exprList", "ofBranch", 
                   "ofBranches", "caseStmt", "whileStmt", "whenStmt", "forStmt", 
                   "ifStmt", "condStmtElif", "condStmtElse", "condStmtBody", 
                   "condStmt", "blockStmt", "discardStmt", "returnStmt", 
                   "breakStmt", "pragmaStmt", "expr", "pragma", "routine", 
                   "typeSection", "variableSection", "constantSection", 
                   "identVis", "varTuple", "constant", "variable", "idColonEq", 
                   "simple_complexStmt", "simpleStmt", "complexStmt", "colonBody", 
                   "exprStmt", "stmt", "module", "start" ]

    EOF = Token.EOF
    DOCUMENTATION_COMMENT=1
    MULTILINE_COMMENT=2
    COMMENT=3
    UNCONDITIONAL_NEWLINE=4
    WS=5
    COMMA=6
    SEMI_COLON=7
    OPEN_PAREN=8
    CLOSE_PAREN=9
    OPEN_BRACE=10
    CLOSE_BRACE=11
    OPEN_BRACK=12
    CLOSE_BRACK=13
    INTERFACE=14
    ENUM=15
    OBJECT=16
    CONCEPT=17
    TYPE=18
    COLON=19
    DOT=20
    EQUALS=21
    IN=22
    OF=23
    NOT=24
    DOLLAR_SIGN=25
    OP0=26
    OP1=27
    OP2=28
    OP3=29
    OP4=30
    OP5=31
    OP6=32
    OP7=33
    OP8=34
    OP9=35
    OP10=36
    VARIABLE=37
    LET=38
    CONST=39
    BIND=40
    PROC=41
    STATIC=42
    METHOD=43
    FUNC=44
    MIXIN=45
    END=46
    EXCEPT=47
    RETURN=48
    TRY=49
    RAISE=50
    FINALLY=51
    OUT=52
    CASE=53
    IF=54
    ELIF=55
    ELSE=56
    DO=57
    WHILE=58
    ITERATOR=59
    FOR=60
    CONTINUE=61
    BREAK=62
    TEMPLATE=63
    TUPLE=64
    USING=65
    WHEN=66
    YIELD=67
    INCLUDE=68
    IMPORT=69
    FROM=70
    AS=71
    EXPORT=72
    REF=73
    PTR=74
    ADDR=75
    ASM=76
    BLOCK=77
    MACRO=78
    NIL=79
    CAST=80
    CONVERTER=81
    DEFER=82
    DISCARD=83
    DISTINCT=84
    SYM_HEADER=85
    IDENTIFIER=86
    INT_LIT=87
    INT8_LIT=88
    INT16_LIT=89
    INT32_LIT=90
    INT64_LIT=91
    UINT_LIT=92
    UINT8_LIT=93
    UINT16_LIT=94
    UINT32_LIT=95
    UINT64_LIT=96
    EXP=97
    FLOAT_LIT=98
    FLOAT32_LIT=99
    FLOAT64_LIT=100
    CHAR_LIT=101
    STR_LIT=102
    TRIPLESTR_LIT=103
    RSTR_LIT=104
    GENERALIZED_STR_LIT=105
    GENERALIZED_TRIPLESTR_LIT=106
    DEDENT=107
    EXIT=108
    USELESS_LINE=109
    USELSSS_INDENTS=110
    INDENT=111
    INDENTS_PASS=112
    ERROR_INDENT=113

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None



    parKeyWList = [IF, WHILE, CASE, FOR, BLOCK, CONST, LET, WHEN, VARIABLE]
    literals = [INT_LIT, INT8_LIT, INT16_LIT , INT32_LIT , INT64_LIT, UINT_LIT , UINT8_LIT , 
    UINT16_LIT , UINT32_LIT , UINT64_LIT, FLOAT_LIT , FLOAT32_LIT , FLOAT64_LIT, STR_LIT, 
    RSTR_LIT , TRIPLESTR_LIT, CHAR_LIT, NIL ]
    primarySuffixList = [SYM_HEADER, IDENTIFIER, TYPE] + literals


    class IndContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INDENT(self):
            return self.getToken(nim_Parser.INDENT, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_ind

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInd" ):
                listener.enterInd(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInd" ):
                listener.exitInd(self)




    def ind(self):

        localctx = nim_Parser.IndContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_ind)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 178
            self.match(nim_Parser.INDENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OptIndContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ind(self):
            return self.getTypedRuleContext(nim_Parser.IndContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_optInd

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptInd" ):
                listener.enterOptInd(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptInd" ):
                listener.exitOptInd(self)




    def optInd(self):

        localctx = nim_Parser.OptIndContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_optInd)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 181
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==nim_Parser.INDENT:
                self.state = 180
                self.ind()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DedContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEDENT(self):
            return self.getToken(nim_Parser.DEDENT, 0)

        def EOF(self):
            return self.getToken(nim_Parser.EOF, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_ded

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDed" ):
                listener.enterDed(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDed" ):
                listener.exitDed(self)




    def ded(self):

        localctx = nim_Parser.DedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_ded)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 183
            _la = self._input.LA(1)
            if not(_la==nim_Parser.EOF or _la==nim_Parser.DEDENT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeKeywContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VARIABLE(self):
            return self.getToken(nim_Parser.VARIABLE, 0)

        def REF(self):
            return self.getToken(nim_Parser.REF, 0)

        def PROC(self):
            return self.getToken(nim_Parser.PROC, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_typeKeyw

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeKeyw" ):
                listener.enterTypeKeyw(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeKeyw" ):
                listener.exitTypeKeyw(self)




    def typeKeyw(self):

        localctx = nim_Parser.TypeKeywContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_typeKeyw)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 185
            _la = self._input.LA(1)
            if not(((((_la - 37)) & ~0x3f) == 0 and ((1 << (_la - 37)) & ((1 << (nim_Parser.VARIABLE - 37)) | (1 << (nim_Parser.PROC - 37)) | (1 << (nim_Parser.REF - 37)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParKeywContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DISCARD(self):
            return self.getToken(nim_Parser.DISCARD, 0)

        def IF(self):
            return self.getToken(nim_Parser.IF, 0)

        def WHILE(self):
            return self.getToken(nim_Parser.WHILE, 0)

        def CASE(self):
            return self.getToken(nim_Parser.CASE, 0)

        def FOR(self):
            return self.getToken(nim_Parser.FOR, 0)

        def BLOCK(self):
            return self.getToken(nim_Parser.BLOCK, 0)

        def CONST(self):
            return self.getToken(nim_Parser.CONST, 0)

        def LET(self):
            return self.getToken(nim_Parser.LET, 0)

        def WHEN(self):
            return self.getToken(nim_Parser.WHEN, 0)

        def VARIABLE(self):
            return self.getToken(nim_Parser.VARIABLE, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_parKeyw

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParKeyw" ):
                listener.enterParKeyw(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParKeyw" ):
                listener.exitParKeyw(self)




    def parKeyw(self):

        localctx = nim_Parser.ParKeywContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_parKeyw)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 187
            _la = self._input.LA(1)
            if not(((((_la - 37)) & ~0x3f) == 0 and ((1 << (_la - 37)) & ((1 << (nim_Parser.VARIABLE - 37)) | (1 << (nim_Parser.LET - 37)) | (1 << (nim_Parser.CONST - 37)) | (1 << (nim_Parser.CASE - 37)) | (1 << (nim_Parser.IF - 37)) | (1 << (nim_Parser.WHILE - 37)) | (1 << (nim_Parser.FOR - 37)) | (1 << (nim_Parser.WHEN - 37)) | (1 << (nim_Parser.BLOCK - 37)) | (1 << (nim_Parser.DISCARD - 37)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Op0Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OP0(self):
            return self.getToken(nim_Parser.OP0, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_op0

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOp0" ):
                listener.enterOp0(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOp0" ):
                listener.exitOp0(self)




    def op0(self):

        localctx = nim_Parser.Op0Context(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_op0)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 189
            self.match(nim_Parser.OP0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Op1Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OP1(self):
            return self.getToken(nim_Parser.OP1, 0)

        def EQUALS(self):
            return self.getToken(nim_Parser.EQUALS, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_op1

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOp1" ):
                listener.enterOp1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOp1" ):
                listener.exitOp1(self)




    def op1(self):

        localctx = nim_Parser.Op1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_op1)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 191
            _la = self._input.LA(1)
            if not(_la==nim_Parser.EQUALS or _la==nim_Parser.OP1):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Op2Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OP2(self):
            return self.getToken(nim_Parser.OP2, 0)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.COLON)
            else:
                return self.getToken(nim_Parser.COLON, i)

        def getRuleIndex(self):
            return nim_Parser.RULE_op2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOp2" ):
                listener.enterOp2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOp2" ):
                listener.exitOp2(self)




    def op2(self):

        localctx = nim_Parser.Op2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_op2)
        try:
            self.state = 197
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 193
                self.match(nim_Parser.OP2)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 194
                self.match(nim_Parser.COLON)
                self.state = 195
                self.match(nim_Parser.COLON)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 196
                self.match(nim_Parser.COLON)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Op3Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OP3(self):
            return self.getToken(nim_Parser.OP3, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_op3

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOp3" ):
                listener.enterOp3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOp3" ):
                listener.exitOp3(self)




    def op3(self):

        localctx = nim_Parser.Op3Context(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_op3)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 199
            self.match(nim_Parser.OP3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Op4Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OP4(self):
            return self.getToken(nim_Parser.OP4, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_op4

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOp4" ):
                listener.enterOp4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOp4" ):
                listener.exitOp4(self)




    def op4(self):

        localctx = nim_Parser.Op4Context(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_op4)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 201
            self.match(nim_Parser.OP4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Op5Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OP5(self):
            return self.getToken(nim_Parser.OP5, 0)

        def IN(self):
            return self.getToken(nim_Parser.IN, 0)

        def OF(self):
            return self.getToken(nim_Parser.OF, 0)

        def NOT(self):
            return self.getToken(nim_Parser.NOT, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_op5

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOp5" ):
                listener.enterOp5(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOp5" ):
                listener.exitOp5(self)




    def op5(self):

        localctx = nim_Parser.Op5Context(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_op5)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 203
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nim_Parser.IN) | (1 << nim_Parser.OF) | (1 << nim_Parser.NOT) | (1 << nim_Parser.OP5))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Op6Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OP6(self):
            return self.getToken(nim_Parser.OP6, 0)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.DOT)
            else:
                return self.getToken(nim_Parser.DOT, i)

        def getRuleIndex(self):
            return nim_Parser.RULE_op6

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOp6" ):
                listener.enterOp6(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOp6" ):
                listener.exitOp6(self)




    def op6(self):

        localctx = nim_Parser.Op6Context(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_op6)
        try:
            self.state = 209
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 205
                self.match(nim_Parser.OP6)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 206
                self.match(nim_Parser.DOT)
                self.state = 207
                self.match(nim_Parser.DOT)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 208
                self.match(nim_Parser.DOT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Op7Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OP7(self):
            return self.getToken(nim_Parser.OP7, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_op7

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOp7" ):
                listener.enterOp7(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOp7" ):
                listener.exitOp7(self)




    def op7(self):

        localctx = nim_Parser.Op7Context(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_op7)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 211
            self.match(nim_Parser.OP7)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Op8Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OP8(self):
            return self.getToken(nim_Parser.OP8, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_op8

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOp8" ):
                listener.enterOp8(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOp8" ):
                listener.exitOp8(self)




    def op8(self):

        localctx = nim_Parser.Op8Context(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_op8)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 213
            self.match(nim_Parser.OP8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Op9Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OP9(self):
            return self.getToken(nim_Parser.OP9, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_op9

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOp9" ):
                listener.enterOp9(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOp9" ):
                listener.exitOp9(self)




    def op9(self):

        localctx = nim_Parser.Op9Context(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_op9)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 215
            self.match(nim_Parser.OP9)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Op10Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OP10(self):
            return self.getToken(nim_Parser.OP10, 0)

        def DOLLAR_SIGN(self):
            return self.getToken(nim_Parser.DOLLAR_SIGN, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_op10

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOp10" ):
                listener.enterOp10(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOp10" ):
                listener.exitOp10(self)




    def op10(self):

        localctx = nim_Parser.Op10Context(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_op10)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 217
            _la = self._input.LA(1)
            if not(_la==nim_Parser.DOLLAR_SIGN or _la==nim_Parser.OP10):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def op0(self):
            return self.getTypedRuleContext(nim_Parser.Op0Context,0)


        def op1(self):
            return self.getTypedRuleContext(nim_Parser.Op1Context,0)


        def op2(self):
            return self.getTypedRuleContext(nim_Parser.Op2Context,0)


        def op3(self):
            return self.getTypedRuleContext(nim_Parser.Op3Context,0)


        def op4(self):
            return self.getTypedRuleContext(nim_Parser.Op4Context,0)


        def op5(self):
            return self.getTypedRuleContext(nim_Parser.Op5Context,0)


        def op6(self):
            return self.getTypedRuleContext(nim_Parser.Op6Context,0)


        def op7(self):
            return self.getTypedRuleContext(nim_Parser.Op7Context,0)


        def op8(self):
            return self.getTypedRuleContext(nim_Parser.Op8Context,0)


        def op9(self):
            return self.getTypedRuleContext(nim_Parser.Op9Context,0)


        def op10(self):
            return self.getTypedRuleContext(nim_Parser.Op10Context,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperator" ):
                listener.enterOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperator" ):
                listener.exitOperator(self)




    def operator(self):

        localctx = nim_Parser.OperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_operator)
        try:
            self.state = 230
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [nim_Parser.OP0]:
                self.enterOuterAlt(localctx, 1)
                self.state = 219
                self.op0()
                pass
            elif token in [nim_Parser.EQUALS, nim_Parser.OP1]:
                self.enterOuterAlt(localctx, 2)
                self.state = 220
                self.op1()
                pass
            elif token in [nim_Parser.COLON, nim_Parser.OP2]:
                self.enterOuterAlt(localctx, 3)
                self.state = 221
                self.op2()
                pass
            elif token in [nim_Parser.OP3]:
                self.enterOuterAlt(localctx, 4)
                self.state = 222
                self.op3()
                pass
            elif token in [nim_Parser.OP4]:
                self.enterOuterAlt(localctx, 5)
                self.state = 223
                self.op4()
                pass
            elif token in [nim_Parser.IN, nim_Parser.OF, nim_Parser.NOT, nim_Parser.OP5]:
                self.enterOuterAlt(localctx, 6)
                self.state = 224
                self.op5()
                pass
            elif token in [nim_Parser.DOT, nim_Parser.OP6]:
                self.enterOuterAlt(localctx, 7)
                self.state = 225
                self.op6()
                pass
            elif token in [nim_Parser.OP7]:
                self.enterOuterAlt(localctx, 8)
                self.state = 226
                self.op7()
                pass
            elif token in [nim_Parser.OP8]:
                self.enterOuterAlt(localctx, 9)
                self.state = 227
                self.op8()
                pass
            elif token in [nim_Parser.OP9]:
                self.enterOuterAlt(localctx, 10)
                self.state = 228
                self.op9()
                pass
            elif token in [nim_Parser.DOLLAR_SIGN, nim_Parser.OP10]:
                self.enterOuterAlt(localctx, 11)
                self.state = 229
                self.op10()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PrefixOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def operator(self):
            return self.getTypedRuleContext(nim_Parser.OperatorContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_prefixOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrefixOperator" ):
                listener.enterPrefixOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrefixOperator" ):
                listener.exitPrefixOperator(self)




    def prefixOperator(self):

        localctx = nim_Parser.PrefixOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_prefixOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 232
            self.operator()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SimpleExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.AssignExprContext)
            else:
                return self.getTypedRuleContext(nim_Parser.AssignExprContext,i)


        def OP1(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.OP1)
            else:
                return self.getToken(nim_Parser.OP1, i)

        def getRuleIndex(self):
            return nim_Parser.RULE_simpleExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleExpr" ):
                listener.enterSimpleExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleExpr" ):
                listener.exitSimpleExpr(self)




    def simpleExpr(self):

        localctx = nim_Parser.SimpleExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_simpleExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 234
            self.assignExpr()
            self.state = 239
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,4,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 235
                    self.match(nim_Parser.OP1)
                    self.state = 236
                    self.assignExpr() 
                self.state = 241
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,4,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssignExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def orExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.OrExprContext)
            else:
                return self.getTypedRuleContext(nim_Parser.OrExprContext,i)


        def OP2(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.OP2)
            else:
                return self.getToken(nim_Parser.OP2, i)

        def getRuleIndex(self):
            return nim_Parser.RULE_assignExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignExpr" ):
                listener.enterAssignExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignExpr" ):
                listener.exitAssignExpr(self)




    def assignExpr(self):

        localctx = nim_Parser.AssignExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_assignExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 242
            self.orExpr()
            self.state = 247
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,5,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 243
                    self.match(nim_Parser.OP2)
                    self.state = 244
                    self.orExpr() 
                self.state = 249
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,5,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OrExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def andExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.AndExprContext)
            else:
                return self.getTypedRuleContext(nim_Parser.AndExprContext,i)


        def OP3(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.OP3)
            else:
                return self.getToken(nim_Parser.OP3, i)

        def getRuleIndex(self):
            return nim_Parser.RULE_orExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrExpr" ):
                listener.enterOrExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrExpr" ):
                listener.exitOrExpr(self)




    def orExpr(self):

        localctx = nim_Parser.OrExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_orExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 250
            self.andExpr()
            self.state = 255
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,6,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 251
                    self.match(nim_Parser.OP3)
                    self.state = 252
                    self.andExpr() 
                self.state = 257
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,6,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AndExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def cmpExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.CmpExprContext)
            else:
                return self.getTypedRuleContext(nim_Parser.CmpExprContext,i)


        def OP4(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.OP4)
            else:
                return self.getToken(nim_Parser.OP4, i)

        def getRuleIndex(self):
            return nim_Parser.RULE_andExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAndExpr" ):
                listener.enterAndExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAndExpr" ):
                listener.exitAndExpr(self)




    def andExpr(self):

        localctx = nim_Parser.AndExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_andExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 258
            self.cmpExpr()
            self.state = 263
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,7,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 259
                    self.match(nim_Parser.OP4)
                    self.state = 260
                    self.cmpExpr() 
                self.state = 265
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,7,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CmpExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sliceExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.SliceExprContext)
            else:
                return self.getTypedRuleContext(nim_Parser.SliceExprContext,i)


        def OP5(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.OP5)
            else:
                return self.getToken(nim_Parser.OP5, i)

        def getRuleIndex(self):
            return nim_Parser.RULE_cmpExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCmpExpr" ):
                listener.enterCmpExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCmpExpr" ):
                listener.exitCmpExpr(self)




    def cmpExpr(self):

        localctx = nim_Parser.CmpExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_cmpExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 266
            self.sliceExpr()
            self.state = 271
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,8,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 267
                    self.match(nim_Parser.OP5)
                    self.state = 268
                    self.sliceExpr() 
                self.state = 273
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,8,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SliceExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ampExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.AmpExprContext)
            else:
                return self.getTypedRuleContext(nim_Parser.AmpExprContext,i)


        def OP6(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.OP6)
            else:
                return self.getToken(nim_Parser.OP6, i)

        def getRuleIndex(self):
            return nim_Parser.RULE_sliceExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSliceExpr" ):
                listener.enterSliceExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSliceExpr" ):
                listener.exitSliceExpr(self)




    def sliceExpr(self):

        localctx = nim_Parser.SliceExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_sliceExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 274
            self.ampExpr()
            self.state = 279
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,9,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 275
                    self.match(nim_Parser.OP6)
                    self.state = 276
                    self.ampExpr() 
                self.state = 281
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,9,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AmpExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def plusExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.PlusExprContext)
            else:
                return self.getTypedRuleContext(nim_Parser.PlusExprContext,i)


        def OP7(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.OP7)
            else:
                return self.getToken(nim_Parser.OP7, i)

        def getRuleIndex(self):
            return nim_Parser.RULE_ampExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAmpExpr" ):
                listener.enterAmpExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAmpExpr" ):
                listener.exitAmpExpr(self)




    def ampExpr(self):

        localctx = nim_Parser.AmpExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_ampExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 282
            self.plusExpr()
            self.state = 287
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,10,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 283
                    self.match(nim_Parser.OP7)
                    self.state = 284
                    self.plusExpr() 
                self.state = 289
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,10,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PlusExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mulExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.MulExprContext)
            else:
                return self.getTypedRuleContext(nim_Parser.MulExprContext,i)


        def OP8(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.OP8)
            else:
                return self.getToken(nim_Parser.OP8, i)

        def getRuleIndex(self):
            return nim_Parser.RULE_plusExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlusExpr" ):
                listener.enterPlusExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlusExpr" ):
                listener.exitPlusExpr(self)




    def plusExpr(self):

        localctx = nim_Parser.PlusExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_plusExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 290
            self.mulExpr()
            self.state = 295
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,11,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 291
                    self.match(nim_Parser.OP8)
                    self.state = 292
                    self.mulExpr() 
                self.state = 297
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,11,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MulExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dollarExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.DollarExprContext)
            else:
                return self.getTypedRuleContext(nim_Parser.DollarExprContext,i)


        def OP9(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.OP9)
            else:
                return self.getToken(nim_Parser.OP9, i)

        def getRuleIndex(self):
            return nim_Parser.RULE_mulExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMulExpr" ):
                listener.enterMulExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMulExpr" ):
                listener.exitMulExpr(self)




    def mulExpr(self):

        localctx = nim_Parser.MulExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_mulExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 298
            self.dollarExpr()
            self.state = 303
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,12,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 299
                    self.match(nim_Parser.OP9)
                    self.state = 300
                    self.dollarExpr() 
                self.state = 305
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,12,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DollarExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primary(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.PrimaryContext)
            else:
                return self.getTypedRuleContext(nim_Parser.PrimaryContext,i)


        def OP10(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.OP10)
            else:
                return self.getToken(nim_Parser.OP10, i)

        def getRuleIndex(self):
            return nim_Parser.RULE_dollarExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDollarExpr" ):
                listener.enterDollarExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDollarExpr" ):
                listener.exitDollarExpr(self)




    def dollarExpr(self):

        localctx = nim_Parser.DollarExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_dollarExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 306
            self.primary()
            self.state = 311
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,13,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 307
                    self.match(nim_Parser.OP10)
                    self.state = 308
                    self.primary() 
                self.state = 313
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,13,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT_LIT(self):
            return self.getToken(nim_Parser.INT_LIT, 0)

        def INT8_LIT(self):
            return self.getToken(nim_Parser.INT8_LIT, 0)

        def INT16_LIT(self):
            return self.getToken(nim_Parser.INT16_LIT, 0)

        def INT32_LIT(self):
            return self.getToken(nim_Parser.INT32_LIT, 0)

        def INT64_LIT(self):
            return self.getToken(nim_Parser.INT64_LIT, 0)

        def UINT_LIT(self):
            return self.getToken(nim_Parser.UINT_LIT, 0)

        def UINT8_LIT(self):
            return self.getToken(nim_Parser.UINT8_LIT, 0)

        def UINT16_LIT(self):
            return self.getToken(nim_Parser.UINT16_LIT, 0)

        def UINT32_LIT(self):
            return self.getToken(nim_Parser.UINT32_LIT, 0)

        def UINT64_LIT(self):
            return self.getToken(nim_Parser.UINT64_LIT, 0)

        def FLOAT_LIT(self):
            return self.getToken(nim_Parser.FLOAT_LIT, 0)

        def FLOAT32_LIT(self):
            return self.getToken(nim_Parser.FLOAT32_LIT, 0)

        def FLOAT64_LIT(self):
            return self.getToken(nim_Parser.FLOAT64_LIT, 0)

        def STR_LIT(self):
            return self.getToken(nim_Parser.STR_LIT, 0)

        def RSTR_LIT(self):
            return self.getToken(nim_Parser.RSTR_LIT, 0)

        def TRIPLESTR_LIT(self):
            return self.getToken(nim_Parser.TRIPLESTR_LIT, 0)

        def CHAR_LIT(self):
            return self.getToken(nim_Parser.CHAR_LIT, 0)

        def NIL(self):
            return self.getToken(nim_Parser.NIL, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral" ):
                listener.enterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral" ):
                listener.exitLiteral(self)




    def literal(self):

        localctx = nim_Parser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 314
            _la = self._input.LA(1)
            if not(((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & ((1 << (nim_Parser.NIL - 79)) | (1 << (nim_Parser.INT_LIT - 79)) | (1 << (nim_Parser.INT8_LIT - 79)) | (1 << (nim_Parser.INT16_LIT - 79)) | (1 << (nim_Parser.INT32_LIT - 79)) | (1 << (nim_Parser.INT64_LIT - 79)) | (1 << (nim_Parser.UINT_LIT - 79)) | (1 << (nim_Parser.UINT8_LIT - 79)) | (1 << (nim_Parser.UINT16_LIT - 79)) | (1 << (nim_Parser.UINT32_LIT - 79)) | (1 << (nim_Parser.UINT64_LIT - 79)) | (1 << (nim_Parser.FLOAT_LIT - 79)) | (1 << (nim_Parser.FLOAT32_LIT - 79)) | (1 << (nim_Parser.FLOAT64_LIT - 79)) | (1 << (nim_Parser.CHAR_LIT - 79)) | (1 << (nim_Parser.STR_LIT - 79)) | (1 << (nim_Parser.TRIPLESTR_LIT - 79)) | (1 << (nim_Parser.RSTR_LIT - 79)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GeneralizedLitContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GENERALIZED_STR_LIT(self):
            return self.getToken(nim_Parser.GENERALIZED_STR_LIT, 0)

        def GENERALIZED_TRIPLESTR_LIT(self):
            return self.getToken(nim_Parser.GENERALIZED_TRIPLESTR_LIT, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_generalizedLit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneralizedLit" ):
                listener.enterGeneralizedLit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneralizedLit" ):
                listener.exitGeneralizedLit(self)




    def generalizedLit(self):

        localctx = nim_Parser.GeneralizedLitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_generalizedLit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 316
            _la = self._input.LA(1)
            if not(_la==nim_Parser.GENERALIZED_STR_LIT or _la==nim_Parser.GENERALIZED_TRIPLESTR_LIT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SymbolContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbolBody(self):
            return self.getTypedRuleContext(nim_Parser.SymbolBodyContext,0)


        def SYM_HEADER(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.SYM_HEADER)
            else:
                return self.getToken(nim_Parser.SYM_HEADER, i)

        def IDENTIFIER(self):
            return self.getToken(nim_Parser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_symbol

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSymbol" ):
                listener.enterSymbol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSymbol" ):
                listener.exitSymbol(self)




    def symbol(self):

        localctx = nim_Parser.SymbolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_symbol)
        try:
            self.state = 324
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 318
                self.symbolBody()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 319
                self.match(nim_Parser.SYM_HEADER)
                self.state = 320
                self.symbolBody()
                self.state = 321
                self.match(nim_Parser.SYM_HEADER)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 323
                self.match(nim_Parser.IDENTIFIER)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SymbolBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(nim_Parser.IDENTIFIER, 0)

        def literal(self):
            return self.getTypedRuleContext(nim_Parser.LiteralContext,0)


        def operator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.OperatorContext)
            else:
                return self.getTypedRuleContext(nim_Parser.OperatorContext,i)


        def OPEN_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.OPEN_PAREN)
            else:
                return self.getToken(nim_Parser.OPEN_PAREN, i)

        def CLOSE_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.CLOSE_PAREN)
            else:
                return self.getToken(nim_Parser.CLOSE_PAREN, i)

        def OPEN_BRACK(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.OPEN_BRACK)
            else:
                return self.getToken(nim_Parser.OPEN_BRACK, i)

        def CLOSE_BRACK(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.CLOSE_BRACK)
            else:
                return self.getToken(nim_Parser.CLOSE_BRACK, i)

        def EQUALS(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.EQUALS)
            else:
                return self.getToken(nim_Parser.EQUALS, i)

        def getRuleIndex(self):
            return nim_Parser.RULE_symbolBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSymbolBody" ):
                listener.enterSymbolBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSymbolBody" ):
                listener.exitSymbolBody(self)




    def symbolBody(self):

        localctx = nim_Parser.SymbolBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_symbolBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 339
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,17,self._ctx)
            if la_ == 1:
                self.state = 326
                self.match(nim_Parser.IDENTIFIER)
                pass

            elif la_ == 2:
                self.state = 327
                self.literal()
                pass

            elif la_ == 3:
                self.state = 336
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,16,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 334
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
                        if la_ == 1:
                            self.state = 328
                            self.operator()
                            pass

                        elif la_ == 2:
                            self.state = 329
                            self.match(nim_Parser.OPEN_PAREN)
                            pass

                        elif la_ == 3:
                            self.state = 330
                            self.match(nim_Parser.CLOSE_PAREN)
                            pass

                        elif la_ == 4:
                            self.state = 331
                            self.match(nim_Parser.OPEN_BRACK)
                            pass

                        elif la_ == 5:
                            self.state = 332
                            self.match(nim_Parser.CLOSE_BRACK)
                            pass

                        elif la_ == 6:
                            self.state = 333
                            self.match(nim_Parser.EQUALS)
                            pass

                 
                    self.state = 338
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,16,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExprColonEqExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.ExprContext)
            else:
                return self.getTypedRuleContext(nim_Parser.ExprContext,i)


        def simpleExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.SimpleExprContext)
            else:
                return self.getTypedRuleContext(nim_Parser.SimpleExprContext,i)


        def COLON(self):
            return self.getToken(nim_Parser.COLON, 0)

        def EQUALS(self):
            return self.getToken(nim_Parser.EQUALS, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_exprColonEqExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprColonEqExpr" ):
                listener.enterExprColonEqExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprColonEqExpr" ):
                listener.exitExprColonEqExpr(self)




    def exprColonEqExpr(self):

        localctx = nim_Parser.ExprColonEqExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_exprColonEqExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 343
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
            if la_ == 1:
                self.state = 341
                self.expr()
                pass

            elif la_ == 2:
                self.state = 342
                self.simpleExpr()
                pass


            self.state = 351
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [nim_Parser.COLON]:
                self.state = 345
                self.match(nim_Parser.COLON)
                pass
            elif token in [nim_Parser.EQUALS]:
                self.state = 346
                self.match(nim_Parser.EQUALS)
                self.state = 349
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,19,self._ctx)
                if la_ == 1:
                    self.state = 347
                    self.expr()
                    pass

                elif la_ == 2:
                    self.state = 348
                    self.simpleExpr()
                    pass


                pass
            elif token in [nim_Parser.COMMA, nim_Parser.CLOSE_PAREN, nim_Parser.CLOSE_BRACK]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArrayConstrContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACK(self):
            return self.getToken(nim_Parser.OPEN_BRACK, 0)

        def exprColonEqExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.ExprColonEqExprContext)
            else:
                return self.getTypedRuleContext(nim_Parser.ExprColonEqExprContext,i)


        def CLOSE_BRACK(self):
            return self.getToken(nim_Parser.CLOSE_BRACK, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.COMMA)
            else:
                return self.getToken(nim_Parser.COMMA, i)

        def getRuleIndex(self):
            return nim_Parser.RULE_arrayConstr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayConstr" ):
                listener.enterArrayConstr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayConstr" ):
                listener.exitArrayConstr(self)




    def arrayConstr(self):

        localctx = nim_Parser.ArrayConstrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_arrayConstr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 353
            self.match(nim_Parser.OPEN_BRACK)
            self.state = 354
            self.exprColonEqExpr()
            self.state = 359
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==nim_Parser.COMMA:
                self.state = 355
                self.match(nim_Parser.COMMA)
                self.state = 356
                self.exprColonEqExpr()
                self.state = 361
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 362
            self.match(nim_Parser.CLOSE_BRACK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TupleConstrContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(nim_Parser.OPEN_PAREN, 0)

        def exprColonEqExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.ExprColonEqExprContext)
            else:
                return self.getTypedRuleContext(nim_Parser.ExprColonEqExprContext,i)


        def CLOSE_PAREN(self):
            return self.getToken(nim_Parser.CLOSE_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.COMMA)
            else:
                return self.getToken(nim_Parser.COMMA, i)

        def getRuleIndex(self):
            return nim_Parser.RULE_tupleConstr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTupleConstr" ):
                listener.enterTupleConstr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTupleConstr" ):
                listener.exitTupleConstr(self)




    def tupleConstr(self):

        localctx = nim_Parser.TupleConstrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_tupleConstr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 364
            self.match(nim_Parser.OPEN_PAREN)
            self.state = 365
            self.exprColonEqExpr()
            self.state = 370
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==nim_Parser.COMMA:
                self.state = 366
                self.match(nim_Parser.COMMA)
                self.state = 367
                self.exprColonEqExpr()
                self.state = 372
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 373
            self.match(nim_Parser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IdentOrLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def generalizedLit(self):
            return self.getTypedRuleContext(nim_Parser.GeneralizedLitContext,0)


        def symbol(self):
            return self.getTypedRuleContext(nim_Parser.SymbolContext,0)


        def literal(self):
            return self.getTypedRuleContext(nim_Parser.LiteralContext,0)


        def par(self):
            return self.getTypedRuleContext(nim_Parser.ParContext,0)


        def arrayConstr(self):
            return self.getTypedRuleContext(nim_Parser.ArrayConstrContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_identOrLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentOrLiteral" ):
                listener.enterIdentOrLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentOrLiteral" ):
                listener.exitIdentOrLiteral(self)




    def identOrLiteral(self):

        localctx = nim_Parser.IdentOrLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_identOrLiteral)
        try:
            self.state = 380
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,23,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 375
                self.generalizedLit()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 376
                self.symbol()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 377
                self.literal()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 378
                self.par()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 379
                self.arrayConstr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IdentGeneralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def generalizedLit(self):
            return self.getTypedRuleContext(nim_Parser.GeneralizedLitContext,0)


        def symbol(self):
            return self.getTypedRuleContext(nim_Parser.SymbolContext,0)


        def par(self):
            return self.getTypedRuleContext(nim_Parser.ParContext,0)


        def arrayConstr(self):
            return self.getTypedRuleContext(nim_Parser.ArrayConstrContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_identGeneral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentGeneral" ):
                listener.enterIdentGeneral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentGeneral" ):
                listener.exitIdentGeneral(self)




    def identGeneral(self):

        localctx = nim_Parser.IdentGeneralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_identGeneral)
        try:
            self.state = 386
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,24,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 382
                self.generalizedLit()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 383
                self.symbol()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 384
                self.par()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 385
                self.arrayConstr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AddressLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOLLAR_SIGN(self):
            return self.getToken(nim_Parser.DOLLAR_SIGN, 0)

        def identGeneral(self):
            return self.getTypedRuleContext(nim_Parser.IdentGeneralContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_addressLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAddressLiteral" ):
                listener.enterAddressLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAddressLiteral" ):
                listener.exitAddressLiteral(self)




    def addressLiteral(self):

        localctx = nim_Parser.AddressLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_addressLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 388
            self.match(nim_Parser.DOLLAR_SIGN)
            self.state = 389
            self.identGeneral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PrimarySuffixSimpleBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(nim_Parser.IDENTIFIER, 0)

        def literal(self):
            return self.getTypedRuleContext(nim_Parser.LiteralContext,0)


        def generalizedLit(self):
            return self.getTypedRuleContext(nim_Parser.GeneralizedLitContext,0)


        def arrayConstr(self):
            return self.getTypedRuleContext(nim_Parser.ArrayConstrContext,0)


        def tupleConstr(self):
            return self.getTypedRuleContext(nim_Parser.TupleConstrContext,0)


        def addressLiteral(self):
            return self.getTypedRuleContext(nim_Parser.AddressLiteralContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_primarySuffixSimpleBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimarySuffixSimpleBody" ):
                listener.enterPrimarySuffixSimpleBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimarySuffixSimpleBody" ):
                listener.exitPrimarySuffixSimpleBody(self)




    def primarySuffixSimpleBody(self):

        localctx = nim_Parser.PrimarySuffixSimpleBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_primarySuffixSimpleBody)
        try:
            self.state = 400
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,26,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 391
                self.match(nim_Parser.IDENTIFIER)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 392
                self.literal()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 393
                self.generalizedLit()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 394
                self.match(nim_Parser.IDENTIFIER)
                self.state = 397
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [nim_Parser.OPEN_BRACK]:
                    self.state = 395
                    self.arrayConstr()
                    pass
                elif token in [nim_Parser.OPEN_PAREN]:
                    self.state = 396
                    self.tupleConstr()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 399
                self.addressLiteral()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PrimarySuffixContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primarySuffixSimpleBody(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.PrimarySuffixSimpleBodyContext)
            else:
                return self.getTypedRuleContext(nim_Parser.PrimarySuffixSimpleBodyContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.COMMA)
            else:
                return self.getToken(nim_Parser.COMMA, i)

        def OPEN_PAREN(self):
            return self.getToken(nim_Parser.OPEN_PAREN, 0)

        def exprColonEqExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.ExprColonEqExprContext)
            else:
                return self.getTypedRuleContext(nim_Parser.ExprColonEqExprContext,i)


        def CLOSE_PAREN(self):
            return self.getToken(nim_Parser.CLOSE_PAREN, 0)

        def DOT(self):
            return self.getToken(nim_Parser.DOT, 0)

        def symbol(self):
            return self.getTypedRuleContext(nim_Parser.SymbolContext,0)


        def generalizedLit(self):
            return self.getTypedRuleContext(nim_Parser.GeneralizedLitContext,0)


        def OPEN_BRACK(self):
            return self.getToken(nim_Parser.OPEN_BRACK, 0)

        def CLOSE_BRACK(self):
            return self.getToken(nim_Parser.CLOSE_BRACK, 0)

        def simpleExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.SimpleExprContext)
            else:
                return self.getTypedRuleContext(nim_Parser.SimpleExprContext,i)


        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.ExprContext)
            else:
                return self.getTypedRuleContext(nim_Parser.ExprContext,i)


        def getRuleIndex(self):
            return nim_Parser.RULE_primarySuffix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimarySuffix" ):
                listener.enterPrimarySuffix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimarySuffix" ):
                listener.exitPrimarySuffix(self)




    def primarySuffix(self):

        localctx = nim_Parser.PrimarySuffixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_primarySuffix)
        self._la = 0 # Token type
        try:
            self.state = 445
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 402
                self.primarySuffixSimpleBody()
                self.state = 407
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,27,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 403
                        self.match(nim_Parser.COMMA)
                        self.state = 404
                        self.primarySuffixSimpleBody() 
                    self.state = 409
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,27,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 410
                self.match(nim_Parser.OPEN_PAREN)
                self.state = 411
                self.exprColonEqExpr()
                self.state = 416
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==nim_Parser.COMMA:
                    self.state = 412
                    self.match(nim_Parser.COMMA)
                    self.state = 413
                    self.exprColonEqExpr()
                    self.state = 418
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 419
                self.match(nim_Parser.CLOSE_PAREN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 421
                self.match(nim_Parser.DOT)
                self.state = 422
                self.symbol()
                self.state = 424
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
                if la_ == 1:
                    self.state = 423
                    self.generalizedLit()


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 426
                self.match(nim_Parser.OPEN_BRACK)
                self.state = 429
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
                if la_ == 1:
                    self.state = 427
                    self.simpleExpr()
                    pass

                elif la_ == 2:
                    self.state = 428
                    self.expr()
                    pass


                self.state = 438
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==nim_Parser.COMMA:
                    self.state = 431
                    self.match(nim_Parser.COMMA)
                    self.state = 434
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
                    if la_ == 1:
                        self.state = 432
                        self.simpleExpr()
                        pass

                    elif la_ == 2:
                        self.state = 433
                        self.expr()
                        pass


                    self.state = 440
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 441
                self.match(nim_Parser.CLOSE_BRACK)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 443
                if not self._input.LT(1).type in self.primarySuffixList:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self._input.LT(1).type in self.primarySuffixList")
                self.state = 444
                self.expr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PrimaryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleExpr(self):
            return self.getTypedRuleContext(nim_Parser.SimpleExprContext,0)


        def typeKeyw(self):
            return self.getTypedRuleContext(nim_Parser.TypeKeywContext,0)


        def prefixOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.PrefixOperatorContext)
            else:
                return self.getTypedRuleContext(nim_Parser.PrefixOperatorContext,i)


        def identOrLiteral(self):
            return self.getTypedRuleContext(nim_Parser.IdentOrLiteralContext,0)


        def primarySuffix(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.PrimarySuffixContext)
            else:
                return self.getTypedRuleContext(nim_Parser.PrimarySuffixContext,i)


        def getRuleIndex(self):
            return nim_Parser.RULE_primary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimary" ):
                listener.enterPrimary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimary" ):
                listener.exitPrimary(self)




    def primary(self):

        localctx = nim_Parser.PrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_primary)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 470
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
            if la_ == 1:
                self.state = 447
                self.typeKeyw()
                self.state = 448
                self.simpleExpr()
                pass

            elif la_ == 2:
                self.state = 453
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,34,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 450
                        self.prefixOperator() 
                    self.state = 455
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,34,self._ctx)

                self.state = 468
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,37,self._ctx)
                if la_ == 1:
                    self.state = 456
                    self.identOrLiteral()
                    self.state = 460
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,35,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 457
                            self.primarySuffix() 
                        self.state = 462
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,35,self._ctx)

                    pass

                elif la_ == 2:
                    self.state = 464 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 463
                            self.primarySuffix()

                        else:
                            raise NoViableAltException(self)
                        self.state = 466 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,36,self._ctx)

                    pass


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_complexStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.Simple_complexStmtContext)
            else:
                return self.getTypedRuleContext(nim_Parser.Simple_complexStmtContext,i)


        def expr(self):
            return self.getTypedRuleContext(nim_Parser.ExprContext,0)


        def COLON(self):
            return self.getToken(nim_Parser.COLON, 0)

        def EQUALS(self):
            return self.getToken(nim_Parser.EQUALS, 0)

        def SEMI_COLON(self):
            return self.getToken(nim_Parser.SEMI_COLON, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.COMMA)
            else:
                return self.getToken(nim_Parser.COMMA, i)

        def exprColonEqExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.ExprColonEqExprContext)
            else:
                return self.getTypedRuleContext(nim_Parser.ExprColonEqExprContext,i)


        def getRuleIndex(self):
            return nim_Parser.RULE_parBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParBody" ):
                listener.enterParBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParBody" ):
                listener.exitParBody(self)




    def parBody(self):

        localctx = nim_Parser.ParBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_parBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 498
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
            if la_ == 1:
                self.state = 472
                if not self._input.LT(1).type in self.parKeyWList:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self._input.LT(1).type in self.parKeyWList")
                self.state = 473
                self.simple_complexStmt()
                self.state = 476
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nim_Parser.SEMI_COLON:
                    self.state = 474
                    self.match(nim_Parser.SEMI_COLON)
                    self.state = 475
                    self.simple_complexStmt()


                pass

            elif la_ == 2:
                self.state = 478
                self.expr()
                pass

            elif la_ == 3:
                self.state = 482
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [nim_Parser.COLON]:
                    self.state = 479
                    self.match(nim_Parser.COLON)
                    pass
                elif token in [nim_Parser.EQUALS]:
                    self.state = 480
                    self.match(nim_Parser.EQUALS)

                    self.state = 481
                    self.expr()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 496
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [nim_Parser.COMMA]:
                    self.state = 486 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 484
                        self.match(nim_Parser.COMMA)
                        self.state = 485
                        self.exprColonEqExpr()
                        self.state = 488 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==nim_Parser.COMMA):
                            break

                    pass
                elif token in [nim_Parser.SEMI_COLON]:
                    self.state = 490
                    self.match(nim_Parser.SEMI_COLON)
                    self.state = 492 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 491
                            self.simple_complexStmt()

                        else:
                            raise NoViableAltException(self)
                        self.state = 494 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,42,self._ctx)

                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(nim_Parser.OPEN_PAREN, 0)

        def parBody(self):
            return self.getTypedRuleContext(nim_Parser.ParBodyContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(nim_Parser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_par

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPar" ):
                listener.enterPar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPar" ):
                listener.exitPar(self)




    def par(self):

        localctx = nim_Parser.ParContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_par)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 500
            self.match(nim_Parser.OPEN_PAREN)
            self.state = 501
            self.parBody()
            self.state = 502
            self.match(nim_Parser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ImportStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPORT(self):
            return self.getToken(nim_Parser.IMPORT, 0)

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.IDENTIFIER)
            else:
                return self.getToken(nim_Parser.IDENTIFIER, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.COMMA)
            else:
                return self.getToken(nim_Parser.COMMA, i)

        def getRuleIndex(self):
            return nim_Parser.RULE_importStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportStmt" ):
                listener.enterImportStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportStmt" ):
                listener.exitImportStmt(self)




    def importStmt(self):

        localctx = nim_Parser.ImportStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_importStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 504
            self.match(nim_Parser.IMPORT)
            self.state = 505
            self.match(nim_Parser.IDENTIFIER)
            self.state = 510
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,45,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 506
                    self.match(nim_Parser.COMMA)
                    self.state = 507
                    self.match(nim_Parser.IDENTIFIER) 
                self.state = 512
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,45,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FromStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(nim_Parser.FROM, 0)

        def IDENTIFIER(self):
            return self.getToken(nim_Parser.IDENTIFIER, 0)

        def importStmt(self):
            return self.getTypedRuleContext(nim_Parser.ImportStmtContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_fromStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFromStmt" ):
                listener.enterFromStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFromStmt" ):
                listener.exitFromStmt(self)




    def fromStmt(self):

        localctx = nim_Parser.FromStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_fromStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 513
            self.match(nim_Parser.FROM)
            self.state = 514
            self.match(nim_Parser.IDENTIFIER)
            self.state = 515
            self.importStmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BlockExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BLOCK(self):
            return self.getToken(nim_Parser.BLOCK, 0)

        def COLON(self):
            return self.getToken(nim_Parser.COLON, 0)

        def stmt(self):
            return self.getTypedRuleContext(nim_Parser.StmtContext,0)


        def symbol(self):
            return self.getTypedRuleContext(nim_Parser.SymbolContext,0)


        def ind(self):
            return self.getTypedRuleContext(nim_Parser.IndContext,0)


        def ded(self):
            return self.getTypedRuleContext(nim_Parser.DedContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_blockExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockExpr" ):
                listener.enterBlockExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockExpr" ):
                listener.exitBlockExpr(self)




    def blockExpr(self):

        localctx = nim_Parser.BlockExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_blockExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 517
            self.match(nim_Parser.BLOCK)
            self.state = 519
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
            if la_ == 1:
                self.state = 518
                self.symbol()


            self.state = 521
            self.match(nim_Parser.COLON)
            self.state = 527
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
            if la_ == 1:
                self.state = 522
                self.stmt()
                pass

            elif la_ == 2:
                self.state = 523
                self.ind()
                self.state = 524
                self.stmt()
                self.state = 525
                self.ded()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ForExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def forStmt(self):
            return self.getTypedRuleContext(nim_Parser.ForStmtContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_forExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForExpr" ):
                listener.enterForExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForExpr" ):
                listener.exitForExpr(self)




    def forExpr(self):

        localctx = nim_Parser.ForExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_forExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 529
            self.forStmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AnyExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleExpr(self):
            return self.getTypedRuleContext(nim_Parser.SimpleExprContext,0)


        def expr(self):
            return self.getTypedRuleContext(nim_Parser.ExprContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_anyExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnyExpr" ):
                listener.enterAnyExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnyExpr" ):
                listener.exitAnyExpr(self)




    def anyExpr(self):

        localctx = nim_Parser.AnyExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_anyExpr)
        try:
            self.state = 533
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 531
                self.simpleExpr()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 532
                self.expr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CondExprBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.SimpleExprContext)
            else:
                return self.getTypedRuleContext(nim_Parser.SimpleExprContext,i)


        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.ExprContext)
            else:
                return self.getTypedRuleContext(nim_Parser.ExprContext,i)


        def ELSE(self):
            return self.getToken(nim_Parser.ELSE, 0)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.COLON)
            else:
                return self.getToken(nim_Parser.COLON, i)

        def ELIF(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.ELIF)
            else:
                return self.getToken(nim_Parser.ELIF, i)

        def ind(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.IndContext)
            else:
                return self.getTypedRuleContext(nim_Parser.IndContext,i)


        def andExpr(self):
            return self.getTypedRuleContext(nim_Parser.AndExprContext,0)


        def ded(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.DedContext)
            else:
                return self.getTypedRuleContext(nim_Parser.DedContext,i)


        def anyExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.AnyExprContext)
            else:
                return self.getTypedRuleContext(nim_Parser.AnyExprContext,i)


        def getRuleIndex(self):
            return nim_Parser.RULE_condExprBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondExprBody" ):
                listener.enterCondExprBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondExprBody" ):
                listener.exitCondExprBody(self)




    def condExprBody(self):

        localctx = nim_Parser.CondExprBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_condExprBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 537
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,49,self._ctx)
            if la_ == 1:
                self.state = 535
                self.simpleExpr()
                pass

            elif la_ == 2:
                self.state = 536
                self.expr()
                pass


            self.state = 554
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==nim_Parser.ELIF:
                self.state = 539
                self.match(nim_Parser.ELIF)
                self.state = 542
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
                if la_ == 1:
                    self.state = 540
                    self.expr()
                    pass

                elif la_ == 2:
                    self.state = 541
                    self.simpleExpr()
                    pass


                self.state = 544
                self.match(nim_Parser.COLON)
                self.state = 550
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
                if la_ == 1:
                    self.state = 545
                    self.ind()
                    self.state = 546
                    self.anyExpr()
                    self.state = 547
                    self.ded()
                    pass

                elif la_ == 2:
                    self.state = 549
                    self.anyExpr()
                    pass


                self.state = 556
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 557
            self.match(nim_Parser.ELSE)
            self.state = 558
            self.match(nim_Parser.COLON)
            self.state = 564
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,53,self._ctx)
            if la_ == 1:
                self.state = 559
                self.ind()
                self.state = 560
                self.andExpr()
                self.state = 561
                self.ded()
                pass

            elif la_ == 2:
                self.state = 563
                self.anyExpr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CondExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(nim_Parser.COLON, 0)

        def simpleExpr(self):
            return self.getTypedRuleContext(nim_Parser.SimpleExprContext,0)


        def expr(self):
            return self.getTypedRuleContext(nim_Parser.ExprContext,0)


        def ind(self):
            return self.getTypedRuleContext(nim_Parser.IndContext,0)


        def condExprBody(self):
            return self.getTypedRuleContext(nim_Parser.CondExprBodyContext,0)


        def ded(self):
            return self.getTypedRuleContext(nim_Parser.DedContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_condExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondExpr" ):
                listener.enterCondExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondExpr" ):
                listener.exitCondExpr(self)




    def condExpr(self):

        localctx = nim_Parser.CondExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_condExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 568
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
            if la_ == 1:
                self.state = 566
                self.simpleExpr()
                pass

            elif la_ == 2:
                self.state = 567
                self.expr()
                pass


            self.state = 570
            self.match(nim_Parser.COLON)
            self.state = 576
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,55,self._ctx)
            if la_ == 1:
                self.state = 571
                self.ind()
                self.state = 572
                self.condExprBody()
                self.state = 573
                self.ded()
                pass

            elif la_ == 2:
                self.state = 575
                self.condExprBody()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CaseExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(nim_Parser.CASE, 0)

        def simpleExpr(self):
            return self.getTypedRuleContext(nim_Parser.SimpleExprContext,0)


        def expr(self):
            return self.getTypedRuleContext(nim_Parser.ExprContext,0)


        def ofBranches(self):
            return self.getTypedRuleContext(nim_Parser.OfBranchesContext,0)


        def ind(self):
            return self.getTypedRuleContext(nim_Parser.IndContext,0)


        def ded(self):
            return self.getTypedRuleContext(nim_Parser.DedContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_caseExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseExpr" ):
                listener.enterCaseExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseExpr" ):
                listener.exitCaseExpr(self)




    def caseExpr(self):

        localctx = nim_Parser.CaseExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_caseExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 578
            self.match(nim_Parser.CASE)
            self.state = 581
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,56,self._ctx)
            if la_ == 1:
                self.state = 579
                self.simpleExpr()
                pass

            elif la_ == 2:
                self.state = 580
                self.expr()
                pass


            self.state = 588
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [nim_Parser.INDENT]:
                self.state = 583
                self.ind()
                self.state = 584
                self.ofBranches()
                self.state = 585
                self.ded()
                pass
            elif token in [nim_Parser.OF]:
                self.state = 587
                self.ofBranches()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class WhenExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(nim_Parser.WHEN, 0)

        def condExpr(self):
            return self.getTypedRuleContext(nim_Parser.CondExprContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_whenExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhenExpr" ):
                listener.enterWhenExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhenExpr" ):
                listener.exitWhenExpr(self)




    def whenExpr(self):

        localctx = nim_Parser.WhenExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_whenExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 590
            self.match(nim_Parser.WHEN)
            self.state = 591
            self.condExpr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IfExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(nim_Parser.IF, 0)

        def condExpr(self):
            return self.getTypedRuleContext(nim_Parser.CondExprContext,0)


        def NOT(self):
            return self.getToken(nim_Parser.NOT, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_ifExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfExpr" ):
                listener.enterIfExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfExpr" ):
                listener.exitIfExpr(self)




    def ifExpr(self):

        localctx = nim_Parser.IfExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_ifExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 593
            self.match(nim_Parser.IF)
            self.state = 595
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
            if la_ == 1:
                self.state = 594
                self.match(nim_Parser.NOT)


            self.state = 597
            self.condExpr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExprListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.SimpleExprContext)
            else:
                return self.getTypedRuleContext(nim_Parser.SimpleExprContext,i)


        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.ExprContext)
            else:
                return self.getTypedRuleContext(nim_Parser.ExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.COMMA)
            else:
                return self.getToken(nim_Parser.COMMA, i)

        def getRuleIndex(self):
            return nim_Parser.RULE_exprList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprList" ):
                listener.enterExprList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprList" ):
                listener.exitExprList(self)




    def exprList(self):

        localctx = nim_Parser.ExprListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_exprList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 601
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
            if la_ == 1:
                self.state = 599
                self.simpleExpr()
                pass

            elif la_ == 2:
                self.state = 600
                self.expr()
                pass


            self.state = 610
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==nim_Parser.COMMA:
                self.state = 603
                self.match(nim_Parser.COMMA)
                self.state = 606
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
                if la_ == 1:
                    self.state = 604
                    self.simpleExpr()
                    pass

                elif la_ == 2:
                    self.state = 605
                    self.expr()
                    pass


                self.state = 612
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OfBranchContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OF(self):
            return self.getToken(nim_Parser.OF, 0)

        def exprList(self):
            return self.getTypedRuleContext(nim_Parser.ExprListContext,0)


        def COLON(self):
            return self.getToken(nim_Parser.COLON, 0)

        def ind(self):
            return self.getTypedRuleContext(nim_Parser.IndContext,0)


        def ded(self):
            return self.getTypedRuleContext(nim_Parser.DedContext,0)


        def exprStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.ExprStmtContext)
            else:
                return self.getTypedRuleContext(nim_Parser.ExprStmtContext,i)


        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.StmtContext)
            else:
                return self.getTypedRuleContext(nim_Parser.StmtContext,i)


        def getRuleIndex(self):
            return nim_Parser.RULE_ofBranch

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOfBranch" ):
                listener.enterOfBranch(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOfBranch" ):
                listener.exitOfBranch(self)




    def ofBranch(self):

        localctx = nim_Parser.OfBranchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_ofBranch)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 613
            self.match(nim_Parser.OF)
            self.state = 614
            self.exprList()
            self.state = 615
            self.match(nim_Parser.COLON)
            self.state = 629
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
            if la_ == 1:
                self.state = 616
                self.ind()
                self.state = 619 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 619
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
                        if la_ == 1:
                            self.state = 617
                            self.exprStmt()
                            pass

                        elif la_ == 2:
                            self.state = 618
                            self.stmt()
                            pass



                    else:
                        raise NoViableAltException(self)
                    self.state = 621 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,63,self._ctx)

                self.state = 623
                self.ded()
                pass

            elif la_ == 2:
                self.state = 627
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
                if la_ == 1:
                    self.state = 625
                    self.exprStmt()
                    pass

                elif la_ == 2:
                    self.state = 626
                    self.stmt()
                    pass


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OfBranchesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ofBranch(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.OfBranchContext)
            else:
                return self.getTypedRuleContext(nim_Parser.OfBranchContext,i)


        def ELSE(self):
            return self.getToken(nim_Parser.ELSE, 0)

        def COLON(self):
            return self.getToken(nim_Parser.COLON, 0)

        def ind(self):
            return self.getTypedRuleContext(nim_Parser.IndContext,0)


        def ded(self):
            return self.getTypedRuleContext(nim_Parser.DedContext,0)


        def exprStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.ExprStmtContext)
            else:
                return self.getTypedRuleContext(nim_Parser.ExprStmtContext,i)


        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.StmtContext)
            else:
                return self.getTypedRuleContext(nim_Parser.StmtContext,i)


        def getRuleIndex(self):
            return nim_Parser.RULE_ofBranches

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOfBranches" ):
                listener.enterOfBranches(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOfBranches" ):
                listener.exitOfBranches(self)




    def ofBranches(self):

        localctx = nim_Parser.OfBranchesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_ofBranches)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 632 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 631
                    self.ofBranch()

                else:
                    raise NoViableAltException(self)
                self.state = 634 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,66,self._ctx)

            self.state = 653
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
            if la_ == 1:
                self.state = 636
                self.match(nim_Parser.ELSE)
                self.state = 637
                self.match(nim_Parser.COLON)
                self.state = 651
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
                if la_ == 1:
                    self.state = 638
                    self.ind()
                    self.state = 641 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 641
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,67,self._ctx)
                            if la_ == 1:
                                self.state = 639
                                self.exprStmt()
                                pass

                            elif la_ == 2:
                                self.state = 640
                                self.stmt()
                                pass



                        else:
                            raise NoViableAltException(self)
                        self.state = 643 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,68,self._ctx)

                    self.state = 645
                    self.ded()
                    pass

                elif la_ == 2:
                    self.state = 649
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,69,self._ctx)
                    if la_ == 1:
                        self.state = 647
                        self.exprStmt()
                        pass

                    elif la_ == 2:
                        self.state = 648
                        self.stmt()
                        pass


                    pass




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CaseStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(nim_Parser.CASE, 0)

        def simpleExpr(self):
            return self.getTypedRuleContext(nim_Parser.SimpleExprContext,0)


        def expr(self):
            return self.getTypedRuleContext(nim_Parser.ExprContext,0)


        def ofBranches(self):
            return self.getTypedRuleContext(nim_Parser.OfBranchesContext,0)


        def ind(self):
            return self.getTypedRuleContext(nim_Parser.IndContext,0)


        def ded(self):
            return self.getTypedRuleContext(nim_Parser.DedContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_caseStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseStmt" ):
                listener.enterCaseStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseStmt" ):
                listener.exitCaseStmt(self)




    def caseStmt(self):

        localctx = nim_Parser.CaseStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_caseStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 655
            self.match(nim_Parser.CASE)
            self.state = 658
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,72,self._ctx)
            if la_ == 1:
                self.state = 656
                self.simpleExpr()
                pass

            elif la_ == 2:
                self.state = 657
                self.expr()
                pass


            self.state = 665
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [nim_Parser.INDENT]:
                self.state = 660
                self.ind()
                self.state = 661
                self.ofBranches()
                self.state = 662
                self.ded()
                pass
            elif token in [nim_Parser.OF]:
                self.state = 664
                self.ofBranches()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class WhileStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(nim_Parser.WHILE, 0)

        def COLON(self):
            return self.getToken(nim_Parser.COLON, 0)

        def simpleExpr(self):
            return self.getTypedRuleContext(nim_Parser.SimpleExprContext,0)


        def expr(self):
            return self.getTypedRuleContext(nim_Parser.ExprContext,0)


        def ind(self):
            return self.getTypedRuleContext(nim_Parser.IndContext,0)


        def ded(self):
            return self.getTypedRuleContext(nim_Parser.DedContext,0)


        def stmt(self):
            return self.getTypedRuleContext(nim_Parser.StmtContext,0)


        def exprStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.ExprStmtContext)
            else:
                return self.getTypedRuleContext(nim_Parser.ExprStmtContext,i)


        def getRuleIndex(self):
            return nim_Parser.RULE_whileStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileStmt" ):
                listener.enterWhileStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileStmt" ):
                listener.exitWhileStmt(self)




    def whileStmt(self):

        localctx = nim_Parser.WhileStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_whileStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 667
            self.match(nim_Parser.WHILE)
            self.state = 670
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
            if la_ == 1:
                self.state = 668
                self.simpleExpr()
                pass

            elif la_ == 2:
                self.state = 669
                self.expr()
                pass


            self.state = 672
            self.match(nim_Parser.COLON)
            self.state = 692
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,79,self._ctx)
            if la_ == 1:
                self.state = 673
                self.ind()
                self.state = 680
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
                if la_ == 1:
                    self.state = 675 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 674
                            self.exprStmt()

                        else:
                            raise NoViableAltException(self)
                        self.state = 677 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,75,self._ctx)

                    pass

                elif la_ == 2:
                    self.state = 679
                    self.stmt()
                    pass


                self.state = 682
                self.ded()
                pass

            elif la_ == 2:
                self.state = 690
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
                if la_ == 1:
                    self.state = 685 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 684
                            self.exprStmt()

                        else:
                            raise NoViableAltException(self)
                        self.state = 687 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,77,self._ctx)

                    pass

                elif la_ == 2:
                    self.state = 689
                    self.stmt()
                    pass


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class WhenStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(nim_Parser.WHEN, 0)

        def condStmt(self):
            return self.getTypedRuleContext(nim_Parser.CondStmtContext,0)


        def NOT(self):
            return self.getToken(nim_Parser.NOT, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_whenStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhenStmt" ):
                listener.enterWhenStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhenStmt" ):
                listener.exitWhenStmt(self)




    def whenStmt(self):

        localctx = nim_Parser.WhenStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_whenStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 694
            self.match(nim_Parser.WHEN)
            self.state = 696
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
            if la_ == 1:
                self.state = 695
                self.match(nim_Parser.NOT)


            self.state = 698
            self.condStmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ForStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(nim_Parser.FOR, 0)

        def IN(self):
            return self.getToken(nim_Parser.IN, 0)

        def simpleExpr(self):
            return self.getTypedRuleContext(nim_Parser.SimpleExprContext,0)


        def COLON(self):
            return self.getToken(nim_Parser.COLON, 0)

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.IDENTIFIER)
            else:
                return self.getToken(nim_Parser.IDENTIFIER, i)

        def ind(self):
            return self.getTypedRuleContext(nim_Parser.IndContext,0)


        def ded(self):
            return self.getTypedRuleContext(nim_Parser.DedContext,0)


        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.StmtContext)
            else:
                return self.getTypedRuleContext(nim_Parser.StmtContext,i)


        def exprStmt(self):
            return self.getTypedRuleContext(nim_Parser.ExprStmtContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.COMMA)
            else:
                return self.getToken(nim_Parser.COMMA, i)

        def getRuleIndex(self):
            return nim_Parser.RULE_forStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForStmt" ):
                listener.enterForStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForStmt" ):
                listener.exitForStmt(self)




    def forStmt(self):

        localctx = nim_Parser.ForStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_forStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 700
            self.match(nim_Parser.FOR)

            self.state = 701
            self.match(nim_Parser.IDENTIFIER)
            self.state = 706
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==nim_Parser.COMMA:
                self.state = 702
                self.match(nim_Parser.COMMA)
                self.state = 703
                self.match(nim_Parser.IDENTIFIER)
                self.state = 708
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 709
            self.match(nim_Parser.IN)
            self.state = 710
            self.simpleExpr()
            self.state = 711
            self.match(nim_Parser.COLON)
            self.state = 724
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
            if la_ == 1:
                self.state = 712
                self.ind()
                self.state = 714 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 713
                        self.stmt()

                    else:
                        raise NoViableAltException(self)
                    self.state = 716 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,82,self._ctx)

                self.state = 718
                self.ded()
                pass

            elif la_ == 2:
                self.state = 722
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
                if la_ == 1:
                    self.state = 720
                    self.stmt()
                    pass

                elif la_ == 2:
                    self.state = 721
                    self.exprStmt()
                    pass


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IfStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(nim_Parser.IF, 0)

        def condStmt(self):
            return self.getTypedRuleContext(nim_Parser.CondStmtContext,0)


        def NOT(self):
            return self.getToken(nim_Parser.NOT, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_ifStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfStmt" ):
                listener.enterIfStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfStmt" ):
                listener.exitIfStmt(self)




    def ifStmt(self):

        localctx = nim_Parser.IfStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_ifStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 726
            self.match(nim_Parser.IF)
            self.state = 728
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
            if la_ == 1:
                self.state = 727
                self.match(nim_Parser.NOT)


            self.state = 730
            self.condStmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CondStmtElifContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELIF(self):
            return self.getToken(nim_Parser.ELIF, 0)

        def COLON(self):
            return self.getToken(nim_Parser.COLON, 0)

        def simpleExpr(self):
            return self.getTypedRuleContext(nim_Parser.SimpleExprContext,0)


        def expr(self):
            return self.getTypedRuleContext(nim_Parser.ExprContext,0)


        def ind(self):
            return self.getTypedRuleContext(nim_Parser.IndContext,0)


        def ded(self):
            return self.getTypedRuleContext(nim_Parser.DedContext,0)


        def stmt(self):
            return self.getTypedRuleContext(nim_Parser.StmtContext,0)


        def exprStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.ExprStmtContext)
            else:
                return self.getTypedRuleContext(nim_Parser.ExprStmtContext,i)


        def getRuleIndex(self):
            return nim_Parser.RULE_condStmtElif

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondStmtElif" ):
                listener.enterCondStmtElif(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondStmtElif" ):
                listener.exitCondStmtElif(self)




    def condStmtElif(self):

        localctx = nim_Parser.CondStmtElifContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_condStmtElif)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 732
            self.match(nim_Parser.ELIF)

            self.state = 735
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,86,self._ctx)
            if la_ == 1:
                self.state = 733
                self.simpleExpr()
                pass

            elif la_ == 2:
                self.state = 734
                self.expr()
                pass


            self.state = 737
            self.match(nim_Parser.COLON)
            self.state = 757
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,91,self._ctx)
            if la_ == 1:
                self.state = 738
                self.ind()
                self.state = 745
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
                if la_ == 1:
                    self.state = 740 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 739
                            self.exprStmt()

                        else:
                            raise NoViableAltException(self)
                        self.state = 742 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,87,self._ctx)

                    pass

                elif la_ == 2:
                    self.state = 744
                    self.stmt()
                    pass


                self.state = 747
                self.ded()
                pass

            elif la_ == 2:
                self.state = 755
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
                if la_ == 1:
                    self.state = 750 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 749
                            self.exprStmt()

                        else:
                            raise NoViableAltException(self)
                        self.state = 752 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,89,self._ctx)

                    pass

                elif la_ == 2:
                    self.state = 754
                    self.stmt()
                    pass


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CondStmtElseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(nim_Parser.ELSE, 0)

        def COLON(self):
            return self.getToken(nim_Parser.COLON, 0)

        def ind(self):
            return self.getTypedRuleContext(nim_Parser.IndContext,0)


        def ded(self):
            return self.getTypedRuleContext(nim_Parser.DedContext,0)


        def stmt(self):
            return self.getTypedRuleContext(nim_Parser.StmtContext,0)


        def exprStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.ExprStmtContext)
            else:
                return self.getTypedRuleContext(nim_Parser.ExprStmtContext,i)


        def getRuleIndex(self):
            return nim_Parser.RULE_condStmtElse

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondStmtElse" ):
                listener.enterCondStmtElse(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondStmtElse" ):
                listener.exitCondStmtElse(self)




    def condStmtElse(self):

        localctx = nim_Parser.CondStmtElseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_condStmtElse)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 759
            self.match(nim_Parser.ELSE)
            self.state = 760
            self.match(nim_Parser.COLON)
            self.state = 780
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
            if la_ == 1:
                self.state = 761
                self.ind()
                self.state = 768
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
                if la_ == 1:
                    self.state = 763 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 762
                            self.exprStmt()

                        else:
                            raise NoViableAltException(self)
                        self.state = 765 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,92,self._ctx)

                    pass

                elif la_ == 2:
                    self.state = 767
                    self.stmt()
                    pass


                self.state = 770
                self.ded()
                pass

            elif la_ == 2:
                self.state = 778
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
                if la_ == 1:
                    self.state = 773 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 772
                            self.exprStmt()

                        else:
                            raise NoViableAltException(self)
                        self.state = 775 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,94,self._ctx)

                    pass

                elif la_ == 2:
                    self.state = 777
                    self.stmt()
                    pass


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CondStmtBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ind(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.IndContext)
            else:
                return self.getTypedRuleContext(nim_Parser.IndContext,i)


        def stmt(self):
            return self.getTypedRuleContext(nim_Parser.StmtContext,0)


        def ded(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.DedContext)
            else:
                return self.getTypedRuleContext(nim_Parser.DedContext,i)


        def condStmtElif(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.CondStmtElifContext)
            else:
                return self.getTypedRuleContext(nim_Parser.CondStmtElifContext,i)


        def condStmtElse(self):
            return self.getTypedRuleContext(nim_Parser.CondStmtElseContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_condStmtBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondStmtBody" ):
                listener.enterCondStmtBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondStmtBody" ):
                listener.exitCondStmtBody(self)




    def condStmtBody(self):

        localctx = nim_Parser.CondStmtBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_condStmtBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 787
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
            if la_ == 1:
                self.state = 782
                self.ind()
                self.state = 783
                self.stmt()
                self.state = 784
                self.ded()
                pass

            elif la_ == 2:
                self.state = 786
                self.stmt()
                pass


            self.state = 822
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,104,self._ctx)
            if la_ == 1:
                self.state = 789
                self.ind()
                self.state = 793
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==nim_Parser.ELIF:
                    self.state = 790
                    self.condStmtElif()
                    self.state = 795
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 797
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nim_Parser.ELSE:
                    self.state = 796
                    self.condStmtElse()


                self.state = 799
                self.ded()
                pass

            elif la_ == 2:
                self.state = 804
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==nim_Parser.ELIF:
                    self.state = 801
                    self.condStmtElif()
                    self.state = 806
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 807
                self.ind()
                self.state = 809
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nim_Parser.ELSE:
                    self.state = 808
                    self.condStmtElse()


                self.state = 811
                self.ded()
                pass

            elif la_ == 3:
                self.state = 816
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,102,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 813
                        self.condStmtElif() 
                    self.state = 818
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,102,self._ctx)

                self.state = 820
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
                if la_ == 1:
                    self.state = 819
                    self.condStmtElse()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CondStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(nim_Parser.COLON, 0)

        def condStmtBody(self):
            return self.getTypedRuleContext(nim_Parser.CondStmtBodyContext,0)


        def simpleExpr(self):
            return self.getTypedRuleContext(nim_Parser.SimpleExprContext,0)


        def expr(self):
            return self.getTypedRuleContext(nim_Parser.ExprContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_condStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondStmt" ):
                listener.enterCondStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondStmt" ):
                listener.exitCondStmt(self)




    def condStmt(self):

        localctx = nim_Parser.CondStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_condStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 826
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
            if la_ == 1:
                self.state = 824
                self.simpleExpr()
                pass

            elif la_ == 2:
                self.state = 825
                self.expr()
                pass


            self.state = 828
            self.match(nim_Parser.COLON)
            self.state = 829
            self.condStmtBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BlockStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BLOCK(self):
            return self.getToken(nim_Parser.BLOCK, 0)

        def COLON(self):
            return self.getToken(nim_Parser.COLON, 0)

        def ind(self):
            return self.getTypedRuleContext(nim_Parser.IndContext,0)


        def stmt(self):
            return self.getTypedRuleContext(nim_Parser.StmtContext,0)


        def ded(self):
            return self.getTypedRuleContext(nim_Parser.DedContext,0)


        def symbol(self):
            return self.getTypedRuleContext(nim_Parser.SymbolContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_blockStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockStmt" ):
                listener.enterBlockStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockStmt" ):
                listener.exitBlockStmt(self)




    def blockStmt(self):

        localctx = nim_Parser.BlockStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_blockStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 831
            self.match(nim_Parser.BLOCK)
            self.state = 833
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
            if la_ == 1:
                self.state = 832
                self.symbol()


            self.state = 835
            self.match(nim_Parser.COLON)
            self.state = 841
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
            if la_ == 1:
                self.state = 836
                self.ind()
                self.state = 837
                self.stmt()
                self.state = 838
                self.ded()
                pass

            elif la_ == 2:
                self.state = 840
                self.stmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DiscardStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DISCARD(self):
            return self.getToken(nim_Parser.DISCARD, 0)

        def simpleExpr(self):
            return self.getTypedRuleContext(nim_Parser.SimpleExprContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_discardStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiscardStmt" ):
                listener.enterDiscardStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiscardStmt" ):
                listener.exitDiscardStmt(self)




    def discardStmt(self):

        localctx = nim_Parser.DiscardStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_discardStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 843
            self.match(nim_Parser.DISCARD)
            self.state = 845
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
            if la_ == 1:
                self.state = 844
                self.simpleExpr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReturnStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(nim_Parser.RETURN, 0)

        def simpleExpr(self):
            return self.getTypedRuleContext(nim_Parser.SimpleExprContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_returnStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnStmt" ):
                listener.enterReturnStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnStmt" ):
                listener.exitReturnStmt(self)




    def returnStmt(self):

        localctx = nim_Parser.ReturnStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_returnStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 847
            self.match(nim_Parser.RETURN)
            self.state = 849
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,109,self._ctx)
            if la_ == 1:
                self.state = 848
                self.simpleExpr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BreakStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BREAK(self):
            return self.getToken(nim_Parser.BREAK, 0)

        def simpleExpr(self):
            return self.getTypedRuleContext(nim_Parser.SimpleExprContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_breakStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBreakStmt" ):
                listener.enterBreakStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBreakStmt" ):
                listener.exitBreakStmt(self)




    def breakStmt(self):

        localctx = nim_Parser.BreakStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_breakStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 851
            self.match(nim_Parser.BREAK)
            self.state = 853
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,110,self._ctx)
            if la_ == 1:
                self.state = 852
                self.simpleExpr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PragmaStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pragma(self):
            return self.getTypedRuleContext(nim_Parser.PragmaContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_pragmaStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragmaStmt" ):
                listener.enterPragmaStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragmaStmt" ):
                listener.exitPragmaStmt(self)




    def pragmaStmt(self):

        localctx = nim_Parser.PragmaStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_pragmaStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 855
            self.pragma()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def blockExpr(self):
            return self.getTypedRuleContext(nim_Parser.BlockExprContext,0)


        def forExpr(self):
            return self.getTypedRuleContext(nim_Parser.ForExprContext,0)


        def ifExpr(self):
            return self.getTypedRuleContext(nim_Parser.IfExprContext,0)


        def whenExpr(self):
            return self.getTypedRuleContext(nim_Parser.WhenExprContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr" ):
                listener.enterExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr" ):
                listener.exitExpr(self)




    def expr(self):

        localctx = nim_Parser.ExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_expr)
        try:
            self.state = 861
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [nim_Parser.BLOCK]:
                self.enterOuterAlt(localctx, 1)
                self.state = 857
                self.blockExpr()
                pass
            elif token in [nim_Parser.FOR]:
                self.enterOuterAlt(localctx, 2)
                self.state = 858
                self.forExpr()
                pass
            elif token in [nim_Parser.IF]:
                self.enterOuterAlt(localctx, 3)
                self.state = 859
                self.ifExpr()
                pass
            elif token in [nim_Parser.WHEN]:
                self.enterOuterAlt(localctx, 4)
                self.state = 860
                self.whenExpr()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PragmaContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(nim_Parser.OPEN_BRACE, 0)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.DOT)
            else:
                return self.getToken(nim_Parser.DOT, i)

        def IDENTIFIER(self):
            return self.getToken(nim_Parser.IDENTIFIER, 0)

        def CLOSE_BRACE(self):
            return self.getToken(nim_Parser.CLOSE_BRACE, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_pragma

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragma" ):
                listener.enterPragma(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragma" ):
                listener.exitPragma(self)




    def pragma(self):

        localctx = nim_Parser.PragmaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_pragma)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 863
            self.match(nim_Parser.OPEN_BRACE)
            self.state = 864
            self.match(nim_Parser.DOT)
            self.state = 865
            self.match(nim_Parser.IDENTIFIER)
            self.state = 867
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==nim_Parser.DOT:
                self.state = 866
                self.match(nim_Parser.DOT)


            self.state = 869
            self.match(nim_Parser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RoutineContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def par(self):
            return self.getTypedRuleContext(nim_Parser.ParContext,0)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.COLON)
            else:
                return self.getToken(nim_Parser.COLON, i)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.StmtContext)
            else:
                return self.getTypedRuleContext(nim_Parser.StmtContext,i)


        def getRuleIndex(self):
            return nim_Parser.RULE_routine

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoutine" ):
                listener.enterRoutine(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoutine" ):
                listener.exitRoutine(self)




    def routine(self):

        localctx = nim_Parser.RoutineContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_routine)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 871
            self.par()
            self.state = 876
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,113,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 872
                    self.match(nim_Parser.COLON)
                    self.state = 873
                    self.stmt() 
                self.state = 878
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,113,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeSectionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(nim_Parser.OPEN_BRACE, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_typeSection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeSection" ):
                listener.enterTypeSection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeSection" ):
                listener.exitTypeSection(self)




    def typeSection(self):

        localctx = nim_Parser.TypeSectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_typeSection)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 879
            self.match(nim_Parser.OPEN_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VariableSectionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ind(self):
            return self.getTypedRuleContext(nim_Parser.IndContext,0)


        def ded(self):
            return self.getTypedRuleContext(nim_Parser.DedContext,0)


        def variable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.VariableContext)
            else:
                return self.getTypedRuleContext(nim_Parser.VariableContext,i)


        def getRuleIndex(self):
            return nim_Parser.RULE_variableSection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableSection" ):
                listener.enterVariableSection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableSection" ):
                listener.exitVariableSection(self)




    def variableSection(self):

        localctx = nim_Parser.VariableSectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_variableSection)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 894
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [nim_Parser.IDENTIFIER]:
                self.state = 882 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 881
                        self.variable()

                    else:
                        raise NoViableAltException(self)
                    self.state = 884 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,114,self._ctx)

                pass
            elif token in [nim_Parser.INDENT]:
                self.state = 886
                self.ind()
                self.state = 888 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 887
                    self.variable()
                    self.state = 890 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==nim_Parser.IDENTIFIER):
                        break

                self.state = 892
                self.ded()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstantSectionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ind(self):
            return self.getTypedRuleContext(nim_Parser.IndContext,0)


        def ded(self):
            return self.getTypedRuleContext(nim_Parser.DedContext,0)


        def constant(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.ConstantContext)
            else:
                return self.getTypedRuleContext(nim_Parser.ConstantContext,i)


        def getRuleIndex(self):
            return nim_Parser.RULE_constantSection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantSection" ):
                listener.enterConstantSection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantSection" ):
                listener.exitConstantSection(self)




    def constantSection(self):

        localctx = nim_Parser.ConstantSectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_constantSection)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 909
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [nim_Parser.IDENTIFIER]:
                self.state = 897 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 896
                        self.constant()

                    else:
                        raise NoViableAltException(self)
                    self.state = 899 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,117,self._ctx)

                pass
            elif token in [nim_Parser.INDENT]:
                self.state = 901
                self.ind()
                self.state = 903 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 902
                    self.constant()
                    self.state = 905 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==nim_Parser.IDENTIFIER):
                        break

                self.state = 907
                self.ded()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IdentVisContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self):
            return self.getTypedRuleContext(nim_Parser.SymbolContext,0)


        def operator(self):
            return self.getTypedRuleContext(nim_Parser.OperatorContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_identVis

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentVis" ):
                listener.enterIdentVis(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentVis" ):
                listener.exitIdentVis(self)




    def identVis(self):

        localctx = nim_Parser.IdentVisContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_identVis)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 911
            self.symbol()
            self.state = 913
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nim_Parser.COLON) | (1 << nim_Parser.DOT) | (1 << nim_Parser.EQUALS) | (1 << nim_Parser.IN) | (1 << nim_Parser.OF) | (1 << nim_Parser.NOT) | (1 << nim_Parser.DOLLAR_SIGN) | (1 << nim_Parser.OP0) | (1 << nim_Parser.OP1) | (1 << nim_Parser.OP2) | (1 << nim_Parser.OP3) | (1 << nim_Parser.OP4) | (1 << nim_Parser.OP5) | (1 << nim_Parser.OP6) | (1 << nim_Parser.OP7) | (1 << nim_Parser.OP8) | (1 << nim_Parser.OP9) | (1 << nim_Parser.OP10))) != 0):
                self.state = 912
                self.operator()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VarTupleContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(nim_Parser.OPEN_BRACE, 0)

        def identVis(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.IdentVisContext)
            else:
                return self.getTypedRuleContext(nim_Parser.IdentVisContext,i)


        def EQUALS(self):
            return self.getToken(nim_Parser.EQUALS, 0)

        def ind(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.IndContext)
            else:
                return self.getTypedRuleContext(nim_Parser.IndContext,i)


        def CLOSE_BRACE(self):
            return self.getToken(nim_Parser.CLOSE_BRACE, 0)

        def ded(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.DedContext)
            else:
                return self.getTypedRuleContext(nim_Parser.DedContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.COMMA)
            else:
                return self.getToken(nim_Parser.COMMA, i)

        def simpleExpr(self):
            return self.getTypedRuleContext(nim_Parser.SimpleExprContext,0)


        def expr(self):
            return self.getTypedRuleContext(nim_Parser.ExprContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_varTuple

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarTuple" ):
                listener.enterVarTuple(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarTuple" ):
                listener.exitVarTuple(self)




    def varTuple(self):

        localctx = nim_Parser.VarTupleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_varTuple)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 915
            self.match(nim_Parser.OPEN_BRACE)
            self.state = 916
            self.identVis()
            self.state = 921
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==nim_Parser.COMMA:
                self.state = 917
                self.match(nim_Parser.COMMA)
                self.state = 918
                self.identVis()
                self.state = 923
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 929
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [nim_Parser.INDENT]:
                self.state = 924
                self.ind()
                self.state = 925
                self.match(nim_Parser.CLOSE_BRACE)
                self.state = 926
                self.ded()
                pass
            elif token in [nim_Parser.CLOSE_BRACE]:
                self.state = 928
                self.match(nim_Parser.CLOSE_BRACE)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 931
            self.match(nim_Parser.EQUALS)
            self.state = 933
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,123,self._ctx)
            if la_ == 1:
                self.state = 932
                self.ded()


            self.state = 946
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,126,self._ctx)
            if la_ == 1:
                self.state = 935
                self.ind()
                self.state = 938
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,124,self._ctx)
                if la_ == 1:
                    self.state = 936
                    self.simpleExpr()
                    pass

                elif la_ == 2:
                    self.state = 937
                    self.expr()
                    pass


                self.state = 940
                self.ded()
                pass

            elif la_ == 2:
                self.state = 944
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,125,self._ctx)
                if la_ == 1:
                    self.state = 942
                    self.simpleExpr()
                    pass

                elif la_ == 2:
                    self.state = 943
                    self.expr()
                    pass


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstantContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.IDENTIFIER)
            else:
                return self.getToken(nim_Parser.IDENTIFIER, i)

        def EQUALS(self):
            return self.getToken(nim_Parser.EQUALS, 0)

        def ind(self):
            return self.getTypedRuleContext(nim_Parser.IndContext,0)


        def anyExpr(self):
            return self.getTypedRuleContext(nim_Parser.AnyExprContext,0)


        def ded(self):
            return self.getTypedRuleContext(nim_Parser.DedContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.COMMA)
            else:
                return self.getToken(nim_Parser.COMMA, i)

        def COLON(self):
            return self.getToken(nim_Parser.COLON, 0)

        def simpleExpr(self):
            return self.getTypedRuleContext(nim_Parser.SimpleExprContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_constant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant" ):
                listener.enterConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant" ):
                listener.exitConstant(self)




    def constant(self):

        localctx = nim_Parser.ConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_constant)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 948
            self.match(nim_Parser.IDENTIFIER)
            self.state = 953
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==nim_Parser.COMMA:
                self.state = 949
                self.match(nim_Parser.COMMA)
                self.state = 950
                self.match(nim_Parser.IDENTIFIER)
                self.state = 955
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 958
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==nim_Parser.COLON:
                self.state = 956
                self.match(nim_Parser.COLON)
                self.state = 957
                self.simpleExpr()


            self.state = 960
            self.match(nim_Parser.EQUALS)
            self.state = 966
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,129,self._ctx)
            if la_ == 1:
                self.state = 961
                self.ind()
                self.state = 962
                self.anyExpr()
                self.state = 963
                self.ded()
                pass

            elif la_ == 2:
                self.state = 965
                self.anyExpr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VariableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def idColonEq(self):
            return self.getTypedRuleContext(nim_Parser.IdColonEqContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_variable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable" ):
                listener.enterVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable" ):
                listener.exitVariable(self)




    def variable(self):

        localctx = nim_Parser.VariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_variable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 968
            self.idColonEq()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IdColonEqContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.IDENTIFIER)
            else:
                return self.getToken(nim_Parser.IDENTIFIER, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.COMMA)
            else:
                return self.getToken(nim_Parser.COMMA, i)

        def COLON(self):
            return self.getToken(nim_Parser.COLON, 0)

        def EQUALS(self):
            return self.getToken(nim_Parser.EQUALS, 0)

        def ind(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.IndContext)
            else:
                return self.getTypedRuleContext(nim_Parser.IndContext,i)


        def simpleExpr(self):
            return self.getTypedRuleContext(nim_Parser.SimpleExprContext,0)


        def ded(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.DedContext)
            else:
                return self.getTypedRuleContext(nim_Parser.DedContext,i)


        def anyExpr(self):
            return self.getTypedRuleContext(nim_Parser.AnyExprContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_idColonEq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdColonEq" ):
                listener.enterIdColonEq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdColonEq" ):
                listener.exitIdColonEq(self)




    def idColonEq(self):

        localctx = nim_Parser.IdColonEqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_idColonEq)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 970
            self.match(nim_Parser.IDENTIFIER)
            self.state = 975
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,130,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 971
                    self.match(nim_Parser.COMMA)
                    self.state = 972
                    self.match(nim_Parser.IDENTIFIER) 
                self.state = 977
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,130,self._ctx)

            self.state = 979
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,131,self._ctx)
            if la_ == 1:
                self.state = 978
                self.match(nim_Parser.COMMA)


            self.state = 989
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,133,self._ctx)
            if la_ == 1:
                self.state = 981
                self.match(nim_Parser.COLON)
                self.state = 987
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,132,self._ctx)
                if la_ == 1:
                    self.state = 982
                    self.ind()
                    self.state = 983
                    self.simpleExpr()
                    self.state = 984
                    self.ded()
                    pass

                elif la_ == 2:
                    self.state = 986
                    self.simpleExpr()
                    pass




            self.state = 999
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,135,self._ctx)
            if la_ == 1:
                self.state = 991
                self.match(nim_Parser.EQUALS)
                self.state = 997
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,134,self._ctx)
                if la_ == 1:
                    self.state = 992
                    self.ind()
                    self.state = 993
                    self.anyExpr()
                    self.state = 994
                    self.ded()
                    pass

                elif la_ == 2:
                    self.state = 996
                    self.anyExpr()
                    pass




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Simple_complexStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleStmt(self):
            return self.getTypedRuleContext(nim_Parser.SimpleStmtContext,0)


        def complexStmt(self):
            return self.getTypedRuleContext(nim_Parser.ComplexStmtContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_simple_complexStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_complexStmt" ):
                listener.enterSimple_complexStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_complexStmt" ):
                listener.exitSimple_complexStmt(self)




    def simple_complexStmt(self):

        localctx = nim_Parser.Simple_complexStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_simple_complexStmt)
        try:
            self.state = 1003
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,136,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1001
                self.simpleStmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1002
                self.complexStmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SimpleStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def importStmt(self):
            return self.getTypedRuleContext(nim_Parser.ImportStmtContext,0)


        def fromStmt(self):
            return self.getTypedRuleContext(nim_Parser.FromStmtContext,0)


        def breakStmt(self):
            return self.getTypedRuleContext(nim_Parser.BreakStmtContext,0)


        def pragmaStmt(self):
            return self.getTypedRuleContext(nim_Parser.PragmaStmtContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_simpleStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleStmt" ):
                listener.enterSimpleStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleStmt" ):
                listener.exitSimpleStmt(self)




    def simpleStmt(self):

        localctx = nim_Parser.SimpleStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_simpleStmt)
        try:
            self.state = 1009
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [nim_Parser.IMPORT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1005
                self.importStmt()
                pass
            elif token in [nim_Parser.FROM]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1006
                self.fromStmt()
                pass
            elif token in [nim_Parser.BREAK]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1007
                self.breakStmt()
                pass
            elif token in [nim_Parser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1008
                self.pragmaStmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ComplexStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def forStmt(self):
            return self.getTypedRuleContext(nim_Parser.ForStmtContext,0)


        def ifStmt(self):
            return self.getTypedRuleContext(nim_Parser.IfStmtContext,0)


        def caseStmt(self):
            return self.getTypedRuleContext(nim_Parser.CaseStmtContext,0)


        def blockStmt(self):
            return self.getTypedRuleContext(nim_Parser.BlockStmtContext,0)


        def whileStmt(self):
            return self.getTypedRuleContext(nim_Parser.WhileStmtContext,0)


        def exprStmt(self):
            return self.getTypedRuleContext(nim_Parser.ExprStmtContext,0)


        def whenStmt(self):
            return self.getTypedRuleContext(nim_Parser.WhenStmtContext,0)


        def routine(self):
            return self.getTypedRuleContext(nim_Parser.RoutineContext,0)


        def TEMPLATE(self):
            return self.getToken(nim_Parser.TEMPLATE, 0)

        def PROC(self):
            return self.getToken(nim_Parser.PROC, 0)

        def MACRO(self):
            return self.getToken(nim_Parser.MACRO, 0)

        def TYPE(self):
            return self.getToken(nim_Parser.TYPE, 0)

        def typeSection(self):
            return self.getTypedRuleContext(nim_Parser.TypeSectionContext,0)


        def CONST(self):
            return self.getToken(nim_Parser.CONST, 0)

        def constantSection(self):
            return self.getTypedRuleContext(nim_Parser.ConstantSectionContext,0)


        def variableSection(self):
            return self.getTypedRuleContext(nim_Parser.VariableSectionContext,0)


        def LET(self):
            return self.getToken(nim_Parser.LET, 0)

        def VARIABLE(self):
            return self.getToken(nim_Parser.VARIABLE, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_complexStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComplexStmt" ):
                listener.enterComplexStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComplexStmt" ):
                listener.exitComplexStmt(self)




    def complexStmt(self):

        localctx = nim_Parser.ComplexStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_complexStmt)
        self._la = 0 # Token type
        try:
            self.state = 1026
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,138,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1011
                self.forStmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1012
                self.ifStmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1013
                self.caseStmt()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1014
                self.blockStmt()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1015
                self.whileStmt()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1016
                self.exprStmt()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1017
                self.whenStmt()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1018
                _la = self._input.LA(1)
                if not(((((_la - 41)) & ~0x3f) == 0 and ((1 << (_la - 41)) & ((1 << (nim_Parser.PROC - 41)) | (1 << (nim_Parser.TEMPLATE - 41)) | (1 << (nim_Parser.MACRO - 41)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1019
                self.routine()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1020
                self.match(nim_Parser.TYPE)
                self.state = 1021
                self.typeSection()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1022
                self.match(nim_Parser.CONST)
                self.state = 1023
                self.constantSection()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1024
                _la = self._input.LA(1)
                if not(_la==nim_Parser.VARIABLE or _la==nim_Parser.LET):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1025
                self.variableSection()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ColonBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(nim_Parser.COLON, 0)

        def stmt(self):
            return self.getTypedRuleContext(nim_Parser.StmtContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_colonBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColonBody" ):
                listener.enterColonBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColonBody" ):
                listener.exitColonBody(self)




    def colonBody(self):

        localctx = nim_Parser.ColonBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_colonBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1028
            self.match(nim_Parser.COLON)
            self.state = 1029
            self.stmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExprStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.SimpleExprContext)
            else:
                return self.getTypedRuleContext(nim_Parser.SimpleExprContext,i)


        def EQUALS(self):
            return self.getToken(nim_Parser.EQUALS, 0)

        def expr(self):
            return self.getTypedRuleContext(nim_Parser.ExprContext,0)


        def colonBody(self):
            return self.getTypedRuleContext(nim_Parser.ColonBodyContext,0)


        def IDENTIFIER(self):
            return self.getToken(nim_Parser.IDENTIFIER, 0)

        def primarySuffix(self):
            return self.getTypedRuleContext(nim_Parser.PrimarySuffixContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_exprStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprStmt" ):
                listener.enterExprStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprStmt" ):
                listener.exitExprStmt(self)




    def exprStmt(self):

        localctx = nim_Parser.ExprStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_exprStmt)
        try:
            self.state = 1042
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,141,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1031
                self.simpleExpr()

                self.state = 1032
                self.match(nim_Parser.EQUALS)
                self.state = 1035
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,139,self._ctx)
                if la_ == 1:
                    self.state = 1033
                    self.expr()
                    pass

                elif la_ == 2:
                    self.state = 1034
                    self.simpleExpr()
                    pass


                self.state = 1038
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,140,self._ctx)
                if la_ == 1:
                    self.state = 1037
                    self.colonBody()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1040
                self.match(nim_Parser.IDENTIFIER)
                self.state = 1041
                self.primarySuffix()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_complexStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.Simple_complexStmtContext)
            else:
                return self.getTypedRuleContext(nim_Parser.Simple_complexStmtContext,i)


        def SEMI_COLON(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.SEMI_COLON)
            else:
                return self.getToken(nim_Parser.SEMI_COLON, i)

        def getRuleIndex(self):
            return nim_Parser.RULE_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStmt" ):
                listener.enterStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStmt" ):
                listener.exitStmt(self)




    def stmt(self):

        localctx = nim_Parser.StmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1044
            self.simple_complexStmt()
            self.state = 1051
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,143,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1046
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,142,self._ctx)
                    if la_ == 1:
                        self.state = 1045
                        self.match(nim_Parser.SEMI_COLON)


                    self.state = 1048
                    self.simple_complexStmt() 
                self.state = 1053
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,143,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ModuleContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.StmtContext)
            else:
                return self.getTypedRuleContext(nim_Parser.StmtContext,i)


        def getRuleIndex(self):
            return nim_Parser.RULE_module

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModule" ):
                listener.enterModule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModule" ):
                listener.exitModule(self)




    def module(self):

        localctx = nim_Parser.ModuleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_module)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1055 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1054
                    self.stmt()

                else:
                    raise NoViableAltException(self)
                self.state = 1057 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,144,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StartContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def module(self):
            return self.getTypedRuleContext(nim_Parser.ModuleContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_start

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStart" ):
                listener.enterStart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStart" ):
                listener.exitStart(self)




    def start(self):

        localctx = nim_Parser.StartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_start)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1059
            self.module()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[39] = self.primarySuffix_sempred
        self._predicates[41] = self.parBody_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def primarySuffix_sempred(self, localctx:PrimarySuffixContext, predIndex:int):
            if predIndex == 0:
                return self._input.LT(1).type in self.primarySuffixList
         

    def parBody_sempred(self, localctx:ParBodyContext, predIndex:int):
            if predIndex == 1:
                return self._input.LT(1).type in self.parKeyWList
         




