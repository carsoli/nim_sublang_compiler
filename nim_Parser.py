# Generated from nim_Parser.g4 by ANTLR 4.7.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3s")
        buf.write("\u0488\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\4n\tn\4o\to\3\2\3\2")
        buf.write("\3\3\3\3\3\4\3\4\3\5\3\5\3\6\3\6\3\7\3\7\3\7\3\7\5\7\u00ed")
        buf.write("\n\7\3\b\3\b\3\t\3\t\3\n\3\n\3\13\3\13\3\13\3\13\5\13")
        buf.write("\u00f9\n\13\3\f\3\f\3\r\3\r\3\16\3\16\3\17\3\17\3\20\3")
        buf.write("\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\5\20")
        buf.write("\u010e\n\20\3\21\3\21\3\22\3\22\3\22\3\22\7\22\u0116\n")
        buf.write("\22\f\22\16\22\u0119\13\22\3\23\3\23\3\23\3\23\7\23\u011f")
        buf.write("\n\23\f\23\16\23\u0122\13\23\3\24\3\24\3\24\3\24\7\24")
        buf.write("\u0128\n\24\f\24\16\24\u012b\13\24\3\25\3\25\3\25\3\25")
        buf.write("\7\25\u0131\n\25\f\25\16\25\u0134\13\25\3\26\3\26\3\26")
        buf.write("\3\26\7\26\u013a\n\26\f\26\16\26\u013d\13\26\3\27\3\27")
        buf.write("\3\27\3\27\7\27\u0143\n\27\f\27\16\27\u0146\13\27\3\30")
        buf.write("\3\30\3\30\3\30\7\30\u014c\n\30\f\30\16\30\u014f\13\30")
        buf.write("\3\31\3\31\3\31\3\31\7\31\u0155\n\31\f\31\16\31\u0158")
        buf.write("\13\31\3\32\3\32\3\32\3\32\7\32\u015e\n\32\f\32\16\32")
        buf.write("\u0161\13\32\3\33\3\33\3\33\3\33\7\33\u0167\n\33\f\33")
        buf.write("\16\33\u016a\13\33\3\34\3\34\3\35\3\35\3\36\3\36\3\36")
        buf.write("\3\36\3\36\5\36\u0175\n\36\3\37\3\37\3\37\3\37\3\37\3")
        buf.write("\37\3\37\3\37\6\37\u017f\n\37\r\37\16\37\u0180\5\37\u0183")
        buf.write("\n\37\3 \3 \3 \5 \u0188\n \3!\3!\3!\3!\7!\u018e\n!\f!")
        buf.write("\16!\u0191\13!\3!\3!\3\"\3\"\3\"\3\"\7\"\u0199\n\"\f\"")
        buf.write("\16\"\u019c\13\"\3\"\3\"\3#\3#\3#\5#\u01a3\n#\3$\3$\3")
        buf.write("$\3%\3%\3%\5%\u01ab\n%\3%\3%\3%\5%\u01b0\n%\3&\3&\3&\3")
        buf.write("&\7&\u01b6\n&\f&\16&\u01b9\13&\3&\3&\3&\3&\3&\5&\u01c0")
        buf.write("\n&\3&\3&\3&\3&\5&\u01c6\n&\3\'\3\'\3\'\3\'\3\'\3\'\5")
        buf.write("\'\u01ce\n\'\3\'\7\'\u01d1\n\'\f\'\16\'\u01d4\13\'\3\'")
        buf.write("\3\'\7\'\u01d8\n\'\f\'\16\'\u01db\13\'\3\'\6\'\u01de\n")
        buf.write("\'\r\'\16\'\u01df\5\'\u01e2\n\'\5\'\u01e4\n\'\3(\3(\3")
        buf.write("(\3(\7(\u01ea\n(\f(\16(\u01ed\13(\3)\3)\3)\3)\3*\3*\3")
        buf.write("*\3*\3*\6*\u01f8\n*\r*\16*\u01f9\3*\3*\3+\3+\3,\3,\5,")
        buf.write("\u0202\n,\3-\3-\5-\u0206\n-\3.\3.\3.\3.\3.\3.\3.\3.\3")
        buf.write(".\5.\u0211\n.\7.\u0213\n.\f.\16.\u0216\13.\3.\3.\3.\3")
        buf.write(".\3.\3.\3.\5.\u021f\n.\3/\3/\3/\3/\3/\3/\3/\5/\u0228\n")
        buf.write("/\3\60\3\60\3\60\3\60\5\60\u022e\n\60\3\60\3\60\3\60\3")
        buf.write("\60\3\60\5\60\u0235\n\60\3\61\3\61\3\61\3\61\3\61\3\62")
        buf.write("\6\62\u023d\n\62\r\62\16\62\u023e\3\63\3\63\3\63\3\64")
        buf.write("\3\64\5\64\u0246\n\64\3\64\3\64\3\65\3\65\3\65\7\65\u024d")
        buf.write("\n\65\f\65\16\65\u0250\13\65\3\66\3\66\3\66\3\66\3\67")
        buf.write("\6\67\u0257\n\67\r\67\16\67\u0258\3\67\3\67\3\67\3\67")
        buf.write("\6\67\u025f\n\67\r\67\16\67\u0260\3\67\3\67\3\67\5\67")
        buf.write("\u0266\n\67\5\67\u0268\n\67\38\38\38\38\38\68\u026f\n")
        buf.write("8\r8\168\u0270\38\38\38\58\u0276\n8\39\39\39\39\39\69")
        buf.write("\u027d\n9\r9\169\u027e\39\59\u0282\n9\39\39\39\69\u0287")
        buf.write("\n9\r9\169\u0288\39\59\u028c\n9\59\u028e\n9\3:\3:\3:\3")
        buf.write(";\3;\3;\7;\u0296\n;\f;\16;\u0299\13;\3<\3<\3<\3<\3<\3")
        buf.write("<\3<\6<\u02a2\n<\r<\16<\u02a3\3<\3<\3<\5<\u02a9\n<\3=")
        buf.write("\3=\5=\u02ad\n=\3=\3=\3>\3>\3>\3>\3>\6>\u02b6\n>\r>\16")
        buf.write(">\u02b7\3>\5>\u02bb\n>\3>\3>\3>\6>\u02c0\n>\r>\16>\u02c1")
        buf.write("\3>\5>\u02c5\n>\5>\u02c7\n>\3?\3?\3?\3?\6?\u02cd\n?\r")
        buf.write("?\16?\u02ce\3?\5?\u02d2\n?\3?\3?\3?\6?\u02d7\n?\r?\16")
        buf.write("?\u02d8\3?\5?\u02dc\n?\5?\u02de\n?\3@\3@\3@\3@\3@\5@\u02e5")
        buf.write("\n@\3@\3@\7@\u02e9\n@\f@\16@\u02ec\13@\3@\5@\u02ef\n@")
        buf.write("\3@\3@\3@\7@\u02f4\n@\f@\16@\u02f7\13@\3@\3@\5@\u02fb")
        buf.write("\n@\3@\3@\3@\7@\u0300\n@\f@\16@\u0303\13@\3@\5@\u0306")
        buf.write("\n@\5@\u0308\n@\3A\3A\3A\3A\3B\3B\3B\3B\3B\6B\u0313\n")
        buf.write("B\rB\16B\u0314\3B\3B\3B\5B\u031a\nB\3C\3C\3D\3D\3D\5D")
        buf.write("\u0321\nD\3E\3E\3E\5E\u0326\nE\3F\3F\3G\3G\3G\3G\3G\5")
        buf.write("G\u032f\nG\3H\3H\3H\3H\5H\u0335\nH\3H\3H\3I\3I\5I\u033b")
        buf.write("\nI\3J\3J\3J\3K\3K\5K\u0342\nK\3K\3K\3K\3K\5K\u0348\n")
        buf.write("K\3L\3L\3L\3L\3L\5L\u034f\nL\3M\3M\5M\u0353\nM\3M\3M\3")
        buf.write("M\3M\6M\u0359\nM\rM\16M\u035a\3M\3M\5M\u035f\nM\3N\3N")
        buf.write("\3N\3N\7N\u0365\nN\fN\16N\u0368\13N\3N\3N\3O\3O\3O\3O")
        buf.write("\3P\3P\3Q\3Q\3Q\3Q\7Q\u0376\nQ\fQ\16Q\u0379\13Q\3Q\3Q")
        buf.write("\3R\3R\3S\5S\u0380\nS\3S\3S\3S\3S\6S\u0386\nS\rS\16S\u0387")
        buf.write("\3S\3S\5S\u038c\nS\3T\3T\3T\3T\3U\3U\3V\3V\3W\3W\3W\3")
        buf.write("W\3X\3X\3X\3X\7X\u039e\nX\fX\16X\u03a1\13X\3X\3X\3Y\3")
        buf.write("Y\5Y\u03a7\nY\3Y\3Y\3Y\3Y\6Y\u03ad\nY\rY\16Y\u03ae\3Y")
        buf.write("\3Y\5Y\u03b3\nY\3Z\3Z\3Z\3Z\3[\3[\3\\\3\\\5\\\u03bd\n")
        buf.write("\\\3\\\3\\\3]\3]\3]\3^\3^\6^\u03c6\n^\r^\16^\u03c7\3^")
        buf.write("\3^\3_\3_\3`\6`\u03cf\n`\r`\16`\u03d0\3`\3`\6`\u03d5\n")
        buf.write("`\r`\16`\u03d6\3`\3`\5`\u03db\n`\3a\6a\u03de\na\ra\16")
        buf.write("a\u03df\3a\3a\6a\u03e4\na\ra\16a\u03e5\3a\3a\5a\u03ea")
        buf.write("\na\3b\3b\3b\3b\3b\3b\3b\6b\u03f3\nb\rb\16b\u03f4\3b\3")
        buf.write("b\5b\u03f9\nb\3c\3c\5c\u03fd\nc\3d\3d\3d\3d\7d\u0403\n")
        buf.write("d\fd\16d\u0406\13d\3d\3d\3d\3d\3d\5d\u040d\nd\3d\3d\5")
        buf.write("d\u0411\nd\3d\3d\3d\3d\3d\5d\u0418\nd\3e\3e\3e\7e\u041d")
        buf.write("\ne\fe\16e\u0420\13e\3e\3e\5e\u0424\ne\3e\3e\3e\3e\3e")
        buf.write("\3e\5e\u042c\ne\3f\3f\5f\u0430\nf\3g\3g\3g\7g\u0435\n")
        buf.write("g\fg\16g\u0438\13g\3g\5g\u043b\ng\3g\3g\3g\3g\3g\3g\5")
        buf.write("g\u0443\ng\5g\u0445\ng\3g\3g\3g\3g\3g\3g\5g\u044d\ng\5")
        buf.write("g\u044f\ng\3h\3h\5h\u0453\nh\3i\3i\3i\3i\3i\3i\5i\u045b")
        buf.write("\ni\3j\3j\3j\3j\3j\3j\3j\3j\3j\3j\3j\3j\3j\3j\3j\3j\3")
        buf.write("j\3j\3j\3j\5j\u0471\nj\3k\3k\3k\3l\3l\3l\3l\3m\3m\3n\3")
        buf.write("n\5n\u047e\nn\3n\7n\u0481\nn\fn\16n\u0484\13n\3o\3o\3")
        buf.write("o\2\2p\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,")
        buf.write(".\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080")
        buf.write("\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092")
        buf.write("\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4")
        buf.write("\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6")
        buf.write("\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8")
        buf.write("\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da")
        buf.write("\u00dc\2\13\3\3mm\4\2\22\22KK\4\2\27\27\35\35\4\2\30\32")
        buf.write("!!\4\2\33\33&&\5\2QQYbdj\3\2kl\4\2\25\25\27\27\4\2\t\t")
        buf.write("\25\25\2\u04c4\2\u00de\3\2\2\2\4\u00e0\3\2\2\2\6\u00e2")
        buf.write("\3\2\2\2\b\u00e4\3\2\2\2\n\u00e6\3\2\2\2\f\u00ec\3\2\2")
        buf.write("\2\16\u00ee\3\2\2\2\20\u00f0\3\2\2\2\22\u00f2\3\2\2\2")
        buf.write("\24\u00f8\3\2\2\2\26\u00fa\3\2\2\2\30\u00fc\3\2\2\2\32")
        buf.write("\u00fe\3\2\2\2\34\u0100\3\2\2\2\36\u010d\3\2\2\2 \u010f")
        buf.write("\3\2\2\2\"\u0111\3\2\2\2$\u011a\3\2\2\2&\u0123\3\2\2\2")
        buf.write("(\u012c\3\2\2\2*\u0135\3\2\2\2,\u013e\3\2\2\2.\u0147\3")
        buf.write("\2\2\2\60\u0150\3\2\2\2\62\u0159\3\2\2\2\64\u0162\3\2")
        buf.write("\2\2\66\u016b\3\2\2\28\u016d\3\2\2\2:\u0174\3\2\2\2<\u0182")
        buf.write("\3\2\2\2>\u0184\3\2\2\2@\u0189\3\2\2\2B\u0194\3\2\2\2")
        buf.write("D\u01a2\3\2\2\2F\u01a4\3\2\2\2H\u01af\3\2\2\2J\u01c5\3")
        buf.write("\2\2\2L\u01e3\3\2\2\2N\u01e5\3\2\2\2P\u01ee\3\2\2\2R\u01f2")
        buf.write("\3\2\2\2T\u01fd\3\2\2\2V\u0201\3\2\2\2X\u0205\3\2\2\2")
        buf.write("Z\u0207\3\2\2\2\\\u0220\3\2\2\2^\u0229\3\2\2\2`\u0236")
        buf.write("\3\2\2\2b\u023c\3\2\2\2d\u0240\3\2\2\2f\u0243\3\2\2\2")
        buf.write("h\u0249\3\2\2\2j\u0251\3\2\2\2l\u0256\3\2\2\2n\u0269\3")
        buf.write("\2\2\2p\u0277\3\2\2\2r\u028f\3\2\2\2t\u0292\3\2\2\2v\u029a")
        buf.write("\3\2\2\2x\u02aa\3\2\2\2z\u02b0\3\2\2\2|\u02c8\3\2\2\2")
        buf.write("~\u02e4\3\2\2\2\u0080\u0309\3\2\2\2\u0082\u030d\3\2\2")
        buf.write("\2\u0084\u031b\3\2\2\2\u0086\u0320\3\2\2\2\u0088\u0325")
        buf.write("\3\2\2\2\u008a\u0327\3\2\2\2\u008c\u032e\3\2\2\2\u008e")
        buf.write("\u0330\3\2\2\2\u0090\u0338\3\2\2\2\u0092\u033c\3\2\2\2")
        buf.write("\u0094\u0347\3\2\2\2\u0096\u0349\3\2\2\2\u0098\u0352\3")
        buf.write("\2\2\2\u009a\u0360\3\2\2\2\u009c\u036b\3\2\2\2\u009e\u036f")
        buf.write("\3\2\2\2\u00a0\u0371\3\2\2\2\u00a2\u037c\3\2\2\2\u00a4")
        buf.write("\u037f\3\2\2\2\u00a6\u038d\3\2\2\2\u00a8\u0391\3\2\2\2")
        buf.write("\u00aa\u0393\3\2\2\2\u00ac\u0395\3\2\2\2\u00ae\u0399\3")
        buf.write("\2\2\2\u00b0\u03a6\3\2\2\2\u00b2\u03b4\3\2\2\2\u00b4\u03b8")
        buf.write("\3\2\2\2\u00b6\u03ba\3\2\2\2\u00b8\u03c0\3\2\2\2\u00ba")
        buf.write("\u03c3\3\2\2\2\u00bc\u03cb\3\2\2\2\u00be\u03da\3\2\2\2")
        buf.write("\u00c0\u03e9\3\2\2\2\u00c2\u03f8\3\2\2\2\u00c4\u03fa\3")
        buf.write("\2\2\2\u00c6\u03fe\3\2\2\2\u00c8\u0419\3\2\2\2\u00ca\u042d")
        buf.write("\3\2\2\2\u00cc\u0431\3\2\2\2\u00ce\u0452\3\2\2\2\u00d0")
        buf.write("\u045a\3\2\2\2\u00d2\u0470\3\2\2\2\u00d4\u0472\3\2\2\2")
        buf.write("\u00d6\u0475\3\2\2\2\u00d8\u0479\3\2\2\2\u00da\u047b\3")
        buf.write("\2\2\2\u00dc\u0485\3\2\2\2\u00de\u00df\7q\2\2\u00df\3")
        buf.write("\3\2\2\2\u00e0\u00e1\t\2\2\2\u00e1\5\3\2\2\2\u00e2\u00e3")
        buf.write("\t\3\2\2\u00e3\7\3\2\2\2\u00e4\u00e5\7\34\2\2\u00e5\t")
        buf.write("\3\2\2\2\u00e6\u00e7\t\4\2\2\u00e7\13\3\2\2\2\u00e8\u00ed")
        buf.write("\7\36\2\2\u00e9\u00ed\7\25\2\2\u00ea\u00eb\7\25\2\2\u00eb")
        buf.write("\u00ed\7\25\2\2\u00ec\u00e8\3\2\2\2\u00ec\u00e9\3\2\2")
        buf.write("\2\u00ec\u00ea\3\2\2\2\u00ed\r\3\2\2\2\u00ee\u00ef\7\37")
        buf.write("\2\2\u00ef\17\3\2\2\2\u00f0\u00f1\7 \2\2\u00f1\21\3\2")
        buf.write("\2\2\u00f2\u00f3\t\5\2\2\u00f3\23\3\2\2\2\u00f4\u00f9")
        buf.write("\7\"\2\2\u00f5\u00f9\7\26\2\2\u00f6\u00f7\7\26\2\2\u00f7")
        buf.write("\u00f9\7\26\2\2\u00f8\u00f4\3\2\2\2\u00f8\u00f5\3\2\2")
        buf.write("\2\u00f8\u00f6\3\2\2\2\u00f9\25\3\2\2\2\u00fa\u00fb\7")
        buf.write("#\2\2\u00fb\27\3\2\2\2\u00fc\u00fd\7$\2\2\u00fd\31\3\2")
        buf.write("\2\2\u00fe\u00ff\7%\2\2\u00ff\33\3\2\2\2\u0100\u0101\t")
        buf.write("\6\2\2\u0101\35\3\2\2\2\u0102\u010e\5\b\5\2\u0103\u010e")
        buf.write("\5\n\6\2\u0104\u010e\5\f\7\2\u0105\u010e\5\16\b\2\u0106")
        buf.write("\u010e\5\20\t\2\u0107\u010e\5\22\n\2\u0108\u010e\5\24")
        buf.write("\13\2\u0109\u010e\5\26\f\2\u010a\u010e\5\30\r\2\u010b")
        buf.write("\u010e\5\32\16\2\u010c\u010e\5\34\17\2\u010d\u0102\3\2")
        buf.write("\2\2\u010d\u0103\3\2\2\2\u010d\u0104\3\2\2\2\u010d\u0105")
        buf.write("\3\2\2\2\u010d\u0106\3\2\2\2\u010d\u0107\3\2\2\2\u010d")
        buf.write("\u0108\3\2\2\2\u010d\u0109\3\2\2\2\u010d\u010a\3\2\2\2")
        buf.write("\u010d\u010b\3\2\2\2\u010d\u010c\3\2\2\2\u010e\37\3\2")
        buf.write("\2\2\u010f\u0110\5\36\20\2\u0110!\3\2\2\2\u0111\u0117")
        buf.write("\5$\23\2\u0112\u0113\5\n\6\2\u0113\u0114\5$\23\2\u0114")
        buf.write("\u0116\3\2\2\2\u0115\u0112\3\2\2\2\u0116\u0119\3\2\2\2")
        buf.write("\u0117\u0115\3\2\2\2\u0117\u0118\3\2\2\2\u0118#\3\2\2")
        buf.write("\2\u0119\u0117\3\2\2\2\u011a\u0120\5&\24\2\u011b\u011c")
        buf.write("\5\f\7\2\u011c\u011d\5&\24\2\u011d\u011f\3\2\2\2\u011e")
        buf.write("\u011b\3\2\2\2\u011f\u0122\3\2\2\2\u0120\u011e\3\2\2\2")
        buf.write("\u0120\u0121\3\2\2\2\u0121%\3\2\2\2\u0122\u0120\3\2\2")
        buf.write("\2\u0123\u0129\5(\25\2\u0124\u0125\5\16\b\2\u0125\u0126")
        buf.write("\5(\25\2\u0126\u0128\3\2\2\2\u0127\u0124\3\2\2\2\u0128")
        buf.write("\u012b\3\2\2\2\u0129\u0127\3\2\2\2\u0129\u012a\3\2\2\2")
        buf.write("\u012a\'\3\2\2\2\u012b\u0129\3\2\2\2\u012c\u0132\5*\26")
        buf.write("\2\u012d\u012e\5\20\t\2\u012e\u012f\5*\26\2\u012f\u0131")
        buf.write("\3\2\2\2\u0130\u012d\3\2\2\2\u0131\u0134\3\2\2\2\u0132")
        buf.write("\u0130\3\2\2\2\u0132\u0133\3\2\2\2\u0133)\3\2\2\2\u0134")
        buf.write("\u0132\3\2\2\2\u0135\u013b\5,\27\2\u0136\u0137\5\22\n")
        buf.write("\2\u0137\u0138\5,\27\2\u0138\u013a\3\2\2\2\u0139\u0136")
        buf.write("\3\2\2\2\u013a\u013d\3\2\2\2\u013b\u0139\3\2\2\2\u013b")
        buf.write("\u013c\3\2\2\2\u013c+\3\2\2\2\u013d\u013b\3\2\2\2\u013e")
        buf.write("\u0144\5.\30\2\u013f\u0140\5\24\13\2\u0140\u0141\5.\30")
        buf.write("\2\u0141\u0143\3\2\2\2\u0142\u013f\3\2\2\2\u0143\u0146")
        buf.write("\3\2\2\2\u0144\u0142\3\2\2\2\u0144\u0145\3\2\2\2\u0145")
        buf.write("-\3\2\2\2\u0146\u0144\3\2\2\2\u0147\u014d\5\60\31\2\u0148")
        buf.write("\u0149\5\26\f\2\u0149\u014a\5\60\31\2\u014a\u014c\3\2")
        buf.write("\2\2\u014b\u0148\3\2\2\2\u014c\u014f\3\2\2\2\u014d\u014b")
        buf.write("\3\2\2\2\u014d\u014e\3\2\2\2\u014e/\3\2\2\2\u014f\u014d")
        buf.write("\3\2\2\2\u0150\u0156\5\62\32\2\u0151\u0152\5\30\r\2\u0152")
        buf.write("\u0153\5\62\32\2\u0153\u0155\3\2\2\2\u0154\u0151\3\2\2")
        buf.write("\2\u0155\u0158\3\2\2\2\u0156\u0154\3\2\2\2\u0156\u0157")
        buf.write("\3\2\2\2\u0157\61\3\2\2\2\u0158\u0156\3\2\2\2\u0159\u015f")
        buf.write("\5\64\33\2\u015a\u015b\5\32\16\2\u015b\u015c\5\64\33\2")
        buf.write("\u015c\u015e\3\2\2\2\u015d\u015a\3\2\2\2\u015e\u0161\3")
        buf.write("\2\2\2\u015f\u015d\3\2\2\2\u015f\u0160\3\2\2\2\u0160\63")
        buf.write("\3\2\2\2\u0161\u015f\3\2\2\2\u0162\u0168\5L\'\2\u0163")
        buf.write("\u0164\5\34\17\2\u0164\u0165\5L\'\2\u0165\u0167\3\2\2")
        buf.write("\2\u0166\u0163\3\2\2\2\u0167\u016a\3\2\2\2\u0168\u0166")
        buf.write("\3\2\2\2\u0168\u0169\3\2\2\2\u0169\65\3\2\2\2\u016a\u0168")
        buf.write("\3\2\2\2\u016b\u016c\t\7\2\2\u016c\67\3\2\2\2\u016d\u016e")
        buf.write("\t\b\2\2\u016e9\3\2\2\2\u016f\u0175\5<\37\2\u0170\u0171")
        buf.write("\7W\2\2\u0171\u0172\5<\37\2\u0172\u0173\7W\2\2\u0173\u0175")
        buf.write("\3\2\2\2\u0174\u016f\3\2\2\2\u0174\u0170\3\2\2\2\u0175")
        buf.write(";\3\2\2\2\u0176\u0183\7X\2\2\u0177\u0183\5\66\34\2\u0178")
        buf.write("\u017f\5\36\20\2\u0179\u017f\7\n\2\2\u017a\u017f\7\13")
        buf.write("\2\2\u017b\u017f\7\16\2\2\u017c\u017f\7\17\2\2\u017d\u017f")
        buf.write("\7\27\2\2\u017e\u0178\3\2\2\2\u017e\u0179\3\2\2\2\u017e")
        buf.write("\u017a\3\2\2\2\u017e\u017b\3\2\2\2\u017e\u017c\3\2\2\2")
        buf.write("\u017e\u017d\3\2\2\2\u017f\u0180\3\2\2\2\u0180\u017e\3")
        buf.write("\2\2\2\u0180\u0181\3\2\2\2\u0181\u0183\3\2\2\2\u0182\u0176")
        buf.write("\3\2\2\2\u0182\u0177\3\2\2\2\u0182\u017e\3\2\2\2\u0183")
        buf.write("=\3\2\2\2\u0184\u0187\5V,\2\u0185\u0186\t\t\2\2\u0186")
        buf.write("\u0188\5V,\2\u0187\u0185\3\2\2\2\u0187\u0188\3\2\2\2\u0188")
        buf.write("?\3\2\2\2\u0189\u018a\7\16\2\2\u018a\u018f\5> \2\u018b")
        buf.write("\u018c\7\b\2\2\u018c\u018e\5> \2\u018d\u018b\3\2\2\2\u018e")
        buf.write("\u0191\3\2\2\2\u018f\u018d\3\2\2\2\u018f\u0190\3\2\2\2")
        buf.write("\u0190\u0192\3\2\2\2\u0191\u018f\3\2\2\2\u0192\u0193\7")
        buf.write("\17\2\2\u0193A\3\2\2\2\u0194\u0195\7\n\2\2\u0195\u019a")
        buf.write("\5> \2\u0196\u0197\7\b\2\2\u0197\u0199\5> \2\u0198\u0196")
        buf.write("\3\2\2\2\u0199\u019c\3\2\2\2\u019a\u0198\3\2\2\2\u019a")
        buf.write("\u019b\3\2\2\2\u019b\u019d\3\2\2\2\u019c\u019a\3\2\2\2")
        buf.write("\u019d\u019e\7\13\2\2\u019eC\3\2\2\2\u019f\u01a3\58\35")
        buf.write("\2\u01a0\u01a3\5:\36\2\u01a1\u01a3\5@!\2\u01a2\u019f\3")
        buf.write("\2\2\2\u01a2\u01a0\3\2\2\2\u01a2\u01a1\3\2\2\2\u01a3E")
        buf.write("\3\2\2\2\u01a4\u01a5\7\33\2\2\u01a5\u01a6\5D#\2\u01a6")
        buf.write("G\3\2\2\2\u01a7\u01aa\7X\2\2\u01a8\u01ab\5@!\2\u01a9\u01ab")
        buf.write("\5B\"\2\u01aa\u01a8\3\2\2\2\u01aa\u01a9\3\2\2\2\u01aa")
        buf.write("\u01ab\3\2\2\2\u01ab\u01b0\3\2\2\2\u01ac\u01b0\5\66\34")
        buf.write("\2\u01ad\u01b0\58\35\2\u01ae\u01b0\5F$\2\u01af\u01a7\3")
        buf.write("\2\2\2\u01af\u01ac\3\2\2\2\u01af\u01ad\3\2\2\2\u01af\u01ae")
        buf.write("\3\2\2\2\u01b0I\3\2\2\2\u01b1\u01b2\7\n\2\2\u01b2\u01b7")
        buf.write("\5> \2\u01b3\u01b4\7\b\2\2\u01b4\u01b6\5> \2\u01b5\u01b3")
        buf.write("\3\2\2\2\u01b6\u01b9\3\2\2\2\u01b7\u01b5\3\2\2\2\u01b7")
        buf.write("\u01b8\3\2\2\2\u01b8\u01ba\3\2\2\2\u01b9\u01b7\3\2\2\2")
        buf.write("\u01ba\u01bb\7\13\2\2\u01bb\u01c6\3\2\2\2\u01bc\u01bd")
        buf.write("\7\26\2\2\u01bd\u01bf\5:\36\2\u01be\u01c0\58\35\2\u01bf")
        buf.write("\u01be\3\2\2\2\u01bf\u01c0\3\2\2\2\u01c0\u01c6\3\2\2\2")
        buf.write("\u01c1\u01c2\7\16\2\2\u01c2\u01c3\5h\65\2\u01c3\u01c4")
        buf.write("\7\17\2\2\u01c4\u01c6\3\2\2\2\u01c5\u01b1\3\2\2\2\u01c5")
        buf.write("\u01bc\3\2\2\2\u01c5\u01c1\3\2\2\2\u01c6K\3\2\2\2\u01c7")
        buf.write("\u01cd\5\6\4\2\u01c8\u01ce\5\"\22\2\u01c9\u01ca\5\2\2")
        buf.write("\2\u01ca\u01cb\5\u008cG\2\u01cb\u01cc\5\4\3\2\u01cc\u01ce")
        buf.write("\3\2\2\2\u01cd\u01c8\3\2\2\2\u01cd\u01c9\3\2\2\2\u01ce")
        buf.write("\u01e4\3\2\2\2\u01cf\u01d1\5 \21\2\u01d0\u01cf\3\2\2\2")
        buf.write("\u01d1\u01d4\3\2\2\2\u01d2\u01d0\3\2\2\2\u01d2\u01d3\3")
        buf.write("\2\2\2\u01d3\u01e1\3\2\2\2\u01d4\u01d2\3\2\2\2\u01d5\u01d9")
        buf.write("\5D#\2\u01d6\u01d8\5J&\2\u01d7\u01d6\3\2\2\2\u01d8\u01db")
        buf.write("\3\2\2\2\u01d9\u01d7\3\2\2\2\u01d9\u01da\3\2\2\2\u01da")
        buf.write("\u01e2\3\2\2\2\u01db\u01d9\3\2\2\2\u01dc\u01de\5J&\2\u01dd")
        buf.write("\u01dc\3\2\2\2\u01de\u01df\3\2\2\2\u01df\u01dd\3\2\2\2")
        buf.write("\u01df\u01e0\3\2\2\2\u01e0\u01e2\3\2\2\2\u01e1\u01d5\3")
        buf.write("\2\2\2\u01e1\u01dd\3\2\2\2\u01e2\u01e4\3\2\2\2\u01e3\u01c7")
        buf.write("\3\2\2\2\u01e3\u01d2\3\2\2\2\u01e4M\3\2\2\2\u01e5\u01e6")
        buf.write("\7G\2\2\u01e6\u01eb\7X\2\2\u01e7\u01e8\7\b\2\2\u01e8\u01ea")
        buf.write("\7X\2\2\u01e9\u01e7\3\2\2\2\u01ea\u01ed\3\2\2\2\u01eb")
        buf.write("\u01e9\3\2\2\2\u01eb\u01ec\3\2\2\2\u01ecO\3\2\2\2\u01ed")
        buf.write("\u01eb\3\2\2\2\u01ee\u01ef\7H\2\2\u01ef\u01f0\7X\2\2\u01f0")
        buf.write("\u01f1\5N(\2\u01f1Q\3\2\2\2\u01f2\u01f3\7O\2\2\u01f3\u01f4")
        buf.write("\7X\2\2\u01f4\u01f5\7\25\2\2\u01f5\u01f7\5\2\2\2\u01f6")
        buf.write("\u01f8\5\"\22\2\u01f7\u01f6\3\2\2\2\u01f8\u01f9\3\2\2")
        buf.write("\2\u01f9\u01f7\3\2\2\2\u01f9\u01fa\3\2\2\2\u01fa\u01fb")
        buf.write("\3\2\2\2\u01fb\u01fc\5\4\3\2\u01fcS\3\2\2\2\u01fd\u01fe")
        buf.write("\5v<\2\u01feU\3\2\2\2\u01ff\u0202\5\"\22\2\u0200\u0202")
        buf.write("\5\u008cG\2\u0201\u01ff\3\2\2\2\u0201\u0200\3\2\2\2\u0202")
        buf.write("W\3\2\2\2\u0203\u0206\5\u00d8m\2\u0204\u0206\5\u00d6l")
        buf.write("\2\u0205\u0203\3\2\2\2\u0205\u0204\3\2\2\2\u0206Y\3\2")
        buf.write("\2\2\u0207\u0214\5V,\2\u0208\u0209\79\2\2\u0209\u020a")
        buf.write("\5V,\2\u020a\u0210\7\25\2\2\u020b\u020c\5\2\2\2\u020c")
        buf.write("\u020d\5V,\2\u020d\u020e\5\4\3\2\u020e\u0211\3\2\2\2\u020f")
        buf.write("\u0211\5V,\2\u0210\u020b\3\2\2\2\u0210\u020f\3\2\2\2\u0211")
        buf.write("\u0213\3\2\2\2\u0212\u0208\3\2\2\2\u0213\u0216\3\2\2\2")
        buf.write("\u0214\u0212\3\2\2\2\u0214\u0215\3\2\2\2\u0215\u0217\3")
        buf.write("\2\2\2\u0216\u0214\3\2\2\2\u0217\u0218\7:\2\2\u0218\u021e")
        buf.write("\7\25\2\2\u0219\u021a\5\2\2\2\u021a\u021b\5V,\2\u021b")
        buf.write("\u021c\5\4\3\2\u021c\u021f\3\2\2\2\u021d\u021f\5V,\2\u021e")
        buf.write("\u0219\3\2\2\2\u021e\u021d\3\2\2\2\u021f[\3\2\2\2\u0220")
        buf.write("\u0221\5V,\2\u0221\u0227\7\25\2\2\u0222\u0223\5\2\2\2")
        buf.write("\u0223\u0224\5Z.\2\u0224\u0225\5\4\3\2\u0225\u0228\3\2")
        buf.write("\2\2\u0226\u0228\5Z.\2\u0227\u0222\3\2\2\2\u0227\u0226")
        buf.write("\3\2\2\2\u0228]\3\2\2\2\u0229\u022a\7\67\2\2\u022a\u022d")
        buf.write("\5\"\22\2\u022b\u022c\7\25\2\2\u022c\u022e\5\"\22\2\u022d")
        buf.write("\u022b\3\2\2\2\u022d\u022e\3\2\2\2\u022e\u0234\3\2\2\2")
        buf.write("\u022f\u0230\5\2\2\2\u0230\u0231\5b\62\2\u0231\u0232\5")
        buf.write("\4\3\2\u0232\u0235\3\2\2\2\u0233\u0235\5b\62\2\u0234\u022f")
        buf.write("\3\2\2\2\u0234\u0233\3\2\2\2\u0235_\3\2\2\2\u0236\u0237")
        buf.write("\7\31\2\2\u0237\u0238\5h\65\2\u0238\u0239\7\25\2\2\u0239")
        buf.write("\u023a\5\"\22\2\u023aa\3\2\2\2\u023b\u023d\5`\61\2\u023c")
        buf.write("\u023b\3\2\2\2\u023d\u023e\3\2\2\2\u023e\u023c\3\2\2\2")
        buf.write("\u023e\u023f\3\2\2\2\u023fc\3\2\2\2\u0240\u0241\7D\2\2")
        buf.write("\u0241\u0242\5\\/\2\u0242e\3\2\2\2\u0243\u0245\78\2\2")
        buf.write("\u0244\u0246\7\32\2\2\u0245\u0244\3\2\2\2\u0245\u0246")
        buf.write("\3\2\2\2\u0246\u0247\3\2\2\2\u0247\u0248\5\\/\2\u0248")
        buf.write("g\3\2\2\2\u0249\u024e\5\"\22\2\u024a\u024b\7\b\2\2\u024b")
        buf.write("\u024d\5\"\22\2\u024c\u024a\3\2\2\2\u024d\u0250\3\2\2")
        buf.write("\2\u024e\u024c\3\2\2\2\u024e\u024f\3\2\2\2\u024fi\3\2")
        buf.write("\2\2\u0250\u024e\3\2\2\2\u0251\u0252\7\67\2\2\u0252\u0253")
        buf.write("\5\"\22\2\u0253\u0254\5l\67\2\u0254k\3\2\2\2\u0255\u0257")
        buf.write("\5n8\2\u0256\u0255\3\2\2\2\u0257\u0258\3\2\2\2\u0258\u0256")
        buf.write("\3\2\2\2\u0258\u0259\3\2\2\2\u0259\u0267\3\2\2\2\u025a")
        buf.write("\u025b\7:\2\2\u025b\u0265\7\25\2\2\u025c\u025e\5\2\2\2")
        buf.write("\u025d\u025f\5X-\2\u025e\u025d\3\2\2\2\u025f\u0260\3\2")
        buf.write("\2\2\u0260\u025e\3\2\2\2\u0260\u0261\3\2\2\2\u0261\u0262")
        buf.write("\3\2\2\2\u0262\u0263\5\4\3\2\u0263\u0266\3\2\2\2\u0264")
        buf.write("\u0266\5X-\2\u0265\u025c\3\2\2\2\u0265\u0264\3\2\2\2\u0266")
        buf.write("\u0268\3\2\2\2\u0267\u025a\3\2\2\2\u0267\u0268\3\2\2\2")
        buf.write("\u0268m\3\2\2\2\u0269\u026a\7\31\2\2\u026a\u026b\5h\65")
        buf.write("\2\u026b\u0275\7\25\2\2\u026c\u026e\5\2\2\2\u026d\u026f")
        buf.write("\5X-\2\u026e\u026d\3\2\2\2\u026f\u0270\3\2\2\2\u0270\u026e")
        buf.write("\3\2\2\2\u0270\u0271\3\2\2\2\u0271\u0272\3\2\2\2\u0272")
        buf.write("\u0273\5\4\3\2\u0273\u0276\3\2\2\2\u0274\u0276\5X-\2\u0275")
        buf.write("\u026c\3\2\2\2\u0275\u0274\3\2\2\2\u0276o\3\2\2\2\u0277")
        buf.write("\u0278\7<\2\2\u0278\u0279\5V,\2\u0279\u028d\7\25\2\2\u027a")
        buf.write("\u0281\5\2\2\2\u027b\u027d\5\u00d6l\2\u027c\u027b\3\2")
        buf.write("\2\2\u027d\u027e\3\2\2\2\u027e\u027c\3\2\2\2\u027e\u027f")
        buf.write("\3\2\2\2\u027f\u0282\3\2\2\2\u0280\u0282\5\u00d8m\2\u0281")
        buf.write("\u027c\3\2\2\2\u0281\u0280\3\2\2\2\u0282\u0283\3\2\2\2")
        buf.write("\u0283\u0284\5\4\3\2\u0284\u028e\3\2\2\2\u0285\u0287\5")
        buf.write("\u00d6l\2\u0286\u0285\3\2\2\2\u0287\u0288\3\2\2\2\u0288")
        buf.write("\u0286\3\2\2\2\u0288\u0289\3\2\2\2\u0289\u028c\3\2\2\2")
        buf.write("\u028a\u028c\5\u00d8m\2\u028b\u0286\3\2\2\2\u028b\u028a")
        buf.write("\3\2\2\2\u028c\u028e\3\2\2\2\u028d\u027a\3\2\2\2\u028d")
        buf.write("\u028b\3\2\2\2\u028eq\3\2\2\2\u028f\u0290\7D\2\2\u0290")
        buf.write("\u0291\5\u0080A\2\u0291s\3\2\2\2\u0292\u0297\7X\2\2\u0293")
        buf.write("\u0294\7\b\2\2\u0294\u0296\7X\2\2\u0295\u0293\3\2\2\2")
        buf.write("\u0296\u0299\3\2\2\2\u0297\u0295\3\2\2\2\u0297\u0298\3")
        buf.write("\2\2\2\u0298u\3\2\2\2\u0299\u0297\3\2\2\2\u029a\u029b")
        buf.write("\7>\2\2\u029b\u029c\5t;\2\u029c\u029d\7\30\2\2\u029d\u029e")
        buf.write("\5\"\22\2\u029e\u02a8\7\25\2\2\u029f\u02a1\5\2\2\2\u02a0")
        buf.write("\u02a2\5\u00d8m\2\u02a1\u02a0\3\2\2\2\u02a2\u02a3\3\2")
        buf.write("\2\2\u02a3\u02a1\3\2\2\2\u02a3\u02a4\3\2\2\2\u02a4\u02a5")
        buf.write("\3\2\2\2\u02a5\u02a6\5\4\3\2\u02a6\u02a9\3\2\2\2\u02a7")
        buf.write("\u02a9\5X-\2\u02a8\u029f\3\2\2\2\u02a8\u02a7\3\2\2\2\u02a9")
        buf.write("w\3\2\2\2\u02aa\u02ac\78\2\2\u02ab\u02ad\7\32\2\2\u02ac")
        buf.write("\u02ab\3\2\2\2\u02ac\u02ad\3\2\2\2\u02ad\u02ae\3\2\2\2")
        buf.write("\u02ae\u02af\5\u0080A\2\u02afy\3\2\2\2\u02b0\u02b1\79")
        buf.write("\2\2\u02b1\u02b2\5V,\2\u02b2\u02c6\7\25\2\2\u02b3\u02ba")
        buf.write("\5\2\2\2\u02b4\u02b6\5\u00d6l\2\u02b5\u02b4\3\2\2\2\u02b6")
        buf.write("\u02b7\3\2\2\2\u02b7\u02b5\3\2\2\2\u02b7\u02b8\3\2\2\2")
        buf.write("\u02b8\u02bb\3\2\2\2\u02b9\u02bb\5\u00d8m\2\u02ba\u02b5")
        buf.write("\3\2\2\2\u02ba\u02b9\3\2\2\2\u02bb\u02bc\3\2\2\2\u02bc")
        buf.write("\u02bd\5\4\3\2\u02bd\u02c7\3\2\2\2\u02be\u02c0\5\u00d6")
        buf.write("l\2\u02bf\u02be\3\2\2\2\u02c0\u02c1\3\2\2\2\u02c1\u02bf")
        buf.write("\3\2\2\2\u02c1\u02c2\3\2\2\2\u02c2\u02c5\3\2\2\2\u02c3")
        buf.write("\u02c5\5\u00d8m\2\u02c4\u02bf\3\2\2\2\u02c4\u02c3\3\2")
        buf.write("\2\2\u02c5\u02c7\3\2\2\2\u02c6\u02b3\3\2\2\2\u02c6\u02c4")
        buf.write("\3\2\2\2\u02c7{\3\2\2\2\u02c8\u02c9\7:\2\2\u02c9\u02dd")
        buf.write("\7\25\2\2\u02ca\u02d1\5\2\2\2\u02cb\u02cd\5\u00d6l\2\u02cc")
        buf.write("\u02cb\3\2\2\2\u02cd\u02ce\3\2\2\2\u02ce\u02cc\3\2\2\2")
        buf.write("\u02ce\u02cf\3\2\2\2\u02cf\u02d2\3\2\2\2\u02d0\u02d2\5")
        buf.write("\u00d8m\2\u02d1\u02cc\3\2\2\2\u02d1\u02d0\3\2\2\2\u02d2")
        buf.write("\u02d3\3\2\2\2\u02d3\u02d4\5\4\3\2\u02d4\u02de\3\2\2\2")
        buf.write("\u02d5\u02d7\5\u00d6l\2\u02d6\u02d5\3\2\2\2\u02d7\u02d8")
        buf.write("\3\2\2\2\u02d8\u02d6\3\2\2\2\u02d8\u02d9\3\2\2\2\u02d9")
        buf.write("\u02dc\3\2\2\2\u02da\u02dc\5\u00d8m\2\u02db\u02d6\3\2")
        buf.write("\2\2\u02db\u02da\3\2\2\2\u02dc\u02de\3\2\2\2\u02dd\u02ca")
        buf.write("\3\2\2\2\u02dd\u02db\3\2\2\2\u02de}\3\2\2\2\u02df\u02e0")
        buf.write("\5\2\2\2\u02e0\u02e1\5\u00d8m\2\u02e1\u02e2\5\4\3\2\u02e2")
        buf.write("\u02e5\3\2\2\2\u02e3\u02e5\5\u00d8m\2\u02e4\u02df\3\2")
        buf.write("\2\2\u02e4\u02e3\3\2\2\2\u02e5\u0307\3\2\2\2\u02e6\u02ea")
        buf.write("\5\2\2\2\u02e7\u02e9\5z>\2\u02e8\u02e7\3\2\2\2\u02e9\u02ec")
        buf.write("\3\2\2\2\u02ea\u02e8\3\2\2\2\u02ea\u02eb\3\2\2\2\u02eb")
        buf.write("\u02ee\3\2\2\2\u02ec\u02ea\3\2\2\2\u02ed\u02ef\5|?\2\u02ee")
        buf.write("\u02ed\3\2\2\2\u02ee\u02ef\3\2\2\2\u02ef\u02f0\3\2\2\2")
        buf.write("\u02f0\u02f1\5\4\3\2\u02f1\u0308\3\2\2\2\u02f2\u02f4\5")
        buf.write("z>\2\u02f3\u02f2\3\2\2\2\u02f4\u02f7\3\2\2\2\u02f5\u02f3")
        buf.write("\3\2\2\2\u02f5\u02f6\3\2\2\2\u02f6\u02f8\3\2\2\2\u02f7")
        buf.write("\u02f5\3\2\2\2\u02f8\u02fa\5\2\2\2\u02f9\u02fb\5|?\2\u02fa")
        buf.write("\u02f9\3\2\2\2\u02fa\u02fb\3\2\2\2\u02fb\u02fc\3\2\2\2")
        buf.write("\u02fc\u02fd\5\4\3\2\u02fd\u0308\3\2\2\2\u02fe\u0300\5")
        buf.write("z>\2\u02ff\u02fe\3\2\2\2\u0300\u0303\3\2\2\2\u0301\u02ff")
        buf.write("\3\2\2\2\u0301\u0302\3\2\2\2\u0302\u0305\3\2\2\2\u0303")
        buf.write("\u0301\3\2\2\2\u0304\u0306\5|?\2\u0305\u0304\3\2\2\2\u0305")
        buf.write("\u0306\3\2\2\2\u0306\u0308\3\2\2\2\u0307\u02e6\3\2\2\2")
        buf.write("\u0307\u02f5\3\2\2\2\u0307\u0301\3\2\2\2\u0308\177\3\2")
        buf.write("\2\2\u0309\u030a\5V,\2\u030a\u030b\7\25\2\2\u030b\u030c")
        buf.write("\5~@\2\u030c\u0081\3\2\2\2\u030d\u030e\7O\2\2\u030e\u030f")
        buf.write("\7X\2\2\u030f\u0319\7\25\2\2\u0310\u0312\5\2\2\2\u0311")
        buf.write("\u0313\5X-\2\u0312\u0311\3\2\2\2\u0313\u0314\3\2\2\2\u0314")
        buf.write("\u0312\3\2\2\2\u0314\u0315\3\2\2\2\u0315\u0316\3\2\2\2")
        buf.write("\u0316\u0317\5\4\3\2\u0317\u031a\3\2\2\2\u0318\u031a\5")
        buf.write("X-\2\u0319\u0310\3\2\2\2\u0319\u0318\3\2\2\2\u031a\u0083")
        buf.write("\3\2\2\2\u031b\u031c\7U\2\2\u031c\u0085\3\2\2\2\u031d")
        buf.write("\u031e\7\62\2\2\u031e\u0321\5\"\22\2\u031f\u0321\7\62")
        buf.write("\2\2\u0320\u031d\3\2\2\2\u0320\u031f\3\2\2\2\u0321\u0087")
        buf.write("\3\2\2\2\u0322\u0323\7@\2\2\u0323\u0326\5\"\22\2\u0324")
        buf.write("\u0326\7@\2\2\u0325\u0322\3\2\2\2\u0325\u0324\3\2\2\2")
        buf.write("\u0326\u0089\3\2\2\2\u0327\u0328\7?\2\2\u0328\u008b\3")
        buf.write("\2\2\2\u0329\u032f\5R*\2\u032a\u032f\5^\60\2\u032b\u032f")
        buf.write("\5T+\2\u032c\u032f\5f\64\2\u032d\u032f\5d\63\2\u032e\u0329")
        buf.write("\3\2\2\2\u032e\u032a\3\2\2\2\u032e\u032b\3\2\2\2\u032e")
        buf.write("\u032c\3\2\2\2\u032e\u032d\3\2\2\2\u032f\u008d\3\2\2\2")
        buf.write("\u0330\u0331\7\f\2\2\u0331\u0332\7\26\2\2\u0332\u0334")
        buf.write("\7X\2\2\u0333\u0335\7\26\2\2\u0334\u0333\3\2\2\2\u0334")
        buf.write("\u0335\3\2\2\2\u0335\u0336\3\2\2\2\u0336\u0337\7\r\2\2")
        buf.write("\u0337\u008f\3\2\2\2\u0338\u033a\5:\36\2\u0339\u033b\5")
        buf.write("@!\2\u033a\u0339\3\2\2\2\u033a\u033b\3\2\2\2\u033b\u0091")
        buf.write("\3\2\2\2\u033c\u033d\7X\2\2\u033d\u033e\5@!\2\u033e\u0093")
        buf.write("\3\2\2\2\u033f\u0341\7X\2\2\u0340\u0342\5@!\2\u0341\u0340")
        buf.write("\3\2\2\2\u0341\u0342\3\2\2\2\u0342\u0348\3\2\2\2\u0343")
        buf.write("\u0344\7+\2\2\u0344\u0348\5\u009aN\2\u0345\u0346\7\'\2")
        buf.write("\2\u0346\u0348\5\u0092J\2\u0347\u033f\3\2\2\2\u0347\u0343")
        buf.write("\3\2\2\2\u0347\u0345\3\2\2\2\u0348\u0095\3\2\2\2\u0349")
        buf.write("\u034e\7X\2\2\u034a\u034b\7\25\2\2\u034b\u034f\5\u0094")
        buf.write("K\2\u034c\u034d\7\27\2\2\u034d\u034f\5\"\22\2\u034e\u034a")
        buf.write("\3\2\2\2\u034e\u034c\3\2\2\2\u034f\u0097\3\2\2\2\u0350")
        buf.write("\u0351\7\25\2\2\u0351\u0353\5\u0094K\2\u0352\u0350\3\2")
        buf.write("\2\2\u0352\u0353\3\2\2\2\u0353\u0354\3\2\2\2\u0354\u035e")
        buf.write("\7\27\2\2\u0355\u035f\5X-\2\u0356\u0358\5\2\2\2\u0357")
        buf.write("\u0359\5X-\2\u0358\u0357\3\2\2\2\u0359\u035a\3\2\2\2\u035a")
        buf.write("\u0358\3\2\2\2\u035a\u035b\3\2\2\2\u035b\u035c\3\2\2\2")
        buf.write("\u035c\u035d\5\4\3\2\u035d\u035f\3\2\2\2\u035e\u0355\3")
        buf.write("\2\2\2\u035e\u0356\3\2\2\2\u035f\u0099\3\2\2\2\u0360\u0361")
        buf.write("\7\n\2\2\u0361\u0366\5\u0096L\2\u0362\u0363\7\b\2\2\u0363")
        buf.write("\u0365\5\u0096L\2\u0364\u0362\3\2\2\2\u0365\u0368\3\2")
        buf.write("\2\2\u0366\u0364\3\2\2\2\u0366\u0367\3\2\2\2\u0367\u0369")
        buf.write("\3\2\2\2\u0368\u0366\3\2\2\2\u0369\u036a\7\13\2\2\u036a")
        buf.write("\u009b\3\2\2\2\u036b\u036c\5\u0090I\2\u036c\u036d\5\u009a")
        buf.write("N\2\u036d\u036e\5\u0098M\2\u036e\u009d\3\2\2\2\u036f\u0370")
        buf.write("\7X\2\2\u0370\u009f\3\2\2\2\u0371\u0372\7\n\2\2\u0372")
        buf.write("\u0377\5\u00a2R\2\u0373\u0374\7\b\2\2\u0374\u0376\5\u00a2")
        buf.write("R\2\u0375\u0373\3\2\2\2\u0376\u0379\3\2\2\2\u0377\u0375")
        buf.write("\3\2\2\2\u0377\u0378\3\2\2\2\u0378\u037a\3\2\2\2\u0379")
        buf.write("\u0377\3\2\2\2\u037a\u037b\7\13\2\2\u037b\u00a1\3\2\2")
        buf.write("\2\u037c\u037d\7X\2\2\u037d\u00a3\3\2\2\2\u037e\u0380")
        buf.write("\5\u008eH\2\u037f\u037e\3\2\2\2\u037f\u0380\3\2\2\2\u0380")
        buf.write("\u0381\3\2\2\2\u0381\u038b\7\27\2\2\u0382\u038c\5X-\2")
        buf.write("\u0383\u0385\5\2\2\2\u0384\u0386\5X-\2\u0385\u0384\3\2")
        buf.write("\2\2\u0386\u0387\3\2\2\2\u0387\u0385\3\2\2\2\u0387\u0388")
        buf.write("\3\2\2\2\u0388\u0389\3\2\2\2\u0389\u038a\5\4\3\2\u038a")
        buf.write("\u038c\3\2\2\2\u038b\u0382\3\2\2\2\u038b\u0383\3\2\2\2")
        buf.write("\u038c\u00a5\3\2\2\2\u038d\u038e\5\u009eP\2\u038e\u038f")
        buf.write("\5\u00a0Q\2\u038f\u0390\5\u00a4S\2\u0390\u00a7\3\2\2\2")
        buf.write("\u0391\u0392\7X\2\2\u0392\u00a9\3\2\2\2\u0393\u0394\7")
        buf.write("X\2\2\u0394\u00ab\3\2\2\2\u0395\u0396\7X\2\2\u0396\u0397")
        buf.write("\7\25\2\2\u0397\u0398\5\u00aaV\2\u0398\u00ad\3\2\2\2\u0399")
        buf.write("\u039a\7\n\2\2\u039a\u039f\5\u00acW\2\u039b\u039c\t\n")
        buf.write("\2\2\u039c\u039e\5\u00acW\2\u039d\u039b\3\2\2\2\u039e")
        buf.write("\u03a1\3\2\2\2\u039f\u039d\3\2\2\2\u039f\u03a0\3\2\2\2")
        buf.write("\u03a0\u03a2\3\2\2\2\u03a1\u039f\3\2\2\2\u03a2\u03a3\7")
        buf.write("\13\2\2\u03a3\u00af\3\2\2\2\u03a4\u03a5\7\25\2\2\u03a5")
        buf.write("\u03a7\5\u00aaV\2\u03a6\u03a4\3\2\2\2\u03a6\u03a7\3\2")
        buf.write("\2\2\u03a7\u03a8\3\2\2\2\u03a8\u03b2\7\27\2\2\u03a9\u03b3")
        buf.write("\5X-\2\u03aa\u03ac\5\2\2\2\u03ab\u03ad\5X-\2\u03ac\u03ab")
        buf.write("\3\2\2\2\u03ad\u03ae\3\2\2\2\u03ae\u03ac\3\2\2\2\u03ae")
        buf.write("\u03af\3\2\2\2\u03af\u03b0\3\2\2\2\u03b0\u03b1\5\4\3\2")
        buf.write("\u03b1\u03b3\3\2\2\2\u03b2\u03a9\3\2\2\2\u03b2\u03aa\3")
        buf.write("\2\2\2\u03b3\u00b1\3\2\2\2\u03b4\u03b5\5\u00a8U\2\u03b5")
        buf.write("\u03b6\5\u00aeX\2\u03b6\u03b7\5\u00b0Y\2\u03b7\u00b3\3")
        buf.write("\2\2\2\u03b8\u03b9\5\"\22\2\u03b9\u00b5\3\2\2\2\u03ba")
        buf.write("\u03bc\7X\2\2\u03bb\u03bd\5@!\2\u03bc\u03bb\3\2\2\2\u03bc")
        buf.write("\u03bd\3\2\2\2\u03bd\u03be\3\2\2\2\u03be\u03bf\7\27\2")
        buf.write("\2\u03bf\u00b7\3\2\2\2\u03c0\u03c1\5\u00b6\\\2\u03c1\u03c2")
        buf.write("\5\u00b4[\2\u03c2\u00b9\3\2\2\2\u03c3\u03c5\5\2\2\2\u03c4")
        buf.write("\u03c6\5\u00b8]\2\u03c5\u03c4\3\2\2\2\u03c6\u03c7\3\2")
        buf.write("\2\2\u03c7\u03c5\3\2\2\2\u03c7\u03c8\3\2\2\2\u03c8\u03c9")
        buf.write("\3\2\2\2\u03c9\u03ca\5\4\3\2\u03ca\u00bb\3\2\2\2\u03cb")
        buf.write("\u03cc\5\u00ba^\2\u03cc\u00bd\3\2\2\2\u03cd\u03cf\5\u00ca")
        buf.write("f\2\u03ce\u03cd\3\2\2\2\u03cf\u03d0\3\2\2\2\u03d0\u03ce")
        buf.write("\3\2\2\2\u03d0\u03d1\3\2\2\2\u03d1\u03db\3\2\2\2\u03d2")
        buf.write("\u03d4\5\2\2\2\u03d3\u03d5\5\u00caf\2\u03d4\u03d3\3\2")
        buf.write("\2\2\u03d5\u03d6\3\2\2\2\u03d6\u03d4\3\2\2\2\u03d6\u03d7")
        buf.write("\3\2\2\2\u03d7\u03d8\3\2\2\2\u03d8\u03d9\5\4\3\2\u03d9")
        buf.write("\u03db\3\2\2\2\u03da\u03ce\3\2\2\2\u03da\u03d2\3\2\2\2")
        buf.write("\u03db\u00bf\3\2\2\2\u03dc\u03de\5\u00c8e\2\u03dd\u03dc")
        buf.write("\3\2\2\2\u03de\u03df\3\2\2\2\u03df\u03dd\3\2\2\2\u03df")
        buf.write("\u03e0\3\2\2\2\u03e0\u03ea\3\2\2\2\u03e1\u03e3\5\2\2\2")
        buf.write("\u03e2\u03e4\5\u00c8e\2\u03e3\u03e2\3\2\2\2\u03e4\u03e5")
        buf.write("\3\2\2\2\u03e5\u03e3\3\2\2\2\u03e5\u03e6\3\2\2\2\u03e6")
        buf.write("\u03e7\3\2\2\2\u03e7\u03e8\5\4\3\2\u03e8\u03ea\3\2\2\2")
        buf.write("\u03e9\u03dd\3\2\2\2\u03e9\u03e1\3\2\2\2\u03ea\u00c1\3")
        buf.write("\2\2\2\u03eb\u03ec\7X\2\2\u03ec\u03ed\7\27\2\2\u03ed\u03f9")
        buf.write("\5\"\22\2\u03ee\u03f2\5\2\2\2\u03ef\u03f0\7X\2\2\u03f0")
        buf.write("\u03f1\7\27\2\2\u03f1\u03f3\5\"\22\2\u03f2\u03ef\3\2\2")
        buf.write("\2\u03f3\u03f4\3\2\2\2\u03f4\u03f2\3\2\2\2\u03f4\u03f5")
        buf.write("\3\2\2\2\u03f5\u03f6\3\2\2\2\u03f6\u03f7\5\4\3\2\u03f7")
        buf.write("\u03f9\3\2\2\2\u03f8\u03eb\3\2\2\2\u03f8\u03ee\3\2\2\2")
        buf.write("\u03f9\u00c3\3\2\2\2\u03fa\u03fc\5:\36\2\u03fb\u03fd\5")
        buf.write("\36\20\2\u03fc\u03fb\3\2\2\2\u03fc\u03fd\3\2\2\2\u03fd")
        buf.write("\u00c5\3\2\2\2\u03fe\u03ff\7\f\2\2\u03ff\u0404\5\u00c4")
        buf.write("c\2\u0400\u0401\7\b\2\2\u0401\u0403\5\u00c4c\2\u0402\u0400")
        buf.write("\3\2\2\2\u0403\u0406\3\2\2\2\u0404\u0402\3\2\2\2\u0404")
        buf.write("\u0405\3\2\2\2\u0405\u040c\3\2\2\2\u0406\u0404\3\2\2\2")
        buf.write("\u0407\u0408\5\2\2\2\u0408\u0409\7\r\2\2\u0409\u040a\5")
        buf.write("\4\3\2\u040a\u040d\3\2\2\2\u040b\u040d\7\r\2\2\u040c\u0407")
        buf.write("\3\2\2\2\u040c\u040b\3\2\2\2\u040d\u040e\3\2\2\2\u040e")
        buf.write("\u0410\7\27\2\2\u040f\u0411\5\4\3\2\u0410\u040f\3\2\2")
        buf.write("\2\u0410\u0411\3\2\2\2\u0411\u0417\3\2\2\2\u0412\u0413")
        buf.write("\5\2\2\2\u0413\u0414\5(\25\2\u0414\u0415\5\4\3\2\u0415")
        buf.write("\u0418\3\2\2\2\u0416\u0418\5V,\2\u0417\u0412\3\2\2\2\u0417")
        buf.write("\u0416\3\2\2\2\u0418\u00c7\3\2\2\2\u0419\u041e\7X\2\2")
        buf.write("\u041a\u041b\7\b\2\2\u041b\u041d\7X\2\2\u041c\u041a\3")
        buf.write("\2\2\2\u041d\u0420\3\2\2\2\u041e\u041c\3\2\2\2\u041e\u041f")
        buf.write("\3\2\2\2\u041f\u0423\3\2\2\2\u0420\u041e\3\2\2\2\u0421")
        buf.write("\u0422\7\25\2\2\u0422\u0424\5\"\22\2\u0423\u0421\3\2\2")
        buf.write("\2\u0423\u0424\3\2\2\2\u0424\u0425\3\2\2\2\u0425\u042b")
        buf.write("\7\27\2\2\u0426\u0427\5\2\2\2\u0427\u0428\5V,\2\u0428")
        buf.write("\u0429\5\4\3\2\u0429\u042c\3\2\2\2\u042a\u042c\5V,\2\u042b")
        buf.write("\u0426\3\2\2\2\u042b\u042a\3\2\2\2\u042c\u00c9\3\2\2\2")
        buf.write("\u042d\u042f\5\u00ccg\2\u042e\u0430\5\u00d4k\2\u042f\u042e")
        buf.write("\3\2\2\2\u042f\u0430\3\2\2\2\u0430\u00cb\3\2\2\2\u0431")
        buf.write("\u0436\7X\2\2\u0432\u0433\7\b\2\2\u0433\u0435\7X\2\2\u0434")
        buf.write("\u0432\3\2\2\2\u0435\u0438\3\2\2\2\u0436\u0434\3\2\2\2")
        buf.write("\u0436\u0437\3\2\2\2\u0437\u043a\3\2\2\2\u0438\u0436\3")
        buf.write("\2\2\2\u0439\u043b\7\b\2\2\u043a\u0439\3\2\2\2\u043a\u043b")
        buf.write("\3\2\2\2\u043b\u0444\3\2\2\2\u043c\u0442\7\25\2\2\u043d")
        buf.write("\u043e\5\2\2\2\u043e\u043f\5\"\22\2\u043f\u0440\5\4\3")
        buf.write("\2\u0440\u0443\3\2\2\2\u0441\u0443\5\"\22\2\u0442\u043d")
        buf.write("\3\2\2\2\u0442\u0441\3\2\2\2\u0443\u0445\3\2\2\2\u0444")
        buf.write("\u043c\3\2\2\2\u0444\u0445\3\2\2\2\u0445\u044e\3\2\2\2")
        buf.write("\u0446\u044c\7\27\2\2\u0447\u0448\5\2\2\2\u0448\u0449")
        buf.write("\5V,\2\u0449\u044a\5\4\3\2\u044a\u044d\3\2\2\2\u044b\u044d")
        buf.write("\5V,\2\u044c\u0447\3\2\2\2\u044c\u044b\3\2\2\2\u044d\u044f")
        buf.write("\3\2\2\2\u044e\u0446\3\2\2\2\u044e\u044f\3\2\2\2\u044f")
        buf.write("\u00cd\3\2\2\2\u0450\u0453\5\u00d0i\2\u0451\u0453\5\u00d2")
        buf.write("j\2\u0452\u0450\3\2\2\2\u0452\u0451\3\2\2\2\u0453\u00cf")
        buf.write("\3\2\2\2\u0454\u045b\5N(\2\u0455\u045b\5P)\2\u0456\u045b")
        buf.write("\5\u0084C\2\u0457\u045b\5\u0086D\2\u0458\u045b\5\u0088")
        buf.write("E\2\u0459\u045b\5\u008aF\2\u045a\u0454\3\2\2\2\u045a\u0455")
        buf.write("\3\2\2\2\u045a\u0456\3\2\2\2\u045a\u0457\3\2\2\2\u045a")
        buf.write("\u0458\3\2\2\2\u045a\u0459\3\2\2\2\u045b\u00d1\3\2\2\2")
        buf.write("\u045c\u0471\5v<\2\u045d\u0471\5x=\2\u045e\u0471\5j\66")
        buf.write("\2\u045f\u0471\5\u0082B\2\u0460\u0471\5p9\2\u0461\u0471")
        buf.write("\5r:\2\u0462\u0463\7A\2\2\u0463\u0471\5\u00a6T\2\u0464")
        buf.write("\u0465\7+\2\2\u0465\u0471\5\u009cO\2\u0466\u0467\7P\2")
        buf.write("\2\u0467\u0471\5\u00b2Z\2\u0468\u0469\7\24\2\2\u0469\u0471")
        buf.write("\5\u00bc_\2\u046a\u046b\7)\2\2\u046b\u0471\5\u00c0a\2")
        buf.write("\u046c\u046d\7\'\2\2\u046d\u0471\5\u00be`\2\u046e\u046f")
        buf.write("\7(\2\2\u046f\u0471\5\u00c2b\2\u0470\u045c\3\2\2\2\u0470")
        buf.write("\u045d\3\2\2\2\u0470\u045e\3\2\2\2\u0470\u045f\3\2\2\2")
        buf.write("\u0470\u0460\3\2\2\2\u0470\u0461\3\2\2\2\u0470\u0462\3")
        buf.write("\2\2\2\u0470\u0464\3\2\2\2\u0470\u0466\3\2\2\2\u0470\u0468")
        buf.write("\3\2\2\2\u0470\u046a\3\2\2\2\u0470\u046c\3\2\2\2\u0470")
        buf.write("\u046e\3\2\2\2\u0471\u00d3\3\2\2\2\u0472\u0473\7\25\2")
        buf.write("\2\u0473\u0474\5\u00d8m\2\u0474\u00d5\3\2\2\2\u0475\u0476")
        buf.write("\5\"\22\2\u0476\u0477\7\27\2\2\u0477\u0478\5V,\2\u0478")
        buf.write("\u00d7\3\2\2\2\u0479\u047a\5\u00ceh\2\u047a\u00d9\3\2")
        buf.write("\2\2\u047b\u0482\5\u00d8m\2\u047c\u047e\7\t\2\2\u047d")
        buf.write("\u047c\3\2\2\2\u047d\u047e\3\2\2\2\u047e\u047f\3\2\2\2")
        buf.write("\u047f\u0481\5\u00d8m\2\u0480\u047d\3\2\2\2\u0481\u0484")
        buf.write("\3\2\2\2\u0482\u0480\3\2\2\2\u0482\u0483\3\2\2\2\u0483")
        buf.write("\u00db\3\2\2\2\u0484\u0482\3\2\2\2\u0485\u0486\5\u00da")
        buf.write("n\2\u0486\u00dd\3\2\2\2\u0084\u00ec\u00f8\u010d\u0117")
        buf.write("\u0120\u0129\u0132\u013b\u0144\u014d\u0156\u015f\u0168")
        buf.write("\u0174\u017e\u0180\u0182\u0187\u018f\u019a\u01a2\u01aa")
        buf.write("\u01af\u01b7\u01bf\u01c5\u01cd\u01d2\u01d9\u01df\u01e1")
        buf.write("\u01e3\u01eb\u01f9\u0201\u0205\u0210\u0214\u021e\u0227")
        buf.write("\u022d\u0234\u023e\u0245\u024e\u0258\u0260\u0265\u0267")
        buf.write("\u0270\u0275\u027e\u0281\u0288\u028b\u028d\u0297\u02a3")
        buf.write("\u02a8\u02ac\u02b7\u02ba\u02c1\u02c4\u02c6\u02ce\u02d1")
        buf.write("\u02d8\u02db\u02dd\u02e4\u02ea\u02ee\u02f5\u02fa\u0301")
        buf.write("\u0305\u0307\u0314\u0319\u0320\u0325\u032e\u0334\u033a")
        buf.write("\u0341\u0347\u034e\u0352\u035a\u035e\u0366\u0377\u037f")
        buf.write("\u0387\u038b\u039f\u03a6\u03ae\u03b2\u03bc\u03c7\u03d0")
        buf.write("\u03d6\u03da\u03df\u03e5\u03e9\u03f4\u03f8\u03fc\u0404")
        buf.write("\u040c\u0410\u0417\u041e\u0423\u042b\u042f\u0436\u043a")
        buf.write("\u0442\u0444\u044c\u044e\u0452\u045a\u0470\u047d\u0482")
        return buf.getvalue()


class nim_Parser ( Parser ):

    grammarFileName = "nim_Parser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "' '", "','", "';'", "'('", "')'", "'{'", 
                     "'}'", "'['", "']'", "'interface'", "'enum'", "'object'", 
                     "'concept'", "'type'", "':'", "'.'", "'='", "'in'", 
                     "'of'", "'not'", "'$'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'var'", "'let'", "'const'", "'bind'", "'proc'", "'static'", 
                     "'method'", "'func'", "'mixin'", "'end'", "'except'", 
                     "'return'", "'try'", "'raise'", "'finally'", "'out'", 
                     "'case'", "'if'", "'elif'", "'else'", "'do'", "'while'", 
                     "'iterator'", "'for'", "'continue'", "'break'", "'template'", 
                     "'tuple'", "'using'", "'when'", "'yield'", "'include'", 
                     "'import'", "'from'", "'as'", "'export'", "'ref'", 
                     "'ptr'", "'addr'", "'asm'", "'block'", "'macro'", "'nil'", 
                     "'cast'", "'converter'", "'defer'", "'discard'", "'distinct'", 
                     "'`'" ]

    symbolicNames = [ "<INVALID>", "DOCUMENTATION_COMMENT", "MULTILINE_COMMENT", 
                      "COMMENT", "UNCONDITIONAL_NEWLINE", "WS", "COMMA", 
                      "SEMI_COLON", "OPEN_PAREN", "CLOSE_PAREN", "OPEN_BRACE", 
                      "CLOSE_BRACE", "OPEN_BRACK", "CLOSE_BRACK", "INTERFACE", 
                      "ENUM", "OBJECT", "CONCEPT", "TYPE", "COLON", "DOT", 
                      "EQUALS", "IN", "OF", "NOT", "DOLLAR_SIGN", "OP0", 
                      "OP1", "OP2", "OP3", "OP4", "OP5", "OP6", "OP7", "OP8", 
                      "OP9", "OP10", "VARIABLE", "LET", "CONST", "BIND", 
                      "PROC", "STATIC", "METHOD", "FUNC", "MIXIN", "END", 
                      "EXCEPT", "RETURN", "TRY", "RAISE", "FINALLY", "OUT", 
                      "CASE", "IF", "ELIF", "ELSE", "DO", "WHILE", "ITERATOR", 
                      "FOR", "CONTINUE", "BREAK", "TEMPLATE", "TUPLE", "USING", 
                      "WHEN", "YIELD", "INCLUDE", "IMPORT", "FROM", "AS", 
                      "EXPORT", "REF", "PTR", "ADDR", "ASM", "BLOCK", "MACRO", 
                      "NIL", "CAST", "CONVERTER", "DEFER", "DISCARD", "DISTINCT", 
                      "SYM_HEADER", "IDENTIFIER", "INT_LIT", "INT8_LIT", 
                      "INT16_LIT", "INT32_LIT", "INT64_LIT", "UINT_LIT", 
                      "UINT8_LIT", "UINT16_LIT", "UINT32_LIT", "UINT64_LIT", 
                      "EXP", "FLOAT_LIT", "FLOAT32_LIT", "FLOAT64_LIT", 
                      "CHAR_LIT", "STR_LIT", "TRIPLESTR_LIT", "RSTR_LIT", 
                      "GENERALIZED_STR_LIT", "GENERALIZED_TRIPLESTR_LIT", 
                      "DEDENT", "EXIT", "USELESS_LINE", "USELSSS_INDENTS", 
                      "INDENT", "INDENTS_PASS", "ERROR_INDENT" ]

    RULE_ind = 0
    RULE_ded = 1
    RULE_typeKeyw = 2
    RULE_op0 = 3
    RULE_op1 = 4
    RULE_op2 = 5
    RULE_op3 = 6
    RULE_op4 = 7
    RULE_op5 = 8
    RULE_op6 = 9
    RULE_op7 = 10
    RULE_op8 = 11
    RULE_op9 = 12
    RULE_op10 = 13
    RULE_operator = 14
    RULE_prefixOperator = 15
    RULE_simpleExpr = 16
    RULE_assignExpr = 17
    RULE_orExpr = 18
    RULE_andExpr = 19
    RULE_cmpExpr = 20
    RULE_sliceExpr = 21
    RULE_ampExpr = 22
    RULE_plusExpr = 23
    RULE_mulExpr = 24
    RULE_dollarExpr = 25
    RULE_literal = 26
    RULE_generalizedLit = 27
    RULE_symbol = 28
    RULE_symbolBody = 29
    RULE_exprColonEqExpr = 30
    RULE_arrayConstr = 31
    RULE_tupleConstr = 32
    RULE_identOrLiteral = 33
    RULE_addressLiteral = 34
    RULE_primarySuffixSimpleBody = 35
    RULE_primarySuffix = 36
    RULE_primary = 37
    RULE_importStmt = 38
    RULE_fromStmt = 39
    RULE_blockExpr = 40
    RULE_forExpr = 41
    RULE_anyExpr = 42
    RULE_anyStmt = 43
    RULE_condExprBody = 44
    RULE_condExpr = 45
    RULE_caseExpr = 46
    RULE_ofBranchExpr = 47
    RULE_ofBranchesExpr = 48
    RULE_whenExpr = 49
    RULE_ifExpr = 50
    RULE_exprList = 51
    RULE_caseStmt = 52
    RULE_ofBranchesStmt = 53
    RULE_ofBranchStmt = 54
    RULE_whileStmt = 55
    RULE_whenStmt = 56
    RULE_idList = 57
    RULE_forStmt = 58
    RULE_ifStmt = 59
    RULE_condStmtElif = 60
    RULE_condStmtElse = 61
    RULE_condStmtBody = 62
    RULE_condStmt = 63
    RULE_blockStmt = 64
    RULE_discardStmt = 65
    RULE_returnStmt = 66
    RULE_breakStmt = 67
    RULE_continueStmt = 68
    RULE_expr = 69
    RULE_pragma = 70
    RULE_procRoutineHeader = 71
    RULE_procRoutineVariableType = 72
    RULE_procRoutineType = 73
    RULE_procRoutineBody = 74
    RULE_procRoutineTail = 75
    RULE_procRoutineBodyList = 76
    RULE_procRoutine = 77
    RULE_templateRoutineHeader = 78
    RULE_templateRoutineBodyList = 79
    RULE_templateRoutineBody = 80
    RULE_templateRoutineTail = 81
    RULE_templateRoutine = 82
    RULE_macroRoutineHeader = 83
    RULE_macroRoutineType = 84
    RULE_macroRoutineBody = 85
    RULE_macroRoutineBodyList = 86
    RULE_macroRoutineTail = 87
    RULE_macroRoutine = 88
    RULE_typeSectionBodyExpr = 89
    RULE_typeSectionBodyHeader = 90
    RULE_typeSectionBody = 91
    RULE_typeSectionBodyList = 92
    RULE_typeSection = 93
    RULE_variableSection = 94
    RULE_constantSection = 95
    RULE_letSection = 96
    RULE_identVis = 97
    RULE_varTuple = 98
    RULE_constant = 99
    RULE_variable = 100
    RULE_idColonEq = 101
    RULE_simple_complexStmt = 102
    RULE_simpleStmt = 103
    RULE_complexStmt = 104
    RULE_colonBody = 105
    RULE_exprStmt = 106
    RULE_stmt = 107
    RULE_module = 108
    RULE_start = 109

    ruleNames =  [ "ind", "ded", "typeKeyw", "op0", "op1", "op2", "op3", 
                   "op4", "op5", "op6", "op7", "op8", "op9", "op10", "operator", 
                   "prefixOperator", "simpleExpr", "assignExpr", "orExpr", 
                   "andExpr", "cmpExpr", "sliceExpr", "ampExpr", "plusExpr", 
                   "mulExpr", "dollarExpr", "literal", "generalizedLit", 
                   "symbol", "symbolBody", "exprColonEqExpr", "arrayConstr", 
                   "tupleConstr", "identOrLiteral", "addressLiteral", "primarySuffixSimpleBody", 
                   "primarySuffix", "primary", "importStmt", "fromStmt", 
                   "blockExpr", "forExpr", "anyExpr", "anyStmt", "condExprBody", 
                   "condExpr", "caseExpr", "ofBranchExpr", "ofBranchesExpr", 
                   "whenExpr", "ifExpr", "exprList", "caseStmt", "ofBranchesStmt", 
                   "ofBranchStmt", "whileStmt", "whenStmt", "idList", "forStmt", 
                   "ifStmt", "condStmtElif", "condStmtElse", "condStmtBody", 
                   "condStmt", "blockStmt", "discardStmt", "returnStmt", 
                   "breakStmt", "continueStmt", "expr", "pragma", "procRoutineHeader", 
                   "procRoutineVariableType", "procRoutineType", "procRoutineBody", 
                   "procRoutineTail", "procRoutineBodyList", "procRoutine", 
                   "templateRoutineHeader", "templateRoutineBodyList", "templateRoutineBody", 
                   "templateRoutineTail", "templateRoutine", "macroRoutineHeader", 
                   "macroRoutineType", "macroRoutineBody", "macroRoutineBodyList", 
                   "macroRoutineTail", "macroRoutine", "typeSectionBodyExpr", 
                   "typeSectionBodyHeader", "typeSectionBody", "typeSectionBodyList", 
                   "typeSection", "variableSection", "constantSection", 
                   "letSection", "identVis", "varTuple", "constant", "variable", 
                   "idColonEq", "simple_complexStmt", "simpleStmt", "complexStmt", 
                   "colonBody", "exprStmt", "stmt", "module", "start" ]

    EOF = Token.EOF
    DOCUMENTATION_COMMENT=1
    MULTILINE_COMMENT=2
    COMMENT=3
    UNCONDITIONAL_NEWLINE=4
    WS=5
    COMMA=6
    SEMI_COLON=7
    OPEN_PAREN=8
    CLOSE_PAREN=9
    OPEN_BRACE=10
    CLOSE_BRACE=11
    OPEN_BRACK=12
    CLOSE_BRACK=13
    INTERFACE=14
    ENUM=15
    OBJECT=16
    CONCEPT=17
    TYPE=18
    COLON=19
    DOT=20
    EQUALS=21
    IN=22
    OF=23
    NOT=24
    DOLLAR_SIGN=25
    OP0=26
    OP1=27
    OP2=28
    OP3=29
    OP4=30
    OP5=31
    OP6=32
    OP7=33
    OP8=34
    OP9=35
    OP10=36
    VARIABLE=37
    LET=38
    CONST=39
    BIND=40
    PROC=41
    STATIC=42
    METHOD=43
    FUNC=44
    MIXIN=45
    END=46
    EXCEPT=47
    RETURN=48
    TRY=49
    RAISE=50
    FINALLY=51
    OUT=52
    CASE=53
    IF=54
    ELIF=55
    ELSE=56
    DO=57
    WHILE=58
    ITERATOR=59
    FOR=60
    CONTINUE=61
    BREAK=62
    TEMPLATE=63
    TUPLE=64
    USING=65
    WHEN=66
    YIELD=67
    INCLUDE=68
    IMPORT=69
    FROM=70
    AS=71
    EXPORT=72
    REF=73
    PTR=74
    ADDR=75
    ASM=76
    BLOCK=77
    MACRO=78
    NIL=79
    CAST=80
    CONVERTER=81
    DEFER=82
    DISCARD=83
    DISTINCT=84
    SYM_HEADER=85
    IDENTIFIER=86
    INT_LIT=87
    INT8_LIT=88
    INT16_LIT=89
    INT32_LIT=90
    INT64_LIT=91
    UINT_LIT=92
    UINT8_LIT=93
    UINT16_LIT=94
    UINT32_LIT=95
    UINT64_LIT=96
    EXP=97
    FLOAT_LIT=98
    FLOAT32_LIT=99
    FLOAT64_LIT=100
    CHAR_LIT=101
    STR_LIT=102
    TRIPLESTR_LIT=103
    RSTR_LIT=104
    GENERALIZED_STR_LIT=105
    GENERALIZED_TRIPLESTR_LIT=106
    DEDENT=107
    EXIT=108
    USELESS_LINE=109
    USELSSS_INDENTS=110
    INDENT=111
    INDENTS_PASS=112
    ERROR_INDENT=113

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None



    # parKeyWList = [IF, WHILE, CASE, FOR, BLOCK, CONST, LET, WHEN, VARIABLE]
    literals = [INT_LIT, INT8_LIT, INT16_LIT , INT32_LIT , INT64_LIT, UINT_LIT , UINT8_LIT , 
    UINT16_LIT , UINT32_LIT , UINT64_LIT, FLOAT_LIT , FLOAT32_LIT , FLOAT64_LIT, STR_LIT, 
    RSTR_LIT , TRIPLESTR_LIT, CHAR_LIT, NIL ]
    primarySuffixList = [SYM_HEADER, IDENTIFIER, TYPE] + literals



    class IndContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INDENT(self):
            return self.getToken(nim_Parser.INDENT, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_ind

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInd" ):
                listener.enterInd(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInd" ):
                listener.exitInd(self)




    def ind(self):

        localctx = nim_Parser.IndContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_ind)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 220
            self.match(nim_Parser.INDENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DedContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEDENT(self):
            return self.getToken(nim_Parser.DEDENT, 0)

        def EOF(self):
            return self.getToken(nim_Parser.EOF, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_ded

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDed" ):
                listener.enterDed(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDed" ):
                listener.exitDed(self)




    def ded(self):

        localctx = nim_Parser.DedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_ded)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 222
            _la = self._input.LA(1)
            if not(_la==nim_Parser.EOF or _la==nim_Parser.DEDENT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeKeywContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REF(self):
            return self.getToken(nim_Parser.REF, 0)

        def OBJECT(self):
            return self.getToken(nim_Parser.OBJECT, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_typeKeyw

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeKeyw" ):
                listener.enterTypeKeyw(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeKeyw" ):
                listener.exitTypeKeyw(self)




    def typeKeyw(self):

        localctx = nim_Parser.TypeKeywContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_typeKeyw)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 224
            _la = self._input.LA(1)
            if not(_la==nim_Parser.OBJECT or _la==nim_Parser.REF):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Op0Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OP0(self):
            return self.getToken(nim_Parser.OP0, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_op0

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOp0" ):
                listener.enterOp0(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOp0" ):
                listener.exitOp0(self)




    def op0(self):

        localctx = nim_Parser.Op0Context(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_op0)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 226
            self.match(nim_Parser.OP0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Op1Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OP1(self):
            return self.getToken(nim_Parser.OP1, 0)

        def EQUALS(self):
            return self.getToken(nim_Parser.EQUALS, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_op1

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOp1" ):
                listener.enterOp1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOp1" ):
                listener.exitOp1(self)




    def op1(self):

        localctx = nim_Parser.Op1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_op1)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 228
            _la = self._input.LA(1)
            if not(_la==nim_Parser.EQUALS or _la==nim_Parser.OP1):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Op2Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OP2(self):
            return self.getToken(nim_Parser.OP2, 0)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.COLON)
            else:
                return self.getToken(nim_Parser.COLON, i)

        def getRuleIndex(self):
            return nim_Parser.RULE_op2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOp2" ):
                listener.enterOp2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOp2" ):
                listener.exitOp2(self)




    def op2(self):

        localctx = nim_Parser.Op2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_op2)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 234
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
            if la_ == 1:
                self.state = 230
                self.match(nim_Parser.OP2)
                pass

            elif la_ == 2:
                self.state = 231
                self.match(nim_Parser.COLON)
                pass

            elif la_ == 3:
                self.state = 232
                self.match(nim_Parser.COLON)
                self.state = 233
                self.match(nim_Parser.COLON)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Op3Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OP3(self):
            return self.getToken(nim_Parser.OP3, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_op3

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOp3" ):
                listener.enterOp3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOp3" ):
                listener.exitOp3(self)




    def op3(self):

        localctx = nim_Parser.Op3Context(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_op3)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 236
            self.match(nim_Parser.OP3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Op4Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OP4(self):
            return self.getToken(nim_Parser.OP4, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_op4

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOp4" ):
                listener.enterOp4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOp4" ):
                listener.exitOp4(self)




    def op4(self):

        localctx = nim_Parser.Op4Context(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_op4)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 238
            self.match(nim_Parser.OP4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Op5Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OP5(self):
            return self.getToken(nim_Parser.OP5, 0)

        def IN(self):
            return self.getToken(nim_Parser.IN, 0)

        def OF(self):
            return self.getToken(nim_Parser.OF, 0)

        def NOT(self):
            return self.getToken(nim_Parser.NOT, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_op5

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOp5" ):
                listener.enterOp5(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOp5" ):
                listener.exitOp5(self)




    def op5(self):

        localctx = nim_Parser.Op5Context(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_op5)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 240
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nim_Parser.IN) | (1 << nim_Parser.OF) | (1 << nim_Parser.NOT) | (1 << nim_Parser.OP5))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Op6Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OP6(self):
            return self.getToken(nim_Parser.OP6, 0)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.DOT)
            else:
                return self.getToken(nim_Parser.DOT, i)

        def getRuleIndex(self):
            return nim_Parser.RULE_op6

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOp6" ):
                listener.enterOp6(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOp6" ):
                listener.exitOp6(self)




    def op6(self):

        localctx = nim_Parser.Op6Context(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_op6)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 246
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
            if la_ == 1:
                self.state = 242
                self.match(nim_Parser.OP6)
                pass

            elif la_ == 2:
                self.state = 243
                self.match(nim_Parser.DOT)
                pass

            elif la_ == 3:
                self.state = 244
                self.match(nim_Parser.DOT)
                self.state = 245
                self.match(nim_Parser.DOT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Op7Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OP7(self):
            return self.getToken(nim_Parser.OP7, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_op7

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOp7" ):
                listener.enterOp7(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOp7" ):
                listener.exitOp7(self)




    def op7(self):

        localctx = nim_Parser.Op7Context(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_op7)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 248
            self.match(nim_Parser.OP7)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Op8Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OP8(self):
            return self.getToken(nim_Parser.OP8, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_op8

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOp8" ):
                listener.enterOp8(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOp8" ):
                listener.exitOp8(self)




    def op8(self):

        localctx = nim_Parser.Op8Context(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_op8)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 250
            self.match(nim_Parser.OP8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Op9Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OP9(self):
            return self.getToken(nim_Parser.OP9, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_op9

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOp9" ):
                listener.enterOp9(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOp9" ):
                listener.exitOp9(self)




    def op9(self):

        localctx = nim_Parser.Op9Context(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_op9)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 252
            self.match(nim_Parser.OP9)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Op10Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OP10(self):
            return self.getToken(nim_Parser.OP10, 0)

        def DOLLAR_SIGN(self):
            return self.getToken(nim_Parser.DOLLAR_SIGN, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_op10

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOp10" ):
                listener.enterOp10(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOp10" ):
                listener.exitOp10(self)




    def op10(self):

        localctx = nim_Parser.Op10Context(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_op10)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 254
            _la = self._input.LA(1)
            if not(_la==nim_Parser.DOLLAR_SIGN or _la==nim_Parser.OP10):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def op0(self):
            return self.getTypedRuleContext(nim_Parser.Op0Context,0)


        def op1(self):
            return self.getTypedRuleContext(nim_Parser.Op1Context,0)


        def op2(self):
            return self.getTypedRuleContext(nim_Parser.Op2Context,0)


        def op3(self):
            return self.getTypedRuleContext(nim_Parser.Op3Context,0)


        def op4(self):
            return self.getTypedRuleContext(nim_Parser.Op4Context,0)


        def op5(self):
            return self.getTypedRuleContext(nim_Parser.Op5Context,0)


        def op6(self):
            return self.getTypedRuleContext(nim_Parser.Op6Context,0)


        def op7(self):
            return self.getTypedRuleContext(nim_Parser.Op7Context,0)


        def op8(self):
            return self.getTypedRuleContext(nim_Parser.Op8Context,0)


        def op9(self):
            return self.getTypedRuleContext(nim_Parser.Op9Context,0)


        def op10(self):
            return self.getTypedRuleContext(nim_Parser.Op10Context,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperator" ):
                listener.enterOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperator" ):
                listener.exitOperator(self)




    def operator(self):

        localctx = nim_Parser.OperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_operator)
        try:
            self.state = 267
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [nim_Parser.OP0]:
                self.enterOuterAlt(localctx, 1)
                self.state = 256
                self.op0()
                pass
            elif token in [nim_Parser.EQUALS, nim_Parser.OP1]:
                self.enterOuterAlt(localctx, 2)
                self.state = 257
                self.op1()
                pass
            elif token in [nim_Parser.COLON, nim_Parser.OP2]:
                self.enterOuterAlt(localctx, 3)
                self.state = 258
                self.op2()
                pass
            elif token in [nim_Parser.OP3]:
                self.enterOuterAlt(localctx, 4)
                self.state = 259
                self.op3()
                pass
            elif token in [nim_Parser.OP4]:
                self.enterOuterAlt(localctx, 5)
                self.state = 260
                self.op4()
                pass
            elif token in [nim_Parser.IN, nim_Parser.OF, nim_Parser.NOT, nim_Parser.OP5]:
                self.enterOuterAlt(localctx, 6)
                self.state = 261
                self.op5()
                pass
            elif token in [nim_Parser.DOT, nim_Parser.OP6]:
                self.enterOuterAlt(localctx, 7)
                self.state = 262
                self.op6()
                pass
            elif token in [nim_Parser.OP7]:
                self.enterOuterAlt(localctx, 8)
                self.state = 263
                self.op7()
                pass
            elif token in [nim_Parser.OP8]:
                self.enterOuterAlt(localctx, 9)
                self.state = 264
                self.op8()
                pass
            elif token in [nim_Parser.OP9]:
                self.enterOuterAlt(localctx, 10)
                self.state = 265
                self.op9()
                pass
            elif token in [nim_Parser.DOLLAR_SIGN, nim_Parser.OP10]:
                self.enterOuterAlt(localctx, 11)
                self.state = 266
                self.op10()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrefixOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def operator(self):
            return self.getTypedRuleContext(nim_Parser.OperatorContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_prefixOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrefixOperator" ):
                listener.enterPrefixOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrefixOperator" ):
                listener.exitPrefixOperator(self)




    def prefixOperator(self):

        localctx = nim_Parser.PrefixOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_prefixOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 269
            self.operator()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.AssignExprContext)
            else:
                return self.getTypedRuleContext(nim_Parser.AssignExprContext,i)


        def op1(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.Op1Context)
            else:
                return self.getTypedRuleContext(nim_Parser.Op1Context,i)


        def getRuleIndex(self):
            return nim_Parser.RULE_simpleExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleExpr" ):
                listener.enterSimpleExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleExpr" ):
                listener.exitSimpleExpr(self)




    def simpleExpr(self):

        localctx = nim_Parser.SimpleExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_simpleExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 271
            self.assignExpr()
            self.state = 277
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,3,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 272
                    self.op1()
                    self.state = 273
                    self.assignExpr() 
                self.state = 279
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,3,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def orExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.OrExprContext)
            else:
                return self.getTypedRuleContext(nim_Parser.OrExprContext,i)


        def op2(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.Op2Context)
            else:
                return self.getTypedRuleContext(nim_Parser.Op2Context,i)


        def getRuleIndex(self):
            return nim_Parser.RULE_assignExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignExpr" ):
                listener.enterAssignExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignExpr" ):
                listener.exitAssignExpr(self)




    def assignExpr(self):

        localctx = nim_Parser.AssignExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_assignExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 280
            self.orExpr()
            self.state = 286
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,4,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 281
                    self.op2()
                    self.state = 282
                    self.orExpr() 
                self.state = 288
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,4,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def andExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.AndExprContext)
            else:
                return self.getTypedRuleContext(nim_Parser.AndExprContext,i)


        def op3(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.Op3Context)
            else:
                return self.getTypedRuleContext(nim_Parser.Op3Context,i)


        def getRuleIndex(self):
            return nim_Parser.RULE_orExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrExpr" ):
                listener.enterOrExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrExpr" ):
                listener.exitOrExpr(self)




    def orExpr(self):

        localctx = nim_Parser.OrExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_orExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 289
            self.andExpr()
            self.state = 295
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,5,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 290
                    self.op3()
                    self.state = 291
                    self.andExpr() 
                self.state = 297
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,5,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AndExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def cmpExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.CmpExprContext)
            else:
                return self.getTypedRuleContext(nim_Parser.CmpExprContext,i)


        def op4(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.Op4Context)
            else:
                return self.getTypedRuleContext(nim_Parser.Op4Context,i)


        def getRuleIndex(self):
            return nim_Parser.RULE_andExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAndExpr" ):
                listener.enterAndExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAndExpr" ):
                listener.exitAndExpr(self)




    def andExpr(self):

        localctx = nim_Parser.AndExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_andExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 298
            self.cmpExpr()
            self.state = 304
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,6,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 299
                    self.op4()
                    self.state = 300
                    self.cmpExpr() 
                self.state = 306
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,6,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CmpExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sliceExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.SliceExprContext)
            else:
                return self.getTypedRuleContext(nim_Parser.SliceExprContext,i)


        def op5(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.Op5Context)
            else:
                return self.getTypedRuleContext(nim_Parser.Op5Context,i)


        def getRuleIndex(self):
            return nim_Parser.RULE_cmpExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCmpExpr" ):
                listener.enterCmpExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCmpExpr" ):
                listener.exitCmpExpr(self)




    def cmpExpr(self):

        localctx = nim_Parser.CmpExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_cmpExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 307
            self.sliceExpr()
            self.state = 313
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,7,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 308
                    self.op5()
                    self.state = 309
                    self.sliceExpr() 
                self.state = 315
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,7,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SliceExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ampExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.AmpExprContext)
            else:
                return self.getTypedRuleContext(nim_Parser.AmpExprContext,i)


        def op6(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.Op6Context)
            else:
                return self.getTypedRuleContext(nim_Parser.Op6Context,i)


        def getRuleIndex(self):
            return nim_Parser.RULE_sliceExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSliceExpr" ):
                listener.enterSliceExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSliceExpr" ):
                listener.exitSliceExpr(self)




    def sliceExpr(self):

        localctx = nim_Parser.SliceExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_sliceExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 316
            self.ampExpr()
            self.state = 322
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,8,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 317
                    self.op6()
                    self.state = 318
                    self.ampExpr() 
                self.state = 324
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,8,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AmpExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def plusExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.PlusExprContext)
            else:
                return self.getTypedRuleContext(nim_Parser.PlusExprContext,i)


        def op7(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.Op7Context)
            else:
                return self.getTypedRuleContext(nim_Parser.Op7Context,i)


        def getRuleIndex(self):
            return nim_Parser.RULE_ampExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAmpExpr" ):
                listener.enterAmpExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAmpExpr" ):
                listener.exitAmpExpr(self)




    def ampExpr(self):

        localctx = nim_Parser.AmpExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_ampExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 325
            self.plusExpr()
            self.state = 331
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,9,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 326
                    self.op7()
                    self.state = 327
                    self.plusExpr() 
                self.state = 333
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,9,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PlusExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mulExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.MulExprContext)
            else:
                return self.getTypedRuleContext(nim_Parser.MulExprContext,i)


        def op8(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.Op8Context)
            else:
                return self.getTypedRuleContext(nim_Parser.Op8Context,i)


        def getRuleIndex(self):
            return nim_Parser.RULE_plusExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlusExpr" ):
                listener.enterPlusExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlusExpr" ):
                listener.exitPlusExpr(self)




    def plusExpr(self):

        localctx = nim_Parser.PlusExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_plusExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 334
            self.mulExpr()
            self.state = 340
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,10,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 335
                    self.op8()
                    self.state = 336
                    self.mulExpr() 
                self.state = 342
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,10,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MulExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dollarExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.DollarExprContext)
            else:
                return self.getTypedRuleContext(nim_Parser.DollarExprContext,i)


        def op9(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.Op9Context)
            else:
                return self.getTypedRuleContext(nim_Parser.Op9Context,i)


        def getRuleIndex(self):
            return nim_Parser.RULE_mulExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMulExpr" ):
                listener.enterMulExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMulExpr" ):
                listener.exitMulExpr(self)




    def mulExpr(self):

        localctx = nim_Parser.MulExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_mulExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 343
            self.dollarExpr()
            self.state = 349
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,11,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 344
                    self.op9()
                    self.state = 345
                    self.dollarExpr() 
                self.state = 351
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,11,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DollarExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primary(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.PrimaryContext)
            else:
                return self.getTypedRuleContext(nim_Parser.PrimaryContext,i)


        def op10(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.Op10Context)
            else:
                return self.getTypedRuleContext(nim_Parser.Op10Context,i)


        def getRuleIndex(self):
            return nim_Parser.RULE_dollarExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDollarExpr" ):
                listener.enterDollarExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDollarExpr" ):
                listener.exitDollarExpr(self)




    def dollarExpr(self):

        localctx = nim_Parser.DollarExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_dollarExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 352
            self.primary()
            self.state = 358
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,12,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 353
                    self.op10()
                    self.state = 354
                    self.primary() 
                self.state = 360
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,12,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT_LIT(self):
            return self.getToken(nim_Parser.INT_LIT, 0)

        def INT8_LIT(self):
            return self.getToken(nim_Parser.INT8_LIT, 0)

        def INT16_LIT(self):
            return self.getToken(nim_Parser.INT16_LIT, 0)

        def INT32_LIT(self):
            return self.getToken(nim_Parser.INT32_LIT, 0)

        def INT64_LIT(self):
            return self.getToken(nim_Parser.INT64_LIT, 0)

        def UINT_LIT(self):
            return self.getToken(nim_Parser.UINT_LIT, 0)

        def UINT8_LIT(self):
            return self.getToken(nim_Parser.UINT8_LIT, 0)

        def UINT16_LIT(self):
            return self.getToken(nim_Parser.UINT16_LIT, 0)

        def UINT32_LIT(self):
            return self.getToken(nim_Parser.UINT32_LIT, 0)

        def UINT64_LIT(self):
            return self.getToken(nim_Parser.UINT64_LIT, 0)

        def FLOAT_LIT(self):
            return self.getToken(nim_Parser.FLOAT_LIT, 0)

        def FLOAT32_LIT(self):
            return self.getToken(nim_Parser.FLOAT32_LIT, 0)

        def FLOAT64_LIT(self):
            return self.getToken(nim_Parser.FLOAT64_LIT, 0)

        def STR_LIT(self):
            return self.getToken(nim_Parser.STR_LIT, 0)

        def RSTR_LIT(self):
            return self.getToken(nim_Parser.RSTR_LIT, 0)

        def TRIPLESTR_LIT(self):
            return self.getToken(nim_Parser.TRIPLESTR_LIT, 0)

        def CHAR_LIT(self):
            return self.getToken(nim_Parser.CHAR_LIT, 0)

        def NIL(self):
            return self.getToken(nim_Parser.NIL, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral" ):
                listener.enterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral" ):
                listener.exitLiteral(self)




    def literal(self):

        localctx = nim_Parser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 361
            _la = self._input.LA(1)
            if not(((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & ((1 << (nim_Parser.NIL - 79)) | (1 << (nim_Parser.INT_LIT - 79)) | (1 << (nim_Parser.INT8_LIT - 79)) | (1 << (nim_Parser.INT16_LIT - 79)) | (1 << (nim_Parser.INT32_LIT - 79)) | (1 << (nim_Parser.INT64_LIT - 79)) | (1 << (nim_Parser.UINT_LIT - 79)) | (1 << (nim_Parser.UINT8_LIT - 79)) | (1 << (nim_Parser.UINT16_LIT - 79)) | (1 << (nim_Parser.UINT32_LIT - 79)) | (1 << (nim_Parser.UINT64_LIT - 79)) | (1 << (nim_Parser.FLOAT_LIT - 79)) | (1 << (nim_Parser.FLOAT32_LIT - 79)) | (1 << (nim_Parser.FLOAT64_LIT - 79)) | (1 << (nim_Parser.CHAR_LIT - 79)) | (1 << (nim_Parser.STR_LIT - 79)) | (1 << (nim_Parser.TRIPLESTR_LIT - 79)) | (1 << (nim_Parser.RSTR_LIT - 79)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GeneralizedLitContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GENERALIZED_STR_LIT(self):
            return self.getToken(nim_Parser.GENERALIZED_STR_LIT, 0)

        def GENERALIZED_TRIPLESTR_LIT(self):
            return self.getToken(nim_Parser.GENERALIZED_TRIPLESTR_LIT, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_generalizedLit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneralizedLit" ):
                listener.enterGeneralizedLit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneralizedLit" ):
                listener.exitGeneralizedLit(self)




    def generalizedLit(self):

        localctx = nim_Parser.GeneralizedLitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_generalizedLit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 363
            _la = self._input.LA(1)
            if not(_la==nim_Parser.GENERALIZED_STR_LIT or _la==nim_Parser.GENERALIZED_TRIPLESTR_LIT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SymbolContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbolBody(self):
            return self.getTypedRuleContext(nim_Parser.SymbolBodyContext,0)


        def SYM_HEADER(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.SYM_HEADER)
            else:
                return self.getToken(nim_Parser.SYM_HEADER, i)

        def getRuleIndex(self):
            return nim_Parser.RULE_symbol

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSymbol" ):
                listener.enterSymbol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSymbol" ):
                listener.exitSymbol(self)




    def symbol(self):

        localctx = nim_Parser.SymbolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_symbol)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 370
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [nim_Parser.OPEN_PAREN, nim_Parser.CLOSE_PAREN, nim_Parser.OPEN_BRACK, nim_Parser.CLOSE_BRACK, nim_Parser.COLON, nim_Parser.DOT, nim_Parser.EQUALS, nim_Parser.IN, nim_Parser.OF, nim_Parser.NOT, nim_Parser.DOLLAR_SIGN, nim_Parser.OP0, nim_Parser.OP1, nim_Parser.OP2, nim_Parser.OP3, nim_Parser.OP4, nim_Parser.OP5, nim_Parser.OP6, nim_Parser.OP7, nim_Parser.OP8, nim_Parser.OP9, nim_Parser.OP10, nim_Parser.NIL, nim_Parser.IDENTIFIER, nim_Parser.INT_LIT, nim_Parser.INT8_LIT, nim_Parser.INT16_LIT, nim_Parser.INT32_LIT, nim_Parser.INT64_LIT, nim_Parser.UINT_LIT, nim_Parser.UINT8_LIT, nim_Parser.UINT16_LIT, nim_Parser.UINT32_LIT, nim_Parser.UINT64_LIT, nim_Parser.FLOAT_LIT, nim_Parser.FLOAT32_LIT, nim_Parser.FLOAT64_LIT, nim_Parser.CHAR_LIT, nim_Parser.STR_LIT, nim_Parser.TRIPLESTR_LIT, nim_Parser.RSTR_LIT]:
                self.state = 365
                self.symbolBody()
                pass
            elif token in [nim_Parser.SYM_HEADER]:
                self.state = 366
                self.match(nim_Parser.SYM_HEADER)
                self.state = 367
                self.symbolBody()
                self.state = 368
                self.match(nim_Parser.SYM_HEADER)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SymbolBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(nim_Parser.IDENTIFIER, 0)

        def literal(self):
            return self.getTypedRuleContext(nim_Parser.LiteralContext,0)


        def operator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.OperatorContext)
            else:
                return self.getTypedRuleContext(nim_Parser.OperatorContext,i)


        def OPEN_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.OPEN_PAREN)
            else:
                return self.getToken(nim_Parser.OPEN_PAREN, i)

        def CLOSE_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.CLOSE_PAREN)
            else:
                return self.getToken(nim_Parser.CLOSE_PAREN, i)

        def OPEN_BRACK(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.OPEN_BRACK)
            else:
                return self.getToken(nim_Parser.OPEN_BRACK, i)

        def CLOSE_BRACK(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.CLOSE_BRACK)
            else:
                return self.getToken(nim_Parser.CLOSE_BRACK, i)

        def EQUALS(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.EQUALS)
            else:
                return self.getToken(nim_Parser.EQUALS, i)

        def getRuleIndex(self):
            return nim_Parser.RULE_symbolBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSymbolBody" ):
                listener.enterSymbolBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSymbolBody" ):
                listener.exitSymbolBody(self)




    def symbolBody(self):

        localctx = nim_Parser.SymbolBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_symbolBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 384
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [nim_Parser.IDENTIFIER]:
                self.state = 372
                self.match(nim_Parser.IDENTIFIER)
                pass
            elif token in [nim_Parser.NIL, nim_Parser.INT_LIT, nim_Parser.INT8_LIT, nim_Parser.INT16_LIT, nim_Parser.INT32_LIT, nim_Parser.INT64_LIT, nim_Parser.UINT_LIT, nim_Parser.UINT8_LIT, nim_Parser.UINT16_LIT, nim_Parser.UINT32_LIT, nim_Parser.UINT64_LIT, nim_Parser.FLOAT_LIT, nim_Parser.FLOAT32_LIT, nim_Parser.FLOAT64_LIT, nim_Parser.CHAR_LIT, nim_Parser.STR_LIT, nim_Parser.TRIPLESTR_LIT, nim_Parser.RSTR_LIT]:
                self.state = 373
                self.literal()
                pass
            elif token in [nim_Parser.OPEN_PAREN, nim_Parser.CLOSE_PAREN, nim_Parser.OPEN_BRACK, nim_Parser.CLOSE_BRACK, nim_Parser.COLON, nim_Parser.DOT, nim_Parser.EQUALS, nim_Parser.IN, nim_Parser.OF, nim_Parser.NOT, nim_Parser.DOLLAR_SIGN, nim_Parser.OP0, nim_Parser.OP1, nim_Parser.OP2, nim_Parser.OP3, nim_Parser.OP4, nim_Parser.OP5, nim_Parser.OP6, nim_Parser.OP7, nim_Parser.OP8, nim_Parser.OP9, nim_Parser.OP10]:
                self.state = 380 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 380
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
                        if la_ == 1:
                            self.state = 374
                            self.operator()
                            pass

                        elif la_ == 2:
                            self.state = 375
                            self.match(nim_Parser.OPEN_PAREN)
                            pass

                        elif la_ == 3:
                            self.state = 376
                            self.match(nim_Parser.CLOSE_PAREN)
                            pass

                        elif la_ == 4:
                            self.state = 377
                            self.match(nim_Parser.OPEN_BRACK)
                            pass

                        elif la_ == 5:
                            self.state = 378
                            self.match(nim_Parser.CLOSE_BRACK)
                            pass

                        elif la_ == 6:
                            self.state = 379
                            self.match(nim_Parser.EQUALS)
                            pass



                    else:
                        raise NoViableAltException(self)
                    self.state = 382 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,15,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprColonEqExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def anyExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.AnyExprContext)
            else:
                return self.getTypedRuleContext(nim_Parser.AnyExprContext,i)


        def COLON(self):
            return self.getToken(nim_Parser.COLON, 0)

        def EQUALS(self):
            return self.getToken(nim_Parser.EQUALS, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_exprColonEqExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprColonEqExpr" ):
                listener.enterExprColonEqExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprColonEqExpr" ):
                listener.exitExprColonEqExpr(self)




    def exprColonEqExpr(self):

        localctx = nim_Parser.ExprColonEqExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_exprColonEqExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 386
            self.anyExpr()
            self.state = 389
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==nim_Parser.COLON or _la==nim_Parser.EQUALS:
                self.state = 387
                _la = self._input.LA(1)
                if not(_la==nim_Parser.COLON or _la==nim_Parser.EQUALS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 388
                self.anyExpr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayConstrContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACK(self):
            return self.getToken(nim_Parser.OPEN_BRACK, 0)

        def exprColonEqExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.ExprColonEqExprContext)
            else:
                return self.getTypedRuleContext(nim_Parser.ExprColonEqExprContext,i)


        def CLOSE_BRACK(self):
            return self.getToken(nim_Parser.CLOSE_BRACK, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.COMMA)
            else:
                return self.getToken(nim_Parser.COMMA, i)

        def getRuleIndex(self):
            return nim_Parser.RULE_arrayConstr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayConstr" ):
                listener.enterArrayConstr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayConstr" ):
                listener.exitArrayConstr(self)




    def arrayConstr(self):

        localctx = nim_Parser.ArrayConstrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_arrayConstr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 391
            self.match(nim_Parser.OPEN_BRACK)
            self.state = 392
            self.exprColonEqExpr()
            self.state = 397
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==nim_Parser.COMMA:
                self.state = 393
                self.match(nim_Parser.COMMA)
                self.state = 394
                self.exprColonEqExpr()
                self.state = 399
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 400
            self.match(nim_Parser.CLOSE_BRACK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TupleConstrContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(nim_Parser.OPEN_PAREN, 0)

        def exprColonEqExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.ExprColonEqExprContext)
            else:
                return self.getTypedRuleContext(nim_Parser.ExprColonEqExprContext,i)


        def CLOSE_PAREN(self):
            return self.getToken(nim_Parser.CLOSE_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.COMMA)
            else:
                return self.getToken(nim_Parser.COMMA, i)

        def getRuleIndex(self):
            return nim_Parser.RULE_tupleConstr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTupleConstr" ):
                listener.enterTupleConstr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTupleConstr" ):
                listener.exitTupleConstr(self)




    def tupleConstr(self):

        localctx = nim_Parser.TupleConstrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_tupleConstr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 402
            self.match(nim_Parser.OPEN_PAREN)
            self.state = 403
            self.exprColonEqExpr()
            self.state = 408
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==nim_Parser.COMMA:
                self.state = 404
                self.match(nim_Parser.COMMA)
                self.state = 405
                self.exprColonEqExpr()
                self.state = 410
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 411
            self.match(nim_Parser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentOrLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def generalizedLit(self):
            return self.getTypedRuleContext(nim_Parser.GeneralizedLitContext,0)


        def symbol(self):
            return self.getTypedRuleContext(nim_Parser.SymbolContext,0)


        def arrayConstr(self):
            return self.getTypedRuleContext(nim_Parser.ArrayConstrContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_identOrLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentOrLiteral" ):
                listener.enterIdentOrLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentOrLiteral" ):
                listener.exitIdentOrLiteral(self)




    def identOrLiteral(self):

        localctx = nim_Parser.IdentOrLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_identOrLiteral)
        try:
            self.state = 416
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,20,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 413
                self.generalizedLit()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 414
                self.symbol()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 415
                self.arrayConstr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AddressLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOLLAR_SIGN(self):
            return self.getToken(nim_Parser.DOLLAR_SIGN, 0)

        def identOrLiteral(self):
            return self.getTypedRuleContext(nim_Parser.IdentOrLiteralContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_addressLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAddressLiteral" ):
                listener.enterAddressLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAddressLiteral" ):
                listener.exitAddressLiteral(self)




    def addressLiteral(self):

        localctx = nim_Parser.AddressLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_addressLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 418
            self.match(nim_Parser.DOLLAR_SIGN)
            self.state = 419
            self.identOrLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimarySuffixSimpleBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal(self):
            return self.getTypedRuleContext(nim_Parser.LiteralContext,0)


        def generalizedLit(self):
            return self.getTypedRuleContext(nim_Parser.GeneralizedLitContext,0)


        def addressLiteral(self):
            return self.getTypedRuleContext(nim_Parser.AddressLiteralContext,0)


        def IDENTIFIER(self):
            return self.getToken(nim_Parser.IDENTIFIER, 0)

        def arrayConstr(self):
            return self.getTypedRuleContext(nim_Parser.ArrayConstrContext,0)


        def tupleConstr(self):
            return self.getTypedRuleContext(nim_Parser.TupleConstrContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_primarySuffixSimpleBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimarySuffixSimpleBody" ):
                listener.enterPrimarySuffixSimpleBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimarySuffixSimpleBody" ):
                listener.exitPrimarySuffixSimpleBody(self)




    def primarySuffixSimpleBody(self):

        localctx = nim_Parser.PrimarySuffixSimpleBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_primarySuffixSimpleBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 429
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [nim_Parser.IDENTIFIER]:
                self.state = 421
                self.match(nim_Parser.IDENTIFIER)
                self.state = 424
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [nim_Parser.OPEN_BRACK]:
                    self.state = 422
                    self.arrayConstr()
                    pass
                elif token in [nim_Parser.OPEN_PAREN]:
                    self.state = 423
                    self.tupleConstr()
                    pass
                elif token in [nim_Parser.EOF]:
                    pass
                else:
                    pass
                pass
            elif token in [nim_Parser.NIL, nim_Parser.INT_LIT, nim_Parser.INT8_LIT, nim_Parser.INT16_LIT, nim_Parser.INT32_LIT, nim_Parser.INT64_LIT, nim_Parser.UINT_LIT, nim_Parser.UINT8_LIT, nim_Parser.UINT16_LIT, nim_Parser.UINT32_LIT, nim_Parser.UINT64_LIT, nim_Parser.FLOAT_LIT, nim_Parser.FLOAT32_LIT, nim_Parser.FLOAT64_LIT, nim_Parser.CHAR_LIT, nim_Parser.STR_LIT, nim_Parser.TRIPLESTR_LIT, nim_Parser.RSTR_LIT]:
                self.state = 426
                self.literal()
                pass
            elif token in [nim_Parser.GENERALIZED_STR_LIT, nim_Parser.GENERALIZED_TRIPLESTR_LIT]:
                self.state = 427
                self.generalizedLit()
                pass
            elif token in [nim_Parser.DOLLAR_SIGN]:
                self.state = 428
                self.addressLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimarySuffixContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(nim_Parser.OPEN_PAREN, 0)

        def exprColonEqExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.ExprColonEqExprContext)
            else:
                return self.getTypedRuleContext(nim_Parser.ExprColonEqExprContext,i)


        def CLOSE_PAREN(self):
            return self.getToken(nim_Parser.CLOSE_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.COMMA)
            else:
                return self.getToken(nim_Parser.COMMA, i)

        def DOT(self):
            return self.getToken(nim_Parser.DOT, 0)

        def symbol(self):
            return self.getTypedRuleContext(nim_Parser.SymbolContext,0)


        def generalizedLit(self):
            return self.getTypedRuleContext(nim_Parser.GeneralizedLitContext,0)


        def OPEN_BRACK(self):
            return self.getToken(nim_Parser.OPEN_BRACK, 0)

        def exprList(self):
            return self.getTypedRuleContext(nim_Parser.ExprListContext,0)


        def CLOSE_BRACK(self):
            return self.getToken(nim_Parser.CLOSE_BRACK, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_primarySuffix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimarySuffix" ):
                listener.enterPrimarySuffix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimarySuffix" ):
                listener.exitPrimarySuffix(self)




    def primarySuffix(self):

        localctx = nim_Parser.PrimarySuffixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_primarySuffix)
        self._la = 0 # Token type
        try:
            self.state = 451
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [nim_Parser.OPEN_PAREN]:
                self.enterOuterAlt(localctx, 1)
                self.state = 431
                self.match(nim_Parser.OPEN_PAREN)
                self.state = 432
                self.exprColonEqExpr()
                self.state = 437
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==nim_Parser.COMMA:
                    self.state = 433
                    self.match(nim_Parser.COMMA)
                    self.state = 434
                    self.exprColonEqExpr()
                    self.state = 439
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 440
                self.match(nim_Parser.CLOSE_PAREN)
                pass
            elif token in [nim_Parser.DOT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 442
                self.match(nim_Parser.DOT)
                self.state = 443
                self.symbol()
                self.state = 445
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,24,self._ctx)
                if la_ == 1:
                    self.state = 444
                    self.generalizedLit()


                pass
            elif token in [nim_Parser.OPEN_BRACK]:
                self.enterOuterAlt(localctx, 3)
                self.state = 447
                self.match(nim_Parser.OPEN_BRACK)
                self.state = 448
                self.exprList()
                self.state = 449
                self.match(nim_Parser.CLOSE_BRACK)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeKeyw(self):
            return self.getTypedRuleContext(nim_Parser.TypeKeywContext,0)


        def simpleExpr(self):
            return self.getTypedRuleContext(nim_Parser.SimpleExprContext,0)


        def prefixOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.PrefixOperatorContext)
            else:
                return self.getTypedRuleContext(nim_Parser.PrefixOperatorContext,i)


        def ind(self):
            return self.getTypedRuleContext(nim_Parser.IndContext,0)


        def expr(self):
            return self.getTypedRuleContext(nim_Parser.ExprContext,0)


        def ded(self):
            return self.getTypedRuleContext(nim_Parser.DedContext,0)


        def identOrLiteral(self):
            return self.getTypedRuleContext(nim_Parser.IdentOrLiteralContext,0)


        def primarySuffix(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.PrimarySuffixContext)
            else:
                return self.getTypedRuleContext(nim_Parser.PrimarySuffixContext,i)


        def getRuleIndex(self):
            return nim_Parser.RULE_primary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimary" ):
                listener.enterPrimary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimary" ):
                listener.exitPrimary(self)




    def primary(self):

        localctx = nim_Parser.PrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_primary)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 481
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [nim_Parser.OBJECT, nim_Parser.REF]:
                self.state = 453
                self.typeKeyw()
                self.state = 459
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [nim_Parser.OPEN_PAREN, nim_Parser.CLOSE_PAREN, nim_Parser.OPEN_BRACK, nim_Parser.CLOSE_BRACK, nim_Parser.OBJECT, nim_Parser.COLON, nim_Parser.DOT, nim_Parser.EQUALS, nim_Parser.IN, nim_Parser.OF, nim_Parser.NOT, nim_Parser.DOLLAR_SIGN, nim_Parser.OP0, nim_Parser.OP1, nim_Parser.OP2, nim_Parser.OP3, nim_Parser.OP4, nim_Parser.OP5, nim_Parser.OP6, nim_Parser.OP7, nim_Parser.OP8, nim_Parser.OP9, nim_Parser.OP10, nim_Parser.REF, nim_Parser.NIL, nim_Parser.SYM_HEADER, nim_Parser.IDENTIFIER, nim_Parser.INT_LIT, nim_Parser.INT8_LIT, nim_Parser.INT16_LIT, nim_Parser.INT32_LIT, nim_Parser.INT64_LIT, nim_Parser.UINT_LIT, nim_Parser.UINT8_LIT, nim_Parser.UINT16_LIT, nim_Parser.UINT32_LIT, nim_Parser.UINT64_LIT, nim_Parser.FLOAT_LIT, nim_Parser.FLOAT32_LIT, nim_Parser.FLOAT64_LIT, nim_Parser.CHAR_LIT, nim_Parser.STR_LIT, nim_Parser.TRIPLESTR_LIT, nim_Parser.RSTR_LIT, nim_Parser.GENERALIZED_STR_LIT, nim_Parser.GENERALIZED_TRIPLESTR_LIT]:
                    self.state = 454
                    self.simpleExpr()
                    pass
                elif token in [nim_Parser.INDENT]:
                    self.state = 455
                    self.ind()
                    self.state = 456
                    self.expr()
                    self.state = 457
                    self.ded()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [nim_Parser.OPEN_PAREN, nim_Parser.CLOSE_PAREN, nim_Parser.OPEN_BRACK, nim_Parser.CLOSE_BRACK, nim_Parser.COLON, nim_Parser.DOT, nim_Parser.EQUALS, nim_Parser.IN, nim_Parser.OF, nim_Parser.NOT, nim_Parser.DOLLAR_SIGN, nim_Parser.OP0, nim_Parser.OP1, nim_Parser.OP2, nim_Parser.OP3, nim_Parser.OP4, nim_Parser.OP5, nim_Parser.OP6, nim_Parser.OP7, nim_Parser.OP8, nim_Parser.OP9, nim_Parser.OP10, nim_Parser.NIL, nim_Parser.SYM_HEADER, nim_Parser.IDENTIFIER, nim_Parser.INT_LIT, nim_Parser.INT8_LIT, nim_Parser.INT16_LIT, nim_Parser.INT32_LIT, nim_Parser.INT64_LIT, nim_Parser.UINT_LIT, nim_Parser.UINT8_LIT, nim_Parser.UINT16_LIT, nim_Parser.UINT32_LIT, nim_Parser.UINT64_LIT, nim_Parser.FLOAT_LIT, nim_Parser.FLOAT32_LIT, nim_Parser.FLOAT64_LIT, nim_Parser.CHAR_LIT, nim_Parser.STR_LIT, nim_Parser.TRIPLESTR_LIT, nim_Parser.RSTR_LIT, nim_Parser.GENERALIZED_STR_LIT, nim_Parser.GENERALIZED_TRIPLESTR_LIT]:
                self.state = 464
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,27,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 461
                        self.prefixOperator() 
                    self.state = 466
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,27,self._ctx)

                self.state = 479
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
                if la_ == 1:
                    self.state = 467
                    self.identOrLiteral()
                    self.state = 471
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,28,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 468
                            self.primarySuffix() 
                        self.state = 473
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,28,self._ctx)

                    pass

                elif la_ == 2:
                    self.state = 475 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 474
                            self.primarySuffix()

                        else:
                            raise NoViableAltException(self)
                        self.state = 477 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,29,self._ctx)

                    pass


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPORT(self):
            return self.getToken(nim_Parser.IMPORT, 0)

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.IDENTIFIER)
            else:
                return self.getToken(nim_Parser.IDENTIFIER, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.COMMA)
            else:
                return self.getToken(nim_Parser.COMMA, i)

        def getRuleIndex(self):
            return nim_Parser.RULE_importStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportStmt" ):
                listener.enterImportStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportStmt" ):
                listener.exitImportStmt(self)




    def importStmt(self):

        localctx = nim_Parser.ImportStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_importStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 483
            self.match(nim_Parser.IMPORT)
            self.state = 484
            self.match(nim_Parser.IDENTIFIER)
            self.state = 489
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,32,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 485
                    self.match(nim_Parser.COMMA)
                    self.state = 486
                    self.match(nim_Parser.IDENTIFIER) 
                self.state = 491
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,32,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FromStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(nim_Parser.FROM, 0)

        def IDENTIFIER(self):
            return self.getToken(nim_Parser.IDENTIFIER, 0)

        def importStmt(self):
            return self.getTypedRuleContext(nim_Parser.ImportStmtContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_fromStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFromStmt" ):
                listener.enterFromStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFromStmt" ):
                listener.exitFromStmt(self)




    def fromStmt(self):

        localctx = nim_Parser.FromStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_fromStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 492
            self.match(nim_Parser.FROM)
            self.state = 493
            self.match(nim_Parser.IDENTIFIER)
            self.state = 494
            self.importStmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BLOCK(self):
            return self.getToken(nim_Parser.BLOCK, 0)

        def IDENTIFIER(self):
            return self.getToken(nim_Parser.IDENTIFIER, 0)

        def COLON(self):
            return self.getToken(nim_Parser.COLON, 0)

        def ind(self):
            return self.getTypedRuleContext(nim_Parser.IndContext,0)


        def ded(self):
            return self.getTypedRuleContext(nim_Parser.DedContext,0)


        def simpleExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.SimpleExprContext)
            else:
                return self.getTypedRuleContext(nim_Parser.SimpleExprContext,i)


        def getRuleIndex(self):
            return nim_Parser.RULE_blockExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockExpr" ):
                listener.enterBlockExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockExpr" ):
                listener.exitBlockExpr(self)




    def blockExpr(self):

        localctx = nim_Parser.BlockExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_blockExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 496
            self.match(nim_Parser.BLOCK)
            self.state = 497
            self.match(nim_Parser.IDENTIFIER)
            self.state = 498
            self.match(nim_Parser.COLON)
            self.state = 499
            self.ind()
            self.state = 501 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 500
                self.simpleExpr()
                self.state = 503 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nim_Parser.OPEN_PAREN) | (1 << nim_Parser.CLOSE_PAREN) | (1 << nim_Parser.OPEN_BRACK) | (1 << nim_Parser.CLOSE_BRACK) | (1 << nim_Parser.OBJECT) | (1 << nim_Parser.COLON) | (1 << nim_Parser.DOT) | (1 << nim_Parser.EQUALS) | (1 << nim_Parser.IN) | (1 << nim_Parser.OF) | (1 << nim_Parser.NOT) | (1 << nim_Parser.DOLLAR_SIGN) | (1 << nim_Parser.OP0) | (1 << nim_Parser.OP1) | (1 << nim_Parser.OP2) | (1 << nim_Parser.OP3) | (1 << nim_Parser.OP4) | (1 << nim_Parser.OP5) | (1 << nim_Parser.OP6) | (1 << nim_Parser.OP7) | (1 << nim_Parser.OP8) | (1 << nim_Parser.OP9) | (1 << nim_Parser.OP10))) != 0) or ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & ((1 << (nim_Parser.REF - 73)) | (1 << (nim_Parser.NIL - 73)) | (1 << (nim_Parser.SYM_HEADER - 73)) | (1 << (nim_Parser.IDENTIFIER - 73)) | (1 << (nim_Parser.INT_LIT - 73)) | (1 << (nim_Parser.INT8_LIT - 73)) | (1 << (nim_Parser.INT16_LIT - 73)) | (1 << (nim_Parser.INT32_LIT - 73)) | (1 << (nim_Parser.INT64_LIT - 73)) | (1 << (nim_Parser.UINT_LIT - 73)) | (1 << (nim_Parser.UINT8_LIT - 73)) | (1 << (nim_Parser.UINT16_LIT - 73)) | (1 << (nim_Parser.UINT32_LIT - 73)) | (1 << (nim_Parser.UINT64_LIT - 73)) | (1 << (nim_Parser.FLOAT_LIT - 73)) | (1 << (nim_Parser.FLOAT32_LIT - 73)) | (1 << (nim_Parser.FLOAT64_LIT - 73)) | (1 << (nim_Parser.CHAR_LIT - 73)) | (1 << (nim_Parser.STR_LIT - 73)) | (1 << (nim_Parser.TRIPLESTR_LIT - 73)) | (1 << (nim_Parser.RSTR_LIT - 73)) | (1 << (nim_Parser.GENERALIZED_STR_LIT - 73)) | (1 << (nim_Parser.GENERALIZED_TRIPLESTR_LIT - 73)))) != 0)):
                    break

            self.state = 505
            self.ded()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def forStmt(self):
            return self.getTypedRuleContext(nim_Parser.ForStmtContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_forExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForExpr" ):
                listener.enterForExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForExpr" ):
                listener.exitForExpr(self)




    def forExpr(self):

        localctx = nim_Parser.ForExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_forExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 507
            self.forStmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnyExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleExpr(self):
            return self.getTypedRuleContext(nim_Parser.SimpleExprContext,0)


        def expr(self):
            return self.getTypedRuleContext(nim_Parser.ExprContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_anyExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnyExpr" ):
                listener.enterAnyExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnyExpr" ):
                listener.exitAnyExpr(self)




    def anyExpr(self):

        localctx = nim_Parser.AnyExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_anyExpr)
        try:
            self.state = 511
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [nim_Parser.OPEN_PAREN, nim_Parser.CLOSE_PAREN, nim_Parser.OPEN_BRACK, nim_Parser.CLOSE_BRACK, nim_Parser.OBJECT, nim_Parser.COLON, nim_Parser.DOT, nim_Parser.EQUALS, nim_Parser.IN, nim_Parser.OF, nim_Parser.NOT, nim_Parser.DOLLAR_SIGN, nim_Parser.OP0, nim_Parser.OP1, nim_Parser.OP2, nim_Parser.OP3, nim_Parser.OP4, nim_Parser.OP5, nim_Parser.OP6, nim_Parser.OP7, nim_Parser.OP8, nim_Parser.OP9, nim_Parser.OP10, nim_Parser.REF, nim_Parser.NIL, nim_Parser.SYM_HEADER, nim_Parser.IDENTIFIER, nim_Parser.INT_LIT, nim_Parser.INT8_LIT, nim_Parser.INT16_LIT, nim_Parser.INT32_LIT, nim_Parser.INT64_LIT, nim_Parser.UINT_LIT, nim_Parser.UINT8_LIT, nim_Parser.UINT16_LIT, nim_Parser.UINT32_LIT, nim_Parser.UINT64_LIT, nim_Parser.FLOAT_LIT, nim_Parser.FLOAT32_LIT, nim_Parser.FLOAT64_LIT, nim_Parser.CHAR_LIT, nim_Parser.STR_LIT, nim_Parser.TRIPLESTR_LIT, nim_Parser.RSTR_LIT, nim_Parser.GENERALIZED_STR_LIT, nim_Parser.GENERALIZED_TRIPLESTR_LIT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 509
                self.simpleExpr()
                pass
            elif token in [nim_Parser.CASE, nim_Parser.IF, nim_Parser.FOR, nim_Parser.WHEN, nim_Parser.BLOCK]:
                self.enterOuterAlt(localctx, 2)
                self.state = 510
                self.expr()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnyStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stmt(self):
            return self.getTypedRuleContext(nim_Parser.StmtContext,0)


        def exprStmt(self):
            return self.getTypedRuleContext(nim_Parser.ExprStmtContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_anyStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnyStmt" ):
                listener.enterAnyStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnyStmt" ):
                listener.exitAnyStmt(self)




    def anyStmt(self):

        localctx = nim_Parser.AnyStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_anyStmt)
        try:
            self.state = 515
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [nim_Parser.TYPE, nim_Parser.VARIABLE, nim_Parser.LET, nim_Parser.CONST, nim_Parser.PROC, nim_Parser.RETURN, nim_Parser.CASE, nim_Parser.IF, nim_Parser.WHILE, nim_Parser.FOR, nim_Parser.CONTINUE, nim_Parser.BREAK, nim_Parser.TEMPLATE, nim_Parser.WHEN, nim_Parser.IMPORT, nim_Parser.FROM, nim_Parser.BLOCK, nim_Parser.MACRO, nim_Parser.DISCARD]:
                self.enterOuterAlt(localctx, 1)
                self.state = 513
                self.stmt()
                pass
            elif token in [nim_Parser.OPEN_PAREN, nim_Parser.CLOSE_PAREN, nim_Parser.OPEN_BRACK, nim_Parser.CLOSE_BRACK, nim_Parser.OBJECT, nim_Parser.COLON, nim_Parser.DOT, nim_Parser.EQUALS, nim_Parser.IN, nim_Parser.OF, nim_Parser.NOT, nim_Parser.DOLLAR_SIGN, nim_Parser.OP0, nim_Parser.OP1, nim_Parser.OP2, nim_Parser.OP3, nim_Parser.OP4, nim_Parser.OP5, nim_Parser.OP6, nim_Parser.OP7, nim_Parser.OP8, nim_Parser.OP9, nim_Parser.OP10, nim_Parser.REF, nim_Parser.NIL, nim_Parser.SYM_HEADER, nim_Parser.IDENTIFIER, nim_Parser.INT_LIT, nim_Parser.INT8_LIT, nim_Parser.INT16_LIT, nim_Parser.INT32_LIT, nim_Parser.INT64_LIT, nim_Parser.UINT_LIT, nim_Parser.UINT8_LIT, nim_Parser.UINT16_LIT, nim_Parser.UINT32_LIT, nim_Parser.UINT64_LIT, nim_Parser.FLOAT_LIT, nim_Parser.FLOAT32_LIT, nim_Parser.FLOAT64_LIT, nim_Parser.CHAR_LIT, nim_Parser.STR_LIT, nim_Parser.TRIPLESTR_LIT, nim_Parser.RSTR_LIT, nim_Parser.GENERALIZED_STR_LIT, nim_Parser.GENERALIZED_TRIPLESTR_LIT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 514
                self.exprStmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CondExprBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def anyExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.AnyExprContext)
            else:
                return self.getTypedRuleContext(nim_Parser.AnyExprContext,i)


        def ELSE(self):
            return self.getToken(nim_Parser.ELSE, 0)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.COLON)
            else:
                return self.getToken(nim_Parser.COLON, i)

        def ELIF(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.ELIF)
            else:
                return self.getToken(nim_Parser.ELIF, i)

        def ind(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.IndContext)
            else:
                return self.getTypedRuleContext(nim_Parser.IndContext,i)


        def ded(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.DedContext)
            else:
                return self.getTypedRuleContext(nim_Parser.DedContext,i)


        def getRuleIndex(self):
            return nim_Parser.RULE_condExprBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondExprBody" ):
                listener.enterCondExprBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondExprBody" ):
                listener.exitCondExprBody(self)




    def condExprBody(self):

        localctx = nim_Parser.CondExprBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_condExprBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 517
            self.anyExpr()
            self.state = 530
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==nim_Parser.ELIF:
                self.state = 518
                self.match(nim_Parser.ELIF)

                self.state = 519
                self.anyExpr()
                self.state = 520
                self.match(nim_Parser.COLON)
                self.state = 526
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [nim_Parser.INDENT]:
                    self.state = 521
                    self.ind()
                    self.state = 522
                    self.anyExpr()
                    self.state = 523
                    self.ded()
                    pass
                elif token in [nim_Parser.OPEN_PAREN, nim_Parser.CLOSE_PAREN, nim_Parser.OPEN_BRACK, nim_Parser.CLOSE_BRACK, nim_Parser.OBJECT, nim_Parser.COLON, nim_Parser.DOT, nim_Parser.EQUALS, nim_Parser.IN, nim_Parser.OF, nim_Parser.NOT, nim_Parser.DOLLAR_SIGN, nim_Parser.OP0, nim_Parser.OP1, nim_Parser.OP2, nim_Parser.OP3, nim_Parser.OP4, nim_Parser.OP5, nim_Parser.OP6, nim_Parser.OP7, nim_Parser.OP8, nim_Parser.OP9, nim_Parser.OP10, nim_Parser.CASE, nim_Parser.IF, nim_Parser.FOR, nim_Parser.WHEN, nim_Parser.REF, nim_Parser.BLOCK, nim_Parser.NIL, nim_Parser.SYM_HEADER, nim_Parser.IDENTIFIER, nim_Parser.INT_LIT, nim_Parser.INT8_LIT, nim_Parser.INT16_LIT, nim_Parser.INT32_LIT, nim_Parser.INT64_LIT, nim_Parser.UINT_LIT, nim_Parser.UINT8_LIT, nim_Parser.UINT16_LIT, nim_Parser.UINT32_LIT, nim_Parser.UINT64_LIT, nim_Parser.FLOAT_LIT, nim_Parser.FLOAT32_LIT, nim_Parser.FLOAT64_LIT, nim_Parser.CHAR_LIT, nim_Parser.STR_LIT, nim_Parser.TRIPLESTR_LIT, nim_Parser.RSTR_LIT, nim_Parser.GENERALIZED_STR_LIT, nim_Parser.GENERALIZED_TRIPLESTR_LIT]:
                    self.state = 525
                    self.anyExpr()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 532
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 533
            self.match(nim_Parser.ELSE)
            self.state = 534
            self.match(nim_Parser.COLON)
            self.state = 540
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [nim_Parser.INDENT]:
                self.state = 535
                self.ind()
                self.state = 536
                self.anyExpr()
                self.state = 537
                self.ded()
                pass
            elif token in [nim_Parser.OPEN_PAREN, nim_Parser.CLOSE_PAREN, nim_Parser.OPEN_BRACK, nim_Parser.CLOSE_BRACK, nim_Parser.OBJECT, nim_Parser.COLON, nim_Parser.DOT, nim_Parser.EQUALS, nim_Parser.IN, nim_Parser.OF, nim_Parser.NOT, nim_Parser.DOLLAR_SIGN, nim_Parser.OP0, nim_Parser.OP1, nim_Parser.OP2, nim_Parser.OP3, nim_Parser.OP4, nim_Parser.OP5, nim_Parser.OP6, nim_Parser.OP7, nim_Parser.OP8, nim_Parser.OP9, nim_Parser.OP10, nim_Parser.CASE, nim_Parser.IF, nim_Parser.FOR, nim_Parser.WHEN, nim_Parser.REF, nim_Parser.BLOCK, nim_Parser.NIL, nim_Parser.SYM_HEADER, nim_Parser.IDENTIFIER, nim_Parser.INT_LIT, nim_Parser.INT8_LIT, nim_Parser.INT16_LIT, nim_Parser.INT32_LIT, nim_Parser.INT64_LIT, nim_Parser.UINT_LIT, nim_Parser.UINT8_LIT, nim_Parser.UINT16_LIT, nim_Parser.UINT32_LIT, nim_Parser.UINT64_LIT, nim_Parser.FLOAT_LIT, nim_Parser.FLOAT32_LIT, nim_Parser.FLOAT64_LIT, nim_Parser.CHAR_LIT, nim_Parser.STR_LIT, nim_Parser.TRIPLESTR_LIT, nim_Parser.RSTR_LIT, nim_Parser.GENERALIZED_STR_LIT, nim_Parser.GENERALIZED_TRIPLESTR_LIT]:
                self.state = 539
                self.anyExpr()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CondExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def anyExpr(self):
            return self.getTypedRuleContext(nim_Parser.AnyExprContext,0)


        def COLON(self):
            return self.getToken(nim_Parser.COLON, 0)

        def ind(self):
            return self.getTypedRuleContext(nim_Parser.IndContext,0)


        def condExprBody(self):
            return self.getTypedRuleContext(nim_Parser.CondExprBodyContext,0)


        def ded(self):
            return self.getTypedRuleContext(nim_Parser.DedContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_condExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondExpr" ):
                listener.enterCondExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondExpr" ):
                listener.exitCondExpr(self)




    def condExpr(self):

        localctx = nim_Parser.CondExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_condExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 542
            self.anyExpr()
            self.state = 543
            self.match(nim_Parser.COLON)
            self.state = 549
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [nim_Parser.INDENT]:
                self.state = 544
                self.ind()
                self.state = 545
                self.condExprBody()
                self.state = 546
                self.ded()
                pass
            elif token in [nim_Parser.OPEN_PAREN, nim_Parser.CLOSE_PAREN, nim_Parser.OPEN_BRACK, nim_Parser.CLOSE_BRACK, nim_Parser.OBJECT, nim_Parser.COLON, nim_Parser.DOT, nim_Parser.EQUALS, nim_Parser.IN, nim_Parser.OF, nim_Parser.NOT, nim_Parser.DOLLAR_SIGN, nim_Parser.OP0, nim_Parser.OP1, nim_Parser.OP2, nim_Parser.OP3, nim_Parser.OP4, nim_Parser.OP5, nim_Parser.OP6, nim_Parser.OP7, nim_Parser.OP8, nim_Parser.OP9, nim_Parser.OP10, nim_Parser.CASE, nim_Parser.IF, nim_Parser.FOR, nim_Parser.WHEN, nim_Parser.REF, nim_Parser.BLOCK, nim_Parser.NIL, nim_Parser.SYM_HEADER, nim_Parser.IDENTIFIER, nim_Parser.INT_LIT, nim_Parser.INT8_LIT, nim_Parser.INT16_LIT, nim_Parser.INT32_LIT, nim_Parser.INT64_LIT, nim_Parser.UINT_LIT, nim_Parser.UINT8_LIT, nim_Parser.UINT16_LIT, nim_Parser.UINT32_LIT, nim_Parser.UINT64_LIT, nim_Parser.FLOAT_LIT, nim_Parser.FLOAT32_LIT, nim_Parser.FLOAT64_LIT, nim_Parser.CHAR_LIT, nim_Parser.STR_LIT, nim_Parser.TRIPLESTR_LIT, nim_Parser.RSTR_LIT, nim_Parser.GENERALIZED_STR_LIT, nim_Parser.GENERALIZED_TRIPLESTR_LIT]:
                self.state = 548
                self.condExprBody()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CaseExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(nim_Parser.CASE, 0)

        def simpleExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.SimpleExprContext)
            else:
                return self.getTypedRuleContext(nim_Parser.SimpleExprContext,i)


        def ofBranchesExpr(self):
            return self.getTypedRuleContext(nim_Parser.OfBranchesExprContext,0)


        def COLON(self):
            return self.getToken(nim_Parser.COLON, 0)

        def ind(self):
            return self.getTypedRuleContext(nim_Parser.IndContext,0)


        def ded(self):
            return self.getTypedRuleContext(nim_Parser.DedContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_caseExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseExpr" ):
                listener.enterCaseExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseExpr" ):
                listener.exitCaseExpr(self)




    def caseExpr(self):

        localctx = nim_Parser.CaseExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_caseExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 551
            self.match(nim_Parser.CASE)
            self.state = 552
            self.simpleExpr()
            self.state = 555
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==nim_Parser.COLON:
                self.state = 553
                self.match(nim_Parser.COLON)
                self.state = 554
                self.simpleExpr()


            self.state = 562
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [nim_Parser.INDENT]:
                self.state = 557
                self.ind()
                self.state = 558
                self.ofBranchesExpr()
                self.state = 559
                self.ded()
                pass
            elif token in [nim_Parser.OF]:
                self.state = 561
                self.ofBranchesExpr()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OfBranchExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OF(self):
            return self.getToken(nim_Parser.OF, 0)

        def exprList(self):
            return self.getTypedRuleContext(nim_Parser.ExprListContext,0)


        def COLON(self):
            return self.getToken(nim_Parser.COLON, 0)

        def simpleExpr(self):
            return self.getTypedRuleContext(nim_Parser.SimpleExprContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_ofBranchExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOfBranchExpr" ):
                listener.enterOfBranchExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOfBranchExpr" ):
                listener.exitOfBranchExpr(self)




    def ofBranchExpr(self):

        localctx = nim_Parser.OfBranchExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_ofBranchExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 564
            self.match(nim_Parser.OF)
            self.state = 565
            self.exprList()
            self.state = 566
            self.match(nim_Parser.COLON)
            self.state = 567
            self.simpleExpr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OfBranchesExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ofBranchExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.OfBranchExprContext)
            else:
                return self.getTypedRuleContext(nim_Parser.OfBranchExprContext,i)


        def getRuleIndex(self):
            return nim_Parser.RULE_ofBranchesExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOfBranchesExpr" ):
                listener.enterOfBranchesExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOfBranchesExpr" ):
                listener.exitOfBranchesExpr(self)




    def ofBranchesExpr(self):

        localctx = nim_Parser.OfBranchesExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_ofBranchesExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 570 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 569
                    self.ofBranchExpr()

                else:
                    raise NoViableAltException(self)
                self.state = 572 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,42,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhenExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(nim_Parser.WHEN, 0)

        def condExpr(self):
            return self.getTypedRuleContext(nim_Parser.CondExprContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_whenExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhenExpr" ):
                listener.enterWhenExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhenExpr" ):
                listener.exitWhenExpr(self)




    def whenExpr(self):

        localctx = nim_Parser.WhenExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_whenExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 574
            self.match(nim_Parser.WHEN)
            self.state = 575
            self.condExpr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(nim_Parser.IF, 0)

        def condExpr(self):
            return self.getTypedRuleContext(nim_Parser.CondExprContext,0)


        def NOT(self):
            return self.getToken(nim_Parser.NOT, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_ifExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfExpr" ):
                listener.enterIfExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfExpr" ):
                listener.exitIfExpr(self)




    def ifExpr(self):

        localctx = nim_Parser.IfExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_ifExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 577
            self.match(nim_Parser.IF)
            self.state = 579
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
            if la_ == 1:
                self.state = 578
                self.match(nim_Parser.NOT)


            self.state = 581
            self.condExpr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.SimpleExprContext)
            else:
                return self.getTypedRuleContext(nim_Parser.SimpleExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.COMMA)
            else:
                return self.getToken(nim_Parser.COMMA, i)

        def getRuleIndex(self):
            return nim_Parser.RULE_exprList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprList" ):
                listener.enterExprList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprList" ):
                listener.exitExprList(self)




    def exprList(self):

        localctx = nim_Parser.ExprListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_exprList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 583
            self.simpleExpr()
            self.state = 588
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==nim_Parser.COMMA:
                self.state = 584
                self.match(nim_Parser.COMMA)
                self.state = 585
                self.simpleExpr()
                self.state = 590
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CaseStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(nim_Parser.CASE, 0)

        def simpleExpr(self):
            return self.getTypedRuleContext(nim_Parser.SimpleExprContext,0)


        def ofBranchesStmt(self):
            return self.getTypedRuleContext(nim_Parser.OfBranchesStmtContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_caseStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseStmt" ):
                listener.enterCaseStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseStmt" ):
                listener.exitCaseStmt(self)




    def caseStmt(self):

        localctx = nim_Parser.CaseStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_caseStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 591
            self.match(nim_Parser.CASE)
            self.state = 592
            self.simpleExpr()
            self.state = 593
            self.ofBranchesStmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OfBranchesStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ofBranchStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.OfBranchStmtContext)
            else:
                return self.getTypedRuleContext(nim_Parser.OfBranchStmtContext,i)


        def ELSE(self):
            return self.getToken(nim_Parser.ELSE, 0)

        def COLON(self):
            return self.getToken(nim_Parser.COLON, 0)

        def anyStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.AnyStmtContext)
            else:
                return self.getTypedRuleContext(nim_Parser.AnyStmtContext,i)


        def ind(self):
            return self.getTypedRuleContext(nim_Parser.IndContext,0)


        def ded(self):
            return self.getTypedRuleContext(nim_Parser.DedContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_ofBranchesStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOfBranchesStmt" ):
                listener.enterOfBranchesStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOfBranchesStmt" ):
                listener.exitOfBranchesStmt(self)




    def ofBranchesStmt(self):

        localctx = nim_Parser.OfBranchesStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_ofBranchesStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 596 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 595
                    self.ofBranchStmt()

                else:
                    raise NoViableAltException(self)
                self.state = 598 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,45,self._ctx)

            self.state = 613
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
            if la_ == 1:
                self.state = 600
                self.match(nim_Parser.ELSE)
                self.state = 601
                self.match(nim_Parser.COLON)
                self.state = 611
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [nim_Parser.INDENT]:
                    self.state = 602
                    self.ind()
                    self.state = 604 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 603
                        self.anyStmt()
                        self.state = 606 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nim_Parser.OPEN_PAREN) | (1 << nim_Parser.CLOSE_PAREN) | (1 << nim_Parser.OPEN_BRACK) | (1 << nim_Parser.CLOSE_BRACK) | (1 << nim_Parser.OBJECT) | (1 << nim_Parser.TYPE) | (1 << nim_Parser.COLON) | (1 << nim_Parser.DOT) | (1 << nim_Parser.EQUALS) | (1 << nim_Parser.IN) | (1 << nim_Parser.OF) | (1 << nim_Parser.NOT) | (1 << nim_Parser.DOLLAR_SIGN) | (1 << nim_Parser.OP0) | (1 << nim_Parser.OP1) | (1 << nim_Parser.OP2) | (1 << nim_Parser.OP3) | (1 << nim_Parser.OP4) | (1 << nim_Parser.OP5) | (1 << nim_Parser.OP6) | (1 << nim_Parser.OP7) | (1 << nim_Parser.OP8) | (1 << nim_Parser.OP9) | (1 << nim_Parser.OP10) | (1 << nim_Parser.VARIABLE) | (1 << nim_Parser.LET) | (1 << nim_Parser.CONST) | (1 << nim_Parser.PROC) | (1 << nim_Parser.RETURN) | (1 << nim_Parser.CASE) | (1 << nim_Parser.IF) | (1 << nim_Parser.WHILE) | (1 << nim_Parser.FOR) | (1 << nim_Parser.CONTINUE) | (1 << nim_Parser.BREAK) | (1 << nim_Parser.TEMPLATE))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (nim_Parser.WHEN - 66)) | (1 << (nim_Parser.IMPORT - 66)) | (1 << (nim_Parser.FROM - 66)) | (1 << (nim_Parser.REF - 66)) | (1 << (nim_Parser.BLOCK - 66)) | (1 << (nim_Parser.MACRO - 66)) | (1 << (nim_Parser.NIL - 66)) | (1 << (nim_Parser.DISCARD - 66)) | (1 << (nim_Parser.SYM_HEADER - 66)) | (1 << (nim_Parser.IDENTIFIER - 66)) | (1 << (nim_Parser.INT_LIT - 66)) | (1 << (nim_Parser.INT8_LIT - 66)) | (1 << (nim_Parser.INT16_LIT - 66)) | (1 << (nim_Parser.INT32_LIT - 66)) | (1 << (nim_Parser.INT64_LIT - 66)) | (1 << (nim_Parser.UINT_LIT - 66)) | (1 << (nim_Parser.UINT8_LIT - 66)) | (1 << (nim_Parser.UINT16_LIT - 66)) | (1 << (nim_Parser.UINT32_LIT - 66)) | (1 << (nim_Parser.UINT64_LIT - 66)) | (1 << (nim_Parser.FLOAT_LIT - 66)) | (1 << (nim_Parser.FLOAT32_LIT - 66)) | (1 << (nim_Parser.FLOAT64_LIT - 66)) | (1 << (nim_Parser.CHAR_LIT - 66)) | (1 << (nim_Parser.STR_LIT - 66)) | (1 << (nim_Parser.TRIPLESTR_LIT - 66)) | (1 << (nim_Parser.RSTR_LIT - 66)) | (1 << (nim_Parser.GENERALIZED_STR_LIT - 66)) | (1 << (nim_Parser.GENERALIZED_TRIPLESTR_LIT - 66)))) != 0)):
                            break

                    self.state = 608
                    self.ded()
                    pass
                elif token in [nim_Parser.OPEN_PAREN, nim_Parser.CLOSE_PAREN, nim_Parser.OPEN_BRACK, nim_Parser.CLOSE_BRACK, nim_Parser.OBJECT, nim_Parser.TYPE, nim_Parser.COLON, nim_Parser.DOT, nim_Parser.EQUALS, nim_Parser.IN, nim_Parser.OF, nim_Parser.NOT, nim_Parser.DOLLAR_SIGN, nim_Parser.OP0, nim_Parser.OP1, nim_Parser.OP2, nim_Parser.OP3, nim_Parser.OP4, nim_Parser.OP5, nim_Parser.OP6, nim_Parser.OP7, nim_Parser.OP8, nim_Parser.OP9, nim_Parser.OP10, nim_Parser.VARIABLE, nim_Parser.LET, nim_Parser.CONST, nim_Parser.PROC, nim_Parser.RETURN, nim_Parser.CASE, nim_Parser.IF, nim_Parser.WHILE, nim_Parser.FOR, nim_Parser.CONTINUE, nim_Parser.BREAK, nim_Parser.TEMPLATE, nim_Parser.WHEN, nim_Parser.IMPORT, nim_Parser.FROM, nim_Parser.REF, nim_Parser.BLOCK, nim_Parser.MACRO, nim_Parser.NIL, nim_Parser.DISCARD, nim_Parser.SYM_HEADER, nim_Parser.IDENTIFIER, nim_Parser.INT_LIT, nim_Parser.INT8_LIT, nim_Parser.INT16_LIT, nim_Parser.INT32_LIT, nim_Parser.INT64_LIT, nim_Parser.UINT_LIT, nim_Parser.UINT8_LIT, nim_Parser.UINT16_LIT, nim_Parser.UINT32_LIT, nim_Parser.UINT64_LIT, nim_Parser.FLOAT_LIT, nim_Parser.FLOAT32_LIT, nim_Parser.FLOAT64_LIT, nim_Parser.CHAR_LIT, nim_Parser.STR_LIT, nim_Parser.TRIPLESTR_LIT, nim_Parser.RSTR_LIT, nim_Parser.GENERALIZED_STR_LIT, nim_Parser.GENERALIZED_TRIPLESTR_LIT]:
                    self.state = 610
                    self.anyStmt()
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OfBranchStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OF(self):
            return self.getToken(nim_Parser.OF, 0)

        def exprList(self):
            return self.getTypedRuleContext(nim_Parser.ExprListContext,0)


        def COLON(self):
            return self.getToken(nim_Parser.COLON, 0)

        def anyStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.AnyStmtContext)
            else:
                return self.getTypedRuleContext(nim_Parser.AnyStmtContext,i)


        def ind(self):
            return self.getTypedRuleContext(nim_Parser.IndContext,0)


        def ded(self):
            return self.getTypedRuleContext(nim_Parser.DedContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_ofBranchStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOfBranchStmt" ):
                listener.enterOfBranchStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOfBranchStmt" ):
                listener.exitOfBranchStmt(self)




    def ofBranchStmt(self):

        localctx = nim_Parser.OfBranchStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_ofBranchStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 615
            self.match(nim_Parser.OF)
            self.state = 616
            self.exprList()
            self.state = 617
            self.match(nim_Parser.COLON)
            self.state = 627
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [nim_Parser.INDENT]:
                self.state = 618
                self.ind()
                self.state = 620 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 619
                    self.anyStmt()
                    self.state = 622 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nim_Parser.OPEN_PAREN) | (1 << nim_Parser.CLOSE_PAREN) | (1 << nim_Parser.OPEN_BRACK) | (1 << nim_Parser.CLOSE_BRACK) | (1 << nim_Parser.OBJECT) | (1 << nim_Parser.TYPE) | (1 << nim_Parser.COLON) | (1 << nim_Parser.DOT) | (1 << nim_Parser.EQUALS) | (1 << nim_Parser.IN) | (1 << nim_Parser.OF) | (1 << nim_Parser.NOT) | (1 << nim_Parser.DOLLAR_SIGN) | (1 << nim_Parser.OP0) | (1 << nim_Parser.OP1) | (1 << nim_Parser.OP2) | (1 << nim_Parser.OP3) | (1 << nim_Parser.OP4) | (1 << nim_Parser.OP5) | (1 << nim_Parser.OP6) | (1 << nim_Parser.OP7) | (1 << nim_Parser.OP8) | (1 << nim_Parser.OP9) | (1 << nim_Parser.OP10) | (1 << nim_Parser.VARIABLE) | (1 << nim_Parser.LET) | (1 << nim_Parser.CONST) | (1 << nim_Parser.PROC) | (1 << nim_Parser.RETURN) | (1 << nim_Parser.CASE) | (1 << nim_Parser.IF) | (1 << nim_Parser.WHILE) | (1 << nim_Parser.FOR) | (1 << nim_Parser.CONTINUE) | (1 << nim_Parser.BREAK) | (1 << nim_Parser.TEMPLATE))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (nim_Parser.WHEN - 66)) | (1 << (nim_Parser.IMPORT - 66)) | (1 << (nim_Parser.FROM - 66)) | (1 << (nim_Parser.REF - 66)) | (1 << (nim_Parser.BLOCK - 66)) | (1 << (nim_Parser.MACRO - 66)) | (1 << (nim_Parser.NIL - 66)) | (1 << (nim_Parser.DISCARD - 66)) | (1 << (nim_Parser.SYM_HEADER - 66)) | (1 << (nim_Parser.IDENTIFIER - 66)) | (1 << (nim_Parser.INT_LIT - 66)) | (1 << (nim_Parser.INT8_LIT - 66)) | (1 << (nim_Parser.INT16_LIT - 66)) | (1 << (nim_Parser.INT32_LIT - 66)) | (1 << (nim_Parser.INT64_LIT - 66)) | (1 << (nim_Parser.UINT_LIT - 66)) | (1 << (nim_Parser.UINT8_LIT - 66)) | (1 << (nim_Parser.UINT16_LIT - 66)) | (1 << (nim_Parser.UINT32_LIT - 66)) | (1 << (nim_Parser.UINT64_LIT - 66)) | (1 << (nim_Parser.FLOAT_LIT - 66)) | (1 << (nim_Parser.FLOAT32_LIT - 66)) | (1 << (nim_Parser.FLOAT64_LIT - 66)) | (1 << (nim_Parser.CHAR_LIT - 66)) | (1 << (nim_Parser.STR_LIT - 66)) | (1 << (nim_Parser.TRIPLESTR_LIT - 66)) | (1 << (nim_Parser.RSTR_LIT - 66)) | (1 << (nim_Parser.GENERALIZED_STR_LIT - 66)) | (1 << (nim_Parser.GENERALIZED_TRIPLESTR_LIT - 66)))) != 0)):
                        break

                self.state = 624
                self.ded()
                pass
            elif token in [nim_Parser.OPEN_PAREN, nim_Parser.CLOSE_PAREN, nim_Parser.OPEN_BRACK, nim_Parser.CLOSE_BRACK, nim_Parser.OBJECT, nim_Parser.TYPE, nim_Parser.COLON, nim_Parser.DOT, nim_Parser.EQUALS, nim_Parser.IN, nim_Parser.OF, nim_Parser.NOT, nim_Parser.DOLLAR_SIGN, nim_Parser.OP0, nim_Parser.OP1, nim_Parser.OP2, nim_Parser.OP3, nim_Parser.OP4, nim_Parser.OP5, nim_Parser.OP6, nim_Parser.OP7, nim_Parser.OP8, nim_Parser.OP9, nim_Parser.OP10, nim_Parser.VARIABLE, nim_Parser.LET, nim_Parser.CONST, nim_Parser.PROC, nim_Parser.RETURN, nim_Parser.CASE, nim_Parser.IF, nim_Parser.WHILE, nim_Parser.FOR, nim_Parser.CONTINUE, nim_Parser.BREAK, nim_Parser.TEMPLATE, nim_Parser.WHEN, nim_Parser.IMPORT, nim_Parser.FROM, nim_Parser.REF, nim_Parser.BLOCK, nim_Parser.MACRO, nim_Parser.NIL, nim_Parser.DISCARD, nim_Parser.SYM_HEADER, nim_Parser.IDENTIFIER, nim_Parser.INT_LIT, nim_Parser.INT8_LIT, nim_Parser.INT16_LIT, nim_Parser.INT32_LIT, nim_Parser.INT64_LIT, nim_Parser.UINT_LIT, nim_Parser.UINT8_LIT, nim_Parser.UINT16_LIT, nim_Parser.UINT32_LIT, nim_Parser.UINT64_LIT, nim_Parser.FLOAT_LIT, nim_Parser.FLOAT32_LIT, nim_Parser.FLOAT64_LIT, nim_Parser.CHAR_LIT, nim_Parser.STR_LIT, nim_Parser.TRIPLESTR_LIT, nim_Parser.RSTR_LIT, nim_Parser.GENERALIZED_STR_LIT, nim_Parser.GENERALIZED_TRIPLESTR_LIT]:
                self.state = 626
                self.anyStmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(nim_Parser.WHILE, 0)

        def anyExpr(self):
            return self.getTypedRuleContext(nim_Parser.AnyExprContext,0)


        def COLON(self):
            return self.getToken(nim_Parser.COLON, 0)

        def ind(self):
            return self.getTypedRuleContext(nim_Parser.IndContext,0)


        def ded(self):
            return self.getTypedRuleContext(nim_Parser.DedContext,0)


        def stmt(self):
            return self.getTypedRuleContext(nim_Parser.StmtContext,0)


        def exprStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.ExprStmtContext)
            else:
                return self.getTypedRuleContext(nim_Parser.ExprStmtContext,i)


        def getRuleIndex(self):
            return nim_Parser.RULE_whileStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileStmt" ):
                listener.enterWhileStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileStmt" ):
                listener.exitWhileStmt(self)




    def whileStmt(self):

        localctx = nim_Parser.WhileStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_whileStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 629
            self.match(nim_Parser.WHILE)
            self.state = 630
            self.anyExpr()
            self.state = 631
            self.match(nim_Parser.COLON)
            self.state = 651
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [nim_Parser.INDENT]:
                self.state = 632
                self.ind()
                self.state = 639
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [nim_Parser.OPEN_PAREN, nim_Parser.CLOSE_PAREN, nim_Parser.OPEN_BRACK, nim_Parser.CLOSE_BRACK, nim_Parser.OBJECT, nim_Parser.COLON, nim_Parser.DOT, nim_Parser.EQUALS, nim_Parser.IN, nim_Parser.OF, nim_Parser.NOT, nim_Parser.DOLLAR_SIGN, nim_Parser.OP0, nim_Parser.OP1, nim_Parser.OP2, nim_Parser.OP3, nim_Parser.OP4, nim_Parser.OP5, nim_Parser.OP6, nim_Parser.OP7, nim_Parser.OP8, nim_Parser.OP9, nim_Parser.OP10, nim_Parser.REF, nim_Parser.NIL, nim_Parser.SYM_HEADER, nim_Parser.IDENTIFIER, nim_Parser.INT_LIT, nim_Parser.INT8_LIT, nim_Parser.INT16_LIT, nim_Parser.INT32_LIT, nim_Parser.INT64_LIT, nim_Parser.UINT_LIT, nim_Parser.UINT8_LIT, nim_Parser.UINT16_LIT, nim_Parser.UINT32_LIT, nim_Parser.UINT64_LIT, nim_Parser.FLOAT_LIT, nim_Parser.FLOAT32_LIT, nim_Parser.FLOAT64_LIT, nim_Parser.CHAR_LIT, nim_Parser.STR_LIT, nim_Parser.TRIPLESTR_LIT, nim_Parser.RSTR_LIT, nim_Parser.GENERALIZED_STR_LIT, nim_Parser.GENERALIZED_TRIPLESTR_LIT]:
                    self.state = 634 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 633
                        self.exprStmt()
                        self.state = 636 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nim_Parser.OPEN_PAREN) | (1 << nim_Parser.CLOSE_PAREN) | (1 << nim_Parser.OPEN_BRACK) | (1 << nim_Parser.CLOSE_BRACK) | (1 << nim_Parser.OBJECT) | (1 << nim_Parser.COLON) | (1 << nim_Parser.DOT) | (1 << nim_Parser.EQUALS) | (1 << nim_Parser.IN) | (1 << nim_Parser.OF) | (1 << nim_Parser.NOT) | (1 << nim_Parser.DOLLAR_SIGN) | (1 << nim_Parser.OP0) | (1 << nim_Parser.OP1) | (1 << nim_Parser.OP2) | (1 << nim_Parser.OP3) | (1 << nim_Parser.OP4) | (1 << nim_Parser.OP5) | (1 << nim_Parser.OP6) | (1 << nim_Parser.OP7) | (1 << nim_Parser.OP8) | (1 << nim_Parser.OP9) | (1 << nim_Parser.OP10))) != 0) or ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & ((1 << (nim_Parser.REF - 73)) | (1 << (nim_Parser.NIL - 73)) | (1 << (nim_Parser.SYM_HEADER - 73)) | (1 << (nim_Parser.IDENTIFIER - 73)) | (1 << (nim_Parser.INT_LIT - 73)) | (1 << (nim_Parser.INT8_LIT - 73)) | (1 << (nim_Parser.INT16_LIT - 73)) | (1 << (nim_Parser.INT32_LIT - 73)) | (1 << (nim_Parser.INT64_LIT - 73)) | (1 << (nim_Parser.UINT_LIT - 73)) | (1 << (nim_Parser.UINT8_LIT - 73)) | (1 << (nim_Parser.UINT16_LIT - 73)) | (1 << (nim_Parser.UINT32_LIT - 73)) | (1 << (nim_Parser.UINT64_LIT - 73)) | (1 << (nim_Parser.FLOAT_LIT - 73)) | (1 << (nim_Parser.FLOAT32_LIT - 73)) | (1 << (nim_Parser.FLOAT64_LIT - 73)) | (1 << (nim_Parser.CHAR_LIT - 73)) | (1 << (nim_Parser.STR_LIT - 73)) | (1 << (nim_Parser.TRIPLESTR_LIT - 73)) | (1 << (nim_Parser.RSTR_LIT - 73)) | (1 << (nim_Parser.GENERALIZED_STR_LIT - 73)) | (1 << (nim_Parser.GENERALIZED_TRIPLESTR_LIT - 73)))) != 0)):
                            break

                    pass
                elif token in [nim_Parser.TYPE, nim_Parser.VARIABLE, nim_Parser.LET, nim_Parser.CONST, nim_Parser.PROC, nim_Parser.RETURN, nim_Parser.CASE, nim_Parser.IF, nim_Parser.WHILE, nim_Parser.FOR, nim_Parser.CONTINUE, nim_Parser.BREAK, nim_Parser.TEMPLATE, nim_Parser.WHEN, nim_Parser.IMPORT, nim_Parser.FROM, nim_Parser.BLOCK, nim_Parser.MACRO, nim_Parser.DISCARD]:
                    self.state = 638
                    self.stmt()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 641
                self.ded()
                pass
            elif token in [nim_Parser.OPEN_PAREN, nim_Parser.CLOSE_PAREN, nim_Parser.OPEN_BRACK, nim_Parser.CLOSE_BRACK, nim_Parser.OBJECT, nim_Parser.TYPE, nim_Parser.COLON, nim_Parser.DOT, nim_Parser.EQUALS, nim_Parser.IN, nim_Parser.OF, nim_Parser.NOT, nim_Parser.DOLLAR_SIGN, nim_Parser.OP0, nim_Parser.OP1, nim_Parser.OP2, nim_Parser.OP3, nim_Parser.OP4, nim_Parser.OP5, nim_Parser.OP6, nim_Parser.OP7, nim_Parser.OP8, nim_Parser.OP9, nim_Parser.OP10, nim_Parser.VARIABLE, nim_Parser.LET, nim_Parser.CONST, nim_Parser.PROC, nim_Parser.RETURN, nim_Parser.CASE, nim_Parser.IF, nim_Parser.WHILE, nim_Parser.FOR, nim_Parser.CONTINUE, nim_Parser.BREAK, nim_Parser.TEMPLATE, nim_Parser.WHEN, nim_Parser.IMPORT, nim_Parser.FROM, nim_Parser.REF, nim_Parser.BLOCK, nim_Parser.MACRO, nim_Parser.NIL, nim_Parser.DISCARD, nim_Parser.SYM_HEADER, nim_Parser.IDENTIFIER, nim_Parser.INT_LIT, nim_Parser.INT8_LIT, nim_Parser.INT16_LIT, nim_Parser.INT32_LIT, nim_Parser.INT64_LIT, nim_Parser.UINT_LIT, nim_Parser.UINT8_LIT, nim_Parser.UINT16_LIT, nim_Parser.UINT32_LIT, nim_Parser.UINT64_LIT, nim_Parser.FLOAT_LIT, nim_Parser.FLOAT32_LIT, nim_Parser.FLOAT64_LIT, nim_Parser.CHAR_LIT, nim_Parser.STR_LIT, nim_Parser.TRIPLESTR_LIT, nim_Parser.RSTR_LIT, nim_Parser.GENERALIZED_STR_LIT, nim_Parser.GENERALIZED_TRIPLESTR_LIT]:
                self.state = 649
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [nim_Parser.OPEN_PAREN, nim_Parser.CLOSE_PAREN, nim_Parser.OPEN_BRACK, nim_Parser.CLOSE_BRACK, nim_Parser.OBJECT, nim_Parser.COLON, nim_Parser.DOT, nim_Parser.EQUALS, nim_Parser.IN, nim_Parser.OF, nim_Parser.NOT, nim_Parser.DOLLAR_SIGN, nim_Parser.OP0, nim_Parser.OP1, nim_Parser.OP2, nim_Parser.OP3, nim_Parser.OP4, nim_Parser.OP5, nim_Parser.OP6, nim_Parser.OP7, nim_Parser.OP8, nim_Parser.OP9, nim_Parser.OP10, nim_Parser.REF, nim_Parser.NIL, nim_Parser.SYM_HEADER, nim_Parser.IDENTIFIER, nim_Parser.INT_LIT, nim_Parser.INT8_LIT, nim_Parser.INT16_LIT, nim_Parser.INT32_LIT, nim_Parser.INT64_LIT, nim_Parser.UINT_LIT, nim_Parser.UINT8_LIT, nim_Parser.UINT16_LIT, nim_Parser.UINT32_LIT, nim_Parser.UINT64_LIT, nim_Parser.FLOAT_LIT, nim_Parser.FLOAT32_LIT, nim_Parser.FLOAT64_LIT, nim_Parser.CHAR_LIT, nim_Parser.STR_LIT, nim_Parser.TRIPLESTR_LIT, nim_Parser.RSTR_LIT, nim_Parser.GENERALIZED_STR_LIT, nim_Parser.GENERALIZED_TRIPLESTR_LIT]:
                    self.state = 644 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 643
                            self.exprStmt()

                        else:
                            raise NoViableAltException(self)
                        self.state = 646 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,53,self._ctx)

                    pass
                elif token in [nim_Parser.TYPE, nim_Parser.VARIABLE, nim_Parser.LET, nim_Parser.CONST, nim_Parser.PROC, nim_Parser.RETURN, nim_Parser.CASE, nim_Parser.IF, nim_Parser.WHILE, nim_Parser.FOR, nim_Parser.CONTINUE, nim_Parser.BREAK, nim_Parser.TEMPLATE, nim_Parser.WHEN, nim_Parser.IMPORT, nim_Parser.FROM, nim_Parser.BLOCK, nim_Parser.MACRO, nim_Parser.DISCARD]:
                    self.state = 648
                    self.stmt()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhenStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(nim_Parser.WHEN, 0)

        def condStmt(self):
            return self.getTypedRuleContext(nim_Parser.CondStmtContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_whenStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhenStmt" ):
                listener.enterWhenStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhenStmt" ):
                listener.exitWhenStmt(self)




    def whenStmt(self):

        localctx = nim_Parser.WhenStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_whenStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 653
            self.match(nim_Parser.WHEN)
            self.state = 654
            self.condStmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.IDENTIFIER)
            else:
                return self.getToken(nim_Parser.IDENTIFIER, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.COMMA)
            else:
                return self.getToken(nim_Parser.COMMA, i)

        def getRuleIndex(self):
            return nim_Parser.RULE_idList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdList" ):
                listener.enterIdList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdList" ):
                listener.exitIdList(self)




    def idList(self):

        localctx = nim_Parser.IdListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_idList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 656
            self.match(nim_Parser.IDENTIFIER)
            self.state = 661
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==nim_Parser.COMMA:
                self.state = 657
                self.match(nim_Parser.COMMA)
                self.state = 658
                self.match(nim_Parser.IDENTIFIER)
                self.state = 663
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(nim_Parser.FOR, 0)

        def idList(self):
            return self.getTypedRuleContext(nim_Parser.IdListContext,0)


        def IN(self):
            return self.getToken(nim_Parser.IN, 0)

        def simpleExpr(self):
            return self.getTypedRuleContext(nim_Parser.SimpleExprContext,0)


        def COLON(self):
            return self.getToken(nim_Parser.COLON, 0)

        def anyStmt(self):
            return self.getTypedRuleContext(nim_Parser.AnyStmtContext,0)


        def ind(self):
            return self.getTypedRuleContext(nim_Parser.IndContext,0)


        def ded(self):
            return self.getTypedRuleContext(nim_Parser.DedContext,0)


        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.StmtContext)
            else:
                return self.getTypedRuleContext(nim_Parser.StmtContext,i)


        def getRuleIndex(self):
            return nim_Parser.RULE_forStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForStmt" ):
                listener.enterForStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForStmt" ):
                listener.exitForStmt(self)




    def forStmt(self):

        localctx = nim_Parser.ForStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_forStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 664
            self.match(nim_Parser.FOR)
            self.state = 665
            self.idList()
            self.state = 666
            self.match(nim_Parser.IN)
            self.state = 667
            self.simpleExpr()
            self.state = 668
            self.match(nim_Parser.COLON)
            self.state = 678
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [nim_Parser.INDENT]:
                self.state = 669
                self.ind()
                self.state = 671 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 670
                    self.stmt()
                    self.state = 673 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nim_Parser.TYPE) | (1 << nim_Parser.VARIABLE) | (1 << nim_Parser.LET) | (1 << nim_Parser.CONST) | (1 << nim_Parser.PROC) | (1 << nim_Parser.RETURN) | (1 << nim_Parser.CASE) | (1 << nim_Parser.IF) | (1 << nim_Parser.WHILE) | (1 << nim_Parser.FOR) | (1 << nim_Parser.CONTINUE) | (1 << nim_Parser.BREAK) | (1 << nim_Parser.TEMPLATE))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (nim_Parser.WHEN - 66)) | (1 << (nim_Parser.IMPORT - 66)) | (1 << (nim_Parser.FROM - 66)) | (1 << (nim_Parser.BLOCK - 66)) | (1 << (nim_Parser.MACRO - 66)) | (1 << (nim_Parser.DISCARD - 66)))) != 0)):
                        break

                self.state = 675
                self.ded()
                pass
            elif token in [nim_Parser.OPEN_PAREN, nim_Parser.CLOSE_PAREN, nim_Parser.OPEN_BRACK, nim_Parser.CLOSE_BRACK, nim_Parser.OBJECT, nim_Parser.TYPE, nim_Parser.COLON, nim_Parser.DOT, nim_Parser.EQUALS, nim_Parser.IN, nim_Parser.OF, nim_Parser.NOT, nim_Parser.DOLLAR_SIGN, nim_Parser.OP0, nim_Parser.OP1, nim_Parser.OP2, nim_Parser.OP3, nim_Parser.OP4, nim_Parser.OP5, nim_Parser.OP6, nim_Parser.OP7, nim_Parser.OP8, nim_Parser.OP9, nim_Parser.OP10, nim_Parser.VARIABLE, nim_Parser.LET, nim_Parser.CONST, nim_Parser.PROC, nim_Parser.RETURN, nim_Parser.CASE, nim_Parser.IF, nim_Parser.WHILE, nim_Parser.FOR, nim_Parser.CONTINUE, nim_Parser.BREAK, nim_Parser.TEMPLATE, nim_Parser.WHEN, nim_Parser.IMPORT, nim_Parser.FROM, nim_Parser.REF, nim_Parser.BLOCK, nim_Parser.MACRO, nim_Parser.NIL, nim_Parser.DISCARD, nim_Parser.SYM_HEADER, nim_Parser.IDENTIFIER, nim_Parser.INT_LIT, nim_Parser.INT8_LIT, nim_Parser.INT16_LIT, nim_Parser.INT32_LIT, nim_Parser.INT64_LIT, nim_Parser.UINT_LIT, nim_Parser.UINT8_LIT, nim_Parser.UINT16_LIT, nim_Parser.UINT32_LIT, nim_Parser.UINT64_LIT, nim_Parser.FLOAT_LIT, nim_Parser.FLOAT32_LIT, nim_Parser.FLOAT64_LIT, nim_Parser.CHAR_LIT, nim_Parser.STR_LIT, nim_Parser.TRIPLESTR_LIT, nim_Parser.RSTR_LIT, nim_Parser.GENERALIZED_STR_LIT, nim_Parser.GENERALIZED_TRIPLESTR_LIT]:
                self.state = 677
                self.anyStmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(nim_Parser.IF, 0)

        def condStmt(self):
            return self.getTypedRuleContext(nim_Parser.CondStmtContext,0)


        def NOT(self):
            return self.getToken(nim_Parser.NOT, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_ifStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfStmt" ):
                listener.enterIfStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfStmt" ):
                listener.exitIfStmt(self)




    def ifStmt(self):

        localctx = nim_Parser.IfStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_ifStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 680
            self.match(nim_Parser.IF)
            self.state = 682
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
            if la_ == 1:
                self.state = 681
                self.match(nim_Parser.NOT)


            self.state = 684
            self.condStmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CondStmtElifContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELIF(self):
            return self.getToken(nim_Parser.ELIF, 0)

        def COLON(self):
            return self.getToken(nim_Parser.COLON, 0)

        def anyExpr(self):
            return self.getTypedRuleContext(nim_Parser.AnyExprContext,0)


        def ind(self):
            return self.getTypedRuleContext(nim_Parser.IndContext,0)


        def ded(self):
            return self.getTypedRuleContext(nim_Parser.DedContext,0)


        def stmt(self):
            return self.getTypedRuleContext(nim_Parser.StmtContext,0)


        def exprStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.ExprStmtContext)
            else:
                return self.getTypedRuleContext(nim_Parser.ExprStmtContext,i)


        def getRuleIndex(self):
            return nim_Parser.RULE_condStmtElif

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondStmtElif" ):
                listener.enterCondStmtElif(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondStmtElif" ):
                listener.exitCondStmtElif(self)




    def condStmtElif(self):

        localctx = nim_Parser.CondStmtElifContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_condStmtElif)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 686
            self.match(nim_Parser.ELIF)

            self.state = 687
            self.anyExpr()
            self.state = 688
            self.match(nim_Parser.COLON)
            self.state = 708
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [nim_Parser.INDENT]:
                self.state = 689
                self.ind()
                self.state = 696
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [nim_Parser.OPEN_PAREN, nim_Parser.CLOSE_PAREN, nim_Parser.OPEN_BRACK, nim_Parser.CLOSE_BRACK, nim_Parser.OBJECT, nim_Parser.COLON, nim_Parser.DOT, nim_Parser.EQUALS, nim_Parser.IN, nim_Parser.OF, nim_Parser.NOT, nim_Parser.DOLLAR_SIGN, nim_Parser.OP0, nim_Parser.OP1, nim_Parser.OP2, nim_Parser.OP3, nim_Parser.OP4, nim_Parser.OP5, nim_Parser.OP6, nim_Parser.OP7, nim_Parser.OP8, nim_Parser.OP9, nim_Parser.OP10, nim_Parser.REF, nim_Parser.NIL, nim_Parser.SYM_HEADER, nim_Parser.IDENTIFIER, nim_Parser.INT_LIT, nim_Parser.INT8_LIT, nim_Parser.INT16_LIT, nim_Parser.INT32_LIT, nim_Parser.INT64_LIT, nim_Parser.UINT_LIT, nim_Parser.UINT8_LIT, nim_Parser.UINT16_LIT, nim_Parser.UINT32_LIT, nim_Parser.UINT64_LIT, nim_Parser.FLOAT_LIT, nim_Parser.FLOAT32_LIT, nim_Parser.FLOAT64_LIT, nim_Parser.CHAR_LIT, nim_Parser.STR_LIT, nim_Parser.TRIPLESTR_LIT, nim_Parser.RSTR_LIT, nim_Parser.GENERALIZED_STR_LIT, nim_Parser.GENERALIZED_TRIPLESTR_LIT]:
                    self.state = 691 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 690
                        self.exprStmt()
                        self.state = 693 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nim_Parser.OPEN_PAREN) | (1 << nim_Parser.CLOSE_PAREN) | (1 << nim_Parser.OPEN_BRACK) | (1 << nim_Parser.CLOSE_BRACK) | (1 << nim_Parser.OBJECT) | (1 << nim_Parser.COLON) | (1 << nim_Parser.DOT) | (1 << nim_Parser.EQUALS) | (1 << nim_Parser.IN) | (1 << nim_Parser.OF) | (1 << nim_Parser.NOT) | (1 << nim_Parser.DOLLAR_SIGN) | (1 << nim_Parser.OP0) | (1 << nim_Parser.OP1) | (1 << nim_Parser.OP2) | (1 << nim_Parser.OP3) | (1 << nim_Parser.OP4) | (1 << nim_Parser.OP5) | (1 << nim_Parser.OP6) | (1 << nim_Parser.OP7) | (1 << nim_Parser.OP8) | (1 << nim_Parser.OP9) | (1 << nim_Parser.OP10))) != 0) or ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & ((1 << (nim_Parser.REF - 73)) | (1 << (nim_Parser.NIL - 73)) | (1 << (nim_Parser.SYM_HEADER - 73)) | (1 << (nim_Parser.IDENTIFIER - 73)) | (1 << (nim_Parser.INT_LIT - 73)) | (1 << (nim_Parser.INT8_LIT - 73)) | (1 << (nim_Parser.INT16_LIT - 73)) | (1 << (nim_Parser.INT32_LIT - 73)) | (1 << (nim_Parser.INT64_LIT - 73)) | (1 << (nim_Parser.UINT_LIT - 73)) | (1 << (nim_Parser.UINT8_LIT - 73)) | (1 << (nim_Parser.UINT16_LIT - 73)) | (1 << (nim_Parser.UINT32_LIT - 73)) | (1 << (nim_Parser.UINT64_LIT - 73)) | (1 << (nim_Parser.FLOAT_LIT - 73)) | (1 << (nim_Parser.FLOAT32_LIT - 73)) | (1 << (nim_Parser.FLOAT64_LIT - 73)) | (1 << (nim_Parser.CHAR_LIT - 73)) | (1 << (nim_Parser.STR_LIT - 73)) | (1 << (nim_Parser.TRIPLESTR_LIT - 73)) | (1 << (nim_Parser.RSTR_LIT - 73)) | (1 << (nim_Parser.GENERALIZED_STR_LIT - 73)) | (1 << (nim_Parser.GENERALIZED_TRIPLESTR_LIT - 73)))) != 0)):
                            break

                    pass
                elif token in [nim_Parser.TYPE, nim_Parser.VARIABLE, nim_Parser.LET, nim_Parser.CONST, nim_Parser.PROC, nim_Parser.RETURN, nim_Parser.CASE, nim_Parser.IF, nim_Parser.WHILE, nim_Parser.FOR, nim_Parser.CONTINUE, nim_Parser.BREAK, nim_Parser.TEMPLATE, nim_Parser.WHEN, nim_Parser.IMPORT, nim_Parser.FROM, nim_Parser.BLOCK, nim_Parser.MACRO, nim_Parser.DISCARD]:
                    self.state = 695
                    self.stmt()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 698
                self.ded()
                pass
            elif token in [nim_Parser.OPEN_PAREN, nim_Parser.CLOSE_PAREN, nim_Parser.OPEN_BRACK, nim_Parser.CLOSE_BRACK, nim_Parser.OBJECT, nim_Parser.TYPE, nim_Parser.COLON, nim_Parser.DOT, nim_Parser.EQUALS, nim_Parser.IN, nim_Parser.OF, nim_Parser.NOT, nim_Parser.DOLLAR_SIGN, nim_Parser.OP0, nim_Parser.OP1, nim_Parser.OP2, nim_Parser.OP3, nim_Parser.OP4, nim_Parser.OP5, nim_Parser.OP6, nim_Parser.OP7, nim_Parser.OP8, nim_Parser.OP9, nim_Parser.OP10, nim_Parser.VARIABLE, nim_Parser.LET, nim_Parser.CONST, nim_Parser.PROC, nim_Parser.RETURN, nim_Parser.CASE, nim_Parser.IF, nim_Parser.WHILE, nim_Parser.FOR, nim_Parser.CONTINUE, nim_Parser.BREAK, nim_Parser.TEMPLATE, nim_Parser.WHEN, nim_Parser.IMPORT, nim_Parser.FROM, nim_Parser.REF, nim_Parser.BLOCK, nim_Parser.MACRO, nim_Parser.NIL, nim_Parser.DISCARD, nim_Parser.SYM_HEADER, nim_Parser.IDENTIFIER, nim_Parser.INT_LIT, nim_Parser.INT8_LIT, nim_Parser.INT16_LIT, nim_Parser.INT32_LIT, nim_Parser.INT64_LIT, nim_Parser.UINT_LIT, nim_Parser.UINT8_LIT, nim_Parser.UINT16_LIT, nim_Parser.UINT32_LIT, nim_Parser.UINT64_LIT, nim_Parser.FLOAT_LIT, nim_Parser.FLOAT32_LIT, nim_Parser.FLOAT64_LIT, nim_Parser.CHAR_LIT, nim_Parser.STR_LIT, nim_Parser.TRIPLESTR_LIT, nim_Parser.RSTR_LIT, nim_Parser.GENERALIZED_STR_LIT, nim_Parser.GENERALIZED_TRIPLESTR_LIT]:
                self.state = 706
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [nim_Parser.OPEN_PAREN, nim_Parser.CLOSE_PAREN, nim_Parser.OPEN_BRACK, nim_Parser.CLOSE_BRACK, nim_Parser.OBJECT, nim_Parser.COLON, nim_Parser.DOT, nim_Parser.EQUALS, nim_Parser.IN, nim_Parser.OF, nim_Parser.NOT, nim_Parser.DOLLAR_SIGN, nim_Parser.OP0, nim_Parser.OP1, nim_Parser.OP2, nim_Parser.OP3, nim_Parser.OP4, nim_Parser.OP5, nim_Parser.OP6, nim_Parser.OP7, nim_Parser.OP8, nim_Parser.OP9, nim_Parser.OP10, nim_Parser.REF, nim_Parser.NIL, nim_Parser.SYM_HEADER, nim_Parser.IDENTIFIER, nim_Parser.INT_LIT, nim_Parser.INT8_LIT, nim_Parser.INT16_LIT, nim_Parser.INT32_LIT, nim_Parser.INT64_LIT, nim_Parser.UINT_LIT, nim_Parser.UINT8_LIT, nim_Parser.UINT16_LIT, nim_Parser.UINT32_LIT, nim_Parser.UINT64_LIT, nim_Parser.FLOAT_LIT, nim_Parser.FLOAT32_LIT, nim_Parser.FLOAT64_LIT, nim_Parser.CHAR_LIT, nim_Parser.STR_LIT, nim_Parser.TRIPLESTR_LIT, nim_Parser.RSTR_LIT, nim_Parser.GENERALIZED_STR_LIT, nim_Parser.GENERALIZED_TRIPLESTR_LIT]:
                    self.state = 701 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 700
                            self.exprStmt()

                        else:
                            raise NoViableAltException(self)
                        self.state = 703 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,62,self._ctx)

                    pass
                elif token in [nim_Parser.TYPE, nim_Parser.VARIABLE, nim_Parser.LET, nim_Parser.CONST, nim_Parser.PROC, nim_Parser.RETURN, nim_Parser.CASE, nim_Parser.IF, nim_Parser.WHILE, nim_Parser.FOR, nim_Parser.CONTINUE, nim_Parser.BREAK, nim_Parser.TEMPLATE, nim_Parser.WHEN, nim_Parser.IMPORT, nim_Parser.FROM, nim_Parser.BLOCK, nim_Parser.MACRO, nim_Parser.DISCARD]:
                    self.state = 705
                    self.stmt()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CondStmtElseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(nim_Parser.ELSE, 0)

        def COLON(self):
            return self.getToken(nim_Parser.COLON, 0)

        def ind(self):
            return self.getTypedRuleContext(nim_Parser.IndContext,0)


        def ded(self):
            return self.getTypedRuleContext(nim_Parser.DedContext,0)


        def stmt(self):
            return self.getTypedRuleContext(nim_Parser.StmtContext,0)


        def exprStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.ExprStmtContext)
            else:
                return self.getTypedRuleContext(nim_Parser.ExprStmtContext,i)


        def getRuleIndex(self):
            return nim_Parser.RULE_condStmtElse

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondStmtElse" ):
                listener.enterCondStmtElse(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondStmtElse" ):
                listener.exitCondStmtElse(self)




    def condStmtElse(self):

        localctx = nim_Parser.CondStmtElseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_condStmtElse)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 710
            self.match(nim_Parser.ELSE)
            self.state = 711
            self.match(nim_Parser.COLON)
            self.state = 731
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [nim_Parser.INDENT]:
                self.state = 712
                self.ind()
                self.state = 719
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [nim_Parser.OPEN_PAREN, nim_Parser.CLOSE_PAREN, nim_Parser.OPEN_BRACK, nim_Parser.CLOSE_BRACK, nim_Parser.OBJECT, nim_Parser.COLON, nim_Parser.DOT, nim_Parser.EQUALS, nim_Parser.IN, nim_Parser.OF, nim_Parser.NOT, nim_Parser.DOLLAR_SIGN, nim_Parser.OP0, nim_Parser.OP1, nim_Parser.OP2, nim_Parser.OP3, nim_Parser.OP4, nim_Parser.OP5, nim_Parser.OP6, nim_Parser.OP7, nim_Parser.OP8, nim_Parser.OP9, nim_Parser.OP10, nim_Parser.REF, nim_Parser.NIL, nim_Parser.SYM_HEADER, nim_Parser.IDENTIFIER, nim_Parser.INT_LIT, nim_Parser.INT8_LIT, nim_Parser.INT16_LIT, nim_Parser.INT32_LIT, nim_Parser.INT64_LIT, nim_Parser.UINT_LIT, nim_Parser.UINT8_LIT, nim_Parser.UINT16_LIT, nim_Parser.UINT32_LIT, nim_Parser.UINT64_LIT, nim_Parser.FLOAT_LIT, nim_Parser.FLOAT32_LIT, nim_Parser.FLOAT64_LIT, nim_Parser.CHAR_LIT, nim_Parser.STR_LIT, nim_Parser.TRIPLESTR_LIT, nim_Parser.RSTR_LIT, nim_Parser.GENERALIZED_STR_LIT, nim_Parser.GENERALIZED_TRIPLESTR_LIT]:
                    self.state = 714 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 713
                        self.exprStmt()
                        self.state = 716 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nim_Parser.OPEN_PAREN) | (1 << nim_Parser.CLOSE_PAREN) | (1 << nim_Parser.OPEN_BRACK) | (1 << nim_Parser.CLOSE_BRACK) | (1 << nim_Parser.OBJECT) | (1 << nim_Parser.COLON) | (1 << nim_Parser.DOT) | (1 << nim_Parser.EQUALS) | (1 << nim_Parser.IN) | (1 << nim_Parser.OF) | (1 << nim_Parser.NOT) | (1 << nim_Parser.DOLLAR_SIGN) | (1 << nim_Parser.OP0) | (1 << nim_Parser.OP1) | (1 << nim_Parser.OP2) | (1 << nim_Parser.OP3) | (1 << nim_Parser.OP4) | (1 << nim_Parser.OP5) | (1 << nim_Parser.OP6) | (1 << nim_Parser.OP7) | (1 << nim_Parser.OP8) | (1 << nim_Parser.OP9) | (1 << nim_Parser.OP10))) != 0) or ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & ((1 << (nim_Parser.REF - 73)) | (1 << (nim_Parser.NIL - 73)) | (1 << (nim_Parser.SYM_HEADER - 73)) | (1 << (nim_Parser.IDENTIFIER - 73)) | (1 << (nim_Parser.INT_LIT - 73)) | (1 << (nim_Parser.INT8_LIT - 73)) | (1 << (nim_Parser.INT16_LIT - 73)) | (1 << (nim_Parser.INT32_LIT - 73)) | (1 << (nim_Parser.INT64_LIT - 73)) | (1 << (nim_Parser.UINT_LIT - 73)) | (1 << (nim_Parser.UINT8_LIT - 73)) | (1 << (nim_Parser.UINT16_LIT - 73)) | (1 << (nim_Parser.UINT32_LIT - 73)) | (1 << (nim_Parser.UINT64_LIT - 73)) | (1 << (nim_Parser.FLOAT_LIT - 73)) | (1 << (nim_Parser.FLOAT32_LIT - 73)) | (1 << (nim_Parser.FLOAT64_LIT - 73)) | (1 << (nim_Parser.CHAR_LIT - 73)) | (1 << (nim_Parser.STR_LIT - 73)) | (1 << (nim_Parser.TRIPLESTR_LIT - 73)) | (1 << (nim_Parser.RSTR_LIT - 73)) | (1 << (nim_Parser.GENERALIZED_STR_LIT - 73)) | (1 << (nim_Parser.GENERALIZED_TRIPLESTR_LIT - 73)))) != 0)):
                            break

                    pass
                elif token in [nim_Parser.TYPE, nim_Parser.VARIABLE, nim_Parser.LET, nim_Parser.CONST, nim_Parser.PROC, nim_Parser.RETURN, nim_Parser.CASE, nim_Parser.IF, nim_Parser.WHILE, nim_Parser.FOR, nim_Parser.CONTINUE, nim_Parser.BREAK, nim_Parser.TEMPLATE, nim_Parser.WHEN, nim_Parser.IMPORT, nim_Parser.FROM, nim_Parser.BLOCK, nim_Parser.MACRO, nim_Parser.DISCARD]:
                    self.state = 718
                    self.stmt()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 721
                self.ded()
                pass
            elif token in [nim_Parser.OPEN_PAREN, nim_Parser.CLOSE_PAREN, nim_Parser.OPEN_BRACK, nim_Parser.CLOSE_BRACK, nim_Parser.OBJECT, nim_Parser.TYPE, nim_Parser.COLON, nim_Parser.DOT, nim_Parser.EQUALS, nim_Parser.IN, nim_Parser.OF, nim_Parser.NOT, nim_Parser.DOLLAR_SIGN, nim_Parser.OP0, nim_Parser.OP1, nim_Parser.OP2, nim_Parser.OP3, nim_Parser.OP4, nim_Parser.OP5, nim_Parser.OP6, nim_Parser.OP7, nim_Parser.OP8, nim_Parser.OP9, nim_Parser.OP10, nim_Parser.VARIABLE, nim_Parser.LET, nim_Parser.CONST, nim_Parser.PROC, nim_Parser.RETURN, nim_Parser.CASE, nim_Parser.IF, nim_Parser.WHILE, nim_Parser.FOR, nim_Parser.CONTINUE, nim_Parser.BREAK, nim_Parser.TEMPLATE, nim_Parser.WHEN, nim_Parser.IMPORT, nim_Parser.FROM, nim_Parser.REF, nim_Parser.BLOCK, nim_Parser.MACRO, nim_Parser.NIL, nim_Parser.DISCARD, nim_Parser.SYM_HEADER, nim_Parser.IDENTIFIER, nim_Parser.INT_LIT, nim_Parser.INT8_LIT, nim_Parser.INT16_LIT, nim_Parser.INT32_LIT, nim_Parser.INT64_LIT, nim_Parser.UINT_LIT, nim_Parser.UINT8_LIT, nim_Parser.UINT16_LIT, nim_Parser.UINT32_LIT, nim_Parser.UINT64_LIT, nim_Parser.FLOAT_LIT, nim_Parser.FLOAT32_LIT, nim_Parser.FLOAT64_LIT, nim_Parser.CHAR_LIT, nim_Parser.STR_LIT, nim_Parser.TRIPLESTR_LIT, nim_Parser.RSTR_LIT, nim_Parser.GENERALIZED_STR_LIT, nim_Parser.GENERALIZED_TRIPLESTR_LIT]:
                self.state = 729
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [nim_Parser.OPEN_PAREN, nim_Parser.CLOSE_PAREN, nim_Parser.OPEN_BRACK, nim_Parser.CLOSE_BRACK, nim_Parser.OBJECT, nim_Parser.COLON, nim_Parser.DOT, nim_Parser.EQUALS, nim_Parser.IN, nim_Parser.OF, nim_Parser.NOT, nim_Parser.DOLLAR_SIGN, nim_Parser.OP0, nim_Parser.OP1, nim_Parser.OP2, nim_Parser.OP3, nim_Parser.OP4, nim_Parser.OP5, nim_Parser.OP6, nim_Parser.OP7, nim_Parser.OP8, nim_Parser.OP9, nim_Parser.OP10, nim_Parser.REF, nim_Parser.NIL, nim_Parser.SYM_HEADER, nim_Parser.IDENTIFIER, nim_Parser.INT_LIT, nim_Parser.INT8_LIT, nim_Parser.INT16_LIT, nim_Parser.INT32_LIT, nim_Parser.INT64_LIT, nim_Parser.UINT_LIT, nim_Parser.UINT8_LIT, nim_Parser.UINT16_LIT, nim_Parser.UINT32_LIT, nim_Parser.UINT64_LIT, nim_Parser.FLOAT_LIT, nim_Parser.FLOAT32_LIT, nim_Parser.FLOAT64_LIT, nim_Parser.CHAR_LIT, nim_Parser.STR_LIT, nim_Parser.TRIPLESTR_LIT, nim_Parser.RSTR_LIT, nim_Parser.GENERALIZED_STR_LIT, nim_Parser.GENERALIZED_TRIPLESTR_LIT]:
                    self.state = 724 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 723
                            self.exprStmt()

                        else:
                            raise NoViableAltException(self)
                        self.state = 726 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,67,self._ctx)

                    pass
                elif token in [nim_Parser.TYPE, nim_Parser.VARIABLE, nim_Parser.LET, nim_Parser.CONST, nim_Parser.PROC, nim_Parser.RETURN, nim_Parser.CASE, nim_Parser.IF, nim_Parser.WHILE, nim_Parser.FOR, nim_Parser.CONTINUE, nim_Parser.BREAK, nim_Parser.TEMPLATE, nim_Parser.WHEN, nim_Parser.IMPORT, nim_Parser.FROM, nim_Parser.BLOCK, nim_Parser.MACRO, nim_Parser.DISCARD]:
                    self.state = 728
                    self.stmt()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CondStmtBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stmt(self):
            return self.getTypedRuleContext(nim_Parser.StmtContext,0)


        def ind(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.IndContext)
            else:
                return self.getTypedRuleContext(nim_Parser.IndContext,i)


        def ded(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.DedContext)
            else:
                return self.getTypedRuleContext(nim_Parser.DedContext,i)


        def condStmtElif(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.CondStmtElifContext)
            else:
                return self.getTypedRuleContext(nim_Parser.CondStmtElifContext,i)


        def condStmtElse(self):
            return self.getTypedRuleContext(nim_Parser.CondStmtElseContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_condStmtBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondStmtBody" ):
                listener.enterCondStmtBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondStmtBody" ):
                listener.exitCondStmtBody(self)




    def condStmtBody(self):

        localctx = nim_Parser.CondStmtBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_condStmtBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 738
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [nim_Parser.INDENT]:
                self.state = 733
                self.ind()
                self.state = 734
                self.stmt()
                self.state = 735
                self.ded()
                pass
            elif token in [nim_Parser.TYPE, nim_Parser.VARIABLE, nim_Parser.LET, nim_Parser.CONST, nim_Parser.PROC, nim_Parser.RETURN, nim_Parser.CASE, nim_Parser.IF, nim_Parser.WHILE, nim_Parser.FOR, nim_Parser.CONTINUE, nim_Parser.BREAK, nim_Parser.TEMPLATE, nim_Parser.WHEN, nim_Parser.IMPORT, nim_Parser.FROM, nim_Parser.BLOCK, nim_Parser.MACRO, nim_Parser.DISCARD]:
                self.state = 737
                self.stmt()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 773
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
            if la_ == 1:
                self.state = 740
                self.ind()
                self.state = 744
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==nim_Parser.ELIF:
                    self.state = 741
                    self.condStmtElif()
                    self.state = 746
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 748
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nim_Parser.ELSE:
                    self.state = 747
                    self.condStmtElse()


                self.state = 750
                self.ded()
                pass

            elif la_ == 2:
                self.state = 755
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==nim_Parser.ELIF:
                    self.state = 752
                    self.condStmtElif()
                    self.state = 757
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 758
                self.ind()
                self.state = 760
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nim_Parser.ELSE:
                    self.state = 759
                    self.condStmtElse()


                self.state = 762
                self.ded()
                pass

            elif la_ == 3:
                self.state = 767
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,75,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 764
                        self.condStmtElif() 
                    self.state = 769
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,75,self._ctx)

                self.state = 771
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
                if la_ == 1:
                    self.state = 770
                    self.condStmtElse()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CondStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def anyExpr(self):
            return self.getTypedRuleContext(nim_Parser.AnyExprContext,0)


        def COLON(self):
            return self.getToken(nim_Parser.COLON, 0)

        def condStmtBody(self):
            return self.getTypedRuleContext(nim_Parser.CondStmtBodyContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_condStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondStmt" ):
                listener.enterCondStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondStmt" ):
                listener.exitCondStmt(self)




    def condStmt(self):

        localctx = nim_Parser.CondStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_condStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 775
            self.anyExpr()
            self.state = 776
            self.match(nim_Parser.COLON)
            self.state = 777
            self.condStmtBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BLOCK(self):
            return self.getToken(nim_Parser.BLOCK, 0)

        def IDENTIFIER(self):
            return self.getToken(nim_Parser.IDENTIFIER, 0)

        def COLON(self):
            return self.getToken(nim_Parser.COLON, 0)

        def anyStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.AnyStmtContext)
            else:
                return self.getTypedRuleContext(nim_Parser.AnyStmtContext,i)


        def ind(self):
            return self.getTypedRuleContext(nim_Parser.IndContext,0)


        def ded(self):
            return self.getTypedRuleContext(nim_Parser.DedContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_blockStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockStmt" ):
                listener.enterBlockStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockStmt" ):
                listener.exitBlockStmt(self)




    def blockStmt(self):

        localctx = nim_Parser.BlockStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_blockStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 779
            self.match(nim_Parser.BLOCK)
            self.state = 780
            self.match(nim_Parser.IDENTIFIER)
            self.state = 781
            self.match(nim_Parser.COLON)
            self.state = 791
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [nim_Parser.INDENT]:
                self.state = 782
                self.ind()
                self.state = 784 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 783
                    self.anyStmt()
                    self.state = 786 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nim_Parser.OPEN_PAREN) | (1 << nim_Parser.CLOSE_PAREN) | (1 << nim_Parser.OPEN_BRACK) | (1 << nim_Parser.CLOSE_BRACK) | (1 << nim_Parser.OBJECT) | (1 << nim_Parser.TYPE) | (1 << nim_Parser.COLON) | (1 << nim_Parser.DOT) | (1 << nim_Parser.EQUALS) | (1 << nim_Parser.IN) | (1 << nim_Parser.OF) | (1 << nim_Parser.NOT) | (1 << nim_Parser.DOLLAR_SIGN) | (1 << nim_Parser.OP0) | (1 << nim_Parser.OP1) | (1 << nim_Parser.OP2) | (1 << nim_Parser.OP3) | (1 << nim_Parser.OP4) | (1 << nim_Parser.OP5) | (1 << nim_Parser.OP6) | (1 << nim_Parser.OP7) | (1 << nim_Parser.OP8) | (1 << nim_Parser.OP9) | (1 << nim_Parser.OP10) | (1 << nim_Parser.VARIABLE) | (1 << nim_Parser.LET) | (1 << nim_Parser.CONST) | (1 << nim_Parser.PROC) | (1 << nim_Parser.RETURN) | (1 << nim_Parser.CASE) | (1 << nim_Parser.IF) | (1 << nim_Parser.WHILE) | (1 << nim_Parser.FOR) | (1 << nim_Parser.CONTINUE) | (1 << nim_Parser.BREAK) | (1 << nim_Parser.TEMPLATE))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (nim_Parser.WHEN - 66)) | (1 << (nim_Parser.IMPORT - 66)) | (1 << (nim_Parser.FROM - 66)) | (1 << (nim_Parser.REF - 66)) | (1 << (nim_Parser.BLOCK - 66)) | (1 << (nim_Parser.MACRO - 66)) | (1 << (nim_Parser.NIL - 66)) | (1 << (nim_Parser.DISCARD - 66)) | (1 << (nim_Parser.SYM_HEADER - 66)) | (1 << (nim_Parser.IDENTIFIER - 66)) | (1 << (nim_Parser.INT_LIT - 66)) | (1 << (nim_Parser.INT8_LIT - 66)) | (1 << (nim_Parser.INT16_LIT - 66)) | (1 << (nim_Parser.INT32_LIT - 66)) | (1 << (nim_Parser.INT64_LIT - 66)) | (1 << (nim_Parser.UINT_LIT - 66)) | (1 << (nim_Parser.UINT8_LIT - 66)) | (1 << (nim_Parser.UINT16_LIT - 66)) | (1 << (nim_Parser.UINT32_LIT - 66)) | (1 << (nim_Parser.UINT64_LIT - 66)) | (1 << (nim_Parser.FLOAT_LIT - 66)) | (1 << (nim_Parser.FLOAT32_LIT - 66)) | (1 << (nim_Parser.FLOAT64_LIT - 66)) | (1 << (nim_Parser.CHAR_LIT - 66)) | (1 << (nim_Parser.STR_LIT - 66)) | (1 << (nim_Parser.TRIPLESTR_LIT - 66)) | (1 << (nim_Parser.RSTR_LIT - 66)) | (1 << (nim_Parser.GENERALIZED_STR_LIT - 66)) | (1 << (nim_Parser.GENERALIZED_TRIPLESTR_LIT - 66)))) != 0)):
                        break

                self.state = 788
                self.ded()
                pass
            elif token in [nim_Parser.OPEN_PAREN, nim_Parser.CLOSE_PAREN, nim_Parser.OPEN_BRACK, nim_Parser.CLOSE_BRACK, nim_Parser.OBJECT, nim_Parser.TYPE, nim_Parser.COLON, nim_Parser.DOT, nim_Parser.EQUALS, nim_Parser.IN, nim_Parser.OF, nim_Parser.NOT, nim_Parser.DOLLAR_SIGN, nim_Parser.OP0, nim_Parser.OP1, nim_Parser.OP2, nim_Parser.OP3, nim_Parser.OP4, nim_Parser.OP5, nim_Parser.OP6, nim_Parser.OP7, nim_Parser.OP8, nim_Parser.OP9, nim_Parser.OP10, nim_Parser.VARIABLE, nim_Parser.LET, nim_Parser.CONST, nim_Parser.PROC, nim_Parser.RETURN, nim_Parser.CASE, nim_Parser.IF, nim_Parser.WHILE, nim_Parser.FOR, nim_Parser.CONTINUE, nim_Parser.BREAK, nim_Parser.TEMPLATE, nim_Parser.WHEN, nim_Parser.IMPORT, nim_Parser.FROM, nim_Parser.REF, nim_Parser.BLOCK, nim_Parser.MACRO, nim_Parser.NIL, nim_Parser.DISCARD, nim_Parser.SYM_HEADER, nim_Parser.IDENTIFIER, nim_Parser.INT_LIT, nim_Parser.INT8_LIT, nim_Parser.INT16_LIT, nim_Parser.INT32_LIT, nim_Parser.INT64_LIT, nim_Parser.UINT_LIT, nim_Parser.UINT8_LIT, nim_Parser.UINT16_LIT, nim_Parser.UINT32_LIT, nim_Parser.UINT64_LIT, nim_Parser.FLOAT_LIT, nim_Parser.FLOAT32_LIT, nim_Parser.FLOAT64_LIT, nim_Parser.CHAR_LIT, nim_Parser.STR_LIT, nim_Parser.TRIPLESTR_LIT, nim_Parser.RSTR_LIT, nim_Parser.GENERALIZED_STR_LIT, nim_Parser.GENERALIZED_TRIPLESTR_LIT]:
                self.state = 790
                self.anyStmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiscardStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DISCARD(self):
            return self.getToken(nim_Parser.DISCARD, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_discardStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiscardStmt" ):
                listener.enterDiscardStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiscardStmt" ):
                listener.exitDiscardStmt(self)




    def discardStmt(self):

        localctx = nim_Parser.DiscardStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_discardStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 793
            self.match(nim_Parser.DISCARD)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(nim_Parser.RETURN, 0)

        def simpleExpr(self):
            return self.getTypedRuleContext(nim_Parser.SimpleExprContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_returnStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnStmt" ):
                listener.enterReturnStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnStmt" ):
                listener.exitReturnStmt(self)




    def returnStmt(self):

        localctx = nim_Parser.ReturnStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_returnStmt)
        try:
            self.state = 798
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 795
                self.match(nim_Parser.RETURN)
                self.state = 796
                self.simpleExpr()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 797
                self.match(nim_Parser.RETURN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BreakStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BREAK(self):
            return self.getToken(nim_Parser.BREAK, 0)

        def simpleExpr(self):
            return self.getTypedRuleContext(nim_Parser.SimpleExprContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_breakStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBreakStmt" ):
                listener.enterBreakStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBreakStmt" ):
                listener.exitBreakStmt(self)




    def breakStmt(self):

        localctx = nim_Parser.BreakStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_breakStmt)
        try:
            self.state = 803
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 800
                self.match(nim_Parser.BREAK)
                self.state = 801
                self.simpleExpr()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 802
                self.match(nim_Parser.BREAK)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContinueStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTINUE(self):
            return self.getToken(nim_Parser.CONTINUE, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_continueStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContinueStmt" ):
                listener.enterContinueStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContinueStmt" ):
                listener.exitContinueStmt(self)




    def continueStmt(self):

        localctx = nim_Parser.ContinueStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_continueStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 805
            self.match(nim_Parser.CONTINUE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def blockExpr(self):
            return self.getTypedRuleContext(nim_Parser.BlockExprContext,0)


        def caseExpr(self):
            return self.getTypedRuleContext(nim_Parser.CaseExprContext,0)


        def forExpr(self):
            return self.getTypedRuleContext(nim_Parser.ForExprContext,0)


        def ifExpr(self):
            return self.getTypedRuleContext(nim_Parser.IfExprContext,0)


        def whenExpr(self):
            return self.getTypedRuleContext(nim_Parser.WhenExprContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr" ):
                listener.enterExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr" ):
                listener.exitExpr(self)




    def expr(self):

        localctx = nim_Parser.ExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_expr)
        try:
            self.state = 812
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [nim_Parser.BLOCK]:
                self.enterOuterAlt(localctx, 1)
                self.state = 807
                self.blockExpr()
                pass
            elif token in [nim_Parser.CASE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 808
                self.caseExpr()
                pass
            elif token in [nim_Parser.FOR]:
                self.enterOuterAlt(localctx, 3)
                self.state = 809
                self.forExpr()
                pass
            elif token in [nim_Parser.IF]:
                self.enterOuterAlt(localctx, 4)
                self.state = 810
                self.ifExpr()
                pass
            elif token in [nim_Parser.WHEN]:
                self.enterOuterAlt(localctx, 5)
                self.state = 811
                self.whenExpr()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PragmaContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(nim_Parser.OPEN_BRACE, 0)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.DOT)
            else:
                return self.getToken(nim_Parser.DOT, i)

        def IDENTIFIER(self):
            return self.getToken(nim_Parser.IDENTIFIER, 0)

        def CLOSE_BRACE(self):
            return self.getToken(nim_Parser.CLOSE_BRACE, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_pragma

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragma" ):
                listener.enterPragma(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragma" ):
                listener.exitPragma(self)




    def pragma(self):

        localctx = nim_Parser.PragmaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_pragma)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 814
            self.match(nim_Parser.OPEN_BRACE)
            self.state = 815
            self.match(nim_Parser.DOT)
            self.state = 816
            self.match(nim_Parser.IDENTIFIER)
            self.state = 818
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==nim_Parser.DOT:
                self.state = 817
                self.match(nim_Parser.DOT)


            self.state = 820
            self.match(nim_Parser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcRoutineHeaderContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self):
            return self.getTypedRuleContext(nim_Parser.SymbolContext,0)


        def arrayConstr(self):
            return self.getTypedRuleContext(nim_Parser.ArrayConstrContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_procRoutineHeader

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcRoutineHeader" ):
                listener.enterProcRoutineHeader(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcRoutineHeader" ):
                listener.exitProcRoutineHeader(self)




    def procRoutineHeader(self):

        localctx = nim_Parser.ProcRoutineHeaderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_procRoutineHeader)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 822
            self.symbol()
            self.state = 824
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==nim_Parser.OPEN_BRACK:
                self.state = 823
                self.arrayConstr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcRoutineVariableTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(nim_Parser.IDENTIFIER, 0)

        def arrayConstr(self):
            return self.getTypedRuleContext(nim_Parser.ArrayConstrContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_procRoutineVariableType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcRoutineVariableType" ):
                listener.enterProcRoutineVariableType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcRoutineVariableType" ):
                listener.exitProcRoutineVariableType(self)




    def procRoutineVariableType(self):

        localctx = nim_Parser.ProcRoutineVariableTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_procRoutineVariableType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 826
            self.match(nim_Parser.IDENTIFIER)
            self.state = 827
            self.arrayConstr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcRoutineTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(nim_Parser.IDENTIFIER, 0)

        def arrayConstr(self):
            return self.getTypedRuleContext(nim_Parser.ArrayConstrContext,0)


        def PROC(self):
            return self.getToken(nim_Parser.PROC, 0)

        def procRoutineBodyList(self):
            return self.getTypedRuleContext(nim_Parser.ProcRoutineBodyListContext,0)


        def VARIABLE(self):
            return self.getToken(nim_Parser.VARIABLE, 0)

        def procRoutineVariableType(self):
            return self.getTypedRuleContext(nim_Parser.ProcRoutineVariableTypeContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_procRoutineType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcRoutineType" ):
                listener.enterProcRoutineType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcRoutineType" ):
                listener.exitProcRoutineType(self)




    def procRoutineType(self):

        localctx = nim_Parser.ProcRoutineTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_procRoutineType)
        self._la = 0 # Token type
        try:
            self.state = 837
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [nim_Parser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 829
                self.match(nim_Parser.IDENTIFIER)
                self.state = 831
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nim_Parser.OPEN_BRACK:
                    self.state = 830
                    self.arrayConstr()


                pass
            elif token in [nim_Parser.PROC]:
                self.enterOuterAlt(localctx, 2)
                self.state = 833
                self.match(nim_Parser.PROC)
                self.state = 834
                self.procRoutineBodyList()
                pass
            elif token in [nim_Parser.VARIABLE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 835
                self.match(nim_Parser.VARIABLE)
                self.state = 836
                self.procRoutineVariableType()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcRoutineBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(nim_Parser.IDENTIFIER, 0)

        def COLON(self):
            return self.getToken(nim_Parser.COLON, 0)

        def procRoutineType(self):
            return self.getTypedRuleContext(nim_Parser.ProcRoutineTypeContext,0)


        def EQUALS(self):
            return self.getToken(nim_Parser.EQUALS, 0)

        def simpleExpr(self):
            return self.getTypedRuleContext(nim_Parser.SimpleExprContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_procRoutineBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcRoutineBody" ):
                listener.enterProcRoutineBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcRoutineBody" ):
                listener.exitProcRoutineBody(self)




    def procRoutineBody(self):

        localctx = nim_Parser.ProcRoutineBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_procRoutineBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 839
            self.match(nim_Parser.IDENTIFIER)
            self.state = 844
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [nim_Parser.COLON]:
                self.state = 840
                self.match(nim_Parser.COLON)
                self.state = 841
                self.procRoutineType()
                pass
            elif token in [nim_Parser.EQUALS]:
                self.state = 842
                self.match(nim_Parser.EQUALS)
                self.state = 843
                self.simpleExpr()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcRoutineTailContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUALS(self):
            return self.getToken(nim_Parser.EQUALS, 0)

        def anyStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.AnyStmtContext)
            else:
                return self.getTypedRuleContext(nim_Parser.AnyStmtContext,i)


        def COLON(self):
            return self.getToken(nim_Parser.COLON, 0)

        def procRoutineType(self):
            return self.getTypedRuleContext(nim_Parser.ProcRoutineTypeContext,0)


        def ind(self):
            return self.getTypedRuleContext(nim_Parser.IndContext,0)


        def ded(self):
            return self.getTypedRuleContext(nim_Parser.DedContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_procRoutineTail

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcRoutineTail" ):
                listener.enterProcRoutineTail(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcRoutineTail" ):
                listener.exitProcRoutineTail(self)




    def procRoutineTail(self):

        localctx = nim_Parser.ProcRoutineTailContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_procRoutineTail)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 848
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==nim_Parser.COLON:
                self.state = 846
                self.match(nim_Parser.COLON)
                self.state = 847
                self.procRoutineType()


            self.state = 850
            self.match(nim_Parser.EQUALS)
            self.state = 860
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [nim_Parser.OPEN_PAREN, nim_Parser.CLOSE_PAREN, nim_Parser.OPEN_BRACK, nim_Parser.CLOSE_BRACK, nim_Parser.OBJECT, nim_Parser.TYPE, nim_Parser.COLON, nim_Parser.DOT, nim_Parser.EQUALS, nim_Parser.IN, nim_Parser.OF, nim_Parser.NOT, nim_Parser.DOLLAR_SIGN, nim_Parser.OP0, nim_Parser.OP1, nim_Parser.OP2, nim_Parser.OP3, nim_Parser.OP4, nim_Parser.OP5, nim_Parser.OP6, nim_Parser.OP7, nim_Parser.OP8, nim_Parser.OP9, nim_Parser.OP10, nim_Parser.VARIABLE, nim_Parser.LET, nim_Parser.CONST, nim_Parser.PROC, nim_Parser.RETURN, nim_Parser.CASE, nim_Parser.IF, nim_Parser.WHILE, nim_Parser.FOR, nim_Parser.CONTINUE, nim_Parser.BREAK, nim_Parser.TEMPLATE, nim_Parser.WHEN, nim_Parser.IMPORT, nim_Parser.FROM, nim_Parser.REF, nim_Parser.BLOCK, nim_Parser.MACRO, nim_Parser.NIL, nim_Parser.DISCARD, nim_Parser.SYM_HEADER, nim_Parser.IDENTIFIER, nim_Parser.INT_LIT, nim_Parser.INT8_LIT, nim_Parser.INT16_LIT, nim_Parser.INT32_LIT, nim_Parser.INT64_LIT, nim_Parser.UINT_LIT, nim_Parser.UINT8_LIT, nim_Parser.UINT16_LIT, nim_Parser.UINT32_LIT, nim_Parser.UINT64_LIT, nim_Parser.FLOAT_LIT, nim_Parser.FLOAT32_LIT, nim_Parser.FLOAT64_LIT, nim_Parser.CHAR_LIT, nim_Parser.STR_LIT, nim_Parser.TRIPLESTR_LIT, nim_Parser.RSTR_LIT, nim_Parser.GENERALIZED_STR_LIT, nim_Parser.GENERALIZED_TRIPLESTR_LIT]:
                self.state = 851
                self.anyStmt()
                pass
            elif token in [nim_Parser.INDENT]:
                self.state = 852
                self.ind()
                self.state = 854 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 853
                    self.anyStmt()
                    self.state = 856 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nim_Parser.OPEN_PAREN) | (1 << nim_Parser.CLOSE_PAREN) | (1 << nim_Parser.OPEN_BRACK) | (1 << nim_Parser.CLOSE_BRACK) | (1 << nim_Parser.OBJECT) | (1 << nim_Parser.TYPE) | (1 << nim_Parser.COLON) | (1 << nim_Parser.DOT) | (1 << nim_Parser.EQUALS) | (1 << nim_Parser.IN) | (1 << nim_Parser.OF) | (1 << nim_Parser.NOT) | (1 << nim_Parser.DOLLAR_SIGN) | (1 << nim_Parser.OP0) | (1 << nim_Parser.OP1) | (1 << nim_Parser.OP2) | (1 << nim_Parser.OP3) | (1 << nim_Parser.OP4) | (1 << nim_Parser.OP5) | (1 << nim_Parser.OP6) | (1 << nim_Parser.OP7) | (1 << nim_Parser.OP8) | (1 << nim_Parser.OP9) | (1 << nim_Parser.OP10) | (1 << nim_Parser.VARIABLE) | (1 << nim_Parser.LET) | (1 << nim_Parser.CONST) | (1 << nim_Parser.PROC) | (1 << nim_Parser.RETURN) | (1 << nim_Parser.CASE) | (1 << nim_Parser.IF) | (1 << nim_Parser.WHILE) | (1 << nim_Parser.FOR) | (1 << nim_Parser.CONTINUE) | (1 << nim_Parser.BREAK) | (1 << nim_Parser.TEMPLATE))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (nim_Parser.WHEN - 66)) | (1 << (nim_Parser.IMPORT - 66)) | (1 << (nim_Parser.FROM - 66)) | (1 << (nim_Parser.REF - 66)) | (1 << (nim_Parser.BLOCK - 66)) | (1 << (nim_Parser.MACRO - 66)) | (1 << (nim_Parser.NIL - 66)) | (1 << (nim_Parser.DISCARD - 66)) | (1 << (nim_Parser.SYM_HEADER - 66)) | (1 << (nim_Parser.IDENTIFIER - 66)) | (1 << (nim_Parser.INT_LIT - 66)) | (1 << (nim_Parser.INT8_LIT - 66)) | (1 << (nim_Parser.INT16_LIT - 66)) | (1 << (nim_Parser.INT32_LIT - 66)) | (1 << (nim_Parser.INT64_LIT - 66)) | (1 << (nim_Parser.UINT_LIT - 66)) | (1 << (nim_Parser.UINT8_LIT - 66)) | (1 << (nim_Parser.UINT16_LIT - 66)) | (1 << (nim_Parser.UINT32_LIT - 66)) | (1 << (nim_Parser.UINT64_LIT - 66)) | (1 << (nim_Parser.FLOAT_LIT - 66)) | (1 << (nim_Parser.FLOAT32_LIT - 66)) | (1 << (nim_Parser.FLOAT64_LIT - 66)) | (1 << (nim_Parser.CHAR_LIT - 66)) | (1 << (nim_Parser.STR_LIT - 66)) | (1 << (nim_Parser.TRIPLESTR_LIT - 66)) | (1 << (nim_Parser.RSTR_LIT - 66)) | (1 << (nim_Parser.GENERALIZED_STR_LIT - 66)) | (1 << (nim_Parser.GENERALIZED_TRIPLESTR_LIT - 66)))) != 0)):
                        break

                self.state = 858
                self.ded()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcRoutineBodyListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(nim_Parser.OPEN_PAREN, 0)

        def procRoutineBody(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.ProcRoutineBodyContext)
            else:
                return self.getTypedRuleContext(nim_Parser.ProcRoutineBodyContext,i)


        def CLOSE_PAREN(self):
            return self.getToken(nim_Parser.CLOSE_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.COMMA)
            else:
                return self.getToken(nim_Parser.COMMA, i)

        def getRuleIndex(self):
            return nim_Parser.RULE_procRoutineBodyList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcRoutineBodyList" ):
                listener.enterProcRoutineBodyList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcRoutineBodyList" ):
                listener.exitProcRoutineBodyList(self)




    def procRoutineBodyList(self):

        localctx = nim_Parser.ProcRoutineBodyListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_procRoutineBodyList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 862
            self.match(nim_Parser.OPEN_PAREN)
            self.state = 863
            self.procRoutineBody()
            self.state = 868
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==nim_Parser.COMMA:
                self.state = 864
                self.match(nim_Parser.COMMA)
                self.state = 865
                self.procRoutineBody()
                self.state = 870
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 871
            self.match(nim_Parser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcRoutineContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def procRoutineHeader(self):
            return self.getTypedRuleContext(nim_Parser.ProcRoutineHeaderContext,0)


        def procRoutineBodyList(self):
            return self.getTypedRuleContext(nim_Parser.ProcRoutineBodyListContext,0)


        def procRoutineTail(self):
            return self.getTypedRuleContext(nim_Parser.ProcRoutineTailContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_procRoutine

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcRoutine" ):
                listener.enterProcRoutine(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcRoutine" ):
                listener.exitProcRoutine(self)




    def procRoutine(self):

        localctx = nim_Parser.ProcRoutineContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_procRoutine)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 873
            self.procRoutineHeader()
            self.state = 874
            self.procRoutineBodyList()
            self.state = 875
            self.procRoutineTail()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TemplateRoutineHeaderContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(nim_Parser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_templateRoutineHeader

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemplateRoutineHeader" ):
                listener.enterTemplateRoutineHeader(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemplateRoutineHeader" ):
                listener.exitTemplateRoutineHeader(self)




    def templateRoutineHeader(self):

        localctx = nim_Parser.TemplateRoutineHeaderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_templateRoutineHeader)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 877
            self.match(nim_Parser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TemplateRoutineBodyListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(nim_Parser.OPEN_PAREN, 0)

        def templateRoutineBody(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.TemplateRoutineBodyContext)
            else:
                return self.getTypedRuleContext(nim_Parser.TemplateRoutineBodyContext,i)


        def CLOSE_PAREN(self):
            return self.getToken(nim_Parser.CLOSE_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.COMMA)
            else:
                return self.getToken(nim_Parser.COMMA, i)

        def getRuleIndex(self):
            return nim_Parser.RULE_templateRoutineBodyList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemplateRoutineBodyList" ):
                listener.enterTemplateRoutineBodyList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemplateRoutineBodyList" ):
                listener.exitTemplateRoutineBodyList(self)




    def templateRoutineBodyList(self):

        localctx = nim_Parser.TemplateRoutineBodyListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_templateRoutineBodyList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 879
            self.match(nim_Parser.OPEN_PAREN)
            self.state = 880
            self.templateRoutineBody()
            self.state = 885
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==nim_Parser.COMMA:
                self.state = 881
                self.match(nim_Parser.COMMA)
                self.state = 882
                self.templateRoutineBody()
                self.state = 887
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 888
            self.match(nim_Parser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TemplateRoutineBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(nim_Parser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_templateRoutineBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemplateRoutineBody" ):
                listener.enterTemplateRoutineBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemplateRoutineBody" ):
                listener.exitTemplateRoutineBody(self)




    def templateRoutineBody(self):

        localctx = nim_Parser.TemplateRoutineBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_templateRoutineBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 890
            self.match(nim_Parser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TemplateRoutineTailContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUALS(self):
            return self.getToken(nim_Parser.EQUALS, 0)

        def anyStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.AnyStmtContext)
            else:
                return self.getTypedRuleContext(nim_Parser.AnyStmtContext,i)


        def pragma(self):
            return self.getTypedRuleContext(nim_Parser.PragmaContext,0)


        def ind(self):
            return self.getTypedRuleContext(nim_Parser.IndContext,0)


        def ded(self):
            return self.getTypedRuleContext(nim_Parser.DedContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_templateRoutineTail

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemplateRoutineTail" ):
                listener.enterTemplateRoutineTail(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemplateRoutineTail" ):
                listener.exitTemplateRoutineTail(self)




    def templateRoutineTail(self):

        localctx = nim_Parser.TemplateRoutineTailContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_templateRoutineTail)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 893
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==nim_Parser.OPEN_BRACE:
                self.state = 892
                self.pragma()


            self.state = 895
            self.match(nim_Parser.EQUALS)
            self.state = 905
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [nim_Parser.OPEN_PAREN, nim_Parser.CLOSE_PAREN, nim_Parser.OPEN_BRACK, nim_Parser.CLOSE_BRACK, nim_Parser.OBJECT, nim_Parser.TYPE, nim_Parser.COLON, nim_Parser.DOT, nim_Parser.EQUALS, nim_Parser.IN, nim_Parser.OF, nim_Parser.NOT, nim_Parser.DOLLAR_SIGN, nim_Parser.OP0, nim_Parser.OP1, nim_Parser.OP2, nim_Parser.OP3, nim_Parser.OP4, nim_Parser.OP5, nim_Parser.OP6, nim_Parser.OP7, nim_Parser.OP8, nim_Parser.OP9, nim_Parser.OP10, nim_Parser.VARIABLE, nim_Parser.LET, nim_Parser.CONST, nim_Parser.PROC, nim_Parser.RETURN, nim_Parser.CASE, nim_Parser.IF, nim_Parser.WHILE, nim_Parser.FOR, nim_Parser.CONTINUE, nim_Parser.BREAK, nim_Parser.TEMPLATE, nim_Parser.WHEN, nim_Parser.IMPORT, nim_Parser.FROM, nim_Parser.REF, nim_Parser.BLOCK, nim_Parser.MACRO, nim_Parser.NIL, nim_Parser.DISCARD, nim_Parser.SYM_HEADER, nim_Parser.IDENTIFIER, nim_Parser.INT_LIT, nim_Parser.INT8_LIT, nim_Parser.INT16_LIT, nim_Parser.INT32_LIT, nim_Parser.INT64_LIT, nim_Parser.UINT_LIT, nim_Parser.UINT8_LIT, nim_Parser.UINT16_LIT, nim_Parser.UINT32_LIT, nim_Parser.UINT64_LIT, nim_Parser.FLOAT_LIT, nim_Parser.FLOAT32_LIT, nim_Parser.FLOAT64_LIT, nim_Parser.CHAR_LIT, nim_Parser.STR_LIT, nim_Parser.TRIPLESTR_LIT, nim_Parser.RSTR_LIT, nim_Parser.GENERALIZED_STR_LIT, nim_Parser.GENERALIZED_TRIPLESTR_LIT]:
                self.state = 896
                self.anyStmt()
                pass
            elif token in [nim_Parser.INDENT]:
                self.state = 897
                self.ind()
                self.state = 899 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 898
                    self.anyStmt()
                    self.state = 901 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nim_Parser.OPEN_PAREN) | (1 << nim_Parser.CLOSE_PAREN) | (1 << nim_Parser.OPEN_BRACK) | (1 << nim_Parser.CLOSE_BRACK) | (1 << nim_Parser.OBJECT) | (1 << nim_Parser.TYPE) | (1 << nim_Parser.COLON) | (1 << nim_Parser.DOT) | (1 << nim_Parser.EQUALS) | (1 << nim_Parser.IN) | (1 << nim_Parser.OF) | (1 << nim_Parser.NOT) | (1 << nim_Parser.DOLLAR_SIGN) | (1 << nim_Parser.OP0) | (1 << nim_Parser.OP1) | (1 << nim_Parser.OP2) | (1 << nim_Parser.OP3) | (1 << nim_Parser.OP4) | (1 << nim_Parser.OP5) | (1 << nim_Parser.OP6) | (1 << nim_Parser.OP7) | (1 << nim_Parser.OP8) | (1 << nim_Parser.OP9) | (1 << nim_Parser.OP10) | (1 << nim_Parser.VARIABLE) | (1 << nim_Parser.LET) | (1 << nim_Parser.CONST) | (1 << nim_Parser.PROC) | (1 << nim_Parser.RETURN) | (1 << nim_Parser.CASE) | (1 << nim_Parser.IF) | (1 << nim_Parser.WHILE) | (1 << nim_Parser.FOR) | (1 << nim_Parser.CONTINUE) | (1 << nim_Parser.BREAK) | (1 << nim_Parser.TEMPLATE))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (nim_Parser.WHEN - 66)) | (1 << (nim_Parser.IMPORT - 66)) | (1 << (nim_Parser.FROM - 66)) | (1 << (nim_Parser.REF - 66)) | (1 << (nim_Parser.BLOCK - 66)) | (1 << (nim_Parser.MACRO - 66)) | (1 << (nim_Parser.NIL - 66)) | (1 << (nim_Parser.DISCARD - 66)) | (1 << (nim_Parser.SYM_HEADER - 66)) | (1 << (nim_Parser.IDENTIFIER - 66)) | (1 << (nim_Parser.INT_LIT - 66)) | (1 << (nim_Parser.INT8_LIT - 66)) | (1 << (nim_Parser.INT16_LIT - 66)) | (1 << (nim_Parser.INT32_LIT - 66)) | (1 << (nim_Parser.INT64_LIT - 66)) | (1 << (nim_Parser.UINT_LIT - 66)) | (1 << (nim_Parser.UINT8_LIT - 66)) | (1 << (nim_Parser.UINT16_LIT - 66)) | (1 << (nim_Parser.UINT32_LIT - 66)) | (1 << (nim_Parser.UINT64_LIT - 66)) | (1 << (nim_Parser.FLOAT_LIT - 66)) | (1 << (nim_Parser.FLOAT32_LIT - 66)) | (1 << (nim_Parser.FLOAT64_LIT - 66)) | (1 << (nim_Parser.CHAR_LIT - 66)) | (1 << (nim_Parser.STR_LIT - 66)) | (1 << (nim_Parser.TRIPLESTR_LIT - 66)) | (1 << (nim_Parser.RSTR_LIT - 66)) | (1 << (nim_Parser.GENERALIZED_STR_LIT - 66)) | (1 << (nim_Parser.GENERALIZED_TRIPLESTR_LIT - 66)))) != 0)):
                        break

                self.state = 903
                self.ded()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TemplateRoutineContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def templateRoutineHeader(self):
            return self.getTypedRuleContext(nim_Parser.TemplateRoutineHeaderContext,0)


        def templateRoutineBodyList(self):
            return self.getTypedRuleContext(nim_Parser.TemplateRoutineBodyListContext,0)


        def templateRoutineTail(self):
            return self.getTypedRuleContext(nim_Parser.TemplateRoutineTailContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_templateRoutine

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemplateRoutine" ):
                listener.enterTemplateRoutine(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemplateRoutine" ):
                listener.exitTemplateRoutine(self)




    def templateRoutine(self):

        localctx = nim_Parser.TemplateRoutineContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_templateRoutine)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 907
            self.templateRoutineHeader()
            self.state = 908
            self.templateRoutineBodyList()
            self.state = 909
            self.templateRoutineTail()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MacroRoutineHeaderContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(nim_Parser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_macroRoutineHeader

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacroRoutineHeader" ):
                listener.enterMacroRoutineHeader(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacroRoutineHeader" ):
                listener.exitMacroRoutineHeader(self)




    def macroRoutineHeader(self):

        localctx = nim_Parser.MacroRoutineHeaderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_macroRoutineHeader)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 911
            self.match(nim_Parser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MacroRoutineTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(nim_Parser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_macroRoutineType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacroRoutineType" ):
                listener.enterMacroRoutineType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacroRoutineType" ):
                listener.exitMacroRoutineType(self)




    def macroRoutineType(self):

        localctx = nim_Parser.MacroRoutineTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_macroRoutineType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 913
            self.match(nim_Parser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MacroRoutineBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(nim_Parser.IDENTIFIER, 0)

        def COLON(self):
            return self.getToken(nim_Parser.COLON, 0)

        def macroRoutineType(self):
            return self.getTypedRuleContext(nim_Parser.MacroRoutineTypeContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_macroRoutineBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacroRoutineBody" ):
                listener.enterMacroRoutineBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacroRoutineBody" ):
                listener.exitMacroRoutineBody(self)




    def macroRoutineBody(self):

        localctx = nim_Parser.MacroRoutineBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_macroRoutineBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 915
            self.match(nim_Parser.IDENTIFIER)

            self.state = 916
            self.match(nim_Parser.COLON)
            self.state = 917
            self.macroRoutineType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MacroRoutineBodyListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(nim_Parser.OPEN_PAREN, 0)

        def macroRoutineBody(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.MacroRoutineBodyContext)
            else:
                return self.getTypedRuleContext(nim_Parser.MacroRoutineBodyContext,i)


        def CLOSE_PAREN(self):
            return self.getToken(nim_Parser.CLOSE_PAREN, 0)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.COLON)
            else:
                return self.getToken(nim_Parser.COLON, i)

        def SEMI_COLON(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.SEMI_COLON)
            else:
                return self.getToken(nim_Parser.SEMI_COLON, i)

        def getRuleIndex(self):
            return nim_Parser.RULE_macroRoutineBodyList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacroRoutineBodyList" ):
                listener.enterMacroRoutineBodyList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacroRoutineBodyList" ):
                listener.exitMacroRoutineBodyList(self)




    def macroRoutineBodyList(self):

        localctx = nim_Parser.MacroRoutineBodyListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_macroRoutineBodyList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 919
            self.match(nim_Parser.OPEN_PAREN)
            self.state = 920
            self.macroRoutineBody()
            self.state = 925
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==nim_Parser.SEMI_COLON or _la==nim_Parser.COLON:
                self.state = 921
                _la = self._input.LA(1)
                if not(_la==nim_Parser.SEMI_COLON or _la==nim_Parser.COLON):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 922
                self.macroRoutineBody()
                self.state = 927
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 928
            self.match(nim_Parser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MacroRoutineTailContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUALS(self):
            return self.getToken(nim_Parser.EQUALS, 0)

        def anyStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.AnyStmtContext)
            else:
                return self.getTypedRuleContext(nim_Parser.AnyStmtContext,i)


        def COLON(self):
            return self.getToken(nim_Parser.COLON, 0)

        def macroRoutineType(self):
            return self.getTypedRuleContext(nim_Parser.MacroRoutineTypeContext,0)


        def ind(self):
            return self.getTypedRuleContext(nim_Parser.IndContext,0)


        def ded(self):
            return self.getTypedRuleContext(nim_Parser.DedContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_macroRoutineTail

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacroRoutineTail" ):
                listener.enterMacroRoutineTail(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacroRoutineTail" ):
                listener.exitMacroRoutineTail(self)




    def macroRoutineTail(self):

        localctx = nim_Parser.MacroRoutineTailContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_macroRoutineTail)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 932
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==nim_Parser.COLON:
                self.state = 930
                self.match(nim_Parser.COLON)
                self.state = 931
                self.macroRoutineType()


            self.state = 934
            self.match(nim_Parser.EQUALS)
            self.state = 944
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [nim_Parser.OPEN_PAREN, nim_Parser.CLOSE_PAREN, nim_Parser.OPEN_BRACK, nim_Parser.CLOSE_BRACK, nim_Parser.OBJECT, nim_Parser.TYPE, nim_Parser.COLON, nim_Parser.DOT, nim_Parser.EQUALS, nim_Parser.IN, nim_Parser.OF, nim_Parser.NOT, nim_Parser.DOLLAR_SIGN, nim_Parser.OP0, nim_Parser.OP1, nim_Parser.OP2, nim_Parser.OP3, nim_Parser.OP4, nim_Parser.OP5, nim_Parser.OP6, nim_Parser.OP7, nim_Parser.OP8, nim_Parser.OP9, nim_Parser.OP10, nim_Parser.VARIABLE, nim_Parser.LET, nim_Parser.CONST, nim_Parser.PROC, nim_Parser.RETURN, nim_Parser.CASE, nim_Parser.IF, nim_Parser.WHILE, nim_Parser.FOR, nim_Parser.CONTINUE, nim_Parser.BREAK, nim_Parser.TEMPLATE, nim_Parser.WHEN, nim_Parser.IMPORT, nim_Parser.FROM, nim_Parser.REF, nim_Parser.BLOCK, nim_Parser.MACRO, nim_Parser.NIL, nim_Parser.DISCARD, nim_Parser.SYM_HEADER, nim_Parser.IDENTIFIER, nim_Parser.INT_LIT, nim_Parser.INT8_LIT, nim_Parser.INT16_LIT, nim_Parser.INT32_LIT, nim_Parser.INT64_LIT, nim_Parser.UINT_LIT, nim_Parser.UINT8_LIT, nim_Parser.UINT16_LIT, nim_Parser.UINT32_LIT, nim_Parser.UINT64_LIT, nim_Parser.FLOAT_LIT, nim_Parser.FLOAT32_LIT, nim_Parser.FLOAT64_LIT, nim_Parser.CHAR_LIT, nim_Parser.STR_LIT, nim_Parser.TRIPLESTR_LIT, nim_Parser.RSTR_LIT, nim_Parser.GENERALIZED_STR_LIT, nim_Parser.GENERALIZED_TRIPLESTR_LIT]:
                self.state = 935
                self.anyStmt()
                pass
            elif token in [nim_Parser.INDENT]:
                self.state = 936
                self.ind()
                self.state = 938 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 937
                    self.anyStmt()
                    self.state = 940 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nim_Parser.OPEN_PAREN) | (1 << nim_Parser.CLOSE_PAREN) | (1 << nim_Parser.OPEN_BRACK) | (1 << nim_Parser.CLOSE_BRACK) | (1 << nim_Parser.OBJECT) | (1 << nim_Parser.TYPE) | (1 << nim_Parser.COLON) | (1 << nim_Parser.DOT) | (1 << nim_Parser.EQUALS) | (1 << nim_Parser.IN) | (1 << nim_Parser.OF) | (1 << nim_Parser.NOT) | (1 << nim_Parser.DOLLAR_SIGN) | (1 << nim_Parser.OP0) | (1 << nim_Parser.OP1) | (1 << nim_Parser.OP2) | (1 << nim_Parser.OP3) | (1 << nim_Parser.OP4) | (1 << nim_Parser.OP5) | (1 << nim_Parser.OP6) | (1 << nim_Parser.OP7) | (1 << nim_Parser.OP8) | (1 << nim_Parser.OP9) | (1 << nim_Parser.OP10) | (1 << nim_Parser.VARIABLE) | (1 << nim_Parser.LET) | (1 << nim_Parser.CONST) | (1 << nim_Parser.PROC) | (1 << nim_Parser.RETURN) | (1 << nim_Parser.CASE) | (1 << nim_Parser.IF) | (1 << nim_Parser.WHILE) | (1 << nim_Parser.FOR) | (1 << nim_Parser.CONTINUE) | (1 << nim_Parser.BREAK) | (1 << nim_Parser.TEMPLATE))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (nim_Parser.WHEN - 66)) | (1 << (nim_Parser.IMPORT - 66)) | (1 << (nim_Parser.FROM - 66)) | (1 << (nim_Parser.REF - 66)) | (1 << (nim_Parser.BLOCK - 66)) | (1 << (nim_Parser.MACRO - 66)) | (1 << (nim_Parser.NIL - 66)) | (1 << (nim_Parser.DISCARD - 66)) | (1 << (nim_Parser.SYM_HEADER - 66)) | (1 << (nim_Parser.IDENTIFIER - 66)) | (1 << (nim_Parser.INT_LIT - 66)) | (1 << (nim_Parser.INT8_LIT - 66)) | (1 << (nim_Parser.INT16_LIT - 66)) | (1 << (nim_Parser.INT32_LIT - 66)) | (1 << (nim_Parser.INT64_LIT - 66)) | (1 << (nim_Parser.UINT_LIT - 66)) | (1 << (nim_Parser.UINT8_LIT - 66)) | (1 << (nim_Parser.UINT16_LIT - 66)) | (1 << (nim_Parser.UINT32_LIT - 66)) | (1 << (nim_Parser.UINT64_LIT - 66)) | (1 << (nim_Parser.FLOAT_LIT - 66)) | (1 << (nim_Parser.FLOAT32_LIT - 66)) | (1 << (nim_Parser.FLOAT64_LIT - 66)) | (1 << (nim_Parser.CHAR_LIT - 66)) | (1 << (nim_Parser.STR_LIT - 66)) | (1 << (nim_Parser.TRIPLESTR_LIT - 66)) | (1 << (nim_Parser.RSTR_LIT - 66)) | (1 << (nim_Parser.GENERALIZED_STR_LIT - 66)) | (1 << (nim_Parser.GENERALIZED_TRIPLESTR_LIT - 66)))) != 0)):
                        break

                self.state = 942
                self.ded()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MacroRoutineContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def macroRoutineHeader(self):
            return self.getTypedRuleContext(nim_Parser.MacroRoutineHeaderContext,0)


        def macroRoutineBodyList(self):
            return self.getTypedRuleContext(nim_Parser.MacroRoutineBodyListContext,0)


        def macroRoutineTail(self):
            return self.getTypedRuleContext(nim_Parser.MacroRoutineTailContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_macroRoutine

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacroRoutine" ):
                listener.enterMacroRoutine(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacroRoutine" ):
                listener.exitMacroRoutine(self)




    def macroRoutine(self):

        localctx = nim_Parser.MacroRoutineContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_macroRoutine)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 946
            self.macroRoutineHeader()
            self.state = 947
            self.macroRoutineBodyList()
            self.state = 948
            self.macroRoutineTail()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeSectionBodyExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleExpr(self):
            return self.getTypedRuleContext(nim_Parser.SimpleExprContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_typeSectionBodyExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeSectionBodyExpr" ):
                listener.enterTypeSectionBodyExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeSectionBodyExpr" ):
                listener.exitTypeSectionBodyExpr(self)




    def typeSectionBodyExpr(self):

        localctx = nim_Parser.TypeSectionBodyExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_typeSectionBodyExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 950
            self.simpleExpr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeSectionBodyHeaderContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(nim_Parser.IDENTIFIER, 0)

        def EQUALS(self):
            return self.getToken(nim_Parser.EQUALS, 0)

        def arrayConstr(self):
            return self.getTypedRuleContext(nim_Parser.ArrayConstrContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_typeSectionBodyHeader

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeSectionBodyHeader" ):
                listener.enterTypeSectionBodyHeader(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeSectionBodyHeader" ):
                listener.exitTypeSectionBodyHeader(self)




    def typeSectionBodyHeader(self):

        localctx = nim_Parser.TypeSectionBodyHeaderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_typeSectionBodyHeader)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 952
            self.match(nim_Parser.IDENTIFIER)
            self.state = 954
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==nim_Parser.OPEN_BRACK:
                self.state = 953
                self.arrayConstr()


            self.state = 956
            self.match(nim_Parser.EQUALS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeSectionBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeSectionBodyHeader(self):
            return self.getTypedRuleContext(nim_Parser.TypeSectionBodyHeaderContext,0)


        def typeSectionBodyExpr(self):
            return self.getTypedRuleContext(nim_Parser.TypeSectionBodyExprContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_typeSectionBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeSectionBody" ):
                listener.enterTypeSectionBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeSectionBody" ):
                listener.exitTypeSectionBody(self)




    def typeSectionBody(self):

        localctx = nim_Parser.TypeSectionBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_typeSectionBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 958
            self.typeSectionBodyHeader()
            self.state = 959
            self.typeSectionBodyExpr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeSectionBodyListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ind(self):
            return self.getTypedRuleContext(nim_Parser.IndContext,0)


        def ded(self):
            return self.getTypedRuleContext(nim_Parser.DedContext,0)


        def typeSectionBody(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.TypeSectionBodyContext)
            else:
                return self.getTypedRuleContext(nim_Parser.TypeSectionBodyContext,i)


        def getRuleIndex(self):
            return nim_Parser.RULE_typeSectionBodyList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeSectionBodyList" ):
                listener.enterTypeSectionBodyList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeSectionBodyList" ):
                listener.exitTypeSectionBodyList(self)




    def typeSectionBodyList(self):

        localctx = nim_Parser.TypeSectionBodyListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_typeSectionBodyList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 961
            self.ind()
            self.state = 963 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 962
                self.typeSectionBody()
                self.state = 965 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==nim_Parser.IDENTIFIER):
                    break

            self.state = 967
            self.ded()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeSectionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeSectionBodyList(self):
            return self.getTypedRuleContext(nim_Parser.TypeSectionBodyListContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_typeSection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeSection" ):
                listener.enterTypeSection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeSection" ):
                listener.exitTypeSection(self)




    def typeSection(self):

        localctx = nim_Parser.TypeSectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_typeSection)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 969
            self.typeSectionBodyList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableSectionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ind(self):
            return self.getTypedRuleContext(nim_Parser.IndContext,0)


        def ded(self):
            return self.getTypedRuleContext(nim_Parser.DedContext,0)


        def variable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.VariableContext)
            else:
                return self.getTypedRuleContext(nim_Parser.VariableContext,i)


        def getRuleIndex(self):
            return nim_Parser.RULE_variableSection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableSection" ):
                listener.enterVariableSection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableSection" ):
                listener.exitVariableSection(self)




    def variableSection(self):

        localctx = nim_Parser.VariableSectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_variableSection)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 984
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [nim_Parser.IDENTIFIER]:
                self.state = 972 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 971
                        self.variable()

                    else:
                        raise NoViableAltException(self)
                    self.state = 974 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,102,self._ctx)

                pass
            elif token in [nim_Parser.INDENT]:
                self.state = 976
                self.ind()
                self.state = 978 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 977
                    self.variable()
                    self.state = 980 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==nim_Parser.IDENTIFIER):
                        break

                self.state = 982
                self.ded()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantSectionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ind(self):
            return self.getTypedRuleContext(nim_Parser.IndContext,0)


        def ded(self):
            return self.getTypedRuleContext(nim_Parser.DedContext,0)


        def constant(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.ConstantContext)
            else:
                return self.getTypedRuleContext(nim_Parser.ConstantContext,i)


        def getRuleIndex(self):
            return nim_Parser.RULE_constantSection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantSection" ):
                listener.enterConstantSection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantSection" ):
                listener.exitConstantSection(self)




    def constantSection(self):

        localctx = nim_Parser.ConstantSectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_constantSection)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 999
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [nim_Parser.IDENTIFIER]:
                self.state = 987 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 986
                        self.constant()

                    else:
                        raise NoViableAltException(self)
                    self.state = 989 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,105,self._ctx)

                pass
            elif token in [nim_Parser.INDENT]:
                self.state = 991
                self.ind()
                self.state = 993 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 992
                    self.constant()
                    self.state = 995 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==nim_Parser.IDENTIFIER):
                        break

                self.state = 997
                self.ded()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LetSectionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.IDENTIFIER)
            else:
                return self.getToken(nim_Parser.IDENTIFIER, i)

        def EQUALS(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.EQUALS)
            else:
                return self.getToken(nim_Parser.EQUALS, i)

        def simpleExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.SimpleExprContext)
            else:
                return self.getTypedRuleContext(nim_Parser.SimpleExprContext,i)


        def ind(self):
            return self.getTypedRuleContext(nim_Parser.IndContext,0)


        def ded(self):
            return self.getTypedRuleContext(nim_Parser.DedContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_letSection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLetSection" ):
                listener.enterLetSection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLetSection" ):
                listener.exitLetSection(self)




    def letSection(self):

        localctx = nim_Parser.LetSectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_letSection)
        self._la = 0 # Token type
        try:
            self.state = 1014
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [nim_Parser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1001
                self.match(nim_Parser.IDENTIFIER)
                self.state = 1002
                self.match(nim_Parser.EQUALS)
                self.state = 1003
                self.simpleExpr()
                pass
            elif token in [nim_Parser.INDENT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1004
                self.ind()
                self.state = 1008 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1005
                    self.match(nim_Parser.IDENTIFIER)
                    self.state = 1006
                    self.match(nim_Parser.EQUALS)
                    self.state = 1007
                    self.simpleExpr()
                    self.state = 1010 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==nim_Parser.IDENTIFIER):
                        break

                self.state = 1012
                self.ded()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentVisContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self):
            return self.getTypedRuleContext(nim_Parser.SymbolContext,0)


        def operator(self):
            return self.getTypedRuleContext(nim_Parser.OperatorContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_identVis

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentVis" ):
                listener.enterIdentVis(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentVis" ):
                listener.exitIdentVis(self)




    def identVis(self):

        localctx = nim_Parser.IdentVisContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_identVis)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1016
            self.symbol()
            self.state = 1018
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nim_Parser.COLON) | (1 << nim_Parser.DOT) | (1 << nim_Parser.EQUALS) | (1 << nim_Parser.IN) | (1 << nim_Parser.OF) | (1 << nim_Parser.NOT) | (1 << nim_Parser.DOLLAR_SIGN) | (1 << nim_Parser.OP0) | (1 << nim_Parser.OP1) | (1 << nim_Parser.OP2) | (1 << nim_Parser.OP3) | (1 << nim_Parser.OP4) | (1 << nim_Parser.OP5) | (1 << nim_Parser.OP6) | (1 << nim_Parser.OP7) | (1 << nim_Parser.OP8) | (1 << nim_Parser.OP9) | (1 << nim_Parser.OP10))) != 0):
                self.state = 1017
                self.operator()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarTupleContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUALS(self):
            return self.getToken(nim_Parser.EQUALS, 0)

        def OPEN_BRACE(self):
            return self.getToken(nim_Parser.OPEN_BRACE, 0)

        def identVis(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.IdentVisContext)
            else:
                return self.getTypedRuleContext(nim_Parser.IdentVisContext,i)


        def anyExpr(self):
            return self.getTypedRuleContext(nim_Parser.AnyExprContext,0)


        def ded(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.DedContext)
            else:
                return self.getTypedRuleContext(nim_Parser.DedContext,i)


        def ind(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.IndContext)
            else:
                return self.getTypedRuleContext(nim_Parser.IndContext,i)


        def CLOSE_BRACE(self):
            return self.getToken(nim_Parser.CLOSE_BRACE, 0)

        def andExpr(self):
            return self.getTypedRuleContext(nim_Parser.AndExprContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.COMMA)
            else:
                return self.getToken(nim_Parser.COMMA, i)

        def getRuleIndex(self):
            return nim_Parser.RULE_varTuple

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarTuple" ):
                listener.enterVarTuple(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarTuple" ):
                listener.exitVarTuple(self)




    def varTuple(self):

        localctx = nim_Parser.VarTupleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_varTuple)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1020
            self.match(nim_Parser.OPEN_BRACE)
            self.state = 1021
            self.identVis()
            self.state = 1026
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==nim_Parser.COMMA:
                self.state = 1022
                self.match(nim_Parser.COMMA)
                self.state = 1023
                self.identVis()
                self.state = 1028
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1034
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [nim_Parser.INDENT]:
                self.state = 1029
                self.ind()
                self.state = 1030
                self.match(nim_Parser.CLOSE_BRACE)
                self.state = 1031
                self.ded()
                pass
            elif token in [nim_Parser.CLOSE_BRACE]:
                self.state = 1033
                self.match(nim_Parser.CLOSE_BRACE)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1036
            self.match(nim_Parser.EQUALS)
            self.state = 1038
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==nim_Parser.EOF or _la==nim_Parser.DEDENT:
                self.state = 1037
                self.ded()


            self.state = 1045
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [nim_Parser.INDENT]:
                self.state = 1040
                self.ind()
                self.state = 1041
                self.andExpr()
                self.state = 1042
                self.ded()
                pass
            elif token in [nim_Parser.OPEN_PAREN, nim_Parser.CLOSE_PAREN, nim_Parser.OPEN_BRACK, nim_Parser.CLOSE_BRACK, nim_Parser.OBJECT, nim_Parser.COLON, nim_Parser.DOT, nim_Parser.EQUALS, nim_Parser.IN, nim_Parser.OF, nim_Parser.NOT, nim_Parser.DOLLAR_SIGN, nim_Parser.OP0, nim_Parser.OP1, nim_Parser.OP2, nim_Parser.OP3, nim_Parser.OP4, nim_Parser.OP5, nim_Parser.OP6, nim_Parser.OP7, nim_Parser.OP8, nim_Parser.OP9, nim_Parser.OP10, nim_Parser.CASE, nim_Parser.IF, nim_Parser.FOR, nim_Parser.WHEN, nim_Parser.REF, nim_Parser.BLOCK, nim_Parser.NIL, nim_Parser.SYM_HEADER, nim_Parser.IDENTIFIER, nim_Parser.INT_LIT, nim_Parser.INT8_LIT, nim_Parser.INT16_LIT, nim_Parser.INT32_LIT, nim_Parser.INT64_LIT, nim_Parser.UINT_LIT, nim_Parser.UINT8_LIT, nim_Parser.UINT16_LIT, nim_Parser.UINT32_LIT, nim_Parser.UINT64_LIT, nim_Parser.FLOAT_LIT, nim_Parser.FLOAT32_LIT, nim_Parser.FLOAT64_LIT, nim_Parser.CHAR_LIT, nim_Parser.STR_LIT, nim_Parser.TRIPLESTR_LIT, nim_Parser.RSTR_LIT, nim_Parser.GENERALIZED_STR_LIT, nim_Parser.GENERALIZED_TRIPLESTR_LIT]:
                self.state = 1044
                self.anyExpr()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.IDENTIFIER)
            else:
                return self.getToken(nim_Parser.IDENTIFIER, i)

        def EQUALS(self):
            return self.getToken(nim_Parser.EQUALS, 0)

        def ind(self):
            return self.getTypedRuleContext(nim_Parser.IndContext,0)


        def anyExpr(self):
            return self.getTypedRuleContext(nim_Parser.AnyExprContext,0)


        def ded(self):
            return self.getTypedRuleContext(nim_Parser.DedContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.COMMA)
            else:
                return self.getToken(nim_Parser.COMMA, i)

        def COLON(self):
            return self.getToken(nim_Parser.COLON, 0)

        def simpleExpr(self):
            return self.getTypedRuleContext(nim_Parser.SimpleExprContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_constant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant" ):
                listener.enterConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant" ):
                listener.exitConstant(self)




    def constant(self):

        localctx = nim_Parser.ConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_constant)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1047
            self.match(nim_Parser.IDENTIFIER)
            self.state = 1052
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==nim_Parser.COMMA:
                self.state = 1048
                self.match(nim_Parser.COMMA)
                self.state = 1049
                self.match(nim_Parser.IDENTIFIER)
                self.state = 1054
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1057
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==nim_Parser.COLON:
                self.state = 1055
                self.match(nim_Parser.COLON)
                self.state = 1056
                self.simpleExpr()


            self.state = 1059
            self.match(nim_Parser.EQUALS)
            self.state = 1065
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [nim_Parser.INDENT]:
                self.state = 1060
                self.ind()
                self.state = 1061
                self.anyExpr()
                self.state = 1062
                self.ded()
                pass
            elif token in [nim_Parser.OPEN_PAREN, nim_Parser.CLOSE_PAREN, nim_Parser.OPEN_BRACK, nim_Parser.CLOSE_BRACK, nim_Parser.OBJECT, nim_Parser.COLON, nim_Parser.DOT, nim_Parser.EQUALS, nim_Parser.IN, nim_Parser.OF, nim_Parser.NOT, nim_Parser.DOLLAR_SIGN, nim_Parser.OP0, nim_Parser.OP1, nim_Parser.OP2, nim_Parser.OP3, nim_Parser.OP4, nim_Parser.OP5, nim_Parser.OP6, nim_Parser.OP7, nim_Parser.OP8, nim_Parser.OP9, nim_Parser.OP10, nim_Parser.CASE, nim_Parser.IF, nim_Parser.FOR, nim_Parser.WHEN, nim_Parser.REF, nim_Parser.BLOCK, nim_Parser.NIL, nim_Parser.SYM_HEADER, nim_Parser.IDENTIFIER, nim_Parser.INT_LIT, nim_Parser.INT8_LIT, nim_Parser.INT16_LIT, nim_Parser.INT32_LIT, nim_Parser.INT64_LIT, nim_Parser.UINT_LIT, nim_Parser.UINT8_LIT, nim_Parser.UINT16_LIT, nim_Parser.UINT32_LIT, nim_Parser.UINT64_LIT, nim_Parser.FLOAT_LIT, nim_Parser.FLOAT32_LIT, nim_Parser.FLOAT64_LIT, nim_Parser.CHAR_LIT, nim_Parser.STR_LIT, nim_Parser.TRIPLESTR_LIT, nim_Parser.RSTR_LIT, nim_Parser.GENERALIZED_STR_LIT, nim_Parser.GENERALIZED_TRIPLESTR_LIT]:
                self.state = 1064
                self.anyExpr()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def idColonEq(self):
            return self.getTypedRuleContext(nim_Parser.IdColonEqContext,0)


        def colonBody(self):
            return self.getTypedRuleContext(nim_Parser.ColonBodyContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_variable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable" ):
                listener.enterVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable" ):
                listener.exitVariable(self)




    def variable(self):

        localctx = nim_Parser.VariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_variable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1067
            self.idColonEq()
            self.state = 1069
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,118,self._ctx)
            if la_ == 1:
                self.state = 1068
                self.colonBody()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdColonEqContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.IDENTIFIER)
            else:
                return self.getToken(nim_Parser.IDENTIFIER, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.COMMA)
            else:
                return self.getToken(nim_Parser.COMMA, i)

        def COLON(self):
            return self.getToken(nim_Parser.COLON, 0)

        def EQUALS(self):
            return self.getToken(nim_Parser.EQUALS, 0)

        def ind(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.IndContext)
            else:
                return self.getTypedRuleContext(nim_Parser.IndContext,i)


        def simpleExpr(self):
            return self.getTypedRuleContext(nim_Parser.SimpleExprContext,0)


        def ded(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.DedContext)
            else:
                return self.getTypedRuleContext(nim_Parser.DedContext,i)


        def anyExpr(self):
            return self.getTypedRuleContext(nim_Parser.AnyExprContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_idColonEq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdColonEq" ):
                listener.enterIdColonEq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdColonEq" ):
                listener.exitIdColonEq(self)




    def idColonEq(self):

        localctx = nim_Parser.IdColonEqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_idColonEq)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1071
            self.match(nim_Parser.IDENTIFIER)
            self.state = 1076
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,119,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1072
                    self.match(nim_Parser.COMMA)
                    self.state = 1073
                    self.match(nim_Parser.IDENTIFIER) 
                self.state = 1078
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,119,self._ctx)

            self.state = 1080
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,120,self._ctx)
            if la_ == 1:
                self.state = 1079
                self.match(nim_Parser.COMMA)


            self.state = 1090
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,122,self._ctx)
            if la_ == 1:
                self.state = 1082
                self.match(nim_Parser.COLON)
                self.state = 1088
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [nim_Parser.INDENT]:
                    self.state = 1083
                    self.ind()
                    self.state = 1084
                    self.simpleExpr()
                    self.state = 1085
                    self.ded()
                    pass
                elif token in [nim_Parser.OPEN_PAREN, nim_Parser.CLOSE_PAREN, nim_Parser.OPEN_BRACK, nim_Parser.CLOSE_BRACK, nim_Parser.OBJECT, nim_Parser.COLON, nim_Parser.DOT, nim_Parser.EQUALS, nim_Parser.IN, nim_Parser.OF, nim_Parser.NOT, nim_Parser.DOLLAR_SIGN, nim_Parser.OP0, nim_Parser.OP1, nim_Parser.OP2, nim_Parser.OP3, nim_Parser.OP4, nim_Parser.OP5, nim_Parser.OP6, nim_Parser.OP7, nim_Parser.OP8, nim_Parser.OP9, nim_Parser.OP10, nim_Parser.REF, nim_Parser.NIL, nim_Parser.SYM_HEADER, nim_Parser.IDENTIFIER, nim_Parser.INT_LIT, nim_Parser.INT8_LIT, nim_Parser.INT16_LIT, nim_Parser.INT32_LIT, nim_Parser.INT64_LIT, nim_Parser.UINT_LIT, nim_Parser.UINT8_LIT, nim_Parser.UINT16_LIT, nim_Parser.UINT32_LIT, nim_Parser.UINT64_LIT, nim_Parser.FLOAT_LIT, nim_Parser.FLOAT32_LIT, nim_Parser.FLOAT64_LIT, nim_Parser.CHAR_LIT, nim_Parser.STR_LIT, nim_Parser.TRIPLESTR_LIT, nim_Parser.RSTR_LIT, nim_Parser.GENERALIZED_STR_LIT, nim_Parser.GENERALIZED_TRIPLESTR_LIT]:
                    self.state = 1087
                    self.simpleExpr()
                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 1100
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,124,self._ctx)
            if la_ == 1:
                self.state = 1092
                self.match(nim_Parser.EQUALS)
                self.state = 1098
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [nim_Parser.INDENT]:
                    self.state = 1093
                    self.ind()
                    self.state = 1094
                    self.anyExpr()
                    self.state = 1095
                    self.ded()
                    pass
                elif token in [nim_Parser.OPEN_PAREN, nim_Parser.CLOSE_PAREN, nim_Parser.OPEN_BRACK, nim_Parser.CLOSE_BRACK, nim_Parser.OBJECT, nim_Parser.COLON, nim_Parser.DOT, nim_Parser.EQUALS, nim_Parser.IN, nim_Parser.OF, nim_Parser.NOT, nim_Parser.DOLLAR_SIGN, nim_Parser.OP0, nim_Parser.OP1, nim_Parser.OP2, nim_Parser.OP3, nim_Parser.OP4, nim_Parser.OP5, nim_Parser.OP6, nim_Parser.OP7, nim_Parser.OP8, nim_Parser.OP9, nim_Parser.OP10, nim_Parser.CASE, nim_Parser.IF, nim_Parser.FOR, nim_Parser.WHEN, nim_Parser.REF, nim_Parser.BLOCK, nim_Parser.NIL, nim_Parser.SYM_HEADER, nim_Parser.IDENTIFIER, nim_Parser.INT_LIT, nim_Parser.INT8_LIT, nim_Parser.INT16_LIT, nim_Parser.INT32_LIT, nim_Parser.INT64_LIT, nim_Parser.UINT_LIT, nim_Parser.UINT8_LIT, nim_Parser.UINT16_LIT, nim_Parser.UINT32_LIT, nim_Parser.UINT64_LIT, nim_Parser.FLOAT_LIT, nim_Parser.FLOAT32_LIT, nim_Parser.FLOAT64_LIT, nim_Parser.CHAR_LIT, nim_Parser.STR_LIT, nim_Parser.TRIPLESTR_LIT, nim_Parser.RSTR_LIT, nim_Parser.GENERALIZED_STR_LIT, nim_Parser.GENERALIZED_TRIPLESTR_LIT]:
                    self.state = 1097
                    self.anyExpr()
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_complexStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleStmt(self):
            return self.getTypedRuleContext(nim_Parser.SimpleStmtContext,0)


        def complexStmt(self):
            return self.getTypedRuleContext(nim_Parser.ComplexStmtContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_simple_complexStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_complexStmt" ):
                listener.enterSimple_complexStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_complexStmt" ):
                listener.exitSimple_complexStmt(self)




    def simple_complexStmt(self):

        localctx = nim_Parser.Simple_complexStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_simple_complexStmt)
        try:
            self.state = 1104
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [nim_Parser.RETURN, nim_Parser.CONTINUE, nim_Parser.BREAK, nim_Parser.IMPORT, nim_Parser.FROM, nim_Parser.DISCARD]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1102
                self.simpleStmt()
                pass
            elif token in [nim_Parser.TYPE, nim_Parser.VARIABLE, nim_Parser.LET, nim_Parser.CONST, nim_Parser.PROC, nim_Parser.CASE, nim_Parser.IF, nim_Parser.WHILE, nim_Parser.FOR, nim_Parser.TEMPLATE, nim_Parser.WHEN, nim_Parser.BLOCK, nim_Parser.MACRO]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1103
                self.complexStmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def importStmt(self):
            return self.getTypedRuleContext(nim_Parser.ImportStmtContext,0)


        def fromStmt(self):
            return self.getTypedRuleContext(nim_Parser.FromStmtContext,0)


        def discardStmt(self):
            return self.getTypedRuleContext(nim_Parser.DiscardStmtContext,0)


        def returnStmt(self):
            return self.getTypedRuleContext(nim_Parser.ReturnStmtContext,0)


        def breakStmt(self):
            return self.getTypedRuleContext(nim_Parser.BreakStmtContext,0)


        def continueStmt(self):
            return self.getTypedRuleContext(nim_Parser.ContinueStmtContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_simpleStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleStmt" ):
                listener.enterSimpleStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleStmt" ):
                listener.exitSimpleStmt(self)




    def simpleStmt(self):

        localctx = nim_Parser.SimpleStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_simpleStmt)
        try:
            self.state = 1112
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [nim_Parser.IMPORT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1106
                self.importStmt()
                pass
            elif token in [nim_Parser.FROM]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1107
                self.fromStmt()
                pass
            elif token in [nim_Parser.DISCARD]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1108
                self.discardStmt()
                pass
            elif token in [nim_Parser.RETURN]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1109
                self.returnStmt()
                pass
            elif token in [nim_Parser.BREAK]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1110
                self.breakStmt()
                pass
            elif token in [nim_Parser.CONTINUE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1111
                self.continueStmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComplexStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def forStmt(self):
            return self.getTypedRuleContext(nim_Parser.ForStmtContext,0)


        def ifStmt(self):
            return self.getTypedRuleContext(nim_Parser.IfStmtContext,0)


        def caseStmt(self):
            return self.getTypedRuleContext(nim_Parser.CaseStmtContext,0)


        def blockStmt(self):
            return self.getTypedRuleContext(nim_Parser.BlockStmtContext,0)


        def whileStmt(self):
            return self.getTypedRuleContext(nim_Parser.WhileStmtContext,0)


        def whenStmt(self):
            return self.getTypedRuleContext(nim_Parser.WhenStmtContext,0)


        def TEMPLATE(self):
            return self.getToken(nim_Parser.TEMPLATE, 0)

        def templateRoutine(self):
            return self.getTypedRuleContext(nim_Parser.TemplateRoutineContext,0)


        def PROC(self):
            return self.getToken(nim_Parser.PROC, 0)

        def procRoutine(self):
            return self.getTypedRuleContext(nim_Parser.ProcRoutineContext,0)


        def MACRO(self):
            return self.getToken(nim_Parser.MACRO, 0)

        def macroRoutine(self):
            return self.getTypedRuleContext(nim_Parser.MacroRoutineContext,0)


        def TYPE(self):
            return self.getToken(nim_Parser.TYPE, 0)

        def typeSection(self):
            return self.getTypedRuleContext(nim_Parser.TypeSectionContext,0)


        def CONST(self):
            return self.getToken(nim_Parser.CONST, 0)

        def constantSection(self):
            return self.getTypedRuleContext(nim_Parser.ConstantSectionContext,0)


        def VARIABLE(self):
            return self.getToken(nim_Parser.VARIABLE, 0)

        def variableSection(self):
            return self.getTypedRuleContext(nim_Parser.VariableSectionContext,0)


        def LET(self):
            return self.getToken(nim_Parser.LET, 0)

        def letSection(self):
            return self.getTypedRuleContext(nim_Parser.LetSectionContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_complexStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComplexStmt" ):
                listener.enterComplexStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComplexStmt" ):
                listener.exitComplexStmt(self)




    def complexStmt(self):

        localctx = nim_Parser.ComplexStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_complexStmt)
        try:
            self.state = 1134
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [nim_Parser.FOR]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1114
                self.forStmt()
                pass
            elif token in [nim_Parser.IF]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1115
                self.ifStmt()
                pass
            elif token in [nim_Parser.CASE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1116
                self.caseStmt()
                pass
            elif token in [nim_Parser.BLOCK]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1117
                self.blockStmt()
                pass
            elif token in [nim_Parser.WHILE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1118
                self.whileStmt()
                pass
            elif token in [nim_Parser.WHEN]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1119
                self.whenStmt()
                pass
            elif token in [nim_Parser.TEMPLATE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1120
                self.match(nim_Parser.TEMPLATE)
                self.state = 1121
                self.templateRoutine()
                pass
            elif token in [nim_Parser.PROC]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1122
                self.match(nim_Parser.PROC)
                self.state = 1123
                self.procRoutine()
                pass
            elif token in [nim_Parser.MACRO]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1124
                self.match(nim_Parser.MACRO)
                self.state = 1125
                self.macroRoutine()
                pass
            elif token in [nim_Parser.TYPE]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1126
                self.match(nim_Parser.TYPE)
                self.state = 1127
                self.typeSection()
                pass
            elif token in [nim_Parser.CONST]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1128
                self.match(nim_Parser.CONST)
                self.state = 1129
                self.constantSection()
                pass
            elif token in [nim_Parser.VARIABLE]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1130
                self.match(nim_Parser.VARIABLE)
                self.state = 1131
                self.variableSection()
                pass
            elif token in [nim_Parser.LET]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1132
                self.match(nim_Parser.LET)
                self.state = 1133
                self.letSection()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColonBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(nim_Parser.COLON, 0)

        def stmt(self):
            return self.getTypedRuleContext(nim_Parser.StmtContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_colonBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColonBody" ):
                listener.enterColonBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColonBody" ):
                listener.exitColonBody(self)




    def colonBody(self):

        localctx = nim_Parser.ColonBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_colonBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1136
            self.match(nim_Parser.COLON)
            self.state = 1137
            self.stmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleExpr(self):
            return self.getTypedRuleContext(nim_Parser.SimpleExprContext,0)


        def EQUALS(self):
            return self.getToken(nim_Parser.EQUALS, 0)

        def anyExpr(self):
            return self.getTypedRuleContext(nim_Parser.AnyExprContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_exprStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprStmt" ):
                listener.enterExprStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprStmt" ):
                listener.exitExprStmt(self)




    def exprStmt(self):

        localctx = nim_Parser.ExprStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_exprStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1139
            self.simpleExpr()
            self.state = 1140
            self.match(nim_Parser.EQUALS)
            self.state = 1141
            self.anyExpr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_complexStmt(self):
            return self.getTypedRuleContext(nim_Parser.Simple_complexStmtContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStmt" ):
                listener.enterStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStmt" ):
                listener.exitStmt(self)




    def stmt(self):

        localctx = nim_Parser.StmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1143
            self.simple_complexStmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModuleContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.StmtContext)
            else:
                return self.getTypedRuleContext(nim_Parser.StmtContext,i)


        def SEMI_COLON(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.SEMI_COLON)
            else:
                return self.getToken(nim_Parser.SEMI_COLON, i)

        def getRuleIndex(self):
            return nim_Parser.RULE_module

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModule" ):
                listener.enterModule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModule" ):
                listener.exitModule(self)




    def module(self):

        localctx = nim_Parser.ModuleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_module)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1145
            self.stmt()
            self.state = 1152
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nim_Parser.SEMI_COLON) | (1 << nim_Parser.TYPE) | (1 << nim_Parser.VARIABLE) | (1 << nim_Parser.LET) | (1 << nim_Parser.CONST) | (1 << nim_Parser.PROC) | (1 << nim_Parser.RETURN) | (1 << nim_Parser.CASE) | (1 << nim_Parser.IF) | (1 << nim_Parser.WHILE) | (1 << nim_Parser.FOR) | (1 << nim_Parser.CONTINUE) | (1 << nim_Parser.BREAK) | (1 << nim_Parser.TEMPLATE))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (nim_Parser.WHEN - 66)) | (1 << (nim_Parser.IMPORT - 66)) | (1 << (nim_Parser.FROM - 66)) | (1 << (nim_Parser.BLOCK - 66)) | (1 << (nim_Parser.MACRO - 66)) | (1 << (nim_Parser.DISCARD - 66)))) != 0):
                self.state = 1147
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nim_Parser.SEMI_COLON:
                    self.state = 1146
                    self.match(nim_Parser.SEMI_COLON)


                self.state = 1149
                self.stmt()
                self.state = 1154
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StartContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def module(self):
            return self.getTypedRuleContext(nim_Parser.ModuleContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_start

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStart" ):
                listener.enterStart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStart" ):
                listener.exitStart(self)




    def start(self):

        localctx = nim_Parser.StartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_start)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1155
            self.module()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





