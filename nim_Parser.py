# Generated from nim_Parser.g4 by ANTLR 4.7.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3u")
        buf.write("\u049d\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\3")
        buf.write("\2\3\2\3\3\3\3\3\4\3\4\3\5\3\5\3\6\3\6\3\7\3\7\3\7\3\7")
        buf.write("\3\7\5\7\u00f0\n\7\3\b\3\b\3\t\3\t\3\n\3\n\3\13\3\13\3")
        buf.write("\13\3\13\5\13\u00fc\n\13\3\f\3\f\3\r\3\r\3\16\3\16\3\17")
        buf.write("\3\17\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20")
        buf.write("\3\20\5\20\u0111\n\20\3\21\3\21\3\22\3\22\3\23\3\23\3")
        buf.write("\24\3\24\3\24\3\24\7\24\u011d\n\24\f\24\16\24\u0120\13")
        buf.write("\24\3\25\3\25\3\25\3\25\7\25\u0126\n\25\f\25\16\25\u0129")
        buf.write("\13\25\3\26\3\26\3\26\3\26\7\26\u012f\n\26\f\26\16\26")
        buf.write("\u0132\13\26\3\27\3\27\3\27\3\27\7\27\u0138\n\27\f\27")
        buf.write("\16\27\u013b\13\27\3\30\3\30\3\30\3\30\7\30\u0141\n\30")
        buf.write("\f\30\16\30\u0144\13\30\3\31\3\31\3\31\3\31\7\31\u014a")
        buf.write("\n\31\f\31\16\31\u014d\13\31\3\32\3\32\3\32\3\32\7\32")
        buf.write("\u0153\n\32\f\32\16\32\u0156\13\32\3\33\3\33\3\33\3\33")
        buf.write("\7\33\u015c\n\33\f\33\16\33\u015f\13\33\3\34\3\34\3\34")
        buf.write("\3\34\7\34\u0165\n\34\f\34\16\34\u0168\13\34\3\35\3\35")
        buf.write("\3\35\3\35\7\35\u016e\n\35\f\35\16\35\u0171\13\35\3\36")
        buf.write("\3\36\3\36\3\36\6\36\u0177\n\36\r\36\16\36\u0178\5\36")
        buf.write("\u017b\n\36\3\36\3\36\5\36\u017f\n\36\3\37\3\37\3\37\6")
        buf.write("\37\u0184\n\37\r\37\16\37\u0185\5\37\u0188\n\37\3 \3 ")
        buf.write("\3 \5 \u018d\n \3!\3!\3!\3!\7!\u0193\n!\f!\16!\u0196\13")
        buf.write("!\3!\3!\3\"\3\"\3\"\3\"\7\"\u019e\n\"\f\"\16\"\u01a1\13")
        buf.write("\"\3\"\3\"\3#\3#\3#\5#\u01a8\n#\3#\3#\3#\3#\5#\u01ae\n")
        buf.write("#\5#\u01b0\n#\3$\3$\3$\5$\u01b5\n$\3%\3%\3%\3%\3%\3%\7")
        buf.write("%\u01bd\n%\f%\16%\u01c0\13%\3%\3%\3%\3%\3%\3%\7%\u01c8")
        buf.write("\n%\f%\16%\u01cb\13%\3%\3%\3%\3%\3%\3%\5%\u01d3\n%\3&")
        buf.write("\3&\3&\3&\3&\3&\5&\u01db\n&\3&\5&\u01de\n&\3&\3&\7&\u01e2")
        buf.write("\n&\f&\16&\u01e5\13&\3&\6&\u01e8\n&\r&\16&\u01e9\5&\u01ec")
        buf.write("\n&\5&\u01ee\n&\3\'\3\'\5\'\u01f2\n\'\3\'\3\'\5\'\u01f6")
        buf.write("\n\'\3\'\3\'\3\'\3\'\7\'\u01fc\n\'\f\'\16\'\u01ff\13\'")
        buf.write("\3\'\3\'\5\'\u0203\n\'\3\'\3\'\3\'\3\'\7\'\u0209\n\'\f")
        buf.write("\'\16\'\u020c\13\'\3\'\3\'\3\'\3\'\3\'\3\'\5\'\u0214\n")
        buf.write("\'\3(\3(\3(\7(\u0219\n(\f(\16(\u021c\13(\3)\3)\3)\3)\7")
        buf.write(")\u0222\n)\f)\16)\u0225\13)\3*\3*\3*\3*\3+\3+\3+\3+\3")
        buf.write("+\6+\u0230\n+\r+\16+\u0231\3+\3+\3+\5+\u0237\n+\3,\3,")
        buf.write("\3-\3-\5-\u023d\n-\3.\3.\5.\u0241\n.\3/\3/\3\60\3\60\3")
        buf.write("\60\3\60\3\60\6\60\u024a\n\60\r\60\16\60\u024b\3\60\3")
        buf.write("\60\3\60\5\60\u0251\n\60\3\61\3\61\3\61\3\61\6\61\u0257")
        buf.write("\n\61\r\61\16\61\u0258\3\61\3\61\3\61\5\61\u025e\n\61")
        buf.write("\3\62\3\62\6\62\u0262\n\62\r\62\16\62\u0263\3\62\3\62")
        buf.write("\3\62\5\62\u0269\n\62\3\62\7\62\u026c\n\62\f\62\16\62")
        buf.write("\u026f\13\62\3\62\5\62\u0272\n\62\3\63\3\63\3\63\3\63")
        buf.write("\3\64\3\64\3\64\3\64\5\64\u027c\n\64\3\64\3\64\3\64\3")
        buf.write("\64\3\64\5\64\u0283\n\64\3\65\3\65\3\65\3\65\3\65\3\66")
        buf.write("\6\66\u028b\n\66\r\66\16\66\u028c\3\67\3\67\3\67\38\3")
        buf.write("8\58\u0294\n8\38\38\39\39\39\79\u029b\n9\f9\169\u029e")
        buf.write("\139\3:\3:\3:\3:\3;\6;\u02a5\n;\r;\16;\u02a6\3;\3;\3;")
        buf.write("\3;\6;\u02ad\n;\r;\16;\u02ae\3;\3;\3;\5;\u02b4\n;\5;\u02b6")
        buf.write("\n;\3<\3<\3<\3<\3<\6<\u02bd\n<\r<\16<\u02be\3<\3<\3<\5")
        buf.write("<\u02c4\n<\3=\3=\3=\3=\3=\6=\u02cb\n=\r=\16=\u02cc\3=")
        buf.write("\3=\3=\5=\u02d2\n=\3>\3>\3>\3?\3?\3?\7?\u02da\n?\f?\16")
        buf.write("?\u02dd\13?\3@\3@\3@\3@\3@\3@\3@\6@\u02e6\n@\r@\16@\u02e7")
        buf.write("\3@\3@\3@\5@\u02ed\n@\3A\3A\5A\u02f1\nA\3A\3A\3B\3B\3")
        buf.write("B\3B\3B\6B\u02fa\nB\rB\16B\u02fb\3B\3B\3B\5B\u0301\nB")
        buf.write("\3C\3C\3C\3C\6C\u0307\nC\rC\16C\u0308\3C\3C\3C\5C\u030e")
        buf.write("\nC\3D\3D\6D\u0312\nD\rD\16D\u0313\3D\3D\3D\5D\u0319\n")
        buf.write("D\3D\3D\7D\u031d\nD\fD\16D\u0320\13D\3D\5D\u0323\nD\3")
        buf.write("D\3D\3D\7D\u0328\nD\fD\16D\u032b\13D\3D\3D\5D\u032f\n")
        buf.write("D\3D\3D\3D\7D\u0334\nD\fD\16D\u0337\13D\3D\5D\u033a\n")
        buf.write("D\5D\u033c\nD\3E\3E\3E\3E\3F\3F\3F\3F\3F\6F\u0347\nF\r")
        buf.write("F\16F\u0348\3F\3F\3F\5F\u034e\nF\3G\3G\3H\3H\3H\5H\u0355")
        buf.write("\nH\3I\3I\3I\5I\u035a\nI\3J\3J\3K\3K\3K\3K\3K\5K\u0363")
        buf.write("\nK\3L\3L\3L\3L\5L\u0369\nL\3L\3L\3M\3M\5M\u036f\nM\3")
        buf.write("N\3N\3N\3O\3O\5O\u0376\nO\3O\3O\3O\3O\5O\u037c\nO\3P\3")
        buf.write("P\3P\3P\3P\5P\u0383\nP\3Q\3Q\5Q\u0387\nQ\3Q\3Q\3Q\5Q\u038c")
        buf.write("\nQ\3Q\3Q\3Q\6Q\u0391\nQ\rQ\16Q\u0392\3Q\3Q\5Q\u0397\n")
        buf.write("Q\3R\3R\3R\3R\7R\u039d\nR\fR\16R\u03a0\13R\3R\3R\3S\3")
        buf.write("S\3S\3S\3T\3T\3U\3U\3U\3U\7U\u03ae\nU\fU\16U\u03b1\13")
        buf.write("U\3U\3U\3V\3V\3W\5W\u03b8\nW\3W\3W\3W\3W\6W\u03be\nW\r")
        buf.write("W\16W\u03bf\3W\3W\5W\u03c4\nW\3X\3X\3X\3X\3Y\3Y\3Z\3Z")
        buf.write("\3[\3[\3[\3[\3\\\3\\\3\\\3\\\7\\\u03d6\n\\\f\\\16\\\u03d9")
        buf.write("\13\\\3\\\3\\\3]\3]\5]\u03df\n]\3]\3]\3]\3]\6]\u03e5\n")
        buf.write("]\r]\16]\u03e6\3]\3]\5]\u03eb\n]\3^\3^\3^\3^\3_\3_\3`")
        buf.write("\3`\5`\u03f5\n`\3`\3`\3a\3a\3a\3b\3b\6b\u03fe\nb\rb\16")
        buf.write("b\u03ff\3b\3b\3c\3c\3d\3d\3d\6d\u0409\nd\rd\16d\u040a")
        buf.write("\3d\3d\5d\u040f\nd\3e\3e\3e\6e\u0414\ne\re\16e\u0415\3")
        buf.write("e\3e\5e\u041a\ne\3f\3f\3f\3f\3f\3f\3f\6f\u0423\nf\rf\16")
        buf.write("f\u0424\3f\3f\5f\u0429\nf\3g\3g\3g\3g\3h\3h\3h\7h\u0432")
        buf.write("\nh\fh\16h\u0435\13h\3h\3h\3h\3h\3h\7h\u043c\nh\fh\16")
        buf.write("h\u043f\13h\3h\3h\3h\3h\3h\7h\u0446\nh\fh\16h\u0449\13")
        buf.write("h\3h\3h\3h\3h\3h\3h\5h\u0451\nh\3i\3i\5i\u0455\ni\3j\3")
        buf.write("j\3j\3j\3j\3j\5j\u045d\nj\3k\3k\3k\3k\3k\3k\3k\3k\3k\3")
        buf.write("k\3k\3k\3k\3k\3k\3k\3k\3k\3k\3k\5k\u0473\nk\3l\3l\3l\3")
        buf.write("m\3m\3m\3m\3m\3m\6m\u047e\nm\rm\16m\u047f\3m\3m\3m\3m")
        buf.write("\3m\3m\3m\3m\3m\5m\u048b\nm\3n\3n\3o\3o\5o\u0491\no\3")
        buf.write("o\7o\u0494\no\fo\16o\u0497\13o\3o\3o\3p\3p\3p\2\2q\2\4")
        buf.write("\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64")
        buf.write("\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084")
        buf.write("\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096")
        buf.write("\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8")
        buf.write("\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba")
        buf.write("\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc")
        buf.write("\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de")
        buf.write("\2\16\3\3oo\4\2\22\22MM\4\2\27\27\37\37\4\2\30\32##\4")
        buf.write("\2\35\35&&\4\2\33\33((\5\2SS[dfl\3\2mn\4\2\n\13\16\17")
        buf.write("\4\2\25\25\27\27\3\2\33\35\4\2\t\t\25\25\2\u04d6\2\u00e0")
        buf.write("\3\2\2\2\4\u00e2\3\2\2\2\6\u00e4\3\2\2\2\b\u00e6\3\2\2")
        buf.write("\2\n\u00e8\3\2\2\2\f\u00ef\3\2\2\2\16\u00f1\3\2\2\2\20")
        buf.write("\u00f3\3\2\2\2\22\u00f5\3\2\2\2\24\u00fb\3\2\2\2\26\u00fd")
        buf.write("\3\2\2\2\30\u00ff\3\2\2\2\32\u0101\3\2\2\2\34\u0103\3")
        buf.write("\2\2\2\36\u0110\3\2\2\2 \u0112\3\2\2\2\"\u0114\3\2\2\2")
        buf.write("$\u0116\3\2\2\2&\u0118\3\2\2\2(\u0121\3\2\2\2*\u012a\3")
        buf.write("\2\2\2,\u0133\3\2\2\2.\u013c\3\2\2\2\60\u0145\3\2\2\2")
        buf.write("\62\u014e\3\2\2\2\64\u0157\3\2\2\2\66\u0160\3\2\2\28\u0169")
        buf.write("\3\2\2\2:\u017e\3\2\2\2<\u0187\3\2\2\2>\u0189\3\2\2\2")
        buf.write("@\u018e\3\2\2\2B\u0199\3\2\2\2D\u01a7\3\2\2\2F\u01b4\3")
        buf.write("\2\2\2H\u01d2\3\2\2\2J\u01ed\3\2\2\2L\u0213\3\2\2\2N\u0215")
        buf.write("\3\2\2\2P\u021d\3\2\2\2R\u0226\3\2\2\2T\u022a\3\2\2\2")
        buf.write("V\u0238\3\2\2\2X\u023c\3\2\2\2Z\u0240\3\2\2\2\\\u0242")
        buf.write("\3\2\2\2^\u0244\3\2\2\2`\u0252\3\2\2\2b\u0268\3\2\2\2")
        buf.write("d\u0273\3\2\2\2f\u0277\3\2\2\2h\u0284\3\2\2\2j\u028a\3")
        buf.write("\2\2\2l\u028e\3\2\2\2n\u0291\3\2\2\2p\u0297\3\2\2\2r\u029f")
        buf.write("\3\2\2\2t\u02a4\3\2\2\2v\u02b7\3\2\2\2x\u02c5\3\2\2\2")
        buf.write("z\u02d3\3\2\2\2|\u02d6\3\2\2\2~\u02de\3\2\2\2\u0080\u02ee")
        buf.write("\3\2\2\2\u0082\u02f4\3\2\2\2\u0084\u0302\3\2\2\2\u0086")
        buf.write("\u0318\3\2\2\2\u0088\u033d\3\2\2\2\u008a\u0341\3\2\2\2")
        buf.write("\u008c\u034f\3\2\2\2\u008e\u0354\3\2\2\2\u0090\u0359\3")
        buf.write("\2\2\2\u0092\u035b\3\2\2\2\u0094\u0362\3\2\2\2\u0096\u0364")
        buf.write("\3\2\2\2\u0098\u036c\3\2\2\2\u009a\u0370\3\2\2\2\u009c")
        buf.write("\u037b\3\2\2\2\u009e\u037d\3\2\2\2\u00a0\u0386\3\2\2\2")
        buf.write("\u00a2\u0398\3\2\2\2\u00a4\u03a3\3\2\2\2\u00a6\u03a7\3")
        buf.write("\2\2\2\u00a8\u03a9\3\2\2\2\u00aa\u03b4\3\2\2\2\u00ac\u03b7")
        buf.write("\3\2\2\2\u00ae\u03c5\3\2\2\2\u00b0\u03c9\3\2\2\2\u00b2")
        buf.write("\u03cb\3\2\2\2\u00b4\u03cd\3\2\2\2\u00b6\u03d1\3\2\2\2")
        buf.write("\u00b8\u03de\3\2\2\2\u00ba\u03ec\3\2\2\2\u00bc\u03f0\3")
        buf.write("\2\2\2\u00be\u03f2\3\2\2\2\u00c0\u03f8\3\2\2\2\u00c2\u03fb")
        buf.write("\3\2\2\2\u00c4\u0403\3\2\2\2\u00c6\u040e\3\2\2\2\u00c8")
        buf.write("\u0419\3\2\2\2\u00ca\u0428\3\2\2\2\u00cc\u042a\3\2\2\2")
        buf.write("\u00ce\u0450\3\2\2\2\u00d0\u0454\3\2\2\2\u00d2\u045c\3")
        buf.write("\2\2\2\u00d4\u0472\3\2\2\2\u00d6\u0474\3\2\2\2\u00d8\u048a")
        buf.write("\3\2\2\2\u00da\u048c\3\2\2\2\u00dc\u048e\3\2\2\2\u00de")
        buf.write("\u049a\3\2\2\2\u00e0\u00e1\7s\2\2\u00e1\3\3\2\2\2\u00e2")
        buf.write("\u00e3\t\2\2\2\u00e3\5\3\2\2\2\u00e4\u00e5\t\3\2\2\u00e5")
        buf.write("\7\3\2\2\2\u00e6\u00e7\7\36\2\2\u00e7\t\3\2\2\2\u00e8")
        buf.write("\u00e9\t\4\2\2\u00e9\13\3\2\2\2\u00ea\u00f0\7 \2\2\u00eb")
        buf.write("\u00f0\7\25\2\2\u00ec\u00ed\7\25\2\2\u00ed\u00f0\7\25")
        buf.write("\2\2\u00ee\u00f0\7\34\2\2\u00ef\u00ea\3\2\2\2\u00ef\u00eb")
        buf.write("\3\2\2\2\u00ef\u00ec\3\2\2\2\u00ef\u00ee\3\2\2\2\u00f0")
        buf.write("\r\3\2\2\2\u00f1\u00f2\7!\2\2\u00f2\17\3\2\2\2\u00f3\u00f4")
        buf.write("\7\"\2\2\u00f4\21\3\2\2\2\u00f5\u00f6\t\5\2\2\u00f6\23")
        buf.write("\3\2\2\2\u00f7\u00fc\7$\2\2\u00f8\u00fc\7\26\2\2\u00f9")
        buf.write("\u00fa\7\26\2\2\u00fa\u00fc\7\26\2\2\u00fb\u00f7\3\2\2")
        buf.write("\2\u00fb\u00f8\3\2\2\2\u00fb\u00f9\3\2\2\2\u00fc\25\3")
        buf.write("\2\2\2\u00fd\u00fe\7%\2\2\u00fe\27\3\2\2\2\u00ff\u0100")
        buf.write("\t\6\2\2\u0100\31\3\2\2\2\u0101\u0102\7\'\2\2\u0102\33")
        buf.write("\3\2\2\2\u0103\u0104\t\7\2\2\u0104\35\3\2\2\2\u0105\u0111")
        buf.write("\5\b\5\2\u0106\u0111\5\n\6\2\u0107\u0111\5\f\7\2\u0108")
        buf.write("\u0111\5\16\b\2\u0109\u0111\5\20\t\2\u010a\u0111\5\22")
        buf.write("\n\2\u010b\u0111\5\24\13\2\u010c\u0111\5\26\f\2\u010d")
        buf.write("\u0111\5\30\r\2\u010e\u0111\5\32\16\2\u010f\u0111\5\34")
        buf.write("\17\2\u0110\u0105\3\2\2\2\u0110\u0106\3\2\2\2\u0110\u0107")
        buf.write("\3\2\2\2\u0110\u0108\3\2\2\2\u0110\u0109\3\2\2\2\u0110")
        buf.write("\u010a\3\2\2\2\u0110\u010b\3\2\2\2\u0110\u010c\3\2\2\2")
        buf.write("\u0110\u010d\3\2\2\2\u0110\u010e\3\2\2\2\u0110\u010f\3")
        buf.write("\2\2\2\u0111\37\3\2\2\2\u0112\u0113\5\36\20\2\u0113!\3")
        buf.write("\2\2\2\u0114\u0115\t\b\2\2\u0115#\3\2\2\2\u0116\u0117")
        buf.write("\t\t\2\2\u0117%\3\2\2\2\u0118\u011e\5(\25\2\u0119\u011a")
        buf.write("\5\n\6\2\u011a\u011b\5(\25\2\u011b\u011d\3\2\2\2\u011c")
        buf.write("\u0119\3\2\2\2\u011d\u0120\3\2\2\2\u011e\u011c\3\2\2\2")
        buf.write("\u011e\u011f\3\2\2\2\u011f\'\3\2\2\2\u0120\u011e\3\2\2")
        buf.write("\2\u0121\u0127\5*\26\2\u0122\u0123\5\f\7\2\u0123\u0124")
        buf.write("\5*\26\2\u0124\u0126\3\2\2\2\u0125\u0122\3\2\2\2\u0126")
        buf.write("\u0129\3\2\2\2\u0127\u0125\3\2\2\2\u0127\u0128\3\2\2\2")
        buf.write("\u0128)\3\2\2\2\u0129\u0127\3\2\2\2\u012a\u0130\5,\27")
        buf.write("\2\u012b\u012c\5\16\b\2\u012c\u012d\5,\27\2\u012d\u012f")
        buf.write("\3\2\2\2\u012e\u012b\3\2\2\2\u012f\u0132\3\2\2\2\u0130")
        buf.write("\u012e\3\2\2\2\u0130\u0131\3\2\2\2\u0131+\3\2\2\2\u0132")
        buf.write("\u0130\3\2\2\2\u0133\u0139\5.\30\2\u0134\u0135\5\20\t")
        buf.write("\2\u0135\u0136\5.\30\2\u0136\u0138\3\2\2\2\u0137\u0134")
        buf.write("\3\2\2\2\u0138\u013b\3\2\2\2\u0139\u0137\3\2\2\2\u0139")
        buf.write("\u013a\3\2\2\2\u013a-\3\2\2\2\u013b\u0139\3\2\2\2\u013c")
        buf.write("\u0142\5\60\31\2\u013d\u013e\5\22\n\2\u013e\u013f\5\60")
        buf.write("\31\2\u013f\u0141\3\2\2\2\u0140\u013d\3\2\2\2\u0141\u0144")
        buf.write("\3\2\2\2\u0142\u0140\3\2\2\2\u0142\u0143\3\2\2\2\u0143")
        buf.write("/\3\2\2\2\u0144\u0142\3\2\2\2\u0145\u014b\5\62\32\2\u0146")
        buf.write("\u0147\5\24\13\2\u0147\u0148\5\62\32\2\u0148\u014a\3\2")
        buf.write("\2\2\u0149\u0146\3\2\2\2\u014a\u014d\3\2\2\2\u014b\u0149")
        buf.write("\3\2\2\2\u014b\u014c\3\2\2\2\u014c\61\3\2\2\2\u014d\u014b")
        buf.write("\3\2\2\2\u014e\u0154\5\64\33\2\u014f\u0150\5\26\f\2\u0150")
        buf.write("\u0151\5\64\33\2\u0151\u0153\3\2\2\2\u0152\u014f\3\2\2")
        buf.write("\2\u0153\u0156\3\2\2\2\u0154\u0152\3\2\2\2\u0154\u0155")
        buf.write("\3\2\2\2\u0155\63\3\2\2\2\u0156\u0154\3\2\2\2\u0157\u015d")
        buf.write("\5\66\34\2\u0158\u0159\5\30\r\2\u0159\u015a\5\66\34\2")
        buf.write("\u015a\u015c\3\2\2\2\u015b\u0158\3\2\2\2\u015c\u015f\3")
        buf.write("\2\2\2\u015d\u015b\3\2\2\2\u015d\u015e\3\2\2\2\u015e\65")
        buf.write("\3\2\2\2\u015f\u015d\3\2\2\2\u0160\u0166\58\35\2\u0161")
        buf.write("\u0162\5\32\16\2\u0162\u0163\58\35\2\u0163\u0165\3\2\2")
        buf.write("\2\u0164\u0161\3\2\2\2\u0165\u0168\3\2\2\2\u0166\u0164")
        buf.write("\3\2\2\2\u0166\u0167\3\2\2\2\u0167\67\3\2\2\2\u0168\u0166")
        buf.write("\3\2\2\2\u0169\u016f\5J&\2\u016a\u016b\5\34\17\2\u016b")
        buf.write("\u016c\5J&\2\u016c\u016e\3\2\2\2\u016d\u016a\3\2\2\2\u016e")
        buf.write("\u0171\3\2\2\2\u016f\u016d\3\2\2\2\u016f\u0170\3\2\2\2")
        buf.write("\u01709\3\2\2\2\u0171\u016f\3\2\2\2\u0172\u017f\5<\37")
        buf.write("\2\u0173\u017a\7Y\2\2\u0174\u017b\5<\37\2\u0175\u0177")
        buf.write("\5\36\20\2\u0176\u0175\3\2\2\2\u0177\u0178\3\2\2\2\u0178")
        buf.write("\u0176\3\2\2\2\u0178\u0179\3\2\2\2\u0179\u017b\3\2\2\2")
        buf.write("\u017a\u0174\3\2\2\2\u017a\u0176\3\2\2\2\u017b\u017c\3")
        buf.write("\2\2\2\u017c\u017d\7Y\2\2\u017d\u017f\3\2\2\2\u017e\u0172")
        buf.write("\3\2\2\2\u017e\u0173\3\2\2\2\u017f;\3\2\2\2\u0180\u0188")
        buf.write("\7Z\2\2\u0181\u0188\5\"\22\2\u0182\u0184\t\n\2\2\u0183")
        buf.write("\u0182\3\2\2\2\u0184\u0185\3\2\2\2\u0185\u0183\3\2\2\2")
        buf.write("\u0185\u0186\3\2\2\2\u0186\u0188\3\2\2\2\u0187\u0180\3")
        buf.write("\2\2\2\u0187\u0181\3\2\2\2\u0187\u0183\3\2\2\2\u0188=")
        buf.write("\3\2\2\2\u0189\u018c\5X-\2\u018a\u018b\t\13\2\2\u018b")
        buf.write("\u018d\5X-\2\u018c\u018a\3\2\2\2\u018c\u018d\3\2\2\2\u018d")
        buf.write("?\3\2\2\2\u018e\u018f\7\16\2\2\u018f\u0194\5> \2\u0190")
        buf.write("\u0191\7\b\2\2\u0191\u0193\5> \2\u0192\u0190\3\2\2\2\u0193")
        buf.write("\u0196\3\2\2\2\u0194\u0192\3\2\2\2\u0194\u0195\3\2\2\2")
        buf.write("\u0195\u0197\3\2\2\2\u0196\u0194\3\2\2\2\u0197\u0198\7")
        buf.write("\17\2\2\u0198A\3\2\2\2\u0199\u019a\7\n\2\2\u019a\u019f")
        buf.write("\5> \2\u019b\u019c\7\b\2\2\u019c\u019e\5> \2\u019d\u019b")
        buf.write("\3\2\2\2\u019e\u01a1\3\2\2\2\u019f\u019d\3\2\2\2\u019f")
        buf.write("\u01a0\3\2\2\2\u01a0\u01a2\3\2\2\2\u01a1\u019f\3\2\2\2")
        buf.write("\u01a2\u01a3\7\13\2\2\u01a3C\3\2\2\2\u01a4\u01a8\5X-\2")
        buf.write("\u01a5\u01a6\7Z\2\2\u01a6\u01a8\5N(\2\u01a7\u01a4\3\2")
        buf.write("\2\2\u01a7\u01a5\3\2\2\2\u01a8\u01af\3\2\2\2\u01a9\u01ad")
        buf.write("\t\13\2\2\u01aa\u01ae\5X-\2\u01ab\u01ac\7Z\2\2\u01ac\u01ae")
        buf.write("\5N(\2\u01ad\u01aa\3\2\2\2\u01ad\u01ab\3\2\2\2\u01ae\u01b0")
        buf.write("\3\2\2\2\u01af\u01a9\3\2\2\2\u01af\u01b0\3\2\2\2\u01b0")
        buf.write("E\3\2\2\2\u01b1\u01b5\5$\23\2\u01b2\u01b5\5:\36\2\u01b3")
        buf.write("\u01b5\5@!\2\u01b4\u01b1\3\2\2\2\u01b4\u01b2\3\2\2\2\u01b4")
        buf.write("\u01b3\3\2\2\2\u01b5G\3\2\2\2\u01b6\u01b7\7\n\2\2\u01b7")
        buf.write("\u01d3\7\13\2\2\u01b8\u01b9\7\n\2\2\u01b9\u01be\5> \2")
        buf.write("\u01ba\u01bb\7\b\2\2\u01bb\u01bd\5> \2\u01bc\u01ba\3\2")
        buf.write("\2\2\u01bd\u01c0\3\2\2\2\u01be\u01bc\3\2\2\2\u01be\u01bf")
        buf.write("\3\2\2\2\u01bf\u01c1\3\2\2\2\u01c0\u01be\3\2\2\2\u01c1")
        buf.write("\u01c2\7\13\2\2\u01c2\u01d3\3\2\2\2\u01c3\u01c4\7\n\2")
        buf.write("\2\u01c4\u01c9\5D#\2\u01c5\u01c6\7\b\2\2\u01c6\u01c8\5")
        buf.write("D#\2\u01c7\u01c5\3\2\2\2\u01c8\u01cb\3\2\2\2\u01c9\u01c7")
        buf.write("\3\2\2\2\u01c9\u01ca\3\2\2\2\u01ca\u01cc\3\2\2\2\u01cb")
        buf.write("\u01c9\3\2\2\2\u01cc\u01cd\7\13\2\2\u01cd\u01d3\3\2\2")
        buf.write("\2\u01ce\u01cf\7\16\2\2\u01cf\u01d0\5p9\2\u01d0\u01d1")
        buf.write("\7\17\2\2\u01d1\u01d3\3\2\2\2\u01d2\u01b6\3\2\2\2\u01d2")
        buf.write("\u01b8\3\2\2\2\u01d2\u01c3\3\2\2\2\u01d2\u01ce\3\2\2\2")
        buf.write("\u01d3I\3\2\2\2\u01d4\u01da\5\6\4\2\u01d5\u01db\5&\24")
        buf.write("\2\u01d6\u01d7\5\2\2\2\u01d7\u01d8\5\u0094K\2\u01d8\u01d9")
        buf.write("\5\4\3\2\u01d9\u01db\3\2\2\2\u01da\u01d5\3\2\2\2\u01da")
        buf.write("\u01d6\3\2\2\2\u01db\u01ee\3\2\2\2\u01dc\u01de\t\f\2\2")
        buf.write("\u01dd\u01dc\3\2\2\2\u01dd\u01de\3\2\2\2\u01de\u01eb\3")
        buf.write("\2\2\2\u01df\u01e3\5F$\2\u01e0\u01e2\5H%\2\u01e1\u01e0")
        buf.write("\3\2\2\2\u01e2\u01e5\3\2\2\2\u01e3\u01e1\3\2\2\2\u01e3")
        buf.write("\u01e4\3\2\2\2\u01e4\u01ec\3\2\2\2\u01e5\u01e3\3\2\2\2")
        buf.write("\u01e6\u01e8\5H%\2\u01e7\u01e6\3\2\2\2\u01e8\u01e9\3\2")
        buf.write("\2\2\u01e9\u01e7\3\2\2\2\u01e9\u01ea\3\2\2\2\u01ea\u01ec")
        buf.write("\3\2\2\2\u01eb\u01df\3\2\2\2\u01eb\u01e7\3\2\2\2\u01ec")
        buf.write("\u01ee\3\2\2\2\u01ed\u01d4\3\2\2\2\u01ed\u01dd\3\2\2\2")
        buf.write("\u01eeK\3\2\2\2\u01ef\u0214\5\"\22\2\u01f0\u01f2\7\33")
        buf.write("\2\2\u01f1\u01f0\3\2\2\2\u01f1\u01f2\3\2\2\2\u01f2\u01f3")
        buf.write("\3\2\2\2\u01f3\u01f5\7Z\2\2\u01f4\u01f6\5@!\2\u01f5\u01f4")
        buf.write("\3\2\2\2\u01f5\u01f6\3\2\2\2\u01f6\u0202\3\2\2\2\u01f7")
        buf.write("\u01f8\7\n\2\2\u01f8\u01fd\5> \2\u01f9\u01fa\7\b\2\2\u01fa")
        buf.write("\u01fc\5> \2\u01fb\u01f9\3\2\2\2\u01fc\u01ff\3\2\2\2\u01fd")
        buf.write("\u01fb\3\2\2\2\u01fd\u01fe\3\2\2\2\u01fe\u0200\3\2\2\2")
        buf.write("\u01ff\u01fd\3\2\2\2\u0200\u0201\7\13\2\2\u0201\u0203")
        buf.write("\3\2\2\2\u0202\u01f7\3\2\2\2\u0202\u0203\3\2\2\2\u0203")
        buf.write("\u0214\3\2\2\2\u0204\u0205\7\n\2\2\u0205\u020a\5> \2\u0206")
        buf.write("\u0207\7\b\2\2\u0207\u0209\5> \2\u0208\u0206\3\2\2\2\u0209")
        buf.write("\u020c\3\2\2\2\u020a\u0208\3\2\2\2\u020a\u020b\3\2\2\2")
        buf.write("\u020b\u020d\3\2\2\2\u020c\u020a\3\2\2\2\u020d\u020e\7")
        buf.write("\13\2\2\u020e\u0214\3\2\2\2\u020f\u0210\5F$\2\u0210\u0211")
        buf.write("\5\36\20\2\u0211\u0212\5F$\2\u0212\u0214\3\2\2\2\u0213")
        buf.write("\u01ef\3\2\2\2\u0213\u01f1\3\2\2\2\u0213\u0204\3\2\2\2")
        buf.write("\u0213\u020f\3\2\2\2\u0214M\3\2\2\2\u0215\u021a\5L\'\2")
        buf.write("\u0216\u0217\7\b\2\2\u0217\u0219\5L\'\2\u0218\u0216\3")
        buf.write("\2\2\2\u0219\u021c\3\2\2\2\u021a\u0218\3\2\2\2\u021a\u021b")
        buf.write("\3\2\2\2\u021bO\3\2\2\2\u021c\u021a\3\2\2\2\u021d\u021e")
        buf.write("\7I\2\2\u021e\u0223\7Z\2\2\u021f\u0220\7\b\2\2\u0220\u0222")
        buf.write("\7Z\2\2\u0221\u021f\3\2\2\2\u0222\u0225\3\2\2\2\u0223")
        buf.write("\u0221\3\2\2\2\u0223\u0224\3\2\2\2\u0224Q\3\2\2\2\u0225")
        buf.write("\u0223\3\2\2\2\u0226\u0227\7J\2\2\u0227\u0228\7Z\2\2\u0228")
        buf.write("\u0229\5P)\2\u0229S\3\2\2\2\u022a\u022b\7Q\2\2\u022b\u022c")
        buf.write("\7Z\2\2\u022c\u0236\7\25\2\2\u022d\u022f\5\2\2\2\u022e")
        buf.write("\u0230\5&\24\2\u022f\u022e\3\2\2\2\u0230\u0231\3\2\2\2")
        buf.write("\u0231\u022f\3\2\2\2\u0231\u0232\3\2\2\2\u0232\u0233\3")
        buf.write("\2\2\2\u0233\u0234\5\4\3\2\u0234\u0237\3\2\2\2\u0235\u0237")
        buf.write("\5&\24\2\u0236\u022d\3\2\2\2\u0236\u0235\3\2\2\2\u0237")
        buf.write("U\3\2\2\2\u0238\u0239\5~@\2\u0239W\3\2\2\2\u023a\u023d")
        buf.write("\5&\24\2\u023b\u023d\5\u0094K\2\u023c\u023a\3\2\2\2\u023c")
        buf.write("\u023b\3\2\2\2\u023dY\3\2\2\2\u023e\u0241\5\u00dan\2\u023f")
        buf.write("\u0241\5\u00d8m\2\u0240\u023e\3\2\2\2\u0240\u023f\3\2")
        buf.write("\2\2\u0241[\3\2\2\2\u0242\u0243\5Z.\2\u0243]\3\2\2\2\u0244")
        buf.write("\u0245\7;\2\2\u0245\u0246\5&\24\2\u0246\u0250\7\25\2\2")
        buf.write("\u0247\u0249\5\2\2\2\u0248\u024a\5X-\2\u0249\u0248\3\2")
        buf.write("\2\2\u024a\u024b\3\2\2\2\u024b\u0249\3\2\2\2\u024b\u024c")
        buf.write("\3\2\2\2\u024c\u024d\3\2\2\2\u024d\u024e\5\4\3\2\u024e")
        buf.write("\u0251\3\2\2\2\u024f\u0251\5X-\2\u0250\u0247\3\2\2\2\u0250")
        buf.write("\u024f\3\2\2\2\u0251_\3\2\2\2\u0252\u0253\7<\2\2\u0253")
        buf.write("\u025d\7\25\2\2\u0254\u0256\5\2\2\2\u0255\u0257\5X-\2")
        buf.write("\u0256\u0255\3\2\2\2\u0257\u0258\3\2\2\2\u0258\u0256\3")
        buf.write("\2\2\2\u0258\u0259\3\2\2\2\u0259\u025a\3\2\2\2\u025a\u025b")
        buf.write("\5\4\3\2\u025b\u025e\3\2\2\2\u025c\u025e\5X-\2\u025d\u0254")
        buf.write("\3\2\2\2\u025d\u025c\3\2\2\2\u025ea\3\2\2\2\u025f\u0261")
        buf.write("\5\2\2\2\u0260\u0262\5X-\2\u0261\u0260\3\2\2\2\u0262\u0263")
        buf.write("\3\2\2\2\u0263\u0261\3\2\2\2\u0263\u0264\3\2\2\2\u0264")
        buf.write("\u0265\3\2\2\2\u0265\u0266\5\4\3\2\u0266\u0269\3\2\2\2")
        buf.write("\u0267\u0269\5X-\2\u0268\u025f\3\2\2\2\u0268\u0267\3\2")
        buf.write("\2\2\u0269\u026d\3\2\2\2\u026a\u026c\5^\60\2\u026b\u026a")
        buf.write("\3\2\2\2\u026c\u026f\3\2\2\2\u026d\u026b\3\2\2\2\u026d")
        buf.write("\u026e\3\2\2\2\u026e\u0271\3\2\2\2\u026f\u026d\3\2\2\2")
        buf.write("\u0270\u0272\5`\61\2\u0271\u0270\3\2\2\2\u0271\u0272\3")
        buf.write("\2\2\2\u0272c\3\2\2\2\u0273\u0274\5&\24\2\u0274\u0275")
        buf.write("\7\25\2\2\u0275\u0276\5b\62\2\u0276e\3\2\2\2\u0277\u0278")
        buf.write("\79\2\2\u0278\u027b\5&\24\2\u0279\u027a\7\25\2\2\u027a")
        buf.write("\u027c\5&\24\2\u027b\u0279\3\2\2\2\u027b\u027c\3\2\2\2")
        buf.write("\u027c\u0282\3\2\2\2\u027d\u027e\5\2\2\2\u027e\u027f\5")
        buf.write("j\66\2\u027f\u0280\5\4\3\2\u0280\u0283\3\2\2\2\u0281\u0283")
        buf.write("\5j\66\2\u0282\u027d\3\2\2\2\u0282\u0281\3\2\2\2\u0283")
        buf.write("g\3\2\2\2\u0284\u0285\7\31\2\2\u0285\u0286\5p9\2\u0286")
        buf.write("\u0287\7\25\2\2\u0287\u0288\5&\24\2\u0288i\3\2\2\2\u0289")
        buf.write("\u028b\5h\65\2\u028a\u0289\3\2\2\2\u028b\u028c\3\2\2\2")
        buf.write("\u028c\u028a\3\2\2\2\u028c\u028d\3\2\2\2\u028dk\3\2\2")
        buf.write("\2\u028e\u028f\7F\2\2\u028f\u0290\5d\63\2\u0290m\3\2\2")
        buf.write("\2\u0291\u0293\7:\2\2\u0292\u0294\7\32\2\2\u0293\u0292")
        buf.write("\3\2\2\2\u0293\u0294\3\2\2\2\u0294\u0295\3\2\2\2\u0295")
        buf.write("\u0296\5d\63\2\u0296o\3\2\2\2\u0297\u029c\5&\24\2\u0298")
        buf.write("\u0299\7\b\2\2\u0299\u029b\5&\24\2\u029a\u0298\3\2\2\2")
        buf.write("\u029b\u029e\3\2\2\2\u029c\u029a\3\2\2\2\u029c\u029d\3")
        buf.write("\2\2\2\u029dq\3\2\2\2\u029e\u029c\3\2\2\2\u029f\u02a0")
        buf.write("\79\2\2\u02a0\u02a1\5&\24\2\u02a1\u02a2\5t;\2\u02a2s\3")
        buf.write("\2\2\2\u02a3\u02a5\5v<\2\u02a4\u02a3\3\2\2\2\u02a5\u02a6")
        buf.write("\3\2\2\2\u02a6\u02a4\3\2\2\2\u02a6\u02a7\3\2\2\2\u02a7")
        buf.write("\u02b5\3\2\2\2\u02a8\u02a9\7<\2\2\u02a9\u02b3\7\25\2\2")
        buf.write("\u02aa\u02ac\5\2\2\2\u02ab\u02ad\5\\/\2\u02ac\u02ab\3")
        buf.write("\2\2\2\u02ad\u02ae\3\2\2\2\u02ae\u02ac\3\2\2\2\u02ae\u02af")
        buf.write("\3\2\2\2\u02af\u02b0\3\2\2\2\u02b0\u02b1\5\4\3\2\u02b1")
        buf.write("\u02b4\3\2\2\2\u02b2\u02b4\5\\/\2\u02b3\u02aa\3\2\2\2")
        buf.write("\u02b3\u02b2\3\2\2\2\u02b4\u02b6\3\2\2\2\u02b5\u02a8\3")
        buf.write("\2\2\2\u02b5\u02b6\3\2\2\2\u02b6u\3\2\2\2\u02b7\u02b8")
        buf.write("\7\31\2\2\u02b8\u02b9\5p9\2\u02b9\u02c3\7\25\2\2\u02ba")
        buf.write("\u02bc\5\2\2\2\u02bb\u02bd\5\\/\2\u02bc\u02bb\3\2\2\2")
        buf.write("\u02bd\u02be\3\2\2\2\u02be\u02bc\3\2\2\2\u02be\u02bf\3")
        buf.write("\2\2\2\u02bf\u02c0\3\2\2\2\u02c0\u02c1\5\4\3\2\u02c1\u02c4")
        buf.write("\3\2\2\2\u02c2\u02c4\5\\/\2\u02c3\u02ba\3\2\2\2\u02c3")
        buf.write("\u02c2\3\2\2\2\u02c4w\3\2\2\2\u02c5\u02c6\7>\2\2\u02c6")
        buf.write("\u02c7\5&\24\2\u02c7\u02d1\7\25\2\2\u02c8\u02ca\5\2\2")
        buf.write("\2\u02c9\u02cb\5\\/\2\u02ca\u02c9\3\2\2\2\u02cb\u02cc")
        buf.write("\3\2\2\2\u02cc\u02ca\3\2\2\2\u02cc\u02cd\3\2\2\2\u02cd")
        buf.write("\u02ce\3\2\2\2\u02ce\u02cf\5\4\3\2\u02cf\u02d2\3\2\2\2")
        buf.write("\u02d0\u02d2\5\\/\2\u02d1\u02c8\3\2\2\2\u02d1\u02d0\3")
        buf.write("\2\2\2\u02d2y\3\2\2\2\u02d3\u02d4\7F\2\2\u02d4\u02d5\5")
        buf.write("\u0088E\2\u02d5{\3\2\2\2\u02d6\u02db\7Z\2\2\u02d7\u02d8")
        buf.write("\7\b\2\2\u02d8\u02da\7Z\2\2\u02d9\u02d7\3\2\2\2\u02da")
        buf.write("\u02dd\3\2\2\2\u02db\u02d9\3\2\2\2\u02db\u02dc\3\2\2\2")
        buf.write("\u02dc}\3\2\2\2\u02dd\u02db\3\2\2\2\u02de\u02df\7@\2\2")
        buf.write("\u02df\u02e0\5|?\2\u02e0\u02e1\7\30\2\2\u02e1\u02e2\5")
        buf.write("&\24\2\u02e2\u02ec\7\25\2\2\u02e3\u02e5\5\2\2\2\u02e4")
        buf.write("\u02e6\5\\/\2\u02e5\u02e4\3\2\2\2\u02e6\u02e7\3\2\2\2")
        buf.write("\u02e7\u02e5\3\2\2\2\u02e7\u02e8\3\2\2\2\u02e8\u02e9\3")
        buf.write("\2\2\2\u02e9\u02ea\5\4\3\2\u02ea\u02ed\3\2\2\2\u02eb\u02ed")
        buf.write("\5\\/\2\u02ec\u02e3\3\2\2\2\u02ec\u02eb\3\2\2\2\u02ed")
        buf.write("\177\3\2\2\2\u02ee\u02f0\7:\2\2\u02ef\u02f1\7\32\2\2\u02f0")
        buf.write("\u02ef\3\2\2\2\u02f0\u02f1\3\2\2\2\u02f1\u02f2\3\2\2\2")
        buf.write("\u02f2\u02f3\5\u0088E\2\u02f3\u0081\3\2\2\2\u02f4\u02f5")
        buf.write("\7;\2\2\u02f5\u02f6\5&\24\2\u02f6\u0300\7\25\2\2\u02f7")
        buf.write("\u02f9\5\2\2\2\u02f8\u02fa\5\\/\2\u02f9\u02f8\3\2\2\2")
        buf.write("\u02fa\u02fb\3\2\2\2\u02fb\u02f9\3\2\2\2\u02fb\u02fc\3")
        buf.write("\2\2\2\u02fc\u02fd\3\2\2\2\u02fd\u02fe\5\4\3\2\u02fe\u0301")
        buf.write("\3\2\2\2\u02ff\u0301\5\\/\2\u0300\u02f7\3\2\2\2\u0300")
        buf.write("\u02ff\3\2\2\2\u0301\u0083\3\2\2\2\u0302\u0303\7<\2\2")
        buf.write("\u0303\u030d\7\25\2\2\u0304\u0306\5\2\2\2\u0305\u0307")
        buf.write("\5\\/\2\u0306\u0305\3\2\2\2\u0307\u0308\3\2\2\2\u0308")
        buf.write("\u0306\3\2\2\2\u0308\u0309\3\2\2\2\u0309\u030a\3\2\2\2")
        buf.write("\u030a\u030b\5\4\3\2\u030b\u030e\3\2\2\2\u030c\u030e\5")
        buf.write("\\/\2\u030d\u0304\3\2\2\2\u030d\u030c\3\2\2\2\u030e\u0085")
        buf.write("\3\2\2\2\u030f\u0311\5\2\2\2\u0310\u0312\5\\/\2\u0311")
        buf.write("\u0310\3\2\2\2\u0312\u0313\3\2\2\2\u0313\u0311\3\2\2\2")
        buf.write("\u0313\u0314\3\2\2\2\u0314\u0315\3\2\2\2\u0315\u0316\5")
        buf.write("\4\3\2\u0316\u0319\3\2\2\2\u0317\u0319\5\\/\2\u0318\u030f")
        buf.write("\3\2\2\2\u0318\u0317\3\2\2\2\u0319\u033b\3\2\2\2\u031a")
        buf.write("\u031e\5\2\2\2\u031b\u031d\5\u0082B\2\u031c\u031b\3\2")
        buf.write("\2\2\u031d\u0320\3\2\2\2\u031e\u031c\3\2\2\2\u031e\u031f")
        buf.write("\3\2\2\2\u031f\u0322\3\2\2\2\u0320\u031e\3\2\2\2\u0321")
        buf.write("\u0323\5\u0084C\2\u0322\u0321\3\2\2\2\u0322\u0323\3\2")
        buf.write("\2\2\u0323\u0324\3\2\2\2\u0324\u0325\5\4\3\2\u0325\u033c")
        buf.write("\3\2\2\2\u0326\u0328\5\u0082B\2\u0327\u0326\3\2\2\2\u0328")
        buf.write("\u032b\3\2\2\2\u0329\u0327\3\2\2\2\u0329\u032a\3\2\2\2")
        buf.write("\u032a\u032c\3\2\2\2\u032b\u0329\3\2\2\2\u032c\u032e\5")
        buf.write("\2\2\2\u032d\u032f\5\u0084C\2\u032e\u032d\3\2\2\2\u032e")
        buf.write("\u032f\3\2\2\2\u032f\u0330\3\2\2\2\u0330\u0331\5\4\3\2")
        buf.write("\u0331\u033c\3\2\2\2\u0332\u0334\5\u0082B\2\u0333\u0332")
        buf.write("\3\2\2\2\u0334\u0337\3\2\2\2\u0335\u0333\3\2\2\2\u0335")
        buf.write("\u0336\3\2\2\2\u0336\u0339\3\2\2\2\u0337\u0335\3\2\2\2")
        buf.write("\u0338\u033a\5\u0084C\2\u0339\u0338\3\2\2\2\u0339\u033a")
        buf.write("\3\2\2\2\u033a\u033c\3\2\2\2\u033b\u031a\3\2\2\2\u033b")
        buf.write("\u0329\3\2\2\2\u033b\u0335\3\2\2\2\u033c\u0087\3\2\2\2")
        buf.write("\u033d\u033e\5&\24\2\u033e\u033f\7\25\2\2\u033f\u0340")
        buf.write("\5\u0086D\2\u0340\u0089\3\2\2\2\u0341\u0342\7Q\2\2\u0342")
        buf.write("\u0343\7Z\2\2\u0343\u034d\7\25\2\2\u0344\u0346\5\2\2\2")
        buf.write("\u0345\u0347\5\\/\2\u0346\u0345\3\2\2\2\u0347\u0348\3")
        buf.write("\2\2\2\u0348\u0346\3\2\2\2\u0348\u0349\3\2\2\2\u0349\u034a")
        buf.write("\3\2\2\2\u034a\u034b\5\4\3\2\u034b\u034e\3\2\2\2\u034c")
        buf.write("\u034e\5\\/\2\u034d\u0344\3\2\2\2\u034d\u034c\3\2\2\2")
        buf.write("\u034e\u008b\3\2\2\2\u034f\u0350\7W\2\2\u0350\u008d\3")
        buf.write("\2\2\2\u0351\u0352\7\64\2\2\u0352\u0355\5&\24\2\u0353")
        buf.write("\u0355\7\64\2\2\u0354\u0351\3\2\2\2\u0354\u0353\3\2\2")
        buf.write("\2\u0355\u008f\3\2\2\2\u0356\u0357\7B\2\2\u0357\u035a")
        buf.write("\5&\24\2\u0358\u035a\7B\2\2\u0359\u0356\3\2\2\2\u0359")
        buf.write("\u0358\3\2\2\2\u035a\u0091\3\2\2\2\u035b\u035c\7A\2\2")
        buf.write("\u035c\u0093\3\2\2\2\u035d\u0363\5T+\2\u035e\u0363\5f")
        buf.write("\64\2\u035f\u0363\5V,\2\u0360\u0363\5n8\2\u0361\u0363")
        buf.write("\5l\67\2\u0362\u035d\3\2\2\2\u0362\u035e\3\2\2\2\u0362")
        buf.write("\u035f\3\2\2\2\u0362\u0360\3\2\2\2\u0362\u0361\3\2\2\2")
        buf.write("\u0363\u0095\3\2\2\2\u0364\u0365\7\f\2\2\u0365\u0366\7")
        buf.write("\26\2\2\u0366\u0368\7Z\2\2\u0367\u0369\7\26\2\2\u0368")
        buf.write("\u0367\3\2\2\2\u0368\u0369\3\2\2\2\u0369\u036a\3\2\2\2")
        buf.write("\u036a\u036b\7\r\2\2\u036b\u0097\3\2\2\2\u036c\u036e\5")
        buf.write(":\36\2\u036d\u036f\5@!\2\u036e\u036d\3\2\2\2\u036e\u036f")
        buf.write("\3\2\2\2\u036f\u0099\3\2\2\2\u0370\u0371\7Z\2\2\u0371")
        buf.write("\u0372\5@!\2\u0372\u009b\3\2\2\2\u0373\u0375\7Z\2\2\u0374")
        buf.write("\u0376\5@!\2\u0375\u0374\3\2\2\2\u0375\u0376\3\2\2\2\u0376")
        buf.write("\u037c\3\2\2\2\u0377\u0378\7-\2\2\u0378\u037c\5\u00a2")
        buf.write("R\2\u0379\u037a\7)\2\2\u037a\u037c\5\u009aN\2\u037b\u0373")
        buf.write("\3\2\2\2\u037b\u0377\3\2\2\2\u037b\u0379\3\2\2\2\u037c")
        buf.write("\u009d\3\2\2\2\u037d\u0382\7Z\2\2\u037e\u037f\7\25\2\2")
        buf.write("\u037f\u0383\5\u009cO\2\u0380\u0381\7\27\2\2\u0381\u0383")
        buf.write("\5&\24\2\u0382\u037e\3\2\2\2\u0382\u0380\3\2\2\2\u0383")
        buf.write("\u009f\3\2\2\2\u0384\u0385\7\25\2\2\u0385\u0387\5\u009c")
        buf.write("O\2\u0386\u0384\3\2\2\2\u0386\u0387\3\2\2\2\u0387\u0388")
        buf.write("\3\2\2\2\u0388\u0396\7\27\2\2\u0389\u038c\5Z.\2\u038a")
        buf.write("\u038c\5X-\2\u038b\u0389\3\2\2\2\u038b\u038a\3\2\2\2\u038c")
        buf.write("\u0397\3\2\2\2\u038d\u0390\5\2\2\2\u038e\u0391\5Z.\2\u038f")
        buf.write("\u0391\5X-\2\u0390\u038e\3\2\2\2\u0390\u038f\3\2\2\2\u0391")
        buf.write("\u0392\3\2\2\2\u0392\u0390\3\2\2\2\u0392\u0393\3\2\2\2")
        buf.write("\u0393\u0394\3\2\2\2\u0394\u0395\5\4\3\2\u0395\u0397\3")
        buf.write("\2\2\2\u0396\u038b\3\2\2\2\u0396\u038d\3\2\2\2\u0397\u00a1")
        buf.write("\3\2\2\2\u0398\u0399\7\n\2\2\u0399\u039e\5\u009eP\2\u039a")
        buf.write("\u039b\7\b\2\2\u039b\u039d\5\u009eP\2\u039c\u039a\3\2")
        buf.write("\2\2\u039d\u03a0\3\2\2\2\u039e\u039c\3\2\2\2\u039e\u039f")
        buf.write("\3\2\2\2\u039f\u03a1\3\2\2\2\u03a0\u039e\3\2\2\2\u03a1")
        buf.write("\u03a2\7\13\2\2\u03a2\u00a3\3\2\2\2\u03a3\u03a4\5\u0098")
        buf.write("M\2\u03a4\u03a5\5\u00a2R\2\u03a5\u03a6\5\u00a0Q\2\u03a6")
        buf.write("\u00a5\3\2\2\2\u03a7\u03a8\7Z\2\2\u03a8\u00a7\3\2\2\2")
        buf.write("\u03a9\u03aa\7\n\2\2\u03aa\u03af\5\u00aaV\2\u03ab\u03ac")
        buf.write("\7\b\2\2\u03ac\u03ae\5\u00aaV\2\u03ad\u03ab\3\2\2\2\u03ae")
        buf.write("\u03b1\3\2\2\2\u03af\u03ad\3\2\2\2\u03af\u03b0\3\2\2\2")
        buf.write("\u03b0\u03b2\3\2\2\2\u03b1\u03af\3\2\2\2\u03b2\u03b3\7")
        buf.write("\13\2\2\u03b3\u00a9\3\2\2\2\u03b4\u03b5\7Z\2\2\u03b5\u00ab")
        buf.write("\3\2\2\2\u03b6\u03b8\5\u0096L\2\u03b7\u03b6\3\2\2\2\u03b7")
        buf.write("\u03b8\3\2\2\2\u03b8\u03b9\3\2\2\2\u03b9\u03c3\7\27\2")
        buf.write("\2\u03ba\u03c4\5Z.\2\u03bb\u03bd\5\2\2\2\u03bc\u03be\5")
        buf.write("Z.\2\u03bd\u03bc\3\2\2\2\u03be\u03bf\3\2\2\2\u03bf\u03bd")
        buf.write("\3\2\2\2\u03bf\u03c0\3\2\2\2\u03c0\u03c1\3\2\2\2\u03c1")
        buf.write("\u03c2\5\4\3\2\u03c2\u03c4\3\2\2\2\u03c3\u03ba\3\2\2\2")
        buf.write("\u03c3\u03bb\3\2\2\2\u03c4\u00ad\3\2\2\2\u03c5\u03c6\5")
        buf.write("\u00a6T\2\u03c6\u03c7\5\u00a8U\2\u03c7\u03c8\5\u00acW")
        buf.write("\2\u03c8\u00af\3\2\2\2\u03c9\u03ca\7Z\2\2\u03ca\u00b1")
        buf.write("\3\2\2\2\u03cb\u03cc\7Z\2\2\u03cc\u00b3\3\2\2\2\u03cd")
        buf.write("\u03ce\7Z\2\2\u03ce\u03cf\7\25\2\2\u03cf\u03d0\5\u00b2")
        buf.write("Z\2\u03d0\u00b5\3\2\2\2\u03d1\u03d2\7\n\2\2\u03d2\u03d7")
        buf.write("\5\u00b4[\2\u03d3\u03d4\t\r\2\2\u03d4\u03d6\5\u00b4[\2")
        buf.write("\u03d5\u03d3\3\2\2\2\u03d6\u03d9\3\2\2\2\u03d7\u03d5\3")
        buf.write("\2\2\2\u03d7\u03d8\3\2\2\2\u03d8\u03da\3\2\2\2\u03d9\u03d7")
        buf.write("\3\2\2\2\u03da\u03db\7\13\2\2\u03db\u00b7\3\2\2\2\u03dc")
        buf.write("\u03dd\7\25\2\2\u03dd\u03df\5\u00b2Z\2\u03de\u03dc\3\2")
        buf.write("\2\2\u03de\u03df\3\2\2\2\u03df\u03e0\3\2\2\2\u03e0\u03ea")
        buf.write("\7\27\2\2\u03e1\u03eb\5Z.\2\u03e2\u03e4\5\2\2\2\u03e3")
        buf.write("\u03e5\5Z.\2\u03e4\u03e3\3\2\2\2\u03e5\u03e6\3\2\2\2\u03e6")
        buf.write("\u03e4\3\2\2\2\u03e6\u03e7\3\2\2\2\u03e7\u03e8\3\2\2\2")
        buf.write("\u03e8\u03e9\5\4\3\2\u03e9\u03eb\3\2\2\2\u03ea\u03e1\3")
        buf.write("\2\2\2\u03ea\u03e2\3\2\2\2\u03eb\u00b9\3\2\2\2\u03ec\u03ed")
        buf.write("\5\u00b0Y\2\u03ed\u03ee\5\u00b6\\\2\u03ee\u03ef\5\u00b8")
        buf.write("]\2\u03ef\u00bb\3\2\2\2\u03f0\u03f1\5&\24\2\u03f1\u00bd")
        buf.write("\3\2\2\2\u03f2\u03f4\7Z\2\2\u03f3\u03f5\5@!\2\u03f4\u03f3")
        buf.write("\3\2\2\2\u03f4\u03f5\3\2\2\2\u03f5\u03f6\3\2\2\2\u03f6")
        buf.write("\u03f7\7\27\2\2\u03f7\u00bf\3\2\2\2\u03f8\u03f9\5\u00be")
        buf.write("`\2\u03f9\u03fa\5\u00bc_\2\u03fa\u00c1\3\2\2\2\u03fb\u03fd")
        buf.write("\5\2\2\2\u03fc\u03fe\5\u00c0a\2\u03fd\u03fc\3\2\2\2\u03fe")
        buf.write("\u03ff\3\2\2\2\u03ff\u03fd\3\2\2\2\u03ff\u0400\3\2\2\2")
        buf.write("\u0400\u0401\3\2\2\2\u0401\u0402\5\4\3\2\u0402\u00c3\3")
        buf.write("\2\2\2\u0403\u0404\5\u00c2b\2\u0404\u00c5\3\2\2\2\u0405")
        buf.write("\u040f\5\u00ceh\2\u0406\u0408\5\2\2\2\u0407\u0409\5\u00ce")
        buf.write("h\2\u0408\u0407\3\2\2\2\u0409\u040a\3\2\2\2\u040a\u0408")
        buf.write("\3\2\2\2\u040a\u040b\3\2\2\2\u040b\u040c\3\2\2\2\u040c")
        buf.write("\u040d\5\4\3\2\u040d\u040f\3\2\2\2\u040e\u0405\3\2\2\2")
        buf.write("\u040e\u0406\3\2\2\2\u040f\u00c7\3\2\2\2\u0410\u041a\5")
        buf.write("\u00ccg\2\u0411\u0413\5\2\2\2\u0412\u0414\5\u00ccg\2\u0413")
        buf.write("\u0412\3\2\2\2\u0414\u0415\3\2\2\2\u0415\u0413\3\2\2\2")
        buf.write("\u0415\u0416\3\2\2\2\u0416\u0417\3\2\2\2\u0417\u0418\5")
        buf.write("\4\3\2\u0418\u041a\3\2\2\2\u0419\u0410\3\2\2\2\u0419\u0411")
        buf.write("\3\2\2\2\u041a\u00c9\3\2\2\2\u041b\u041c\7Z\2\2\u041c")
        buf.write("\u041d\7\27\2\2\u041d\u0429\5&\24\2\u041e\u0422\5\2\2")
        buf.write("\2\u041f\u0420\7Z\2\2\u0420\u0421\7\27\2\2\u0421\u0423")
        buf.write("\5&\24\2\u0422\u041f\3\2\2\2\u0423\u0424\3\2\2\2\u0424")
        buf.write("\u0422\3\2\2\2\u0424\u0425\3\2\2\2\u0425\u0426\3\2\2\2")
        buf.write("\u0426\u0427\5\4\3\2\u0427\u0429\3\2\2\2\u0428\u041b\3")
        buf.write("\2\2\2\u0428\u041e\3\2\2\2\u0429\u00cb\3\2\2\2\u042a\u042b")
        buf.write("\7Z\2\2\u042b\u042c\7\27\2\2\u042c\u042d\5&\24\2\u042d")
        buf.write("\u00cd\3\2\2\2\u042e\u0433\7Z\2\2\u042f\u0430\7\b\2\2")
        buf.write("\u0430\u0432\7Z\2\2\u0431\u042f\3\2\2\2\u0432\u0435\3")
        buf.write("\2\2\2\u0433\u0431\3\2\2\2\u0433\u0434\3\2\2\2\u0434\u0436")
        buf.write("\3\2\2\2\u0435\u0433\3\2\2\2\u0436\u0437\7\25\2\2\u0437")
        buf.write("\u0451\5&\24\2\u0438\u043d\7Z\2\2\u0439\u043a\7\b\2\2")
        buf.write("\u043a\u043c\7Z\2\2\u043b\u0439\3\2\2\2\u043c\u043f\3")
        buf.write("\2\2\2\u043d\u043b\3\2\2\2\u043d\u043e\3\2\2\2\u043e\u0440")
        buf.write("\3\2\2\2\u043f\u043d\3\2\2\2\u0440\u0441\7\27\2\2\u0441")
        buf.write("\u0451\5X-\2\u0442\u0447\7Z\2\2\u0443\u0444\7\b\2\2\u0444")
        buf.write("\u0446\7Z\2\2\u0445\u0443\3\2\2\2\u0446\u0449\3\2\2\2")
        buf.write("\u0447\u0445\3\2\2\2\u0447\u0448\3\2\2\2\u0448\u044a\3")
        buf.write("\2\2\2\u0449\u0447\3\2\2\2\u044a\u044b\7\25\2\2\u044b")
        buf.write("\u044c\5&\24\2\u044c\u044d\3\2\2\2\u044d\u044e\7\27\2")
        buf.write("\2\u044e\u044f\5X-\2\u044f\u0451\3\2\2\2\u0450\u042e\3")
        buf.write("\2\2\2\u0450\u0438\3\2\2\2\u0450\u0442\3\2\2\2\u0451\u00cf")
        buf.write("\3\2\2\2\u0452\u0455\5\u00d2j\2\u0453\u0455\5\u00d4k\2")
        buf.write("\u0454\u0452\3\2\2\2\u0454\u0453\3\2\2\2\u0455\u00d1\3")
        buf.write("\2\2\2\u0456\u045d\5P)\2\u0457\u045d\5R*\2\u0458\u045d")
        buf.write("\5\u008cG\2\u0459\u045d\5\u008eH\2\u045a\u045d\5\u0090")
        buf.write("I\2\u045b\u045d\5\u0092J\2\u045c\u0456\3\2\2\2\u045c\u0457")
        buf.write("\3\2\2\2\u045c\u0458\3\2\2\2\u045c\u0459\3\2\2\2\u045c")
        buf.write("\u045a\3\2\2\2\u045c\u045b\3\2\2\2\u045d\u00d3\3\2\2\2")
        buf.write("\u045e\u0473\5~@\2\u045f\u0473\5\u0080A\2\u0460\u0473")
        buf.write("\5r:\2\u0461\u0473\5\u008aF\2\u0462\u0473\5x=\2\u0463")
        buf.write("\u0473\5z>\2\u0464\u0465\7C\2\2\u0465\u0473\5\u00aeX\2")
        buf.write("\u0466\u0467\7-\2\2\u0467\u0473\5\u00a4S\2\u0468\u0469")
        buf.write("\7R\2\2\u0469\u0473\5\u00ba^\2\u046a\u046b\7\24\2\2\u046b")
        buf.write("\u0473\5\u00c4c\2\u046c\u046d\7+\2\2\u046d\u0473\5\u00c8")
        buf.write("e\2\u046e\u046f\7)\2\2\u046f\u0473\5\u00c6d\2\u0470\u0471")
        buf.write("\7*\2\2\u0471\u0473\5\u00caf\2\u0472\u045e\3\2\2\2\u0472")
        buf.write("\u045f\3\2\2\2\u0472\u0460\3\2\2\2\u0472\u0461\3\2\2\2")
        buf.write("\u0472\u0462\3\2\2\2\u0472\u0463\3\2\2\2\u0472\u0464\3")
        buf.write("\2\2\2\u0472\u0466\3\2\2\2\u0472\u0468\3\2\2\2\u0472\u046a")
        buf.write("\3\2\2\2\u0472\u046c\3\2\2\2\u0472\u046e\3\2\2\2\u0472")
        buf.write("\u0470\3\2\2\2\u0473\u00d5\3\2\2\2\u0474\u0475\7\25\2")
        buf.write("\2\u0475\u0476\5\u00dan\2\u0476\u00d7\3\2\2\2\u0477\u0478")
        buf.write("\5&\24\2\u0478\u0479\7\27\2\2\u0479\u047a\5X-\2\u047a")
        buf.write("\u048b\3\2\2\2\u047b\u047d\5F$\2\u047c\u047e\5H%\2\u047d")
        buf.write("\u047c\3\2\2\2\u047e\u047f\3\2\2\2\u047f\u047d\3\2\2\2")
        buf.write("\u047f\u0480\3\2\2\2\u0480\u048b\3\2\2\2\u0481\u0482\7")
        buf.write("Z\2\2\u0482\u048b\5N(\2\u0483\u0484\5&\24\2\u0484\u0485")
        buf.write("\5N(\2\u0485\u048b\3\2\2\2\u0486\u0487\5&\24\2\u0487\u0488")
        buf.write("\7Z\2\2\u0488\u0489\5N(\2\u0489\u048b\3\2\2\2\u048a\u0477")
        buf.write("\3\2\2\2\u048a\u047b\3\2\2\2\u048a\u0481\3\2\2\2\u048a")
        buf.write("\u0483\3\2\2\2\u048a\u0486\3\2\2\2\u048b\u00d9\3\2\2\2")
        buf.write("\u048c\u048d\5\u00d0i\2\u048d\u00db\3\2\2\2\u048e\u0495")
        buf.write("\5Z.\2\u048f\u0491\7\t\2\2\u0490\u048f\3\2\2\2\u0490\u0491")
        buf.write("\3\2\2\2\u0491\u0492\3\2\2\2\u0492\u0494\5Z.\2\u0493\u0490")
        buf.write("\3\2\2\2\u0494\u0497\3\2\2\2\u0495\u0493\3\2\2\2\u0495")
        buf.write("\u0496\3\2\2\2\u0496\u0498\3\2\2\2\u0497\u0495\3\2\2\2")
        buf.write("\u0498\u0499\7\2\2\3\u0499\u00dd\3\2\2\2\u049a\u049b\5")
        buf.write("\u00dco\2\u049b\u00df\3\2\2\2\u0081\u00ef\u00fb\u0110")
        buf.write("\u011e\u0127\u0130\u0139\u0142\u014b\u0154\u015d\u0166")
        buf.write("\u016f\u0178\u017a\u017e\u0185\u0187\u018c\u0194\u019f")
        buf.write("\u01a7\u01ad\u01af\u01b4\u01be\u01c9\u01d2\u01da\u01dd")
        buf.write("\u01e3\u01e9\u01eb\u01ed\u01f1\u01f5\u01fd\u0202\u020a")
        buf.write("\u0213\u021a\u0223\u0231\u0236\u023c\u0240\u024b\u0250")
        buf.write("\u0258\u025d\u0263\u0268\u026d\u0271\u027b\u0282\u028c")
        buf.write("\u0293\u029c\u02a6\u02ae\u02b3\u02b5\u02be\u02c3\u02cc")
        buf.write("\u02d1\u02db\u02e7\u02ec\u02f0\u02fb\u0300\u0308\u030d")
        buf.write("\u0313\u0318\u031e\u0322\u0329\u032e\u0335\u0339\u033b")
        buf.write("\u0348\u034d\u0354\u0359\u0362\u0368\u036e\u0375\u037b")
        buf.write("\u0382\u0386\u038b\u0390\u0392\u0396\u039e\u03af\u03b7")
        buf.write("\u03bf\u03c3\u03d7\u03de\u03e6\u03ea\u03f4\u03ff\u040a")
        buf.write("\u040e\u0415\u0419\u0424\u0428\u0433\u043d\u0447\u0450")
        buf.write("\u0454\u045c\u0472\u047f\u048a\u0490\u0495")
        return buf.getvalue()


class nim_Parser ( Parser ):

    grammarFileName = "nim_Parser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "' '", "','", "';'", "'('", "')'", "'{'", 
                     "'}'", "'['", "']'", "'interface'", "'enum'", "'object'", 
                     "'concept'", "'type'", "':'", "'.'", "'='", "'in'", 
                     "'of'", "'not'", "'$'", "'@'", "'-'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'var'", "'let'", "'const'", 
                     "'bind'", "'proc'", "'static'", "'method'", "'func'", 
                     "'mixin'", "'end'", "'except'", "'return'", "'try'", 
                     "'raise'", "'finally'", "'out'", "'case'", "'if'", 
                     "'elif'", "'else'", "'do'", "'while'", "'iterator'", 
                     "'for'", "'continue'", "'break'", "'template'", "'tuple'", 
                     "'using'", "'when'", "'yield'", "'include'", "'import'", 
                     "'from'", "'as'", "'export'", "'ref'", "'ptr'", "'addr'", 
                     "'asm'", "'block'", "'macro'", "'nil'", "'cast'", "'converter'", 
                     "'defer'", "'discard'", "'distinct'", "'`'" ]

    symbolicNames = [ "<INVALID>", "DOCUMENTATION_COMMENT", "MULTILINE_COMMENT", 
                      "COMMENT", "UNCONDITIONAL_NEWLINE", "WS", "COMMA", 
                      "SEMI_COLON", "OPEN_PAREN", "CLOSE_PAREN", "OPEN_BRACE", 
                      "CLOSE_BRACE", "OPEN_BRACK", "CLOSE_BRACK", "INTERFACE", 
                      "ENUM", "OBJECT", "CONCEPT", "TYPE", "COLON", "DOT", 
                      "EQUALS", "IN", "OF", "NOT", "DOLLAR_SIGN", "AT", 
                      "MINUS_OPERATOR", "OP0", "OP1", "OP2", "OP3", "OP4", 
                      "OP5", "OP6", "OP7", "OP8", "OP9", "OP10", "VARIABLE", 
                      "LET", "CONST", "BIND", "PROC", "STATIC", "METHOD", 
                      "FUNC", "MIXIN", "END", "EXCEPT", "RETURN", "TRY", 
                      "RAISE", "FINALLY", "OUT", "CASE", "IF", "ELIF", "ELSE", 
                      "DO", "WHILE", "ITERATOR", "FOR", "CONTINUE", "BREAK", 
                      "TEMPLATE", "TUPLE", "USING", "WHEN", "YIELD", "INCLUDE", 
                      "IMPORT", "FROM", "AS", "EXPORT", "REF", "PTR", "ADDR", 
                      "ASM", "BLOCK", "MACRO", "NIL", "CAST", "CONVERTER", 
                      "DEFER", "DISCARD", "DISTINCT", "SYM_HEADER", "IDENTIFIER", 
                      "INT_LIT", "INT8_LIT", "INT16_LIT", "INT32_LIT", "INT64_LIT", 
                      "UINT_LIT", "UINT8_LIT", "UINT16_LIT", "UINT32_LIT", 
                      "UINT64_LIT", "EXP", "FLOAT_LIT", "FLOAT32_LIT", "FLOAT64_LIT", 
                      "CHAR_LIT", "STR_LIT", "TRIPLESTR_LIT", "RSTR_LIT", 
                      "GENERALIZED_STR_LIT", "GENERALIZED_TRIPLESTR_LIT", 
                      "DEDENT", "EXIT", "USELESS_LINE", "USELSSS_INDENTS", 
                      "INDENT", "INDENTS_PASS", "ERROR_INDENT" ]

    RULE_ind = 0
    RULE_ded = 1
    RULE_typeKeyw = 2
    RULE_op0 = 3
    RULE_op1 = 4
    RULE_op2 = 5
    RULE_op3 = 6
    RULE_op4 = 7
    RULE_op5 = 8
    RULE_op6 = 9
    RULE_op7 = 10
    RULE_op8 = 11
    RULE_op9 = 12
    RULE_op10 = 13
    RULE_operator = 14
    RULE_prefixOperator = 15
    RULE_literal = 16
    RULE_generalizedLit = 17
    RULE_simpleExpr = 18
    RULE_assignExpr = 19
    RULE_orExpr = 20
    RULE_andExpr = 21
    RULE_cmpExpr = 22
    RULE_sliceExpr = 23
    RULE_ampExpr = 24
    RULE_plusExpr = 25
    RULE_mulExpr = 26
    RULE_dollarExpr = 27
    RULE_symbol = 28
    RULE_symbolBody = 29
    RULE_exprColonEqExpr = 30
    RULE_arrayConstr = 31
    RULE_tupleConstr = 32
    RULE_exprColonEqExprExtended = 33
    RULE_identOrLiteral = 34
    RULE_primarySuffix = 35
    RULE_primary = 36
    RULE_paranthesesless = 37
    RULE_primaryParanthelessSuffix = 38
    RULE_importStmt = 39
    RULE_fromStmt = 40
    RULE_blockExpr = 41
    RULE_forExpr = 42
    RULE_anyExpr = 43
    RULE_anyStmt = 44
    RULE_anyStmtOrFuncCall = 45
    RULE_condExprElif = 46
    RULE_condExprElse = 47
    RULE_condExprBody = 48
    RULE_condExpr = 49
    RULE_caseExpr = 50
    RULE_ofBranchExpr = 51
    RULE_ofBranchesExpr = 52
    RULE_whenExpr = 53
    RULE_ifExpr = 54
    RULE_exprList = 55
    RULE_caseStmt = 56
    RULE_ofBranchesStmt = 57
    RULE_ofBranchStmt = 58
    RULE_whileStmt = 59
    RULE_whenStmt = 60
    RULE_idList = 61
    RULE_forStmt = 62
    RULE_ifStmt = 63
    RULE_condStmtElif = 64
    RULE_condStmtElse = 65
    RULE_condStmtBody = 66
    RULE_condStmt = 67
    RULE_blockStmt = 68
    RULE_discardStmt = 69
    RULE_returnStmt = 70
    RULE_breakStmt = 71
    RULE_continueStmt = 72
    RULE_expr = 73
    RULE_pragma = 74
    RULE_procRoutineHeader = 75
    RULE_procRoutineVariableType = 76
    RULE_procRoutineType = 77
    RULE_procRoutineBody = 78
    RULE_procRoutineTail = 79
    RULE_procRoutineBodyList = 80
    RULE_procRoutine = 81
    RULE_templateRoutineHeader = 82
    RULE_templateRoutineBodyList = 83
    RULE_templateRoutineBody = 84
    RULE_templateRoutineTail = 85
    RULE_templateRoutine = 86
    RULE_macroRoutineHeader = 87
    RULE_macroRoutineType = 88
    RULE_macroRoutineBody = 89
    RULE_macroRoutineBodyList = 90
    RULE_macroRoutineTail = 91
    RULE_macroRoutine = 92
    RULE_typeSectionBodyExpr = 93
    RULE_typeSectionBodyHeader = 94
    RULE_typeSectionBody = 95
    RULE_typeSectionBodyList = 96
    RULE_typeSection = 97
    RULE_variableSection = 98
    RULE_constantSection = 99
    RULE_letSection = 100
    RULE_constant = 101
    RULE_variable = 102
    RULE_simple_complexStmt = 103
    RULE_simpleStmt = 104
    RULE_complexStmt = 105
    RULE_colonBody = 106
    RULE_exprStmt = 107
    RULE_stmt = 108
    RULE_module = 109
    RULE_start = 110

    ruleNames =  [ "ind", "ded", "typeKeyw", "op0", "op1", "op2", "op3", 
                   "op4", "op5", "op6", "op7", "op8", "op9", "op10", "operator", 
                   "prefixOperator", "literal", "generalizedLit", "simpleExpr", 
                   "assignExpr", "orExpr", "andExpr", "cmpExpr", "sliceExpr", 
                   "ampExpr", "plusExpr", "mulExpr", "dollarExpr", "symbol", 
                   "symbolBody", "exprColonEqExpr", "arrayConstr", "tupleConstr", 
                   "exprColonEqExprExtended", "identOrLiteral", "primarySuffix", 
                   "primary", "paranthesesless", "primaryParanthelessSuffix", 
                   "importStmt", "fromStmt", "blockExpr", "forExpr", "anyExpr", 
                   "anyStmt", "anyStmtOrFuncCall", "condExprElif", "condExprElse", 
                   "condExprBody", "condExpr", "caseExpr", "ofBranchExpr", 
                   "ofBranchesExpr", "whenExpr", "ifExpr", "exprList", "caseStmt", 
                   "ofBranchesStmt", "ofBranchStmt", "whileStmt", "whenStmt", 
                   "idList", "forStmt", "ifStmt", "condStmtElif", "condStmtElse", 
                   "condStmtBody", "condStmt", "blockStmt", "discardStmt", 
                   "returnStmt", "breakStmt", "continueStmt", "expr", "pragma", 
                   "procRoutineHeader", "procRoutineVariableType", "procRoutineType", 
                   "procRoutineBody", "procRoutineTail", "procRoutineBodyList", 
                   "procRoutine", "templateRoutineHeader", "templateRoutineBodyList", 
                   "templateRoutineBody", "templateRoutineTail", "templateRoutine", 
                   "macroRoutineHeader", "macroRoutineType", "macroRoutineBody", 
                   "macroRoutineBodyList", "macroRoutineTail", "macroRoutine", 
                   "typeSectionBodyExpr", "typeSectionBodyHeader", "typeSectionBody", 
                   "typeSectionBodyList", "typeSection", "variableSection", 
                   "constantSection", "letSection", "constant", "variable", 
                   "simple_complexStmt", "simpleStmt", "complexStmt", "colonBody", 
                   "exprStmt", "stmt", "module", "start" ]

    EOF = Token.EOF
    DOCUMENTATION_COMMENT=1
    MULTILINE_COMMENT=2
    COMMENT=3
    UNCONDITIONAL_NEWLINE=4
    WS=5
    COMMA=6
    SEMI_COLON=7
    OPEN_PAREN=8
    CLOSE_PAREN=9
    OPEN_BRACE=10
    CLOSE_BRACE=11
    OPEN_BRACK=12
    CLOSE_BRACK=13
    INTERFACE=14
    ENUM=15
    OBJECT=16
    CONCEPT=17
    TYPE=18
    COLON=19
    DOT=20
    EQUALS=21
    IN=22
    OF=23
    NOT=24
    DOLLAR_SIGN=25
    AT=26
    MINUS_OPERATOR=27
    OP0=28
    OP1=29
    OP2=30
    OP3=31
    OP4=32
    OP5=33
    OP6=34
    OP7=35
    OP8=36
    OP9=37
    OP10=38
    VARIABLE=39
    LET=40
    CONST=41
    BIND=42
    PROC=43
    STATIC=44
    METHOD=45
    FUNC=46
    MIXIN=47
    END=48
    EXCEPT=49
    RETURN=50
    TRY=51
    RAISE=52
    FINALLY=53
    OUT=54
    CASE=55
    IF=56
    ELIF=57
    ELSE=58
    DO=59
    WHILE=60
    ITERATOR=61
    FOR=62
    CONTINUE=63
    BREAK=64
    TEMPLATE=65
    TUPLE=66
    USING=67
    WHEN=68
    YIELD=69
    INCLUDE=70
    IMPORT=71
    FROM=72
    AS=73
    EXPORT=74
    REF=75
    PTR=76
    ADDR=77
    ASM=78
    BLOCK=79
    MACRO=80
    NIL=81
    CAST=82
    CONVERTER=83
    DEFER=84
    DISCARD=85
    DISTINCT=86
    SYM_HEADER=87
    IDENTIFIER=88
    INT_LIT=89
    INT8_LIT=90
    INT16_LIT=91
    INT32_LIT=92
    INT64_LIT=93
    UINT_LIT=94
    UINT8_LIT=95
    UINT16_LIT=96
    UINT32_LIT=97
    UINT64_LIT=98
    EXP=99
    FLOAT_LIT=100
    FLOAT32_LIT=101
    FLOAT64_LIT=102
    CHAR_LIT=103
    STR_LIT=104
    TRIPLESTR_LIT=105
    RSTR_LIT=106
    GENERALIZED_STR_LIT=107
    GENERALIZED_TRIPLESTR_LIT=108
    DEDENT=109
    EXIT=110
    USELESS_LINE=111
    USELSSS_INDENTS=112
    INDENT=113
    INDENTS_PASS=114
    ERROR_INDENT=115

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class IndContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INDENT(self):
            return self.getToken(nim_Parser.INDENT, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_ind

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInd" ):
                listener.enterInd(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInd" ):
                listener.exitInd(self)




    def ind(self):

        localctx = nim_Parser.IndContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_ind)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 222
            self.match(nim_Parser.INDENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DedContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEDENT(self):
            return self.getToken(nim_Parser.DEDENT, 0)

        def EOF(self):
            return self.getToken(nim_Parser.EOF, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_ded

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDed" ):
                listener.enterDed(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDed" ):
                listener.exitDed(self)




    def ded(self):

        localctx = nim_Parser.DedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_ded)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 224
            _la = self._input.LA(1)
            if not(_la==nim_Parser.EOF or _la==nim_Parser.DEDENT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeKeywContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REF(self):
            return self.getToken(nim_Parser.REF, 0)

        def OBJECT(self):
            return self.getToken(nim_Parser.OBJECT, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_typeKeyw

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeKeyw" ):
                listener.enterTypeKeyw(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeKeyw" ):
                listener.exitTypeKeyw(self)




    def typeKeyw(self):

        localctx = nim_Parser.TypeKeywContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_typeKeyw)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 226
            _la = self._input.LA(1)
            if not(_la==nim_Parser.OBJECT or _la==nim_Parser.REF):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Op0Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OP0(self):
            return self.getToken(nim_Parser.OP0, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_op0

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOp0" ):
                listener.enterOp0(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOp0" ):
                listener.exitOp0(self)




    def op0(self):

        localctx = nim_Parser.Op0Context(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_op0)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 228
            self.match(nim_Parser.OP0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Op1Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OP1(self):
            return self.getToken(nim_Parser.OP1, 0)

        def EQUALS(self):
            return self.getToken(nim_Parser.EQUALS, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_op1

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOp1" ):
                listener.enterOp1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOp1" ):
                listener.exitOp1(self)




    def op1(self):

        localctx = nim_Parser.Op1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_op1)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 230
            _la = self._input.LA(1)
            if not(_la==nim_Parser.EQUALS or _la==nim_Parser.OP1):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Op2Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OP2(self):
            return self.getToken(nim_Parser.OP2, 0)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.COLON)
            else:
                return self.getToken(nim_Parser.COLON, i)

        def AT(self):
            return self.getToken(nim_Parser.AT, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_op2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOp2" ):
                listener.enterOp2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOp2" ):
                listener.exitOp2(self)




    def op2(self):

        localctx = nim_Parser.Op2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_op2)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 237
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
            if la_ == 1:
                self.state = 232
                self.match(nim_Parser.OP2)
                pass

            elif la_ == 2:
                self.state = 233
                self.match(nim_Parser.COLON)
                pass

            elif la_ == 3:
                self.state = 234
                self.match(nim_Parser.COLON)
                self.state = 235
                self.match(nim_Parser.COLON)
                pass

            elif la_ == 4:
                self.state = 236
                self.match(nim_Parser.AT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Op3Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OP3(self):
            return self.getToken(nim_Parser.OP3, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_op3

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOp3" ):
                listener.enterOp3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOp3" ):
                listener.exitOp3(self)




    def op3(self):

        localctx = nim_Parser.Op3Context(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_op3)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 239
            self.match(nim_Parser.OP3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Op4Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OP4(self):
            return self.getToken(nim_Parser.OP4, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_op4

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOp4" ):
                listener.enterOp4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOp4" ):
                listener.exitOp4(self)




    def op4(self):

        localctx = nim_Parser.Op4Context(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_op4)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 241
            self.match(nim_Parser.OP4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Op5Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OP5(self):
            return self.getToken(nim_Parser.OP5, 0)

        def IN(self):
            return self.getToken(nim_Parser.IN, 0)

        def OF(self):
            return self.getToken(nim_Parser.OF, 0)

        def NOT(self):
            return self.getToken(nim_Parser.NOT, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_op5

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOp5" ):
                listener.enterOp5(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOp5" ):
                listener.exitOp5(self)




    def op5(self):

        localctx = nim_Parser.Op5Context(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_op5)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 243
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nim_Parser.IN) | (1 << nim_Parser.OF) | (1 << nim_Parser.NOT) | (1 << nim_Parser.OP5))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Op6Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OP6(self):
            return self.getToken(nim_Parser.OP6, 0)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.DOT)
            else:
                return self.getToken(nim_Parser.DOT, i)

        def getRuleIndex(self):
            return nim_Parser.RULE_op6

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOp6" ):
                listener.enterOp6(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOp6" ):
                listener.exitOp6(self)




    def op6(self):

        localctx = nim_Parser.Op6Context(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_op6)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 249
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
            if la_ == 1:
                self.state = 245
                self.match(nim_Parser.OP6)
                pass

            elif la_ == 2:
                self.state = 246
                self.match(nim_Parser.DOT)
                pass

            elif la_ == 3:
                self.state = 247
                self.match(nim_Parser.DOT)
                self.state = 248
                self.match(nim_Parser.DOT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Op7Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OP7(self):
            return self.getToken(nim_Parser.OP7, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_op7

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOp7" ):
                listener.enterOp7(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOp7" ):
                listener.exitOp7(self)




    def op7(self):

        localctx = nim_Parser.Op7Context(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_op7)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 251
            self.match(nim_Parser.OP7)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Op8Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OP8(self):
            return self.getToken(nim_Parser.OP8, 0)

        def MINUS_OPERATOR(self):
            return self.getToken(nim_Parser.MINUS_OPERATOR, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_op8

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOp8" ):
                listener.enterOp8(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOp8" ):
                listener.exitOp8(self)




    def op8(self):

        localctx = nim_Parser.Op8Context(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_op8)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 253
            _la = self._input.LA(1)
            if not(_la==nim_Parser.MINUS_OPERATOR or _la==nim_Parser.OP8):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Op9Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OP9(self):
            return self.getToken(nim_Parser.OP9, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_op9

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOp9" ):
                listener.enterOp9(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOp9" ):
                listener.exitOp9(self)




    def op9(self):

        localctx = nim_Parser.Op9Context(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_op9)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 255
            self.match(nim_Parser.OP9)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Op10Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OP10(self):
            return self.getToken(nim_Parser.OP10, 0)

        def DOLLAR_SIGN(self):
            return self.getToken(nim_Parser.DOLLAR_SIGN, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_op10

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOp10" ):
                listener.enterOp10(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOp10" ):
                listener.exitOp10(self)




    def op10(self):

        localctx = nim_Parser.Op10Context(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_op10)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 257
            _la = self._input.LA(1)
            if not(_la==nim_Parser.DOLLAR_SIGN or _la==nim_Parser.OP10):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def op0(self):
            return self.getTypedRuleContext(nim_Parser.Op0Context,0)


        def op1(self):
            return self.getTypedRuleContext(nim_Parser.Op1Context,0)


        def op2(self):
            return self.getTypedRuleContext(nim_Parser.Op2Context,0)


        def op3(self):
            return self.getTypedRuleContext(nim_Parser.Op3Context,0)


        def op4(self):
            return self.getTypedRuleContext(nim_Parser.Op4Context,0)


        def op5(self):
            return self.getTypedRuleContext(nim_Parser.Op5Context,0)


        def op6(self):
            return self.getTypedRuleContext(nim_Parser.Op6Context,0)


        def op7(self):
            return self.getTypedRuleContext(nim_Parser.Op7Context,0)


        def op8(self):
            return self.getTypedRuleContext(nim_Parser.Op8Context,0)


        def op9(self):
            return self.getTypedRuleContext(nim_Parser.Op9Context,0)


        def op10(self):
            return self.getTypedRuleContext(nim_Parser.Op10Context,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperator" ):
                listener.enterOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperator" ):
                listener.exitOperator(self)




    def operator(self):

        localctx = nim_Parser.OperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_operator)
        try:
            self.state = 270
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [nim_Parser.OP0]:
                self.enterOuterAlt(localctx, 1)
                self.state = 259
                self.op0()
                pass
            elif token in [nim_Parser.EQUALS, nim_Parser.OP1]:
                self.enterOuterAlt(localctx, 2)
                self.state = 260
                self.op1()
                pass
            elif token in [nim_Parser.COLON, nim_Parser.AT, nim_Parser.OP2]:
                self.enterOuterAlt(localctx, 3)
                self.state = 261
                self.op2()
                pass
            elif token in [nim_Parser.OP3]:
                self.enterOuterAlt(localctx, 4)
                self.state = 262
                self.op3()
                pass
            elif token in [nim_Parser.OP4]:
                self.enterOuterAlt(localctx, 5)
                self.state = 263
                self.op4()
                pass
            elif token in [nim_Parser.IN, nim_Parser.OF, nim_Parser.NOT, nim_Parser.OP5]:
                self.enterOuterAlt(localctx, 6)
                self.state = 264
                self.op5()
                pass
            elif token in [nim_Parser.DOT, nim_Parser.OP6]:
                self.enterOuterAlt(localctx, 7)
                self.state = 265
                self.op6()
                pass
            elif token in [nim_Parser.OP7]:
                self.enterOuterAlt(localctx, 8)
                self.state = 266
                self.op7()
                pass
            elif token in [nim_Parser.MINUS_OPERATOR, nim_Parser.OP8]:
                self.enterOuterAlt(localctx, 9)
                self.state = 267
                self.op8()
                pass
            elif token in [nim_Parser.OP9]:
                self.enterOuterAlt(localctx, 10)
                self.state = 268
                self.op9()
                pass
            elif token in [nim_Parser.DOLLAR_SIGN, nim_Parser.OP10]:
                self.enterOuterAlt(localctx, 11)
                self.state = 269
                self.op10()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrefixOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def operator(self):
            return self.getTypedRuleContext(nim_Parser.OperatorContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_prefixOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrefixOperator" ):
                listener.enterPrefixOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrefixOperator" ):
                listener.exitPrefixOperator(self)




    def prefixOperator(self):

        localctx = nim_Parser.PrefixOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_prefixOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 272
            self.operator()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT_LIT(self):
            return self.getToken(nim_Parser.INT_LIT, 0)

        def INT8_LIT(self):
            return self.getToken(nim_Parser.INT8_LIT, 0)

        def INT16_LIT(self):
            return self.getToken(nim_Parser.INT16_LIT, 0)

        def INT32_LIT(self):
            return self.getToken(nim_Parser.INT32_LIT, 0)

        def INT64_LIT(self):
            return self.getToken(nim_Parser.INT64_LIT, 0)

        def UINT_LIT(self):
            return self.getToken(nim_Parser.UINT_LIT, 0)

        def UINT8_LIT(self):
            return self.getToken(nim_Parser.UINT8_LIT, 0)

        def UINT16_LIT(self):
            return self.getToken(nim_Parser.UINT16_LIT, 0)

        def UINT32_LIT(self):
            return self.getToken(nim_Parser.UINT32_LIT, 0)

        def UINT64_LIT(self):
            return self.getToken(nim_Parser.UINT64_LIT, 0)

        def FLOAT_LIT(self):
            return self.getToken(nim_Parser.FLOAT_LIT, 0)

        def FLOAT32_LIT(self):
            return self.getToken(nim_Parser.FLOAT32_LIT, 0)

        def FLOAT64_LIT(self):
            return self.getToken(nim_Parser.FLOAT64_LIT, 0)

        def STR_LIT(self):
            return self.getToken(nim_Parser.STR_LIT, 0)

        def RSTR_LIT(self):
            return self.getToken(nim_Parser.RSTR_LIT, 0)

        def TRIPLESTR_LIT(self):
            return self.getToken(nim_Parser.TRIPLESTR_LIT, 0)

        def CHAR_LIT(self):
            return self.getToken(nim_Parser.CHAR_LIT, 0)

        def NIL(self):
            return self.getToken(nim_Parser.NIL, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral" ):
                listener.enterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral" ):
                listener.exitLiteral(self)




    def literal(self):

        localctx = nim_Parser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 274
            _la = self._input.LA(1)
            if not(((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & ((1 << (nim_Parser.NIL - 81)) | (1 << (nim_Parser.INT_LIT - 81)) | (1 << (nim_Parser.INT8_LIT - 81)) | (1 << (nim_Parser.INT16_LIT - 81)) | (1 << (nim_Parser.INT32_LIT - 81)) | (1 << (nim_Parser.INT64_LIT - 81)) | (1 << (nim_Parser.UINT_LIT - 81)) | (1 << (nim_Parser.UINT8_LIT - 81)) | (1 << (nim_Parser.UINT16_LIT - 81)) | (1 << (nim_Parser.UINT32_LIT - 81)) | (1 << (nim_Parser.UINT64_LIT - 81)) | (1 << (nim_Parser.FLOAT_LIT - 81)) | (1 << (nim_Parser.FLOAT32_LIT - 81)) | (1 << (nim_Parser.FLOAT64_LIT - 81)) | (1 << (nim_Parser.CHAR_LIT - 81)) | (1 << (nim_Parser.STR_LIT - 81)) | (1 << (nim_Parser.TRIPLESTR_LIT - 81)) | (1 << (nim_Parser.RSTR_LIT - 81)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GeneralizedLitContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GENERALIZED_STR_LIT(self):
            return self.getToken(nim_Parser.GENERALIZED_STR_LIT, 0)

        def GENERALIZED_TRIPLESTR_LIT(self):
            return self.getToken(nim_Parser.GENERALIZED_TRIPLESTR_LIT, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_generalizedLit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneralizedLit" ):
                listener.enterGeneralizedLit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneralizedLit" ):
                listener.exitGeneralizedLit(self)




    def generalizedLit(self):

        localctx = nim_Parser.GeneralizedLitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_generalizedLit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 276
            _la = self._input.LA(1)
            if not(_la==nim_Parser.GENERALIZED_STR_LIT or _la==nim_Parser.GENERALIZED_TRIPLESTR_LIT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.AssignExprContext)
            else:
                return self.getTypedRuleContext(nim_Parser.AssignExprContext,i)


        def op1(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.Op1Context)
            else:
                return self.getTypedRuleContext(nim_Parser.Op1Context,i)


        def getRuleIndex(self):
            return nim_Parser.RULE_simpleExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleExpr" ):
                listener.enterSimpleExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleExpr" ):
                listener.exitSimpleExpr(self)




    def simpleExpr(self):

        localctx = nim_Parser.SimpleExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_simpleExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 278
            self.assignExpr()
            self.state = 284
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,3,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 279
                    self.op1()
                    self.state = 280
                    self.assignExpr() 
                self.state = 286
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,3,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def orExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.OrExprContext)
            else:
                return self.getTypedRuleContext(nim_Parser.OrExprContext,i)


        def op2(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.Op2Context)
            else:
                return self.getTypedRuleContext(nim_Parser.Op2Context,i)


        def getRuleIndex(self):
            return nim_Parser.RULE_assignExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignExpr" ):
                listener.enterAssignExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignExpr" ):
                listener.exitAssignExpr(self)




    def assignExpr(self):

        localctx = nim_Parser.AssignExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_assignExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 287
            self.orExpr()
            self.state = 293
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,4,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 288
                    self.op2()
                    self.state = 289
                    self.orExpr() 
                self.state = 295
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,4,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def andExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.AndExprContext)
            else:
                return self.getTypedRuleContext(nim_Parser.AndExprContext,i)


        def op3(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.Op3Context)
            else:
                return self.getTypedRuleContext(nim_Parser.Op3Context,i)


        def getRuleIndex(self):
            return nim_Parser.RULE_orExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrExpr" ):
                listener.enterOrExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrExpr" ):
                listener.exitOrExpr(self)




    def orExpr(self):

        localctx = nim_Parser.OrExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_orExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 296
            self.andExpr()
            self.state = 302
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,5,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 297
                    self.op3()
                    self.state = 298
                    self.andExpr() 
                self.state = 304
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,5,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AndExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def cmpExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.CmpExprContext)
            else:
                return self.getTypedRuleContext(nim_Parser.CmpExprContext,i)


        def op4(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.Op4Context)
            else:
                return self.getTypedRuleContext(nim_Parser.Op4Context,i)


        def getRuleIndex(self):
            return nim_Parser.RULE_andExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAndExpr" ):
                listener.enterAndExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAndExpr" ):
                listener.exitAndExpr(self)




    def andExpr(self):

        localctx = nim_Parser.AndExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_andExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 305
            self.cmpExpr()
            self.state = 311
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,6,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 306
                    self.op4()
                    self.state = 307
                    self.cmpExpr() 
                self.state = 313
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,6,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CmpExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sliceExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.SliceExprContext)
            else:
                return self.getTypedRuleContext(nim_Parser.SliceExprContext,i)


        def op5(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.Op5Context)
            else:
                return self.getTypedRuleContext(nim_Parser.Op5Context,i)


        def getRuleIndex(self):
            return nim_Parser.RULE_cmpExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCmpExpr" ):
                listener.enterCmpExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCmpExpr" ):
                listener.exitCmpExpr(self)




    def cmpExpr(self):

        localctx = nim_Parser.CmpExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_cmpExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 314
            self.sliceExpr()
            self.state = 320
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,7,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 315
                    self.op5()
                    self.state = 316
                    self.sliceExpr() 
                self.state = 322
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,7,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SliceExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ampExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.AmpExprContext)
            else:
                return self.getTypedRuleContext(nim_Parser.AmpExprContext,i)


        def op6(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.Op6Context)
            else:
                return self.getTypedRuleContext(nim_Parser.Op6Context,i)


        def getRuleIndex(self):
            return nim_Parser.RULE_sliceExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSliceExpr" ):
                listener.enterSliceExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSliceExpr" ):
                listener.exitSliceExpr(self)




    def sliceExpr(self):

        localctx = nim_Parser.SliceExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_sliceExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 323
            self.ampExpr()
            self.state = 329
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,8,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 324
                    self.op6()
                    self.state = 325
                    self.ampExpr() 
                self.state = 331
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,8,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AmpExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def plusExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.PlusExprContext)
            else:
                return self.getTypedRuleContext(nim_Parser.PlusExprContext,i)


        def op7(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.Op7Context)
            else:
                return self.getTypedRuleContext(nim_Parser.Op7Context,i)


        def getRuleIndex(self):
            return nim_Parser.RULE_ampExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAmpExpr" ):
                listener.enterAmpExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAmpExpr" ):
                listener.exitAmpExpr(self)




    def ampExpr(self):

        localctx = nim_Parser.AmpExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_ampExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 332
            self.plusExpr()
            self.state = 338
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,9,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 333
                    self.op7()
                    self.state = 334
                    self.plusExpr() 
                self.state = 340
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,9,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PlusExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mulExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.MulExprContext)
            else:
                return self.getTypedRuleContext(nim_Parser.MulExprContext,i)


        def op8(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.Op8Context)
            else:
                return self.getTypedRuleContext(nim_Parser.Op8Context,i)


        def getRuleIndex(self):
            return nim_Parser.RULE_plusExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlusExpr" ):
                listener.enterPlusExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlusExpr" ):
                listener.exitPlusExpr(self)




    def plusExpr(self):

        localctx = nim_Parser.PlusExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_plusExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 341
            self.mulExpr()
            self.state = 347
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,10,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 342
                    self.op8()
                    self.state = 343
                    self.mulExpr() 
                self.state = 349
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,10,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MulExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dollarExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.DollarExprContext)
            else:
                return self.getTypedRuleContext(nim_Parser.DollarExprContext,i)


        def op9(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.Op9Context)
            else:
                return self.getTypedRuleContext(nim_Parser.Op9Context,i)


        def getRuleIndex(self):
            return nim_Parser.RULE_mulExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMulExpr" ):
                listener.enterMulExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMulExpr" ):
                listener.exitMulExpr(self)




    def mulExpr(self):

        localctx = nim_Parser.MulExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_mulExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 350
            self.dollarExpr()
            self.state = 356
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,11,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 351
                    self.op9()
                    self.state = 352
                    self.dollarExpr() 
                self.state = 358
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,11,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DollarExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primary(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.PrimaryContext)
            else:
                return self.getTypedRuleContext(nim_Parser.PrimaryContext,i)


        def op10(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.Op10Context)
            else:
                return self.getTypedRuleContext(nim_Parser.Op10Context,i)


        def getRuleIndex(self):
            return nim_Parser.RULE_dollarExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDollarExpr" ):
                listener.enterDollarExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDollarExpr" ):
                listener.exitDollarExpr(self)




    def dollarExpr(self):

        localctx = nim_Parser.DollarExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_dollarExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 359
            self.primary()
            self.state = 365
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,12,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 360
                    self.op10()
                    self.state = 361
                    self.primary() 
                self.state = 367
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,12,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SymbolContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbolBody(self):
            return self.getTypedRuleContext(nim_Parser.SymbolBodyContext,0)


        def SYM_HEADER(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.SYM_HEADER)
            else:
                return self.getToken(nim_Parser.SYM_HEADER, i)

        def operator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.OperatorContext)
            else:
                return self.getTypedRuleContext(nim_Parser.OperatorContext,i)


        def getRuleIndex(self):
            return nim_Parser.RULE_symbol

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSymbol" ):
                listener.enterSymbol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSymbol" ):
                listener.exitSymbol(self)




    def symbol(self):

        localctx = nim_Parser.SymbolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_symbol)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 380
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [nim_Parser.OPEN_PAREN, nim_Parser.CLOSE_PAREN, nim_Parser.OPEN_BRACK, nim_Parser.CLOSE_BRACK, nim_Parser.NIL, nim_Parser.IDENTIFIER, nim_Parser.INT_LIT, nim_Parser.INT8_LIT, nim_Parser.INT16_LIT, nim_Parser.INT32_LIT, nim_Parser.INT64_LIT, nim_Parser.UINT_LIT, nim_Parser.UINT8_LIT, nim_Parser.UINT16_LIT, nim_Parser.UINT32_LIT, nim_Parser.UINT64_LIT, nim_Parser.FLOAT_LIT, nim_Parser.FLOAT32_LIT, nim_Parser.FLOAT64_LIT, nim_Parser.CHAR_LIT, nim_Parser.STR_LIT, nim_Parser.TRIPLESTR_LIT, nim_Parser.RSTR_LIT]:
                self.state = 368
                self.symbolBody()
                pass
            elif token in [nim_Parser.SYM_HEADER]:
                self.state = 369
                self.match(nim_Parser.SYM_HEADER)
                self.state = 376
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [nim_Parser.OPEN_PAREN, nim_Parser.CLOSE_PAREN, nim_Parser.OPEN_BRACK, nim_Parser.CLOSE_BRACK, nim_Parser.NIL, nim_Parser.IDENTIFIER, nim_Parser.INT_LIT, nim_Parser.INT8_LIT, nim_Parser.INT16_LIT, nim_Parser.INT32_LIT, nim_Parser.INT64_LIT, nim_Parser.UINT_LIT, nim_Parser.UINT8_LIT, nim_Parser.UINT16_LIT, nim_Parser.UINT32_LIT, nim_Parser.UINT64_LIT, nim_Parser.FLOAT_LIT, nim_Parser.FLOAT32_LIT, nim_Parser.FLOAT64_LIT, nim_Parser.CHAR_LIT, nim_Parser.STR_LIT, nim_Parser.TRIPLESTR_LIT, nim_Parser.RSTR_LIT]:
                    self.state = 370
                    self.symbolBody()
                    pass
                elif token in [nim_Parser.COLON, nim_Parser.DOT, nim_Parser.EQUALS, nim_Parser.IN, nim_Parser.OF, nim_Parser.NOT, nim_Parser.DOLLAR_SIGN, nim_Parser.AT, nim_Parser.MINUS_OPERATOR, nim_Parser.OP0, nim_Parser.OP1, nim_Parser.OP2, nim_Parser.OP3, nim_Parser.OP4, nim_Parser.OP5, nim_Parser.OP6, nim_Parser.OP7, nim_Parser.OP8, nim_Parser.OP9, nim_Parser.OP10]:
                    self.state = 372 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 371
                        self.operator()
                        self.state = 374 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nim_Parser.COLON) | (1 << nim_Parser.DOT) | (1 << nim_Parser.EQUALS) | (1 << nim_Parser.IN) | (1 << nim_Parser.OF) | (1 << nim_Parser.NOT) | (1 << nim_Parser.DOLLAR_SIGN) | (1 << nim_Parser.AT) | (1 << nim_Parser.MINUS_OPERATOR) | (1 << nim_Parser.OP0) | (1 << nim_Parser.OP1) | (1 << nim_Parser.OP2) | (1 << nim_Parser.OP3) | (1 << nim_Parser.OP4) | (1 << nim_Parser.OP5) | (1 << nim_Parser.OP6) | (1 << nim_Parser.OP7) | (1 << nim_Parser.OP8) | (1 << nim_Parser.OP9) | (1 << nim_Parser.OP10))) != 0)):
                            break

                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 378
                self.match(nim_Parser.SYM_HEADER)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SymbolBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(nim_Parser.IDENTIFIER, 0)

        def literal(self):
            return self.getTypedRuleContext(nim_Parser.LiteralContext,0)


        def OPEN_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.OPEN_PAREN)
            else:
                return self.getToken(nim_Parser.OPEN_PAREN, i)

        def CLOSE_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.CLOSE_PAREN)
            else:
                return self.getToken(nim_Parser.CLOSE_PAREN, i)

        def OPEN_BRACK(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.OPEN_BRACK)
            else:
                return self.getToken(nim_Parser.OPEN_BRACK, i)

        def CLOSE_BRACK(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.CLOSE_BRACK)
            else:
                return self.getToken(nim_Parser.CLOSE_BRACK, i)

        def getRuleIndex(self):
            return nim_Parser.RULE_symbolBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSymbolBody" ):
                listener.enterSymbolBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSymbolBody" ):
                listener.exitSymbolBody(self)




    def symbolBody(self):

        localctx = nim_Parser.SymbolBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_symbolBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 389
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [nim_Parser.IDENTIFIER]:
                self.state = 382
                self.match(nim_Parser.IDENTIFIER)
                pass
            elif token in [nim_Parser.NIL, nim_Parser.INT_LIT, nim_Parser.INT8_LIT, nim_Parser.INT16_LIT, nim_Parser.INT32_LIT, nim_Parser.INT64_LIT, nim_Parser.UINT_LIT, nim_Parser.UINT8_LIT, nim_Parser.UINT16_LIT, nim_Parser.UINT32_LIT, nim_Parser.UINT64_LIT, nim_Parser.FLOAT_LIT, nim_Parser.FLOAT32_LIT, nim_Parser.FLOAT64_LIT, nim_Parser.CHAR_LIT, nim_Parser.STR_LIT, nim_Parser.TRIPLESTR_LIT, nim_Parser.RSTR_LIT]:
                self.state = 383
                self.literal()
                pass
            elif token in [nim_Parser.OPEN_PAREN, nim_Parser.CLOSE_PAREN, nim_Parser.OPEN_BRACK, nim_Parser.CLOSE_BRACK]:
                self.state = 385 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 384
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nim_Parser.OPEN_PAREN) | (1 << nim_Parser.CLOSE_PAREN) | (1 << nim_Parser.OPEN_BRACK) | (1 << nim_Parser.CLOSE_BRACK))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()

                    else:
                        raise NoViableAltException(self)
                    self.state = 387 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,16,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprColonEqExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def anyExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.AnyExprContext)
            else:
                return self.getTypedRuleContext(nim_Parser.AnyExprContext,i)


        def COLON(self):
            return self.getToken(nim_Parser.COLON, 0)

        def EQUALS(self):
            return self.getToken(nim_Parser.EQUALS, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_exprColonEqExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprColonEqExpr" ):
                listener.enterExprColonEqExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprColonEqExpr" ):
                listener.exitExprColonEqExpr(self)




    def exprColonEqExpr(self):

        localctx = nim_Parser.ExprColonEqExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_exprColonEqExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 391
            self.anyExpr()
            self.state = 394
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==nim_Parser.COLON or _la==nim_Parser.EQUALS:
                self.state = 392
                _la = self._input.LA(1)
                if not(_la==nim_Parser.COLON or _la==nim_Parser.EQUALS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 393
                self.anyExpr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayConstrContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACK(self):
            return self.getToken(nim_Parser.OPEN_BRACK, 0)

        def exprColonEqExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.ExprColonEqExprContext)
            else:
                return self.getTypedRuleContext(nim_Parser.ExprColonEqExprContext,i)


        def CLOSE_BRACK(self):
            return self.getToken(nim_Parser.CLOSE_BRACK, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.COMMA)
            else:
                return self.getToken(nim_Parser.COMMA, i)

        def getRuleIndex(self):
            return nim_Parser.RULE_arrayConstr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayConstr" ):
                listener.enterArrayConstr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayConstr" ):
                listener.exitArrayConstr(self)




    def arrayConstr(self):

        localctx = nim_Parser.ArrayConstrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_arrayConstr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 396
            self.match(nim_Parser.OPEN_BRACK)
            self.state = 397
            self.exprColonEqExpr()
            self.state = 402
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==nim_Parser.COMMA:
                self.state = 398
                self.match(nim_Parser.COMMA)
                self.state = 399
                self.exprColonEqExpr()
                self.state = 404
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 405
            self.match(nim_Parser.CLOSE_BRACK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TupleConstrContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(nim_Parser.OPEN_PAREN, 0)

        def exprColonEqExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.ExprColonEqExprContext)
            else:
                return self.getTypedRuleContext(nim_Parser.ExprColonEqExprContext,i)


        def CLOSE_PAREN(self):
            return self.getToken(nim_Parser.CLOSE_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.COMMA)
            else:
                return self.getToken(nim_Parser.COMMA, i)

        def getRuleIndex(self):
            return nim_Parser.RULE_tupleConstr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTupleConstr" ):
                listener.enterTupleConstr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTupleConstr" ):
                listener.exitTupleConstr(self)




    def tupleConstr(self):

        localctx = nim_Parser.TupleConstrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_tupleConstr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 407
            self.match(nim_Parser.OPEN_PAREN)
            self.state = 408
            self.exprColonEqExpr()
            self.state = 413
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==nim_Parser.COMMA:
                self.state = 409
                self.match(nim_Parser.COMMA)
                self.state = 410
                self.exprColonEqExpr()
                self.state = 415
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 416
            self.match(nim_Parser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprColonEqExprExtendedContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def anyExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.AnyExprContext)
            else:
                return self.getTypedRuleContext(nim_Parser.AnyExprContext,i)


        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.IDENTIFIER)
            else:
                return self.getToken(nim_Parser.IDENTIFIER, i)

        def primaryParanthelessSuffix(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.PrimaryParanthelessSuffixContext)
            else:
                return self.getTypedRuleContext(nim_Parser.PrimaryParanthelessSuffixContext,i)


        def COLON(self):
            return self.getToken(nim_Parser.COLON, 0)

        def EQUALS(self):
            return self.getToken(nim_Parser.EQUALS, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_exprColonEqExprExtended

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprColonEqExprExtended" ):
                listener.enterExprColonEqExprExtended(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprColonEqExprExtended" ):
                listener.exitExprColonEqExprExtended(self)




    def exprColonEqExprExtended(self):

        localctx = nim_Parser.ExprColonEqExprExtendedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_exprColonEqExprExtended)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 421
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,21,self._ctx)
            if la_ == 1:
                self.state = 418
                self.anyExpr()
                pass

            elif la_ == 2:
                self.state = 419
                self.match(nim_Parser.IDENTIFIER)
                self.state = 420
                self.primaryParanthelessSuffix()
                pass


            self.state = 429
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==nim_Parser.COLON or _la==nim_Parser.EQUALS:
                self.state = 423
                _la = self._input.LA(1)
                if not(_la==nim_Parser.COLON or _la==nim_Parser.EQUALS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 427
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,22,self._ctx)
                if la_ == 1:
                    self.state = 424
                    self.anyExpr()
                    pass

                elif la_ == 2:
                    self.state = 425
                    self.match(nim_Parser.IDENTIFIER)
                    self.state = 426
                    self.primaryParanthelessSuffix()
                    pass




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentOrLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def generalizedLit(self):
            return self.getTypedRuleContext(nim_Parser.GeneralizedLitContext,0)


        def symbol(self):
            return self.getTypedRuleContext(nim_Parser.SymbolContext,0)


        def arrayConstr(self):
            return self.getTypedRuleContext(nim_Parser.ArrayConstrContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_identOrLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentOrLiteral" ):
                listener.enterIdentOrLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentOrLiteral" ):
                listener.exitIdentOrLiteral(self)




    def identOrLiteral(self):

        localctx = nim_Parser.IdentOrLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_identOrLiteral)
        try:
            self.state = 434
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,24,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 431
                self.generalizedLit()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 432
                self.symbol()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 433
                self.arrayConstr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimarySuffixContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(nim_Parser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(nim_Parser.CLOSE_PAREN, 0)

        def exprColonEqExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.ExprColonEqExprContext)
            else:
                return self.getTypedRuleContext(nim_Parser.ExprColonEqExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.COMMA)
            else:
                return self.getToken(nim_Parser.COMMA, i)

        def exprColonEqExprExtended(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.ExprColonEqExprExtendedContext)
            else:
                return self.getTypedRuleContext(nim_Parser.ExprColonEqExprExtendedContext,i)


        def OPEN_BRACK(self):
            return self.getToken(nim_Parser.OPEN_BRACK, 0)

        def exprList(self):
            return self.getTypedRuleContext(nim_Parser.ExprListContext,0)


        def CLOSE_BRACK(self):
            return self.getToken(nim_Parser.CLOSE_BRACK, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_primarySuffix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimarySuffix" ):
                listener.enterPrimarySuffix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimarySuffix" ):
                listener.exitPrimarySuffix(self)




    def primarySuffix(self):

        localctx = nim_Parser.PrimarySuffixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_primarySuffix)
        self._la = 0 # Token type
        try:
            self.state = 464
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 436
                self.match(nim_Parser.OPEN_PAREN)
                self.state = 437
                self.match(nim_Parser.CLOSE_PAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 438
                self.match(nim_Parser.OPEN_PAREN)
                self.state = 439
                self.exprColonEqExpr()
                self.state = 444
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==nim_Parser.COMMA:
                    self.state = 440
                    self.match(nim_Parser.COMMA)
                    self.state = 441
                    self.exprColonEqExpr()
                    self.state = 446
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 447
                self.match(nim_Parser.CLOSE_PAREN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 449
                self.match(nim_Parser.OPEN_PAREN)
                self.state = 450
                self.exprColonEqExprExtended()
                self.state = 455
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==nim_Parser.COMMA:
                    self.state = 451
                    self.match(nim_Parser.COMMA)
                    self.state = 452
                    self.exprColonEqExprExtended()
                    self.state = 457
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 458
                self.match(nim_Parser.CLOSE_PAREN)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 460
                self.match(nim_Parser.OPEN_BRACK)
                self.state = 461
                self.exprList()
                self.state = 462
                self.match(nim_Parser.CLOSE_BRACK)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeKeyw(self):
            return self.getTypedRuleContext(nim_Parser.TypeKeywContext,0)


        def simpleExpr(self):
            return self.getTypedRuleContext(nim_Parser.SimpleExprContext,0)


        def ind(self):
            return self.getTypedRuleContext(nim_Parser.IndContext,0)


        def expr(self):
            return self.getTypedRuleContext(nim_Parser.ExprContext,0)


        def ded(self):
            return self.getTypedRuleContext(nim_Parser.DedContext,0)


        def DOLLAR_SIGN(self):
            return self.getToken(nim_Parser.DOLLAR_SIGN, 0)

        def AT(self):
            return self.getToken(nim_Parser.AT, 0)

        def MINUS_OPERATOR(self):
            return self.getToken(nim_Parser.MINUS_OPERATOR, 0)

        def identOrLiteral(self):
            return self.getTypedRuleContext(nim_Parser.IdentOrLiteralContext,0)


        def primarySuffix(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.PrimarySuffixContext)
            else:
                return self.getTypedRuleContext(nim_Parser.PrimarySuffixContext,i)


        def getRuleIndex(self):
            return nim_Parser.RULE_primary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimary" ):
                listener.enterPrimary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimary" ):
                listener.exitPrimary(self)




    def primary(self):

        localctx = nim_Parser.PrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_primary)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 491
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [nim_Parser.OBJECT, nim_Parser.REF]:
                self.state = 466
                self.typeKeyw()
                self.state = 472
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [nim_Parser.OPEN_PAREN, nim_Parser.CLOSE_PAREN, nim_Parser.OPEN_BRACK, nim_Parser.CLOSE_BRACK, nim_Parser.OBJECT, nim_Parser.DOLLAR_SIGN, nim_Parser.AT, nim_Parser.MINUS_OPERATOR, nim_Parser.REF, nim_Parser.NIL, nim_Parser.SYM_HEADER, nim_Parser.IDENTIFIER, nim_Parser.INT_LIT, nim_Parser.INT8_LIT, nim_Parser.INT16_LIT, nim_Parser.INT32_LIT, nim_Parser.INT64_LIT, nim_Parser.UINT_LIT, nim_Parser.UINT8_LIT, nim_Parser.UINT16_LIT, nim_Parser.UINT32_LIT, nim_Parser.UINT64_LIT, nim_Parser.FLOAT_LIT, nim_Parser.FLOAT32_LIT, nim_Parser.FLOAT64_LIT, nim_Parser.CHAR_LIT, nim_Parser.STR_LIT, nim_Parser.TRIPLESTR_LIT, nim_Parser.RSTR_LIT, nim_Parser.GENERALIZED_STR_LIT, nim_Parser.GENERALIZED_TRIPLESTR_LIT]:
                    self.state = 467
                    self.simpleExpr()
                    pass
                elif token in [nim_Parser.INDENT]:
                    self.state = 468
                    self.ind()
                    self.state = 469
                    self.expr()
                    self.state = 470
                    self.ded()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [nim_Parser.OPEN_PAREN, nim_Parser.CLOSE_PAREN, nim_Parser.OPEN_BRACK, nim_Parser.CLOSE_BRACK, nim_Parser.DOLLAR_SIGN, nim_Parser.AT, nim_Parser.MINUS_OPERATOR, nim_Parser.NIL, nim_Parser.SYM_HEADER, nim_Parser.IDENTIFIER, nim_Parser.INT_LIT, nim_Parser.INT8_LIT, nim_Parser.INT16_LIT, nim_Parser.INT32_LIT, nim_Parser.INT64_LIT, nim_Parser.UINT_LIT, nim_Parser.UINT8_LIT, nim_Parser.UINT16_LIT, nim_Parser.UINT32_LIT, nim_Parser.UINT64_LIT, nim_Parser.FLOAT_LIT, nim_Parser.FLOAT32_LIT, nim_Parser.FLOAT64_LIT, nim_Parser.CHAR_LIT, nim_Parser.STR_LIT, nim_Parser.TRIPLESTR_LIT, nim_Parser.RSTR_LIT, nim_Parser.GENERALIZED_STR_LIT, nim_Parser.GENERALIZED_TRIPLESTR_LIT]:
                self.state = 475
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nim_Parser.DOLLAR_SIGN) | (1 << nim_Parser.AT) | (1 << nim_Parser.MINUS_OPERATOR))) != 0):
                    self.state = 474
                    _la = self._input.LA(1)
                    if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nim_Parser.DOLLAR_SIGN) | (1 << nim_Parser.AT) | (1 << nim_Parser.MINUS_OPERATOR))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 489
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,32,self._ctx)
                if la_ == 1:
                    self.state = 477
                    self.identOrLiteral()
                    self.state = 481
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,30,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 478
                            self.primarySuffix() 
                        self.state = 483
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,30,self._ctx)

                    pass

                elif la_ == 2:
                    self.state = 485 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 484
                            self.primarySuffix()

                        else:
                            raise NoViableAltException(self)
                        self.state = 487 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,31,self._ctx)

                    pass


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParantheseslessContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal(self):
            return self.getTypedRuleContext(nim_Parser.LiteralContext,0)


        def IDENTIFIER(self):
            return self.getToken(nim_Parser.IDENTIFIER, 0)

        def OPEN_PAREN(self):
            return self.getToken(nim_Parser.OPEN_PAREN, 0)

        def exprColonEqExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.ExprColonEqExprContext)
            else:
                return self.getTypedRuleContext(nim_Parser.ExprColonEqExprContext,i)


        def CLOSE_PAREN(self):
            return self.getToken(nim_Parser.CLOSE_PAREN, 0)

        def identOrLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.IdentOrLiteralContext)
            else:
                return self.getTypedRuleContext(nim_Parser.IdentOrLiteralContext,i)


        def operator(self):
            return self.getTypedRuleContext(nim_Parser.OperatorContext,0)


        def DOLLAR_SIGN(self):
            return self.getToken(nim_Parser.DOLLAR_SIGN, 0)

        def arrayConstr(self):
            return self.getTypedRuleContext(nim_Parser.ArrayConstrContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.COMMA)
            else:
                return self.getToken(nim_Parser.COMMA, i)

        def getRuleIndex(self):
            return nim_Parser.RULE_paranthesesless

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParanthesesless" ):
                listener.enterParanthesesless(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParanthesesless" ):
                listener.exitParanthesesless(self)




    def paranthesesless(self):

        localctx = nim_Parser.ParantheseslessContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_paranthesesless)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 529
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
            if la_ == 1:
                self.state = 493
                self.literal()
                pass

            elif la_ == 2:
                self.state = 495
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nim_Parser.DOLLAR_SIGN:
                    self.state = 494
                    self.match(nim_Parser.DOLLAR_SIGN)


                self.state = 497
                self.match(nim_Parser.IDENTIFIER)
                self.state = 499
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
                if la_ == 1:
                    self.state = 498
                    self.arrayConstr()


                self.state = 512
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,37,self._ctx)
                if la_ == 1:
                    self.state = 501
                    self.match(nim_Parser.OPEN_PAREN)
                    self.state = 502
                    self.exprColonEqExpr()
                    self.state = 507
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==nim_Parser.COMMA:
                        self.state = 503
                        self.match(nim_Parser.COMMA)
                        self.state = 504
                        self.exprColonEqExpr()
                        self.state = 509
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 510
                    self.match(nim_Parser.CLOSE_PAREN)


                pass

            elif la_ == 3:
                self.state = 514
                self.match(nim_Parser.OPEN_PAREN)
                self.state = 515
                self.exprColonEqExpr()
                self.state = 520
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==nim_Parser.COMMA:
                    self.state = 516
                    self.match(nim_Parser.COMMA)
                    self.state = 517
                    self.exprColonEqExpr()
                    self.state = 522
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 523
                self.match(nim_Parser.CLOSE_PAREN)
                pass

            elif la_ == 4:
                self.state = 525
                self.identOrLiteral()
                self.state = 526
                self.operator()
                self.state = 527
                self.identOrLiteral()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryParanthelessSuffixContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def paranthesesless(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.ParantheseslessContext)
            else:
                return self.getTypedRuleContext(nim_Parser.ParantheseslessContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.COMMA)
            else:
                return self.getToken(nim_Parser.COMMA, i)

        def getRuleIndex(self):
            return nim_Parser.RULE_primaryParanthelessSuffix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryParanthelessSuffix" ):
                listener.enterPrimaryParanthelessSuffix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryParanthelessSuffix" ):
                listener.exitPrimaryParanthelessSuffix(self)




    def primaryParanthelessSuffix(self):

        localctx = nim_Parser.PrimaryParanthelessSuffixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_primaryParanthelessSuffix)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 531
            self.paranthesesless()
            self.state = 536
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,40,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 532
                    self.match(nim_Parser.COMMA)
                    self.state = 533
                    self.paranthesesless() 
                self.state = 538
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,40,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPORT(self):
            return self.getToken(nim_Parser.IMPORT, 0)

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.IDENTIFIER)
            else:
                return self.getToken(nim_Parser.IDENTIFIER, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.COMMA)
            else:
                return self.getToken(nim_Parser.COMMA, i)

        def getRuleIndex(self):
            return nim_Parser.RULE_importStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportStmt" ):
                listener.enterImportStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportStmt" ):
                listener.exitImportStmt(self)




    def importStmt(self):

        localctx = nim_Parser.ImportStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_importStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 539
            self.match(nim_Parser.IMPORT)
            self.state = 540
            self.match(nim_Parser.IDENTIFIER)
            self.state = 545
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,41,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 541
                    self.match(nim_Parser.COMMA)
                    self.state = 542
                    self.match(nim_Parser.IDENTIFIER) 
                self.state = 547
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,41,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FromStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(nim_Parser.FROM, 0)

        def IDENTIFIER(self):
            return self.getToken(nim_Parser.IDENTIFIER, 0)

        def importStmt(self):
            return self.getTypedRuleContext(nim_Parser.ImportStmtContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_fromStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFromStmt" ):
                listener.enterFromStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFromStmt" ):
                listener.exitFromStmt(self)




    def fromStmt(self):

        localctx = nim_Parser.FromStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_fromStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 548
            self.match(nim_Parser.FROM)
            self.state = 549
            self.match(nim_Parser.IDENTIFIER)
            self.state = 550
            self.importStmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BLOCK(self):
            return self.getToken(nim_Parser.BLOCK, 0)

        def IDENTIFIER(self):
            return self.getToken(nim_Parser.IDENTIFIER, 0)

        def COLON(self):
            return self.getToken(nim_Parser.COLON, 0)

        def simpleExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.SimpleExprContext)
            else:
                return self.getTypedRuleContext(nim_Parser.SimpleExprContext,i)


        def ind(self):
            return self.getTypedRuleContext(nim_Parser.IndContext,0)


        def ded(self):
            return self.getTypedRuleContext(nim_Parser.DedContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_blockExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockExpr" ):
                listener.enterBlockExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockExpr" ):
                listener.exitBlockExpr(self)




    def blockExpr(self):

        localctx = nim_Parser.BlockExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_blockExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 552
            self.match(nim_Parser.BLOCK)
            self.state = 553
            self.match(nim_Parser.IDENTIFIER)
            self.state = 554
            self.match(nim_Parser.COLON)
            self.state = 564
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [nim_Parser.INDENT]:
                self.state = 555
                self.ind()
                self.state = 557 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 556
                    self.simpleExpr()
                    self.state = 559 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nim_Parser.OPEN_PAREN) | (1 << nim_Parser.CLOSE_PAREN) | (1 << nim_Parser.OPEN_BRACK) | (1 << nim_Parser.CLOSE_BRACK) | (1 << nim_Parser.OBJECT) | (1 << nim_Parser.DOLLAR_SIGN) | (1 << nim_Parser.AT) | (1 << nim_Parser.MINUS_OPERATOR))) != 0) or ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & ((1 << (nim_Parser.REF - 75)) | (1 << (nim_Parser.NIL - 75)) | (1 << (nim_Parser.SYM_HEADER - 75)) | (1 << (nim_Parser.IDENTIFIER - 75)) | (1 << (nim_Parser.INT_LIT - 75)) | (1 << (nim_Parser.INT8_LIT - 75)) | (1 << (nim_Parser.INT16_LIT - 75)) | (1 << (nim_Parser.INT32_LIT - 75)) | (1 << (nim_Parser.INT64_LIT - 75)) | (1 << (nim_Parser.UINT_LIT - 75)) | (1 << (nim_Parser.UINT8_LIT - 75)) | (1 << (nim_Parser.UINT16_LIT - 75)) | (1 << (nim_Parser.UINT32_LIT - 75)) | (1 << (nim_Parser.UINT64_LIT - 75)) | (1 << (nim_Parser.FLOAT_LIT - 75)) | (1 << (nim_Parser.FLOAT32_LIT - 75)) | (1 << (nim_Parser.FLOAT64_LIT - 75)) | (1 << (nim_Parser.CHAR_LIT - 75)) | (1 << (nim_Parser.STR_LIT - 75)) | (1 << (nim_Parser.TRIPLESTR_LIT - 75)) | (1 << (nim_Parser.RSTR_LIT - 75)) | (1 << (nim_Parser.GENERALIZED_STR_LIT - 75)) | (1 << (nim_Parser.GENERALIZED_TRIPLESTR_LIT - 75)))) != 0)):
                        break

                self.state = 561
                self.ded()
                pass
            elif token in [nim_Parser.OPEN_PAREN, nim_Parser.CLOSE_PAREN, nim_Parser.OPEN_BRACK, nim_Parser.CLOSE_BRACK, nim_Parser.OBJECT, nim_Parser.DOLLAR_SIGN, nim_Parser.AT, nim_Parser.MINUS_OPERATOR, nim_Parser.REF, nim_Parser.NIL, nim_Parser.SYM_HEADER, nim_Parser.IDENTIFIER, nim_Parser.INT_LIT, nim_Parser.INT8_LIT, nim_Parser.INT16_LIT, nim_Parser.INT32_LIT, nim_Parser.INT64_LIT, nim_Parser.UINT_LIT, nim_Parser.UINT8_LIT, nim_Parser.UINT16_LIT, nim_Parser.UINT32_LIT, nim_Parser.UINT64_LIT, nim_Parser.FLOAT_LIT, nim_Parser.FLOAT32_LIT, nim_Parser.FLOAT64_LIT, nim_Parser.CHAR_LIT, nim_Parser.STR_LIT, nim_Parser.TRIPLESTR_LIT, nim_Parser.RSTR_LIT, nim_Parser.GENERALIZED_STR_LIT, nim_Parser.GENERALIZED_TRIPLESTR_LIT]:
                self.state = 563
                self.simpleExpr()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def forStmt(self):
            return self.getTypedRuleContext(nim_Parser.ForStmtContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_forExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForExpr" ):
                listener.enterForExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForExpr" ):
                listener.exitForExpr(self)




    def forExpr(self):

        localctx = nim_Parser.ForExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_forExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 566
            self.forStmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnyExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleExpr(self):
            return self.getTypedRuleContext(nim_Parser.SimpleExprContext,0)


        def expr(self):
            return self.getTypedRuleContext(nim_Parser.ExprContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_anyExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnyExpr" ):
                listener.enterAnyExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnyExpr" ):
                listener.exitAnyExpr(self)




    def anyExpr(self):

        localctx = nim_Parser.AnyExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_anyExpr)
        try:
            self.state = 570
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [nim_Parser.OPEN_PAREN, nim_Parser.CLOSE_PAREN, nim_Parser.OPEN_BRACK, nim_Parser.CLOSE_BRACK, nim_Parser.OBJECT, nim_Parser.DOLLAR_SIGN, nim_Parser.AT, nim_Parser.MINUS_OPERATOR, nim_Parser.REF, nim_Parser.NIL, nim_Parser.SYM_HEADER, nim_Parser.IDENTIFIER, nim_Parser.INT_LIT, nim_Parser.INT8_LIT, nim_Parser.INT16_LIT, nim_Parser.INT32_LIT, nim_Parser.INT64_LIT, nim_Parser.UINT_LIT, nim_Parser.UINT8_LIT, nim_Parser.UINT16_LIT, nim_Parser.UINT32_LIT, nim_Parser.UINT64_LIT, nim_Parser.FLOAT_LIT, nim_Parser.FLOAT32_LIT, nim_Parser.FLOAT64_LIT, nim_Parser.CHAR_LIT, nim_Parser.STR_LIT, nim_Parser.TRIPLESTR_LIT, nim_Parser.RSTR_LIT, nim_Parser.GENERALIZED_STR_LIT, nim_Parser.GENERALIZED_TRIPLESTR_LIT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 568
                self.simpleExpr()
                pass
            elif token in [nim_Parser.CASE, nim_Parser.IF, nim_Parser.FOR, nim_Parser.WHEN, nim_Parser.BLOCK]:
                self.enterOuterAlt(localctx, 2)
                self.state = 569
                self.expr()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnyStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stmt(self):
            return self.getTypedRuleContext(nim_Parser.StmtContext,0)


        def exprStmt(self):
            return self.getTypedRuleContext(nim_Parser.ExprStmtContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_anyStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnyStmt" ):
                listener.enterAnyStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnyStmt" ):
                listener.exitAnyStmt(self)




    def anyStmt(self):

        localctx = nim_Parser.AnyStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_anyStmt)
        try:
            self.state = 574
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [nim_Parser.TYPE, nim_Parser.VARIABLE, nim_Parser.LET, nim_Parser.CONST, nim_Parser.PROC, nim_Parser.RETURN, nim_Parser.CASE, nim_Parser.IF, nim_Parser.WHILE, nim_Parser.FOR, nim_Parser.CONTINUE, nim_Parser.BREAK, nim_Parser.TEMPLATE, nim_Parser.WHEN, nim_Parser.IMPORT, nim_Parser.FROM, nim_Parser.BLOCK, nim_Parser.MACRO, nim_Parser.DISCARD]:
                self.enterOuterAlt(localctx, 1)
                self.state = 572
                self.stmt()
                pass
            elif token in [nim_Parser.OPEN_PAREN, nim_Parser.CLOSE_PAREN, nim_Parser.OPEN_BRACK, nim_Parser.CLOSE_BRACK, nim_Parser.OBJECT, nim_Parser.DOLLAR_SIGN, nim_Parser.AT, nim_Parser.MINUS_OPERATOR, nim_Parser.REF, nim_Parser.NIL, nim_Parser.SYM_HEADER, nim_Parser.IDENTIFIER, nim_Parser.INT_LIT, nim_Parser.INT8_LIT, nim_Parser.INT16_LIT, nim_Parser.INT32_LIT, nim_Parser.INT64_LIT, nim_Parser.UINT_LIT, nim_Parser.UINT8_LIT, nim_Parser.UINT16_LIT, nim_Parser.UINT32_LIT, nim_Parser.UINT64_LIT, nim_Parser.FLOAT_LIT, nim_Parser.FLOAT32_LIT, nim_Parser.FLOAT64_LIT, nim_Parser.CHAR_LIT, nim_Parser.STR_LIT, nim_Parser.TRIPLESTR_LIT, nim_Parser.RSTR_LIT, nim_Parser.GENERALIZED_STR_LIT, nim_Parser.GENERALIZED_TRIPLESTR_LIT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 573
                self.exprStmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnyStmtOrFuncCallContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def anyStmt(self):
            return self.getTypedRuleContext(nim_Parser.AnyStmtContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_anyStmtOrFuncCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnyStmtOrFuncCall" ):
                listener.enterAnyStmtOrFuncCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnyStmtOrFuncCall" ):
                listener.exitAnyStmtOrFuncCall(self)




    def anyStmtOrFuncCall(self):

        localctx = nim_Parser.AnyStmtOrFuncCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_anyStmtOrFuncCall)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 576
            self.anyStmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CondExprElifContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELIF(self):
            return self.getToken(nim_Parser.ELIF, 0)

        def simpleExpr(self):
            return self.getTypedRuleContext(nim_Parser.SimpleExprContext,0)


        def COLON(self):
            return self.getToken(nim_Parser.COLON, 0)

        def anyExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.AnyExprContext)
            else:
                return self.getTypedRuleContext(nim_Parser.AnyExprContext,i)


        def ind(self):
            return self.getTypedRuleContext(nim_Parser.IndContext,0)


        def ded(self):
            return self.getTypedRuleContext(nim_Parser.DedContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_condExprElif

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondExprElif" ):
                listener.enterCondExprElif(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondExprElif" ):
                listener.exitCondExprElif(self)




    def condExprElif(self):

        localctx = nim_Parser.CondExprElifContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_condExprElif)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 578
            self.match(nim_Parser.ELIF)
            self.state = 579
            self.simpleExpr()
            self.state = 580
            self.match(nim_Parser.COLON)
            self.state = 590
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [nim_Parser.INDENT]:
                self.state = 581
                self.ind()
                self.state = 583 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 582
                    self.anyExpr()
                    self.state = 585 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nim_Parser.OPEN_PAREN) | (1 << nim_Parser.CLOSE_PAREN) | (1 << nim_Parser.OPEN_BRACK) | (1 << nim_Parser.CLOSE_BRACK) | (1 << nim_Parser.OBJECT) | (1 << nim_Parser.DOLLAR_SIGN) | (1 << nim_Parser.AT) | (1 << nim_Parser.MINUS_OPERATOR) | (1 << nim_Parser.CASE) | (1 << nim_Parser.IF) | (1 << nim_Parser.FOR))) != 0) or ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & ((1 << (nim_Parser.WHEN - 68)) | (1 << (nim_Parser.REF - 68)) | (1 << (nim_Parser.BLOCK - 68)) | (1 << (nim_Parser.NIL - 68)) | (1 << (nim_Parser.SYM_HEADER - 68)) | (1 << (nim_Parser.IDENTIFIER - 68)) | (1 << (nim_Parser.INT_LIT - 68)) | (1 << (nim_Parser.INT8_LIT - 68)) | (1 << (nim_Parser.INT16_LIT - 68)) | (1 << (nim_Parser.INT32_LIT - 68)) | (1 << (nim_Parser.INT64_LIT - 68)) | (1 << (nim_Parser.UINT_LIT - 68)) | (1 << (nim_Parser.UINT8_LIT - 68)) | (1 << (nim_Parser.UINT16_LIT - 68)) | (1 << (nim_Parser.UINT32_LIT - 68)) | (1 << (nim_Parser.UINT64_LIT - 68)) | (1 << (nim_Parser.FLOAT_LIT - 68)) | (1 << (nim_Parser.FLOAT32_LIT - 68)) | (1 << (nim_Parser.FLOAT64_LIT - 68)) | (1 << (nim_Parser.CHAR_LIT - 68)) | (1 << (nim_Parser.STR_LIT - 68)) | (1 << (nim_Parser.TRIPLESTR_LIT - 68)) | (1 << (nim_Parser.RSTR_LIT - 68)) | (1 << (nim_Parser.GENERALIZED_STR_LIT - 68)) | (1 << (nim_Parser.GENERALIZED_TRIPLESTR_LIT - 68)))) != 0)):
                        break

                self.state = 587
                self.ded()
                pass
            elif token in [nim_Parser.OPEN_PAREN, nim_Parser.CLOSE_PAREN, nim_Parser.OPEN_BRACK, nim_Parser.CLOSE_BRACK, nim_Parser.OBJECT, nim_Parser.DOLLAR_SIGN, nim_Parser.AT, nim_Parser.MINUS_OPERATOR, nim_Parser.CASE, nim_Parser.IF, nim_Parser.FOR, nim_Parser.WHEN, nim_Parser.REF, nim_Parser.BLOCK, nim_Parser.NIL, nim_Parser.SYM_HEADER, nim_Parser.IDENTIFIER, nim_Parser.INT_LIT, nim_Parser.INT8_LIT, nim_Parser.INT16_LIT, nim_Parser.INT32_LIT, nim_Parser.INT64_LIT, nim_Parser.UINT_LIT, nim_Parser.UINT8_LIT, nim_Parser.UINT16_LIT, nim_Parser.UINT32_LIT, nim_Parser.UINT64_LIT, nim_Parser.FLOAT_LIT, nim_Parser.FLOAT32_LIT, nim_Parser.FLOAT64_LIT, nim_Parser.CHAR_LIT, nim_Parser.STR_LIT, nim_Parser.TRIPLESTR_LIT, nim_Parser.RSTR_LIT, nim_Parser.GENERALIZED_STR_LIT, nim_Parser.GENERALIZED_TRIPLESTR_LIT]:
                self.state = 589
                self.anyExpr()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CondExprElseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(nim_Parser.ELSE, 0)

        def COLON(self):
            return self.getToken(nim_Parser.COLON, 0)

        def ind(self):
            return self.getTypedRuleContext(nim_Parser.IndContext,0)


        def ded(self):
            return self.getTypedRuleContext(nim_Parser.DedContext,0)


        def anyExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.AnyExprContext)
            else:
                return self.getTypedRuleContext(nim_Parser.AnyExprContext,i)


        def getRuleIndex(self):
            return nim_Parser.RULE_condExprElse

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondExprElse" ):
                listener.enterCondExprElse(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondExprElse" ):
                listener.exitCondExprElse(self)




    def condExprElse(self):

        localctx = nim_Parser.CondExprElseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_condExprElse)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 592
            self.match(nim_Parser.ELSE)
            self.state = 593
            self.match(nim_Parser.COLON)
            self.state = 603
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [nim_Parser.INDENT]:
                self.state = 594
                self.ind()
                self.state = 596 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 595
                    self.anyExpr()
                    self.state = 598 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nim_Parser.OPEN_PAREN) | (1 << nim_Parser.CLOSE_PAREN) | (1 << nim_Parser.OPEN_BRACK) | (1 << nim_Parser.CLOSE_BRACK) | (1 << nim_Parser.OBJECT) | (1 << nim_Parser.DOLLAR_SIGN) | (1 << nim_Parser.AT) | (1 << nim_Parser.MINUS_OPERATOR) | (1 << nim_Parser.CASE) | (1 << nim_Parser.IF) | (1 << nim_Parser.FOR))) != 0) or ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & ((1 << (nim_Parser.WHEN - 68)) | (1 << (nim_Parser.REF - 68)) | (1 << (nim_Parser.BLOCK - 68)) | (1 << (nim_Parser.NIL - 68)) | (1 << (nim_Parser.SYM_HEADER - 68)) | (1 << (nim_Parser.IDENTIFIER - 68)) | (1 << (nim_Parser.INT_LIT - 68)) | (1 << (nim_Parser.INT8_LIT - 68)) | (1 << (nim_Parser.INT16_LIT - 68)) | (1 << (nim_Parser.INT32_LIT - 68)) | (1 << (nim_Parser.INT64_LIT - 68)) | (1 << (nim_Parser.UINT_LIT - 68)) | (1 << (nim_Parser.UINT8_LIT - 68)) | (1 << (nim_Parser.UINT16_LIT - 68)) | (1 << (nim_Parser.UINT32_LIT - 68)) | (1 << (nim_Parser.UINT64_LIT - 68)) | (1 << (nim_Parser.FLOAT_LIT - 68)) | (1 << (nim_Parser.FLOAT32_LIT - 68)) | (1 << (nim_Parser.FLOAT64_LIT - 68)) | (1 << (nim_Parser.CHAR_LIT - 68)) | (1 << (nim_Parser.STR_LIT - 68)) | (1 << (nim_Parser.TRIPLESTR_LIT - 68)) | (1 << (nim_Parser.RSTR_LIT - 68)) | (1 << (nim_Parser.GENERALIZED_STR_LIT - 68)) | (1 << (nim_Parser.GENERALIZED_TRIPLESTR_LIT - 68)))) != 0)):
                        break

                self.state = 600
                self.ded()
                pass
            elif token in [nim_Parser.OPEN_PAREN, nim_Parser.CLOSE_PAREN, nim_Parser.OPEN_BRACK, nim_Parser.CLOSE_BRACK, nim_Parser.OBJECT, nim_Parser.DOLLAR_SIGN, nim_Parser.AT, nim_Parser.MINUS_OPERATOR, nim_Parser.CASE, nim_Parser.IF, nim_Parser.FOR, nim_Parser.WHEN, nim_Parser.REF, nim_Parser.BLOCK, nim_Parser.NIL, nim_Parser.SYM_HEADER, nim_Parser.IDENTIFIER, nim_Parser.INT_LIT, nim_Parser.INT8_LIT, nim_Parser.INT16_LIT, nim_Parser.INT32_LIT, nim_Parser.INT64_LIT, nim_Parser.UINT_LIT, nim_Parser.UINT8_LIT, nim_Parser.UINT16_LIT, nim_Parser.UINT32_LIT, nim_Parser.UINT64_LIT, nim_Parser.FLOAT_LIT, nim_Parser.FLOAT32_LIT, nim_Parser.FLOAT64_LIT, nim_Parser.CHAR_LIT, nim_Parser.STR_LIT, nim_Parser.TRIPLESTR_LIT, nim_Parser.RSTR_LIT, nim_Parser.GENERALIZED_STR_LIT, nim_Parser.GENERALIZED_TRIPLESTR_LIT]:
                self.state = 602
                self.anyExpr()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CondExprBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def anyExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.AnyExprContext)
            else:
                return self.getTypedRuleContext(nim_Parser.AnyExprContext,i)


        def condExprElif(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.CondExprElifContext)
            else:
                return self.getTypedRuleContext(nim_Parser.CondExprElifContext,i)


        def condExprElse(self):
            return self.getTypedRuleContext(nim_Parser.CondExprElseContext,0)


        def ind(self):
            return self.getTypedRuleContext(nim_Parser.IndContext,0)


        def ded(self):
            return self.getTypedRuleContext(nim_Parser.DedContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_condExprBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondExprBody" ):
                listener.enterCondExprBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondExprBody" ):
                listener.exitCondExprBody(self)




    def condExprBody(self):

        localctx = nim_Parser.CondExprBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_condExprBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 614
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [nim_Parser.INDENT]:
                self.state = 605
                self.ind()
                self.state = 607 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 606
                    self.anyExpr()
                    self.state = 609 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nim_Parser.OPEN_PAREN) | (1 << nim_Parser.CLOSE_PAREN) | (1 << nim_Parser.OPEN_BRACK) | (1 << nim_Parser.CLOSE_BRACK) | (1 << nim_Parser.OBJECT) | (1 << nim_Parser.DOLLAR_SIGN) | (1 << nim_Parser.AT) | (1 << nim_Parser.MINUS_OPERATOR) | (1 << nim_Parser.CASE) | (1 << nim_Parser.IF) | (1 << nim_Parser.FOR))) != 0) or ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & ((1 << (nim_Parser.WHEN - 68)) | (1 << (nim_Parser.REF - 68)) | (1 << (nim_Parser.BLOCK - 68)) | (1 << (nim_Parser.NIL - 68)) | (1 << (nim_Parser.SYM_HEADER - 68)) | (1 << (nim_Parser.IDENTIFIER - 68)) | (1 << (nim_Parser.INT_LIT - 68)) | (1 << (nim_Parser.INT8_LIT - 68)) | (1 << (nim_Parser.INT16_LIT - 68)) | (1 << (nim_Parser.INT32_LIT - 68)) | (1 << (nim_Parser.INT64_LIT - 68)) | (1 << (nim_Parser.UINT_LIT - 68)) | (1 << (nim_Parser.UINT8_LIT - 68)) | (1 << (nim_Parser.UINT16_LIT - 68)) | (1 << (nim_Parser.UINT32_LIT - 68)) | (1 << (nim_Parser.UINT64_LIT - 68)) | (1 << (nim_Parser.FLOAT_LIT - 68)) | (1 << (nim_Parser.FLOAT32_LIT - 68)) | (1 << (nim_Parser.FLOAT64_LIT - 68)) | (1 << (nim_Parser.CHAR_LIT - 68)) | (1 << (nim_Parser.STR_LIT - 68)) | (1 << (nim_Parser.TRIPLESTR_LIT - 68)) | (1 << (nim_Parser.RSTR_LIT - 68)) | (1 << (nim_Parser.GENERALIZED_STR_LIT - 68)) | (1 << (nim_Parser.GENERALIZED_TRIPLESTR_LIT - 68)))) != 0)):
                        break

                self.state = 611
                self.ded()
                pass
            elif token in [nim_Parser.OPEN_PAREN, nim_Parser.CLOSE_PAREN, nim_Parser.OPEN_BRACK, nim_Parser.CLOSE_BRACK, nim_Parser.OBJECT, nim_Parser.DOLLAR_SIGN, nim_Parser.AT, nim_Parser.MINUS_OPERATOR, nim_Parser.CASE, nim_Parser.IF, nim_Parser.FOR, nim_Parser.WHEN, nim_Parser.REF, nim_Parser.BLOCK, nim_Parser.NIL, nim_Parser.SYM_HEADER, nim_Parser.IDENTIFIER, nim_Parser.INT_LIT, nim_Parser.INT8_LIT, nim_Parser.INT16_LIT, nim_Parser.INT32_LIT, nim_Parser.INT64_LIT, nim_Parser.UINT_LIT, nim_Parser.UINT8_LIT, nim_Parser.UINT16_LIT, nim_Parser.UINT32_LIT, nim_Parser.UINT64_LIT, nim_Parser.FLOAT_LIT, nim_Parser.FLOAT32_LIT, nim_Parser.FLOAT64_LIT, nim_Parser.CHAR_LIT, nim_Parser.STR_LIT, nim_Parser.TRIPLESTR_LIT, nim_Parser.RSTR_LIT, nim_Parser.GENERALIZED_STR_LIT, nim_Parser.GENERALIZED_TRIPLESTR_LIT]:
                self.state = 613
                self.anyExpr()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 619
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,52,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 616
                    self.condExprElif() 
                self.state = 621
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,52,self._ctx)

            self.state = 623
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,53,self._ctx)
            if la_ == 1:
                self.state = 622
                self.condExprElse()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CondExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleExpr(self):
            return self.getTypedRuleContext(nim_Parser.SimpleExprContext,0)


        def COLON(self):
            return self.getToken(nim_Parser.COLON, 0)

        def condExprBody(self):
            return self.getTypedRuleContext(nim_Parser.CondExprBodyContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_condExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondExpr" ):
                listener.enterCondExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondExpr" ):
                listener.exitCondExpr(self)




    def condExpr(self):

        localctx = nim_Parser.CondExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_condExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 625
            self.simpleExpr()
            self.state = 626
            self.match(nim_Parser.COLON)
            self.state = 627
            self.condExprBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CaseExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(nim_Parser.CASE, 0)

        def simpleExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.SimpleExprContext)
            else:
                return self.getTypedRuleContext(nim_Parser.SimpleExprContext,i)


        def ofBranchesExpr(self):
            return self.getTypedRuleContext(nim_Parser.OfBranchesExprContext,0)


        def COLON(self):
            return self.getToken(nim_Parser.COLON, 0)

        def ind(self):
            return self.getTypedRuleContext(nim_Parser.IndContext,0)


        def ded(self):
            return self.getTypedRuleContext(nim_Parser.DedContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_caseExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseExpr" ):
                listener.enterCaseExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseExpr" ):
                listener.exitCaseExpr(self)




    def caseExpr(self):

        localctx = nim_Parser.CaseExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_caseExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 629
            self.match(nim_Parser.CASE)
            self.state = 630
            self.simpleExpr()
            self.state = 633
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==nim_Parser.COLON:
                self.state = 631
                self.match(nim_Parser.COLON)
                self.state = 632
                self.simpleExpr()


            self.state = 640
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [nim_Parser.INDENT]:
                self.state = 635
                self.ind()
                self.state = 636
                self.ofBranchesExpr()
                self.state = 637
                self.ded()
                pass
            elif token in [nim_Parser.OF]:
                self.state = 639
                self.ofBranchesExpr()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OfBranchExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OF(self):
            return self.getToken(nim_Parser.OF, 0)

        def exprList(self):
            return self.getTypedRuleContext(nim_Parser.ExprListContext,0)


        def COLON(self):
            return self.getToken(nim_Parser.COLON, 0)

        def simpleExpr(self):
            return self.getTypedRuleContext(nim_Parser.SimpleExprContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_ofBranchExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOfBranchExpr" ):
                listener.enterOfBranchExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOfBranchExpr" ):
                listener.exitOfBranchExpr(self)




    def ofBranchExpr(self):

        localctx = nim_Parser.OfBranchExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_ofBranchExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 642
            self.match(nim_Parser.OF)
            self.state = 643
            self.exprList()
            self.state = 644
            self.match(nim_Parser.COLON)
            self.state = 645
            self.simpleExpr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OfBranchesExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ofBranchExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.OfBranchExprContext)
            else:
                return self.getTypedRuleContext(nim_Parser.OfBranchExprContext,i)


        def getRuleIndex(self):
            return nim_Parser.RULE_ofBranchesExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOfBranchesExpr" ):
                listener.enterOfBranchesExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOfBranchesExpr" ):
                listener.exitOfBranchesExpr(self)




    def ofBranchesExpr(self):

        localctx = nim_Parser.OfBranchesExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_ofBranchesExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 648 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 647
                    self.ofBranchExpr()

                else:
                    raise NoViableAltException(self)
                self.state = 650 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,56,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhenExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(nim_Parser.WHEN, 0)

        def condExpr(self):
            return self.getTypedRuleContext(nim_Parser.CondExprContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_whenExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhenExpr" ):
                listener.enterWhenExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhenExpr" ):
                listener.exitWhenExpr(self)




    def whenExpr(self):

        localctx = nim_Parser.WhenExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_whenExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 652
            self.match(nim_Parser.WHEN)
            self.state = 653
            self.condExpr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(nim_Parser.IF, 0)

        def condExpr(self):
            return self.getTypedRuleContext(nim_Parser.CondExprContext,0)


        def NOT(self):
            return self.getToken(nim_Parser.NOT, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_ifExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfExpr" ):
                listener.enterIfExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfExpr" ):
                listener.exitIfExpr(self)




    def ifExpr(self):

        localctx = nim_Parser.IfExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_ifExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 655
            self.match(nim_Parser.IF)
            self.state = 657
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==nim_Parser.NOT:
                self.state = 656
                self.match(nim_Parser.NOT)


            self.state = 659
            self.condExpr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.SimpleExprContext)
            else:
                return self.getTypedRuleContext(nim_Parser.SimpleExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.COMMA)
            else:
                return self.getToken(nim_Parser.COMMA, i)

        def getRuleIndex(self):
            return nim_Parser.RULE_exprList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprList" ):
                listener.enterExprList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprList" ):
                listener.exitExprList(self)




    def exprList(self):

        localctx = nim_Parser.ExprListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_exprList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 661
            self.simpleExpr()
            self.state = 666
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==nim_Parser.COMMA:
                self.state = 662
                self.match(nim_Parser.COMMA)
                self.state = 663
                self.simpleExpr()
                self.state = 668
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CaseStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(nim_Parser.CASE, 0)

        def simpleExpr(self):
            return self.getTypedRuleContext(nim_Parser.SimpleExprContext,0)


        def ofBranchesStmt(self):
            return self.getTypedRuleContext(nim_Parser.OfBranchesStmtContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_caseStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseStmt" ):
                listener.enterCaseStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseStmt" ):
                listener.exitCaseStmt(self)




    def caseStmt(self):

        localctx = nim_Parser.CaseStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_caseStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 669
            self.match(nim_Parser.CASE)
            self.state = 670
            self.simpleExpr()
            self.state = 671
            self.ofBranchesStmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OfBranchesStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ofBranchStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.OfBranchStmtContext)
            else:
                return self.getTypedRuleContext(nim_Parser.OfBranchStmtContext,i)


        def ELSE(self):
            return self.getToken(nim_Parser.ELSE, 0)

        def COLON(self):
            return self.getToken(nim_Parser.COLON, 0)

        def anyStmtOrFuncCall(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.AnyStmtOrFuncCallContext)
            else:
                return self.getTypedRuleContext(nim_Parser.AnyStmtOrFuncCallContext,i)


        def ind(self):
            return self.getTypedRuleContext(nim_Parser.IndContext,0)


        def ded(self):
            return self.getTypedRuleContext(nim_Parser.DedContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_ofBranchesStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOfBranchesStmt" ):
                listener.enterOfBranchesStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOfBranchesStmt" ):
                listener.exitOfBranchesStmt(self)




    def ofBranchesStmt(self):

        localctx = nim_Parser.OfBranchesStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_ofBranchesStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 674 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 673
                    self.ofBranchStmt()

                else:
                    raise NoViableAltException(self)
                self.state = 676 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,59,self._ctx)

            self.state = 691
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
            if la_ == 1:
                self.state = 678
                self.match(nim_Parser.ELSE)
                self.state = 679
                self.match(nim_Parser.COLON)
                self.state = 689
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [nim_Parser.INDENT]:
                    self.state = 680
                    self.ind()
                    self.state = 682 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 681
                        self.anyStmtOrFuncCall()
                        self.state = 684 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nim_Parser.OPEN_PAREN) | (1 << nim_Parser.CLOSE_PAREN) | (1 << nim_Parser.OPEN_BRACK) | (1 << nim_Parser.CLOSE_BRACK) | (1 << nim_Parser.OBJECT) | (1 << nim_Parser.TYPE) | (1 << nim_Parser.DOLLAR_SIGN) | (1 << nim_Parser.AT) | (1 << nim_Parser.MINUS_OPERATOR) | (1 << nim_Parser.VARIABLE) | (1 << nim_Parser.LET) | (1 << nim_Parser.CONST) | (1 << nim_Parser.PROC) | (1 << nim_Parser.RETURN) | (1 << nim_Parser.CASE) | (1 << nim_Parser.IF) | (1 << nim_Parser.WHILE) | (1 << nim_Parser.FOR) | (1 << nim_Parser.CONTINUE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (nim_Parser.BREAK - 64)) | (1 << (nim_Parser.TEMPLATE - 64)) | (1 << (nim_Parser.WHEN - 64)) | (1 << (nim_Parser.IMPORT - 64)) | (1 << (nim_Parser.FROM - 64)) | (1 << (nim_Parser.REF - 64)) | (1 << (nim_Parser.BLOCK - 64)) | (1 << (nim_Parser.MACRO - 64)) | (1 << (nim_Parser.NIL - 64)) | (1 << (nim_Parser.DISCARD - 64)) | (1 << (nim_Parser.SYM_HEADER - 64)) | (1 << (nim_Parser.IDENTIFIER - 64)) | (1 << (nim_Parser.INT_LIT - 64)) | (1 << (nim_Parser.INT8_LIT - 64)) | (1 << (nim_Parser.INT16_LIT - 64)) | (1 << (nim_Parser.INT32_LIT - 64)) | (1 << (nim_Parser.INT64_LIT - 64)) | (1 << (nim_Parser.UINT_LIT - 64)) | (1 << (nim_Parser.UINT8_LIT - 64)) | (1 << (nim_Parser.UINT16_LIT - 64)) | (1 << (nim_Parser.UINT32_LIT - 64)) | (1 << (nim_Parser.UINT64_LIT - 64)) | (1 << (nim_Parser.FLOAT_LIT - 64)) | (1 << (nim_Parser.FLOAT32_LIT - 64)) | (1 << (nim_Parser.FLOAT64_LIT - 64)) | (1 << (nim_Parser.CHAR_LIT - 64)) | (1 << (nim_Parser.STR_LIT - 64)) | (1 << (nim_Parser.TRIPLESTR_LIT - 64)) | (1 << (nim_Parser.RSTR_LIT - 64)) | (1 << (nim_Parser.GENERALIZED_STR_LIT - 64)) | (1 << (nim_Parser.GENERALIZED_TRIPLESTR_LIT - 64)))) != 0)):
                            break

                    self.state = 686
                    self.ded()
                    pass
                elif token in [nim_Parser.OPEN_PAREN, nim_Parser.CLOSE_PAREN, nim_Parser.OPEN_BRACK, nim_Parser.CLOSE_BRACK, nim_Parser.OBJECT, nim_Parser.TYPE, nim_Parser.DOLLAR_SIGN, nim_Parser.AT, nim_Parser.MINUS_OPERATOR, nim_Parser.VARIABLE, nim_Parser.LET, nim_Parser.CONST, nim_Parser.PROC, nim_Parser.RETURN, nim_Parser.CASE, nim_Parser.IF, nim_Parser.WHILE, nim_Parser.FOR, nim_Parser.CONTINUE, nim_Parser.BREAK, nim_Parser.TEMPLATE, nim_Parser.WHEN, nim_Parser.IMPORT, nim_Parser.FROM, nim_Parser.REF, nim_Parser.BLOCK, nim_Parser.MACRO, nim_Parser.NIL, nim_Parser.DISCARD, nim_Parser.SYM_HEADER, nim_Parser.IDENTIFIER, nim_Parser.INT_LIT, nim_Parser.INT8_LIT, nim_Parser.INT16_LIT, nim_Parser.INT32_LIT, nim_Parser.INT64_LIT, nim_Parser.UINT_LIT, nim_Parser.UINT8_LIT, nim_Parser.UINT16_LIT, nim_Parser.UINT32_LIT, nim_Parser.UINT64_LIT, nim_Parser.FLOAT_LIT, nim_Parser.FLOAT32_LIT, nim_Parser.FLOAT64_LIT, nim_Parser.CHAR_LIT, nim_Parser.STR_LIT, nim_Parser.TRIPLESTR_LIT, nim_Parser.RSTR_LIT, nim_Parser.GENERALIZED_STR_LIT, nim_Parser.GENERALIZED_TRIPLESTR_LIT]:
                    self.state = 688
                    self.anyStmtOrFuncCall()
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OfBranchStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OF(self):
            return self.getToken(nim_Parser.OF, 0)

        def exprList(self):
            return self.getTypedRuleContext(nim_Parser.ExprListContext,0)


        def COLON(self):
            return self.getToken(nim_Parser.COLON, 0)

        def anyStmtOrFuncCall(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.AnyStmtOrFuncCallContext)
            else:
                return self.getTypedRuleContext(nim_Parser.AnyStmtOrFuncCallContext,i)


        def ind(self):
            return self.getTypedRuleContext(nim_Parser.IndContext,0)


        def ded(self):
            return self.getTypedRuleContext(nim_Parser.DedContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_ofBranchStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOfBranchStmt" ):
                listener.enterOfBranchStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOfBranchStmt" ):
                listener.exitOfBranchStmt(self)




    def ofBranchStmt(self):

        localctx = nim_Parser.OfBranchStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_ofBranchStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 693
            self.match(nim_Parser.OF)
            self.state = 694
            self.exprList()
            self.state = 695
            self.match(nim_Parser.COLON)
            self.state = 705
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [nim_Parser.INDENT]:
                self.state = 696
                self.ind()
                self.state = 698 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 697
                    self.anyStmtOrFuncCall()
                    self.state = 700 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nim_Parser.OPEN_PAREN) | (1 << nim_Parser.CLOSE_PAREN) | (1 << nim_Parser.OPEN_BRACK) | (1 << nim_Parser.CLOSE_BRACK) | (1 << nim_Parser.OBJECT) | (1 << nim_Parser.TYPE) | (1 << nim_Parser.DOLLAR_SIGN) | (1 << nim_Parser.AT) | (1 << nim_Parser.MINUS_OPERATOR) | (1 << nim_Parser.VARIABLE) | (1 << nim_Parser.LET) | (1 << nim_Parser.CONST) | (1 << nim_Parser.PROC) | (1 << nim_Parser.RETURN) | (1 << nim_Parser.CASE) | (1 << nim_Parser.IF) | (1 << nim_Parser.WHILE) | (1 << nim_Parser.FOR) | (1 << nim_Parser.CONTINUE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (nim_Parser.BREAK - 64)) | (1 << (nim_Parser.TEMPLATE - 64)) | (1 << (nim_Parser.WHEN - 64)) | (1 << (nim_Parser.IMPORT - 64)) | (1 << (nim_Parser.FROM - 64)) | (1 << (nim_Parser.REF - 64)) | (1 << (nim_Parser.BLOCK - 64)) | (1 << (nim_Parser.MACRO - 64)) | (1 << (nim_Parser.NIL - 64)) | (1 << (nim_Parser.DISCARD - 64)) | (1 << (nim_Parser.SYM_HEADER - 64)) | (1 << (nim_Parser.IDENTIFIER - 64)) | (1 << (nim_Parser.INT_LIT - 64)) | (1 << (nim_Parser.INT8_LIT - 64)) | (1 << (nim_Parser.INT16_LIT - 64)) | (1 << (nim_Parser.INT32_LIT - 64)) | (1 << (nim_Parser.INT64_LIT - 64)) | (1 << (nim_Parser.UINT_LIT - 64)) | (1 << (nim_Parser.UINT8_LIT - 64)) | (1 << (nim_Parser.UINT16_LIT - 64)) | (1 << (nim_Parser.UINT32_LIT - 64)) | (1 << (nim_Parser.UINT64_LIT - 64)) | (1 << (nim_Parser.FLOAT_LIT - 64)) | (1 << (nim_Parser.FLOAT32_LIT - 64)) | (1 << (nim_Parser.FLOAT64_LIT - 64)) | (1 << (nim_Parser.CHAR_LIT - 64)) | (1 << (nim_Parser.STR_LIT - 64)) | (1 << (nim_Parser.TRIPLESTR_LIT - 64)) | (1 << (nim_Parser.RSTR_LIT - 64)) | (1 << (nim_Parser.GENERALIZED_STR_LIT - 64)) | (1 << (nim_Parser.GENERALIZED_TRIPLESTR_LIT - 64)))) != 0)):
                        break

                self.state = 702
                self.ded()
                pass
            elif token in [nim_Parser.OPEN_PAREN, nim_Parser.CLOSE_PAREN, nim_Parser.OPEN_BRACK, nim_Parser.CLOSE_BRACK, nim_Parser.OBJECT, nim_Parser.TYPE, nim_Parser.DOLLAR_SIGN, nim_Parser.AT, nim_Parser.MINUS_OPERATOR, nim_Parser.VARIABLE, nim_Parser.LET, nim_Parser.CONST, nim_Parser.PROC, nim_Parser.RETURN, nim_Parser.CASE, nim_Parser.IF, nim_Parser.WHILE, nim_Parser.FOR, nim_Parser.CONTINUE, nim_Parser.BREAK, nim_Parser.TEMPLATE, nim_Parser.WHEN, nim_Parser.IMPORT, nim_Parser.FROM, nim_Parser.REF, nim_Parser.BLOCK, nim_Parser.MACRO, nim_Parser.NIL, nim_Parser.DISCARD, nim_Parser.SYM_HEADER, nim_Parser.IDENTIFIER, nim_Parser.INT_LIT, nim_Parser.INT8_LIT, nim_Parser.INT16_LIT, nim_Parser.INT32_LIT, nim_Parser.INT64_LIT, nim_Parser.UINT_LIT, nim_Parser.UINT8_LIT, nim_Parser.UINT16_LIT, nim_Parser.UINT32_LIT, nim_Parser.UINT64_LIT, nim_Parser.FLOAT_LIT, nim_Parser.FLOAT32_LIT, nim_Parser.FLOAT64_LIT, nim_Parser.CHAR_LIT, nim_Parser.STR_LIT, nim_Parser.TRIPLESTR_LIT, nim_Parser.RSTR_LIT, nim_Parser.GENERALIZED_STR_LIT, nim_Parser.GENERALIZED_TRIPLESTR_LIT]:
                self.state = 704
                self.anyStmtOrFuncCall()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(nim_Parser.WHILE, 0)

        def simpleExpr(self):
            return self.getTypedRuleContext(nim_Parser.SimpleExprContext,0)


        def COLON(self):
            return self.getToken(nim_Parser.COLON, 0)

        def anyStmtOrFuncCall(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.AnyStmtOrFuncCallContext)
            else:
                return self.getTypedRuleContext(nim_Parser.AnyStmtOrFuncCallContext,i)


        def ind(self):
            return self.getTypedRuleContext(nim_Parser.IndContext,0)


        def ded(self):
            return self.getTypedRuleContext(nim_Parser.DedContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_whileStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileStmt" ):
                listener.enterWhileStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileStmt" ):
                listener.exitWhileStmt(self)




    def whileStmt(self):

        localctx = nim_Parser.WhileStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_whileStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 707
            self.match(nim_Parser.WHILE)
            self.state = 708
            self.simpleExpr()
            self.state = 709
            self.match(nim_Parser.COLON)
            self.state = 719
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [nim_Parser.INDENT]:
                self.state = 710
                self.ind()
                self.state = 712 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 711
                    self.anyStmtOrFuncCall()
                    self.state = 714 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nim_Parser.OPEN_PAREN) | (1 << nim_Parser.CLOSE_PAREN) | (1 << nim_Parser.OPEN_BRACK) | (1 << nim_Parser.CLOSE_BRACK) | (1 << nim_Parser.OBJECT) | (1 << nim_Parser.TYPE) | (1 << nim_Parser.DOLLAR_SIGN) | (1 << nim_Parser.AT) | (1 << nim_Parser.MINUS_OPERATOR) | (1 << nim_Parser.VARIABLE) | (1 << nim_Parser.LET) | (1 << nim_Parser.CONST) | (1 << nim_Parser.PROC) | (1 << nim_Parser.RETURN) | (1 << nim_Parser.CASE) | (1 << nim_Parser.IF) | (1 << nim_Parser.WHILE) | (1 << nim_Parser.FOR) | (1 << nim_Parser.CONTINUE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (nim_Parser.BREAK - 64)) | (1 << (nim_Parser.TEMPLATE - 64)) | (1 << (nim_Parser.WHEN - 64)) | (1 << (nim_Parser.IMPORT - 64)) | (1 << (nim_Parser.FROM - 64)) | (1 << (nim_Parser.REF - 64)) | (1 << (nim_Parser.BLOCK - 64)) | (1 << (nim_Parser.MACRO - 64)) | (1 << (nim_Parser.NIL - 64)) | (1 << (nim_Parser.DISCARD - 64)) | (1 << (nim_Parser.SYM_HEADER - 64)) | (1 << (nim_Parser.IDENTIFIER - 64)) | (1 << (nim_Parser.INT_LIT - 64)) | (1 << (nim_Parser.INT8_LIT - 64)) | (1 << (nim_Parser.INT16_LIT - 64)) | (1 << (nim_Parser.INT32_LIT - 64)) | (1 << (nim_Parser.INT64_LIT - 64)) | (1 << (nim_Parser.UINT_LIT - 64)) | (1 << (nim_Parser.UINT8_LIT - 64)) | (1 << (nim_Parser.UINT16_LIT - 64)) | (1 << (nim_Parser.UINT32_LIT - 64)) | (1 << (nim_Parser.UINT64_LIT - 64)) | (1 << (nim_Parser.FLOAT_LIT - 64)) | (1 << (nim_Parser.FLOAT32_LIT - 64)) | (1 << (nim_Parser.FLOAT64_LIT - 64)) | (1 << (nim_Parser.CHAR_LIT - 64)) | (1 << (nim_Parser.STR_LIT - 64)) | (1 << (nim_Parser.TRIPLESTR_LIT - 64)) | (1 << (nim_Parser.RSTR_LIT - 64)) | (1 << (nim_Parser.GENERALIZED_STR_LIT - 64)) | (1 << (nim_Parser.GENERALIZED_TRIPLESTR_LIT - 64)))) != 0)):
                        break

                self.state = 716
                self.ded()
                pass
            elif token in [nim_Parser.OPEN_PAREN, nim_Parser.CLOSE_PAREN, nim_Parser.OPEN_BRACK, nim_Parser.CLOSE_BRACK, nim_Parser.OBJECT, nim_Parser.TYPE, nim_Parser.DOLLAR_SIGN, nim_Parser.AT, nim_Parser.MINUS_OPERATOR, nim_Parser.VARIABLE, nim_Parser.LET, nim_Parser.CONST, nim_Parser.PROC, nim_Parser.RETURN, nim_Parser.CASE, nim_Parser.IF, nim_Parser.WHILE, nim_Parser.FOR, nim_Parser.CONTINUE, nim_Parser.BREAK, nim_Parser.TEMPLATE, nim_Parser.WHEN, nim_Parser.IMPORT, nim_Parser.FROM, nim_Parser.REF, nim_Parser.BLOCK, nim_Parser.MACRO, nim_Parser.NIL, nim_Parser.DISCARD, nim_Parser.SYM_HEADER, nim_Parser.IDENTIFIER, nim_Parser.INT_LIT, nim_Parser.INT8_LIT, nim_Parser.INT16_LIT, nim_Parser.INT32_LIT, nim_Parser.INT64_LIT, nim_Parser.UINT_LIT, nim_Parser.UINT8_LIT, nim_Parser.UINT16_LIT, nim_Parser.UINT32_LIT, nim_Parser.UINT64_LIT, nim_Parser.FLOAT_LIT, nim_Parser.FLOAT32_LIT, nim_Parser.FLOAT64_LIT, nim_Parser.CHAR_LIT, nim_Parser.STR_LIT, nim_Parser.TRIPLESTR_LIT, nim_Parser.RSTR_LIT, nim_Parser.GENERALIZED_STR_LIT, nim_Parser.GENERALIZED_TRIPLESTR_LIT]:
                self.state = 718
                self.anyStmtOrFuncCall()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhenStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(nim_Parser.WHEN, 0)

        def condStmt(self):
            return self.getTypedRuleContext(nim_Parser.CondStmtContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_whenStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhenStmt" ):
                listener.enterWhenStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhenStmt" ):
                listener.exitWhenStmt(self)




    def whenStmt(self):

        localctx = nim_Parser.WhenStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_whenStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 721
            self.match(nim_Parser.WHEN)
            self.state = 722
            self.condStmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.IDENTIFIER)
            else:
                return self.getToken(nim_Parser.IDENTIFIER, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.COMMA)
            else:
                return self.getToken(nim_Parser.COMMA, i)

        def getRuleIndex(self):
            return nim_Parser.RULE_idList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdList" ):
                listener.enterIdList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdList" ):
                listener.exitIdList(self)




    def idList(self):

        localctx = nim_Parser.IdListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_idList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 724
            self.match(nim_Parser.IDENTIFIER)
            self.state = 729
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==nim_Parser.COMMA:
                self.state = 725
                self.match(nim_Parser.COMMA)
                self.state = 726
                self.match(nim_Parser.IDENTIFIER)
                self.state = 731
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(nim_Parser.FOR, 0)

        def idList(self):
            return self.getTypedRuleContext(nim_Parser.IdListContext,0)


        def IN(self):
            return self.getToken(nim_Parser.IN, 0)

        def simpleExpr(self):
            return self.getTypedRuleContext(nim_Parser.SimpleExprContext,0)


        def COLON(self):
            return self.getToken(nim_Parser.COLON, 0)

        def anyStmtOrFuncCall(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.AnyStmtOrFuncCallContext)
            else:
                return self.getTypedRuleContext(nim_Parser.AnyStmtOrFuncCallContext,i)


        def ind(self):
            return self.getTypedRuleContext(nim_Parser.IndContext,0)


        def ded(self):
            return self.getTypedRuleContext(nim_Parser.DedContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_forStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForStmt" ):
                listener.enterForStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForStmt" ):
                listener.exitForStmt(self)




    def forStmt(self):

        localctx = nim_Parser.ForStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_forStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 732
            self.match(nim_Parser.FOR)
            self.state = 733
            self.idList()
            self.state = 734
            self.match(nim_Parser.IN)
            self.state = 735
            self.simpleExpr()
            self.state = 736
            self.match(nim_Parser.COLON)
            self.state = 746
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [nim_Parser.INDENT]:
                self.state = 737
                self.ind()
                self.state = 739 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 738
                    self.anyStmtOrFuncCall()
                    self.state = 741 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nim_Parser.OPEN_PAREN) | (1 << nim_Parser.CLOSE_PAREN) | (1 << nim_Parser.OPEN_BRACK) | (1 << nim_Parser.CLOSE_BRACK) | (1 << nim_Parser.OBJECT) | (1 << nim_Parser.TYPE) | (1 << nim_Parser.DOLLAR_SIGN) | (1 << nim_Parser.AT) | (1 << nim_Parser.MINUS_OPERATOR) | (1 << nim_Parser.VARIABLE) | (1 << nim_Parser.LET) | (1 << nim_Parser.CONST) | (1 << nim_Parser.PROC) | (1 << nim_Parser.RETURN) | (1 << nim_Parser.CASE) | (1 << nim_Parser.IF) | (1 << nim_Parser.WHILE) | (1 << nim_Parser.FOR) | (1 << nim_Parser.CONTINUE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (nim_Parser.BREAK - 64)) | (1 << (nim_Parser.TEMPLATE - 64)) | (1 << (nim_Parser.WHEN - 64)) | (1 << (nim_Parser.IMPORT - 64)) | (1 << (nim_Parser.FROM - 64)) | (1 << (nim_Parser.REF - 64)) | (1 << (nim_Parser.BLOCK - 64)) | (1 << (nim_Parser.MACRO - 64)) | (1 << (nim_Parser.NIL - 64)) | (1 << (nim_Parser.DISCARD - 64)) | (1 << (nim_Parser.SYM_HEADER - 64)) | (1 << (nim_Parser.IDENTIFIER - 64)) | (1 << (nim_Parser.INT_LIT - 64)) | (1 << (nim_Parser.INT8_LIT - 64)) | (1 << (nim_Parser.INT16_LIT - 64)) | (1 << (nim_Parser.INT32_LIT - 64)) | (1 << (nim_Parser.INT64_LIT - 64)) | (1 << (nim_Parser.UINT_LIT - 64)) | (1 << (nim_Parser.UINT8_LIT - 64)) | (1 << (nim_Parser.UINT16_LIT - 64)) | (1 << (nim_Parser.UINT32_LIT - 64)) | (1 << (nim_Parser.UINT64_LIT - 64)) | (1 << (nim_Parser.FLOAT_LIT - 64)) | (1 << (nim_Parser.FLOAT32_LIT - 64)) | (1 << (nim_Parser.FLOAT64_LIT - 64)) | (1 << (nim_Parser.CHAR_LIT - 64)) | (1 << (nim_Parser.STR_LIT - 64)) | (1 << (nim_Parser.TRIPLESTR_LIT - 64)) | (1 << (nim_Parser.RSTR_LIT - 64)) | (1 << (nim_Parser.GENERALIZED_STR_LIT - 64)) | (1 << (nim_Parser.GENERALIZED_TRIPLESTR_LIT - 64)))) != 0)):
                        break

                self.state = 743
                self.ded()
                pass
            elif token in [nim_Parser.OPEN_PAREN, nim_Parser.CLOSE_PAREN, nim_Parser.OPEN_BRACK, nim_Parser.CLOSE_BRACK, nim_Parser.OBJECT, nim_Parser.TYPE, nim_Parser.DOLLAR_SIGN, nim_Parser.AT, nim_Parser.MINUS_OPERATOR, nim_Parser.VARIABLE, nim_Parser.LET, nim_Parser.CONST, nim_Parser.PROC, nim_Parser.RETURN, nim_Parser.CASE, nim_Parser.IF, nim_Parser.WHILE, nim_Parser.FOR, nim_Parser.CONTINUE, nim_Parser.BREAK, nim_Parser.TEMPLATE, nim_Parser.WHEN, nim_Parser.IMPORT, nim_Parser.FROM, nim_Parser.REF, nim_Parser.BLOCK, nim_Parser.MACRO, nim_Parser.NIL, nim_Parser.DISCARD, nim_Parser.SYM_HEADER, nim_Parser.IDENTIFIER, nim_Parser.INT_LIT, nim_Parser.INT8_LIT, nim_Parser.INT16_LIT, nim_Parser.INT32_LIT, nim_Parser.INT64_LIT, nim_Parser.UINT_LIT, nim_Parser.UINT8_LIT, nim_Parser.UINT16_LIT, nim_Parser.UINT32_LIT, nim_Parser.UINT64_LIT, nim_Parser.FLOAT_LIT, nim_Parser.FLOAT32_LIT, nim_Parser.FLOAT64_LIT, nim_Parser.CHAR_LIT, nim_Parser.STR_LIT, nim_Parser.TRIPLESTR_LIT, nim_Parser.RSTR_LIT, nim_Parser.GENERALIZED_STR_LIT, nim_Parser.GENERALIZED_TRIPLESTR_LIT]:
                self.state = 745
                self.anyStmtOrFuncCall()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(nim_Parser.IF, 0)

        def condStmt(self):
            return self.getTypedRuleContext(nim_Parser.CondStmtContext,0)


        def NOT(self):
            return self.getToken(nim_Parser.NOT, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_ifStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfStmt" ):
                listener.enterIfStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfStmt" ):
                listener.exitIfStmt(self)




    def ifStmt(self):

        localctx = nim_Parser.IfStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_ifStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 748
            self.match(nim_Parser.IF)
            self.state = 750
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==nim_Parser.NOT:
                self.state = 749
                self.match(nim_Parser.NOT)


            self.state = 752
            self.condStmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CondStmtElifContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELIF(self):
            return self.getToken(nim_Parser.ELIF, 0)

        def simpleExpr(self):
            return self.getTypedRuleContext(nim_Parser.SimpleExprContext,0)


        def COLON(self):
            return self.getToken(nim_Parser.COLON, 0)

        def anyStmtOrFuncCall(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.AnyStmtOrFuncCallContext)
            else:
                return self.getTypedRuleContext(nim_Parser.AnyStmtOrFuncCallContext,i)


        def ind(self):
            return self.getTypedRuleContext(nim_Parser.IndContext,0)


        def ded(self):
            return self.getTypedRuleContext(nim_Parser.DedContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_condStmtElif

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondStmtElif" ):
                listener.enterCondStmtElif(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondStmtElif" ):
                listener.exitCondStmtElif(self)




    def condStmtElif(self):

        localctx = nim_Parser.CondStmtElifContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_condStmtElif)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 754
            self.match(nim_Parser.ELIF)
            self.state = 755
            self.simpleExpr()
            self.state = 756
            self.match(nim_Parser.COLON)
            self.state = 766
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [nim_Parser.INDENT]:
                self.state = 757
                self.ind()
                self.state = 759 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 758
                    self.anyStmtOrFuncCall()
                    self.state = 761 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nim_Parser.OPEN_PAREN) | (1 << nim_Parser.CLOSE_PAREN) | (1 << nim_Parser.OPEN_BRACK) | (1 << nim_Parser.CLOSE_BRACK) | (1 << nim_Parser.OBJECT) | (1 << nim_Parser.TYPE) | (1 << nim_Parser.DOLLAR_SIGN) | (1 << nim_Parser.AT) | (1 << nim_Parser.MINUS_OPERATOR) | (1 << nim_Parser.VARIABLE) | (1 << nim_Parser.LET) | (1 << nim_Parser.CONST) | (1 << nim_Parser.PROC) | (1 << nim_Parser.RETURN) | (1 << nim_Parser.CASE) | (1 << nim_Parser.IF) | (1 << nim_Parser.WHILE) | (1 << nim_Parser.FOR) | (1 << nim_Parser.CONTINUE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (nim_Parser.BREAK - 64)) | (1 << (nim_Parser.TEMPLATE - 64)) | (1 << (nim_Parser.WHEN - 64)) | (1 << (nim_Parser.IMPORT - 64)) | (1 << (nim_Parser.FROM - 64)) | (1 << (nim_Parser.REF - 64)) | (1 << (nim_Parser.BLOCK - 64)) | (1 << (nim_Parser.MACRO - 64)) | (1 << (nim_Parser.NIL - 64)) | (1 << (nim_Parser.DISCARD - 64)) | (1 << (nim_Parser.SYM_HEADER - 64)) | (1 << (nim_Parser.IDENTIFIER - 64)) | (1 << (nim_Parser.INT_LIT - 64)) | (1 << (nim_Parser.INT8_LIT - 64)) | (1 << (nim_Parser.INT16_LIT - 64)) | (1 << (nim_Parser.INT32_LIT - 64)) | (1 << (nim_Parser.INT64_LIT - 64)) | (1 << (nim_Parser.UINT_LIT - 64)) | (1 << (nim_Parser.UINT8_LIT - 64)) | (1 << (nim_Parser.UINT16_LIT - 64)) | (1 << (nim_Parser.UINT32_LIT - 64)) | (1 << (nim_Parser.UINT64_LIT - 64)) | (1 << (nim_Parser.FLOAT_LIT - 64)) | (1 << (nim_Parser.FLOAT32_LIT - 64)) | (1 << (nim_Parser.FLOAT64_LIT - 64)) | (1 << (nim_Parser.CHAR_LIT - 64)) | (1 << (nim_Parser.STR_LIT - 64)) | (1 << (nim_Parser.TRIPLESTR_LIT - 64)) | (1 << (nim_Parser.RSTR_LIT - 64)) | (1 << (nim_Parser.GENERALIZED_STR_LIT - 64)) | (1 << (nim_Parser.GENERALIZED_TRIPLESTR_LIT - 64)))) != 0)):
                        break

                self.state = 763
                self.ded()
                pass
            elif token in [nim_Parser.OPEN_PAREN, nim_Parser.CLOSE_PAREN, nim_Parser.OPEN_BRACK, nim_Parser.CLOSE_BRACK, nim_Parser.OBJECT, nim_Parser.TYPE, nim_Parser.DOLLAR_SIGN, nim_Parser.AT, nim_Parser.MINUS_OPERATOR, nim_Parser.VARIABLE, nim_Parser.LET, nim_Parser.CONST, nim_Parser.PROC, nim_Parser.RETURN, nim_Parser.CASE, nim_Parser.IF, nim_Parser.WHILE, nim_Parser.FOR, nim_Parser.CONTINUE, nim_Parser.BREAK, nim_Parser.TEMPLATE, nim_Parser.WHEN, nim_Parser.IMPORT, nim_Parser.FROM, nim_Parser.REF, nim_Parser.BLOCK, nim_Parser.MACRO, nim_Parser.NIL, nim_Parser.DISCARD, nim_Parser.SYM_HEADER, nim_Parser.IDENTIFIER, nim_Parser.INT_LIT, nim_Parser.INT8_LIT, nim_Parser.INT16_LIT, nim_Parser.INT32_LIT, nim_Parser.INT64_LIT, nim_Parser.UINT_LIT, nim_Parser.UINT8_LIT, nim_Parser.UINT16_LIT, nim_Parser.UINT32_LIT, nim_Parser.UINT64_LIT, nim_Parser.FLOAT_LIT, nim_Parser.FLOAT32_LIT, nim_Parser.FLOAT64_LIT, nim_Parser.CHAR_LIT, nim_Parser.STR_LIT, nim_Parser.TRIPLESTR_LIT, nim_Parser.RSTR_LIT, nim_Parser.GENERALIZED_STR_LIT, nim_Parser.GENERALIZED_TRIPLESTR_LIT]:
                self.state = 765
                self.anyStmtOrFuncCall()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CondStmtElseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(nim_Parser.ELSE, 0)

        def COLON(self):
            return self.getToken(nim_Parser.COLON, 0)

        def anyStmtOrFuncCall(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.AnyStmtOrFuncCallContext)
            else:
                return self.getTypedRuleContext(nim_Parser.AnyStmtOrFuncCallContext,i)


        def ind(self):
            return self.getTypedRuleContext(nim_Parser.IndContext,0)


        def ded(self):
            return self.getTypedRuleContext(nim_Parser.DedContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_condStmtElse

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondStmtElse" ):
                listener.enterCondStmtElse(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondStmtElse" ):
                listener.exitCondStmtElse(self)




    def condStmtElse(self):

        localctx = nim_Parser.CondStmtElseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_condStmtElse)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 768
            self.match(nim_Parser.ELSE)
            self.state = 769
            self.match(nim_Parser.COLON)
            self.state = 779
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [nim_Parser.INDENT]:
                self.state = 770
                self.ind()
                self.state = 772 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 771
                    self.anyStmtOrFuncCall()
                    self.state = 774 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nim_Parser.OPEN_PAREN) | (1 << nim_Parser.CLOSE_PAREN) | (1 << nim_Parser.OPEN_BRACK) | (1 << nim_Parser.CLOSE_BRACK) | (1 << nim_Parser.OBJECT) | (1 << nim_Parser.TYPE) | (1 << nim_Parser.DOLLAR_SIGN) | (1 << nim_Parser.AT) | (1 << nim_Parser.MINUS_OPERATOR) | (1 << nim_Parser.VARIABLE) | (1 << nim_Parser.LET) | (1 << nim_Parser.CONST) | (1 << nim_Parser.PROC) | (1 << nim_Parser.RETURN) | (1 << nim_Parser.CASE) | (1 << nim_Parser.IF) | (1 << nim_Parser.WHILE) | (1 << nim_Parser.FOR) | (1 << nim_Parser.CONTINUE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (nim_Parser.BREAK - 64)) | (1 << (nim_Parser.TEMPLATE - 64)) | (1 << (nim_Parser.WHEN - 64)) | (1 << (nim_Parser.IMPORT - 64)) | (1 << (nim_Parser.FROM - 64)) | (1 << (nim_Parser.REF - 64)) | (1 << (nim_Parser.BLOCK - 64)) | (1 << (nim_Parser.MACRO - 64)) | (1 << (nim_Parser.NIL - 64)) | (1 << (nim_Parser.DISCARD - 64)) | (1 << (nim_Parser.SYM_HEADER - 64)) | (1 << (nim_Parser.IDENTIFIER - 64)) | (1 << (nim_Parser.INT_LIT - 64)) | (1 << (nim_Parser.INT8_LIT - 64)) | (1 << (nim_Parser.INT16_LIT - 64)) | (1 << (nim_Parser.INT32_LIT - 64)) | (1 << (nim_Parser.INT64_LIT - 64)) | (1 << (nim_Parser.UINT_LIT - 64)) | (1 << (nim_Parser.UINT8_LIT - 64)) | (1 << (nim_Parser.UINT16_LIT - 64)) | (1 << (nim_Parser.UINT32_LIT - 64)) | (1 << (nim_Parser.UINT64_LIT - 64)) | (1 << (nim_Parser.FLOAT_LIT - 64)) | (1 << (nim_Parser.FLOAT32_LIT - 64)) | (1 << (nim_Parser.FLOAT64_LIT - 64)) | (1 << (nim_Parser.CHAR_LIT - 64)) | (1 << (nim_Parser.STR_LIT - 64)) | (1 << (nim_Parser.TRIPLESTR_LIT - 64)) | (1 << (nim_Parser.RSTR_LIT - 64)) | (1 << (nim_Parser.GENERALIZED_STR_LIT - 64)) | (1 << (nim_Parser.GENERALIZED_TRIPLESTR_LIT - 64)))) != 0)):
                        break

                self.state = 776
                self.ded()
                pass
            elif token in [nim_Parser.OPEN_PAREN, nim_Parser.CLOSE_PAREN, nim_Parser.OPEN_BRACK, nim_Parser.CLOSE_BRACK, nim_Parser.OBJECT, nim_Parser.TYPE, nim_Parser.DOLLAR_SIGN, nim_Parser.AT, nim_Parser.MINUS_OPERATOR, nim_Parser.VARIABLE, nim_Parser.LET, nim_Parser.CONST, nim_Parser.PROC, nim_Parser.RETURN, nim_Parser.CASE, nim_Parser.IF, nim_Parser.WHILE, nim_Parser.FOR, nim_Parser.CONTINUE, nim_Parser.BREAK, nim_Parser.TEMPLATE, nim_Parser.WHEN, nim_Parser.IMPORT, nim_Parser.FROM, nim_Parser.REF, nim_Parser.BLOCK, nim_Parser.MACRO, nim_Parser.NIL, nim_Parser.DISCARD, nim_Parser.SYM_HEADER, nim_Parser.IDENTIFIER, nim_Parser.INT_LIT, nim_Parser.INT8_LIT, nim_Parser.INT16_LIT, nim_Parser.INT32_LIT, nim_Parser.INT64_LIT, nim_Parser.UINT_LIT, nim_Parser.UINT8_LIT, nim_Parser.UINT16_LIT, nim_Parser.UINT32_LIT, nim_Parser.UINT64_LIT, nim_Parser.FLOAT_LIT, nim_Parser.FLOAT32_LIT, nim_Parser.FLOAT64_LIT, nim_Parser.CHAR_LIT, nim_Parser.STR_LIT, nim_Parser.TRIPLESTR_LIT, nim_Parser.RSTR_LIT, nim_Parser.GENERALIZED_STR_LIT, nim_Parser.GENERALIZED_TRIPLESTR_LIT]:
                self.state = 778
                self.anyStmtOrFuncCall()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CondStmtBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def anyStmtOrFuncCall(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.AnyStmtOrFuncCallContext)
            else:
                return self.getTypedRuleContext(nim_Parser.AnyStmtOrFuncCallContext,i)


        def ind(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.IndContext)
            else:
                return self.getTypedRuleContext(nim_Parser.IndContext,i)


        def ded(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.DedContext)
            else:
                return self.getTypedRuleContext(nim_Parser.DedContext,i)


        def condStmtElif(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.CondStmtElifContext)
            else:
                return self.getTypedRuleContext(nim_Parser.CondStmtElifContext,i)


        def condStmtElse(self):
            return self.getTypedRuleContext(nim_Parser.CondStmtElseContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_condStmtBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondStmtBody" ):
                listener.enterCondStmtBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondStmtBody" ):
                listener.exitCondStmtBody(self)




    def condStmtBody(self):

        localctx = nim_Parser.CondStmtBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_condStmtBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 790
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [nim_Parser.INDENT]:
                self.state = 781
                self.ind()
                self.state = 783 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 782
                    self.anyStmtOrFuncCall()
                    self.state = 785 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nim_Parser.OPEN_PAREN) | (1 << nim_Parser.CLOSE_PAREN) | (1 << nim_Parser.OPEN_BRACK) | (1 << nim_Parser.CLOSE_BRACK) | (1 << nim_Parser.OBJECT) | (1 << nim_Parser.TYPE) | (1 << nim_Parser.DOLLAR_SIGN) | (1 << nim_Parser.AT) | (1 << nim_Parser.MINUS_OPERATOR) | (1 << nim_Parser.VARIABLE) | (1 << nim_Parser.LET) | (1 << nim_Parser.CONST) | (1 << nim_Parser.PROC) | (1 << nim_Parser.RETURN) | (1 << nim_Parser.CASE) | (1 << nim_Parser.IF) | (1 << nim_Parser.WHILE) | (1 << nim_Parser.FOR) | (1 << nim_Parser.CONTINUE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (nim_Parser.BREAK - 64)) | (1 << (nim_Parser.TEMPLATE - 64)) | (1 << (nim_Parser.WHEN - 64)) | (1 << (nim_Parser.IMPORT - 64)) | (1 << (nim_Parser.FROM - 64)) | (1 << (nim_Parser.REF - 64)) | (1 << (nim_Parser.BLOCK - 64)) | (1 << (nim_Parser.MACRO - 64)) | (1 << (nim_Parser.NIL - 64)) | (1 << (nim_Parser.DISCARD - 64)) | (1 << (nim_Parser.SYM_HEADER - 64)) | (1 << (nim_Parser.IDENTIFIER - 64)) | (1 << (nim_Parser.INT_LIT - 64)) | (1 << (nim_Parser.INT8_LIT - 64)) | (1 << (nim_Parser.INT16_LIT - 64)) | (1 << (nim_Parser.INT32_LIT - 64)) | (1 << (nim_Parser.INT64_LIT - 64)) | (1 << (nim_Parser.UINT_LIT - 64)) | (1 << (nim_Parser.UINT8_LIT - 64)) | (1 << (nim_Parser.UINT16_LIT - 64)) | (1 << (nim_Parser.UINT32_LIT - 64)) | (1 << (nim_Parser.UINT64_LIT - 64)) | (1 << (nim_Parser.FLOAT_LIT - 64)) | (1 << (nim_Parser.FLOAT32_LIT - 64)) | (1 << (nim_Parser.FLOAT64_LIT - 64)) | (1 << (nim_Parser.CHAR_LIT - 64)) | (1 << (nim_Parser.STR_LIT - 64)) | (1 << (nim_Parser.TRIPLESTR_LIT - 64)) | (1 << (nim_Parser.RSTR_LIT - 64)) | (1 << (nim_Parser.GENERALIZED_STR_LIT - 64)) | (1 << (nim_Parser.GENERALIZED_TRIPLESTR_LIT - 64)))) != 0)):
                        break

                self.state = 787
                self.ded()
                pass
            elif token in [nim_Parser.OPEN_PAREN, nim_Parser.CLOSE_PAREN, nim_Parser.OPEN_BRACK, nim_Parser.CLOSE_BRACK, nim_Parser.OBJECT, nim_Parser.TYPE, nim_Parser.DOLLAR_SIGN, nim_Parser.AT, nim_Parser.MINUS_OPERATOR, nim_Parser.VARIABLE, nim_Parser.LET, nim_Parser.CONST, nim_Parser.PROC, nim_Parser.RETURN, nim_Parser.CASE, nim_Parser.IF, nim_Parser.WHILE, nim_Parser.FOR, nim_Parser.CONTINUE, nim_Parser.BREAK, nim_Parser.TEMPLATE, nim_Parser.WHEN, nim_Parser.IMPORT, nim_Parser.FROM, nim_Parser.REF, nim_Parser.BLOCK, nim_Parser.MACRO, nim_Parser.NIL, nim_Parser.DISCARD, nim_Parser.SYM_HEADER, nim_Parser.IDENTIFIER, nim_Parser.INT_LIT, nim_Parser.INT8_LIT, nim_Parser.INT16_LIT, nim_Parser.INT32_LIT, nim_Parser.INT64_LIT, nim_Parser.UINT_LIT, nim_Parser.UINT8_LIT, nim_Parser.UINT16_LIT, nim_Parser.UINT32_LIT, nim_Parser.UINT64_LIT, nim_Parser.FLOAT_LIT, nim_Parser.FLOAT32_LIT, nim_Parser.FLOAT64_LIT, nim_Parser.CHAR_LIT, nim_Parser.STR_LIT, nim_Parser.TRIPLESTR_LIT, nim_Parser.RSTR_LIT, nim_Parser.GENERALIZED_STR_LIT, nim_Parser.GENERALIZED_TRIPLESTR_LIT]:
                self.state = 789
                self.anyStmtOrFuncCall()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 825
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
            if la_ == 1:
                self.state = 792
                self.ind()
                self.state = 796
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==nim_Parser.ELIF:
                    self.state = 793
                    self.condStmtElif()
                    self.state = 798
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 800
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nim_Parser.ELSE:
                    self.state = 799
                    self.condStmtElse()


                self.state = 802
                self.ded()
                pass

            elif la_ == 2:
                self.state = 807
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==nim_Parser.ELIF:
                    self.state = 804
                    self.condStmtElif()
                    self.state = 809
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 810
                self.ind()
                self.state = 812
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nim_Parser.ELSE:
                    self.state = 811
                    self.condStmtElse()


                self.state = 814
                self.ded()
                pass

            elif la_ == 3:
                self.state = 819
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,81,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 816
                        self.condStmtElif() 
                    self.state = 821
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,81,self._ctx)

                self.state = 823
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
                if la_ == 1:
                    self.state = 822
                    self.condStmtElse()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CondStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleExpr(self):
            return self.getTypedRuleContext(nim_Parser.SimpleExprContext,0)


        def COLON(self):
            return self.getToken(nim_Parser.COLON, 0)

        def condStmtBody(self):
            return self.getTypedRuleContext(nim_Parser.CondStmtBodyContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_condStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondStmt" ):
                listener.enterCondStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondStmt" ):
                listener.exitCondStmt(self)




    def condStmt(self):

        localctx = nim_Parser.CondStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_condStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 827
            self.simpleExpr()
            self.state = 828
            self.match(nim_Parser.COLON)
            self.state = 829
            self.condStmtBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BLOCK(self):
            return self.getToken(nim_Parser.BLOCK, 0)

        def IDENTIFIER(self):
            return self.getToken(nim_Parser.IDENTIFIER, 0)

        def COLON(self):
            return self.getToken(nim_Parser.COLON, 0)

        def anyStmtOrFuncCall(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.AnyStmtOrFuncCallContext)
            else:
                return self.getTypedRuleContext(nim_Parser.AnyStmtOrFuncCallContext,i)


        def ind(self):
            return self.getTypedRuleContext(nim_Parser.IndContext,0)


        def ded(self):
            return self.getTypedRuleContext(nim_Parser.DedContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_blockStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockStmt" ):
                listener.enterBlockStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockStmt" ):
                listener.exitBlockStmt(self)




    def blockStmt(self):

        localctx = nim_Parser.BlockStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_blockStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 831
            self.match(nim_Parser.BLOCK)
            self.state = 832
            self.match(nim_Parser.IDENTIFIER)
            self.state = 833
            self.match(nim_Parser.COLON)
            self.state = 843
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [nim_Parser.INDENT]:
                self.state = 834
                self.ind()
                self.state = 836 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 835
                    self.anyStmtOrFuncCall()
                    self.state = 838 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nim_Parser.OPEN_PAREN) | (1 << nim_Parser.CLOSE_PAREN) | (1 << nim_Parser.OPEN_BRACK) | (1 << nim_Parser.CLOSE_BRACK) | (1 << nim_Parser.OBJECT) | (1 << nim_Parser.TYPE) | (1 << nim_Parser.DOLLAR_SIGN) | (1 << nim_Parser.AT) | (1 << nim_Parser.MINUS_OPERATOR) | (1 << nim_Parser.VARIABLE) | (1 << nim_Parser.LET) | (1 << nim_Parser.CONST) | (1 << nim_Parser.PROC) | (1 << nim_Parser.RETURN) | (1 << nim_Parser.CASE) | (1 << nim_Parser.IF) | (1 << nim_Parser.WHILE) | (1 << nim_Parser.FOR) | (1 << nim_Parser.CONTINUE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (nim_Parser.BREAK - 64)) | (1 << (nim_Parser.TEMPLATE - 64)) | (1 << (nim_Parser.WHEN - 64)) | (1 << (nim_Parser.IMPORT - 64)) | (1 << (nim_Parser.FROM - 64)) | (1 << (nim_Parser.REF - 64)) | (1 << (nim_Parser.BLOCK - 64)) | (1 << (nim_Parser.MACRO - 64)) | (1 << (nim_Parser.NIL - 64)) | (1 << (nim_Parser.DISCARD - 64)) | (1 << (nim_Parser.SYM_HEADER - 64)) | (1 << (nim_Parser.IDENTIFIER - 64)) | (1 << (nim_Parser.INT_LIT - 64)) | (1 << (nim_Parser.INT8_LIT - 64)) | (1 << (nim_Parser.INT16_LIT - 64)) | (1 << (nim_Parser.INT32_LIT - 64)) | (1 << (nim_Parser.INT64_LIT - 64)) | (1 << (nim_Parser.UINT_LIT - 64)) | (1 << (nim_Parser.UINT8_LIT - 64)) | (1 << (nim_Parser.UINT16_LIT - 64)) | (1 << (nim_Parser.UINT32_LIT - 64)) | (1 << (nim_Parser.UINT64_LIT - 64)) | (1 << (nim_Parser.FLOAT_LIT - 64)) | (1 << (nim_Parser.FLOAT32_LIT - 64)) | (1 << (nim_Parser.FLOAT64_LIT - 64)) | (1 << (nim_Parser.CHAR_LIT - 64)) | (1 << (nim_Parser.STR_LIT - 64)) | (1 << (nim_Parser.TRIPLESTR_LIT - 64)) | (1 << (nim_Parser.RSTR_LIT - 64)) | (1 << (nim_Parser.GENERALIZED_STR_LIT - 64)) | (1 << (nim_Parser.GENERALIZED_TRIPLESTR_LIT - 64)))) != 0)):
                        break

                self.state = 840
                self.ded()
                pass
            elif token in [nim_Parser.OPEN_PAREN, nim_Parser.CLOSE_PAREN, nim_Parser.OPEN_BRACK, nim_Parser.CLOSE_BRACK, nim_Parser.OBJECT, nim_Parser.TYPE, nim_Parser.DOLLAR_SIGN, nim_Parser.AT, nim_Parser.MINUS_OPERATOR, nim_Parser.VARIABLE, nim_Parser.LET, nim_Parser.CONST, nim_Parser.PROC, nim_Parser.RETURN, nim_Parser.CASE, nim_Parser.IF, nim_Parser.WHILE, nim_Parser.FOR, nim_Parser.CONTINUE, nim_Parser.BREAK, nim_Parser.TEMPLATE, nim_Parser.WHEN, nim_Parser.IMPORT, nim_Parser.FROM, nim_Parser.REF, nim_Parser.BLOCK, nim_Parser.MACRO, nim_Parser.NIL, nim_Parser.DISCARD, nim_Parser.SYM_HEADER, nim_Parser.IDENTIFIER, nim_Parser.INT_LIT, nim_Parser.INT8_LIT, nim_Parser.INT16_LIT, nim_Parser.INT32_LIT, nim_Parser.INT64_LIT, nim_Parser.UINT_LIT, nim_Parser.UINT8_LIT, nim_Parser.UINT16_LIT, nim_Parser.UINT32_LIT, nim_Parser.UINT64_LIT, nim_Parser.FLOAT_LIT, nim_Parser.FLOAT32_LIT, nim_Parser.FLOAT64_LIT, nim_Parser.CHAR_LIT, nim_Parser.STR_LIT, nim_Parser.TRIPLESTR_LIT, nim_Parser.RSTR_LIT, nim_Parser.GENERALIZED_STR_LIT, nim_Parser.GENERALIZED_TRIPLESTR_LIT]:
                self.state = 842
                self.anyStmtOrFuncCall()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiscardStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DISCARD(self):
            return self.getToken(nim_Parser.DISCARD, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_discardStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiscardStmt" ):
                listener.enterDiscardStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiscardStmt" ):
                listener.exitDiscardStmt(self)




    def discardStmt(self):

        localctx = nim_Parser.DiscardStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_discardStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 845
            self.match(nim_Parser.DISCARD)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(nim_Parser.RETURN, 0)

        def simpleExpr(self):
            return self.getTypedRuleContext(nim_Parser.SimpleExprContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_returnStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnStmt" ):
                listener.enterReturnStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnStmt" ):
                listener.exitReturnStmt(self)




    def returnStmt(self):

        localctx = nim_Parser.ReturnStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_returnStmt)
        try:
            self.state = 850
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,86,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 847
                self.match(nim_Parser.RETURN)
                self.state = 848
                self.simpleExpr()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 849
                self.match(nim_Parser.RETURN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BreakStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BREAK(self):
            return self.getToken(nim_Parser.BREAK, 0)

        def simpleExpr(self):
            return self.getTypedRuleContext(nim_Parser.SimpleExprContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_breakStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBreakStmt" ):
                listener.enterBreakStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBreakStmt" ):
                listener.exitBreakStmt(self)




    def breakStmt(self):

        localctx = nim_Parser.BreakStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_breakStmt)
        try:
            self.state = 855
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 852
                self.match(nim_Parser.BREAK)
                self.state = 853
                self.simpleExpr()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 854
                self.match(nim_Parser.BREAK)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContinueStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTINUE(self):
            return self.getToken(nim_Parser.CONTINUE, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_continueStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContinueStmt" ):
                listener.enterContinueStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContinueStmt" ):
                listener.exitContinueStmt(self)




    def continueStmt(self):

        localctx = nim_Parser.ContinueStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_continueStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 857
            self.match(nim_Parser.CONTINUE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def blockExpr(self):
            return self.getTypedRuleContext(nim_Parser.BlockExprContext,0)


        def caseExpr(self):
            return self.getTypedRuleContext(nim_Parser.CaseExprContext,0)


        def forExpr(self):
            return self.getTypedRuleContext(nim_Parser.ForExprContext,0)


        def ifExpr(self):
            return self.getTypedRuleContext(nim_Parser.IfExprContext,0)


        def whenExpr(self):
            return self.getTypedRuleContext(nim_Parser.WhenExprContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr" ):
                listener.enterExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr" ):
                listener.exitExpr(self)




    def expr(self):

        localctx = nim_Parser.ExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_expr)
        try:
            self.state = 864
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [nim_Parser.BLOCK]:
                self.enterOuterAlt(localctx, 1)
                self.state = 859
                self.blockExpr()
                pass
            elif token in [nim_Parser.CASE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 860
                self.caseExpr()
                pass
            elif token in [nim_Parser.FOR]:
                self.enterOuterAlt(localctx, 3)
                self.state = 861
                self.forExpr()
                pass
            elif token in [nim_Parser.IF]:
                self.enterOuterAlt(localctx, 4)
                self.state = 862
                self.ifExpr()
                pass
            elif token in [nim_Parser.WHEN]:
                self.enterOuterAlt(localctx, 5)
                self.state = 863
                self.whenExpr()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PragmaContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(nim_Parser.OPEN_BRACE, 0)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.DOT)
            else:
                return self.getToken(nim_Parser.DOT, i)

        def IDENTIFIER(self):
            return self.getToken(nim_Parser.IDENTIFIER, 0)

        def CLOSE_BRACE(self):
            return self.getToken(nim_Parser.CLOSE_BRACE, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_pragma

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragma" ):
                listener.enterPragma(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragma" ):
                listener.exitPragma(self)




    def pragma(self):

        localctx = nim_Parser.PragmaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_pragma)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 866
            self.match(nim_Parser.OPEN_BRACE)
            self.state = 867
            self.match(nim_Parser.DOT)
            self.state = 868
            self.match(nim_Parser.IDENTIFIER)
            self.state = 870
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==nim_Parser.DOT:
                self.state = 869
                self.match(nim_Parser.DOT)


            self.state = 872
            self.match(nim_Parser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcRoutineHeaderContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self):
            return self.getTypedRuleContext(nim_Parser.SymbolContext,0)


        def arrayConstr(self):
            return self.getTypedRuleContext(nim_Parser.ArrayConstrContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_procRoutineHeader

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcRoutineHeader" ):
                listener.enterProcRoutineHeader(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcRoutineHeader" ):
                listener.exitProcRoutineHeader(self)




    def procRoutineHeader(self):

        localctx = nim_Parser.ProcRoutineHeaderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_procRoutineHeader)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 874
            self.symbol()
            self.state = 876
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==nim_Parser.OPEN_BRACK:
                self.state = 875
                self.arrayConstr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcRoutineVariableTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(nim_Parser.IDENTIFIER, 0)

        def arrayConstr(self):
            return self.getTypedRuleContext(nim_Parser.ArrayConstrContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_procRoutineVariableType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcRoutineVariableType" ):
                listener.enterProcRoutineVariableType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcRoutineVariableType" ):
                listener.exitProcRoutineVariableType(self)




    def procRoutineVariableType(self):

        localctx = nim_Parser.ProcRoutineVariableTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_procRoutineVariableType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 878
            self.match(nim_Parser.IDENTIFIER)
            self.state = 879
            self.arrayConstr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcRoutineTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(nim_Parser.IDENTIFIER, 0)

        def arrayConstr(self):
            return self.getTypedRuleContext(nim_Parser.ArrayConstrContext,0)


        def PROC(self):
            return self.getToken(nim_Parser.PROC, 0)

        def procRoutineBodyList(self):
            return self.getTypedRuleContext(nim_Parser.ProcRoutineBodyListContext,0)


        def VARIABLE(self):
            return self.getToken(nim_Parser.VARIABLE, 0)

        def procRoutineVariableType(self):
            return self.getTypedRuleContext(nim_Parser.ProcRoutineVariableTypeContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_procRoutineType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcRoutineType" ):
                listener.enterProcRoutineType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcRoutineType" ):
                listener.exitProcRoutineType(self)




    def procRoutineType(self):

        localctx = nim_Parser.ProcRoutineTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_procRoutineType)
        self._la = 0 # Token type
        try:
            self.state = 889
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [nim_Parser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 881
                self.match(nim_Parser.IDENTIFIER)
                self.state = 883
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nim_Parser.OPEN_BRACK:
                    self.state = 882
                    self.arrayConstr()


                pass
            elif token in [nim_Parser.PROC]:
                self.enterOuterAlt(localctx, 2)
                self.state = 885
                self.match(nim_Parser.PROC)
                self.state = 886
                self.procRoutineBodyList()
                pass
            elif token in [nim_Parser.VARIABLE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 887
                self.match(nim_Parser.VARIABLE)
                self.state = 888
                self.procRoutineVariableType()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcRoutineBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(nim_Parser.IDENTIFIER, 0)

        def COLON(self):
            return self.getToken(nim_Parser.COLON, 0)

        def procRoutineType(self):
            return self.getTypedRuleContext(nim_Parser.ProcRoutineTypeContext,0)


        def EQUALS(self):
            return self.getToken(nim_Parser.EQUALS, 0)

        def simpleExpr(self):
            return self.getTypedRuleContext(nim_Parser.SimpleExprContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_procRoutineBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcRoutineBody" ):
                listener.enterProcRoutineBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcRoutineBody" ):
                listener.exitProcRoutineBody(self)




    def procRoutineBody(self):

        localctx = nim_Parser.ProcRoutineBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_procRoutineBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 891
            self.match(nim_Parser.IDENTIFIER)
            self.state = 896
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [nim_Parser.COLON]:
                self.state = 892
                self.match(nim_Parser.COLON)
                self.state = 893
                self.procRoutineType()
                pass
            elif token in [nim_Parser.EQUALS]:
                self.state = 894
                self.match(nim_Parser.EQUALS)
                self.state = 895
                self.simpleExpr()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcRoutineTailContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUALS(self):
            return self.getToken(nim_Parser.EQUALS, 0)

        def COLON(self):
            return self.getToken(nim_Parser.COLON, 0)

        def procRoutineType(self):
            return self.getTypedRuleContext(nim_Parser.ProcRoutineTypeContext,0)


        def anyStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.AnyStmtContext)
            else:
                return self.getTypedRuleContext(nim_Parser.AnyStmtContext,i)


        def anyExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.AnyExprContext)
            else:
                return self.getTypedRuleContext(nim_Parser.AnyExprContext,i)


        def ind(self):
            return self.getTypedRuleContext(nim_Parser.IndContext,0)


        def ded(self):
            return self.getTypedRuleContext(nim_Parser.DedContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_procRoutineTail

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcRoutineTail" ):
                listener.enterProcRoutineTail(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcRoutineTail" ):
                listener.exitProcRoutineTail(self)




    def procRoutineTail(self):

        localctx = nim_Parser.ProcRoutineTailContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_procRoutineTail)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 900
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==nim_Parser.COLON:
                self.state = 898
                self.match(nim_Parser.COLON)
                self.state = 899
                self.procRoutineType()


            self.state = 902
            self.match(nim_Parser.EQUALS)
            self.state = 916
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [nim_Parser.OPEN_PAREN, nim_Parser.CLOSE_PAREN, nim_Parser.OPEN_BRACK, nim_Parser.CLOSE_BRACK, nim_Parser.OBJECT, nim_Parser.TYPE, nim_Parser.DOLLAR_SIGN, nim_Parser.AT, nim_Parser.MINUS_OPERATOR, nim_Parser.VARIABLE, nim_Parser.LET, nim_Parser.CONST, nim_Parser.PROC, nim_Parser.RETURN, nim_Parser.CASE, nim_Parser.IF, nim_Parser.WHILE, nim_Parser.FOR, nim_Parser.CONTINUE, nim_Parser.BREAK, nim_Parser.TEMPLATE, nim_Parser.WHEN, nim_Parser.IMPORT, nim_Parser.FROM, nim_Parser.REF, nim_Parser.BLOCK, nim_Parser.MACRO, nim_Parser.NIL, nim_Parser.DISCARD, nim_Parser.SYM_HEADER, nim_Parser.IDENTIFIER, nim_Parser.INT_LIT, nim_Parser.INT8_LIT, nim_Parser.INT16_LIT, nim_Parser.INT32_LIT, nim_Parser.INT64_LIT, nim_Parser.UINT_LIT, nim_Parser.UINT8_LIT, nim_Parser.UINT16_LIT, nim_Parser.UINT32_LIT, nim_Parser.UINT64_LIT, nim_Parser.FLOAT_LIT, nim_Parser.FLOAT32_LIT, nim_Parser.FLOAT64_LIT, nim_Parser.CHAR_LIT, nim_Parser.STR_LIT, nim_Parser.TRIPLESTR_LIT, nim_Parser.RSTR_LIT, nim_Parser.GENERALIZED_STR_LIT, nim_Parser.GENERALIZED_TRIPLESTR_LIT]:
                self.state = 905
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
                if la_ == 1:
                    self.state = 903
                    self.anyStmt()
                    pass

                elif la_ == 2:
                    self.state = 904
                    self.anyExpr()
                    pass


                pass
            elif token in [nim_Parser.INDENT]:
                self.state = 907
                self.ind()
                self.state = 910 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 910
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
                    if la_ == 1:
                        self.state = 908
                        self.anyStmt()
                        pass

                    elif la_ == 2:
                        self.state = 909
                        self.anyExpr()
                        pass


                    self.state = 912 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nim_Parser.OPEN_PAREN) | (1 << nim_Parser.CLOSE_PAREN) | (1 << nim_Parser.OPEN_BRACK) | (1 << nim_Parser.CLOSE_BRACK) | (1 << nim_Parser.OBJECT) | (1 << nim_Parser.TYPE) | (1 << nim_Parser.DOLLAR_SIGN) | (1 << nim_Parser.AT) | (1 << nim_Parser.MINUS_OPERATOR) | (1 << nim_Parser.VARIABLE) | (1 << nim_Parser.LET) | (1 << nim_Parser.CONST) | (1 << nim_Parser.PROC) | (1 << nim_Parser.RETURN) | (1 << nim_Parser.CASE) | (1 << nim_Parser.IF) | (1 << nim_Parser.WHILE) | (1 << nim_Parser.FOR) | (1 << nim_Parser.CONTINUE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (nim_Parser.BREAK - 64)) | (1 << (nim_Parser.TEMPLATE - 64)) | (1 << (nim_Parser.WHEN - 64)) | (1 << (nim_Parser.IMPORT - 64)) | (1 << (nim_Parser.FROM - 64)) | (1 << (nim_Parser.REF - 64)) | (1 << (nim_Parser.BLOCK - 64)) | (1 << (nim_Parser.MACRO - 64)) | (1 << (nim_Parser.NIL - 64)) | (1 << (nim_Parser.DISCARD - 64)) | (1 << (nim_Parser.SYM_HEADER - 64)) | (1 << (nim_Parser.IDENTIFIER - 64)) | (1 << (nim_Parser.INT_LIT - 64)) | (1 << (nim_Parser.INT8_LIT - 64)) | (1 << (nim_Parser.INT16_LIT - 64)) | (1 << (nim_Parser.INT32_LIT - 64)) | (1 << (nim_Parser.INT64_LIT - 64)) | (1 << (nim_Parser.UINT_LIT - 64)) | (1 << (nim_Parser.UINT8_LIT - 64)) | (1 << (nim_Parser.UINT16_LIT - 64)) | (1 << (nim_Parser.UINT32_LIT - 64)) | (1 << (nim_Parser.UINT64_LIT - 64)) | (1 << (nim_Parser.FLOAT_LIT - 64)) | (1 << (nim_Parser.FLOAT32_LIT - 64)) | (1 << (nim_Parser.FLOAT64_LIT - 64)) | (1 << (nim_Parser.CHAR_LIT - 64)) | (1 << (nim_Parser.STR_LIT - 64)) | (1 << (nim_Parser.TRIPLESTR_LIT - 64)) | (1 << (nim_Parser.RSTR_LIT - 64)) | (1 << (nim_Parser.GENERALIZED_STR_LIT - 64)) | (1 << (nim_Parser.GENERALIZED_TRIPLESTR_LIT - 64)))) != 0)):
                        break

                self.state = 914
                self.ded()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcRoutineBodyListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(nim_Parser.OPEN_PAREN, 0)

        def procRoutineBody(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.ProcRoutineBodyContext)
            else:
                return self.getTypedRuleContext(nim_Parser.ProcRoutineBodyContext,i)


        def CLOSE_PAREN(self):
            return self.getToken(nim_Parser.CLOSE_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.COMMA)
            else:
                return self.getToken(nim_Parser.COMMA, i)

        def getRuleIndex(self):
            return nim_Parser.RULE_procRoutineBodyList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcRoutineBodyList" ):
                listener.enterProcRoutineBodyList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcRoutineBodyList" ):
                listener.exitProcRoutineBodyList(self)




    def procRoutineBodyList(self):

        localctx = nim_Parser.ProcRoutineBodyListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_procRoutineBodyList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 918
            self.match(nim_Parser.OPEN_PAREN)
            self.state = 919
            self.procRoutineBody()
            self.state = 924
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==nim_Parser.COMMA:
                self.state = 920
                self.match(nim_Parser.COMMA)
                self.state = 921
                self.procRoutineBody()
                self.state = 926
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 927
            self.match(nim_Parser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcRoutineContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def procRoutineHeader(self):
            return self.getTypedRuleContext(nim_Parser.ProcRoutineHeaderContext,0)


        def procRoutineBodyList(self):
            return self.getTypedRuleContext(nim_Parser.ProcRoutineBodyListContext,0)


        def procRoutineTail(self):
            return self.getTypedRuleContext(nim_Parser.ProcRoutineTailContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_procRoutine

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcRoutine" ):
                listener.enterProcRoutine(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcRoutine" ):
                listener.exitProcRoutine(self)




    def procRoutine(self):

        localctx = nim_Parser.ProcRoutineContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_procRoutine)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 929
            self.procRoutineHeader()
            self.state = 930
            self.procRoutineBodyList()
            self.state = 931
            self.procRoutineTail()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TemplateRoutineHeaderContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(nim_Parser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_templateRoutineHeader

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemplateRoutineHeader" ):
                listener.enterTemplateRoutineHeader(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemplateRoutineHeader" ):
                listener.exitTemplateRoutineHeader(self)




    def templateRoutineHeader(self):

        localctx = nim_Parser.TemplateRoutineHeaderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_templateRoutineHeader)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 933
            self.match(nim_Parser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TemplateRoutineBodyListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(nim_Parser.OPEN_PAREN, 0)

        def templateRoutineBody(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.TemplateRoutineBodyContext)
            else:
                return self.getTypedRuleContext(nim_Parser.TemplateRoutineBodyContext,i)


        def CLOSE_PAREN(self):
            return self.getToken(nim_Parser.CLOSE_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.COMMA)
            else:
                return self.getToken(nim_Parser.COMMA, i)

        def getRuleIndex(self):
            return nim_Parser.RULE_templateRoutineBodyList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemplateRoutineBodyList" ):
                listener.enterTemplateRoutineBodyList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemplateRoutineBodyList" ):
                listener.exitTemplateRoutineBodyList(self)




    def templateRoutineBodyList(self):

        localctx = nim_Parser.TemplateRoutineBodyListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_templateRoutineBodyList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 935
            self.match(nim_Parser.OPEN_PAREN)
            self.state = 936
            self.templateRoutineBody()
            self.state = 941
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==nim_Parser.COMMA:
                self.state = 937
                self.match(nim_Parser.COMMA)
                self.state = 938
                self.templateRoutineBody()
                self.state = 943
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 944
            self.match(nim_Parser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TemplateRoutineBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(nim_Parser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_templateRoutineBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemplateRoutineBody" ):
                listener.enterTemplateRoutineBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemplateRoutineBody" ):
                listener.exitTemplateRoutineBody(self)




    def templateRoutineBody(self):

        localctx = nim_Parser.TemplateRoutineBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_templateRoutineBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 946
            self.match(nim_Parser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TemplateRoutineTailContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUALS(self):
            return self.getToken(nim_Parser.EQUALS, 0)

        def anyStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.AnyStmtContext)
            else:
                return self.getTypedRuleContext(nim_Parser.AnyStmtContext,i)


        def pragma(self):
            return self.getTypedRuleContext(nim_Parser.PragmaContext,0)


        def ind(self):
            return self.getTypedRuleContext(nim_Parser.IndContext,0)


        def ded(self):
            return self.getTypedRuleContext(nim_Parser.DedContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_templateRoutineTail

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemplateRoutineTail" ):
                listener.enterTemplateRoutineTail(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemplateRoutineTail" ):
                listener.exitTemplateRoutineTail(self)




    def templateRoutineTail(self):

        localctx = nim_Parser.TemplateRoutineTailContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_templateRoutineTail)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 949
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==nim_Parser.OPEN_BRACE:
                self.state = 948
                self.pragma()


            self.state = 951
            self.match(nim_Parser.EQUALS)
            self.state = 961
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [nim_Parser.OPEN_PAREN, nim_Parser.CLOSE_PAREN, nim_Parser.OPEN_BRACK, nim_Parser.CLOSE_BRACK, nim_Parser.OBJECT, nim_Parser.TYPE, nim_Parser.DOLLAR_SIGN, nim_Parser.AT, nim_Parser.MINUS_OPERATOR, nim_Parser.VARIABLE, nim_Parser.LET, nim_Parser.CONST, nim_Parser.PROC, nim_Parser.RETURN, nim_Parser.CASE, nim_Parser.IF, nim_Parser.WHILE, nim_Parser.FOR, nim_Parser.CONTINUE, nim_Parser.BREAK, nim_Parser.TEMPLATE, nim_Parser.WHEN, nim_Parser.IMPORT, nim_Parser.FROM, nim_Parser.REF, nim_Parser.BLOCK, nim_Parser.MACRO, nim_Parser.NIL, nim_Parser.DISCARD, nim_Parser.SYM_HEADER, nim_Parser.IDENTIFIER, nim_Parser.INT_LIT, nim_Parser.INT8_LIT, nim_Parser.INT16_LIT, nim_Parser.INT32_LIT, nim_Parser.INT64_LIT, nim_Parser.UINT_LIT, nim_Parser.UINT8_LIT, nim_Parser.UINT16_LIT, nim_Parser.UINT32_LIT, nim_Parser.UINT64_LIT, nim_Parser.FLOAT_LIT, nim_Parser.FLOAT32_LIT, nim_Parser.FLOAT64_LIT, nim_Parser.CHAR_LIT, nim_Parser.STR_LIT, nim_Parser.TRIPLESTR_LIT, nim_Parser.RSTR_LIT, nim_Parser.GENERALIZED_STR_LIT, nim_Parser.GENERALIZED_TRIPLESTR_LIT]:
                self.state = 952
                self.anyStmt()
                pass
            elif token in [nim_Parser.INDENT]:
                self.state = 953
                self.ind()
                self.state = 955 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 954
                    self.anyStmt()
                    self.state = 957 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nim_Parser.OPEN_PAREN) | (1 << nim_Parser.CLOSE_PAREN) | (1 << nim_Parser.OPEN_BRACK) | (1 << nim_Parser.CLOSE_BRACK) | (1 << nim_Parser.OBJECT) | (1 << nim_Parser.TYPE) | (1 << nim_Parser.DOLLAR_SIGN) | (1 << nim_Parser.AT) | (1 << nim_Parser.MINUS_OPERATOR) | (1 << nim_Parser.VARIABLE) | (1 << nim_Parser.LET) | (1 << nim_Parser.CONST) | (1 << nim_Parser.PROC) | (1 << nim_Parser.RETURN) | (1 << nim_Parser.CASE) | (1 << nim_Parser.IF) | (1 << nim_Parser.WHILE) | (1 << nim_Parser.FOR) | (1 << nim_Parser.CONTINUE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (nim_Parser.BREAK - 64)) | (1 << (nim_Parser.TEMPLATE - 64)) | (1 << (nim_Parser.WHEN - 64)) | (1 << (nim_Parser.IMPORT - 64)) | (1 << (nim_Parser.FROM - 64)) | (1 << (nim_Parser.REF - 64)) | (1 << (nim_Parser.BLOCK - 64)) | (1 << (nim_Parser.MACRO - 64)) | (1 << (nim_Parser.NIL - 64)) | (1 << (nim_Parser.DISCARD - 64)) | (1 << (nim_Parser.SYM_HEADER - 64)) | (1 << (nim_Parser.IDENTIFIER - 64)) | (1 << (nim_Parser.INT_LIT - 64)) | (1 << (nim_Parser.INT8_LIT - 64)) | (1 << (nim_Parser.INT16_LIT - 64)) | (1 << (nim_Parser.INT32_LIT - 64)) | (1 << (nim_Parser.INT64_LIT - 64)) | (1 << (nim_Parser.UINT_LIT - 64)) | (1 << (nim_Parser.UINT8_LIT - 64)) | (1 << (nim_Parser.UINT16_LIT - 64)) | (1 << (nim_Parser.UINT32_LIT - 64)) | (1 << (nim_Parser.UINT64_LIT - 64)) | (1 << (nim_Parser.FLOAT_LIT - 64)) | (1 << (nim_Parser.FLOAT32_LIT - 64)) | (1 << (nim_Parser.FLOAT64_LIT - 64)) | (1 << (nim_Parser.CHAR_LIT - 64)) | (1 << (nim_Parser.STR_LIT - 64)) | (1 << (nim_Parser.TRIPLESTR_LIT - 64)) | (1 << (nim_Parser.RSTR_LIT - 64)) | (1 << (nim_Parser.GENERALIZED_STR_LIT - 64)) | (1 << (nim_Parser.GENERALIZED_TRIPLESTR_LIT - 64)))) != 0)):
                        break

                self.state = 959
                self.ded()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TemplateRoutineContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def templateRoutineHeader(self):
            return self.getTypedRuleContext(nim_Parser.TemplateRoutineHeaderContext,0)


        def templateRoutineBodyList(self):
            return self.getTypedRuleContext(nim_Parser.TemplateRoutineBodyListContext,0)


        def templateRoutineTail(self):
            return self.getTypedRuleContext(nim_Parser.TemplateRoutineTailContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_templateRoutine

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemplateRoutine" ):
                listener.enterTemplateRoutine(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemplateRoutine" ):
                listener.exitTemplateRoutine(self)




    def templateRoutine(self):

        localctx = nim_Parser.TemplateRoutineContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_templateRoutine)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 963
            self.templateRoutineHeader()
            self.state = 964
            self.templateRoutineBodyList()
            self.state = 965
            self.templateRoutineTail()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MacroRoutineHeaderContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(nim_Parser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_macroRoutineHeader

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacroRoutineHeader" ):
                listener.enterMacroRoutineHeader(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacroRoutineHeader" ):
                listener.exitMacroRoutineHeader(self)




    def macroRoutineHeader(self):

        localctx = nim_Parser.MacroRoutineHeaderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_macroRoutineHeader)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 967
            self.match(nim_Parser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MacroRoutineTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(nim_Parser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return nim_Parser.RULE_macroRoutineType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacroRoutineType" ):
                listener.enterMacroRoutineType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacroRoutineType" ):
                listener.exitMacroRoutineType(self)




    def macroRoutineType(self):

        localctx = nim_Parser.MacroRoutineTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_macroRoutineType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 969
            self.match(nim_Parser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MacroRoutineBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(nim_Parser.IDENTIFIER, 0)

        def COLON(self):
            return self.getToken(nim_Parser.COLON, 0)

        def macroRoutineType(self):
            return self.getTypedRuleContext(nim_Parser.MacroRoutineTypeContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_macroRoutineBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacroRoutineBody" ):
                listener.enterMacroRoutineBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacroRoutineBody" ):
                listener.exitMacroRoutineBody(self)




    def macroRoutineBody(self):

        localctx = nim_Parser.MacroRoutineBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_macroRoutineBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 971
            self.match(nim_Parser.IDENTIFIER)

            self.state = 972
            self.match(nim_Parser.COLON)
            self.state = 973
            self.macroRoutineType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MacroRoutineBodyListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(nim_Parser.OPEN_PAREN, 0)

        def macroRoutineBody(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.MacroRoutineBodyContext)
            else:
                return self.getTypedRuleContext(nim_Parser.MacroRoutineBodyContext,i)


        def CLOSE_PAREN(self):
            return self.getToken(nim_Parser.CLOSE_PAREN, 0)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.COLON)
            else:
                return self.getToken(nim_Parser.COLON, i)

        def SEMI_COLON(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.SEMI_COLON)
            else:
                return self.getToken(nim_Parser.SEMI_COLON, i)

        def getRuleIndex(self):
            return nim_Parser.RULE_macroRoutineBodyList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacroRoutineBodyList" ):
                listener.enterMacroRoutineBodyList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacroRoutineBodyList" ):
                listener.exitMacroRoutineBodyList(self)




    def macroRoutineBodyList(self):

        localctx = nim_Parser.MacroRoutineBodyListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_macroRoutineBodyList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 975
            self.match(nim_Parser.OPEN_PAREN)
            self.state = 976
            self.macroRoutineBody()
            self.state = 981
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==nim_Parser.SEMI_COLON or _la==nim_Parser.COLON:
                self.state = 977
                _la = self._input.LA(1)
                if not(_la==nim_Parser.SEMI_COLON or _la==nim_Parser.COLON):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 978
                self.macroRoutineBody()
                self.state = 983
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 984
            self.match(nim_Parser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MacroRoutineTailContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUALS(self):
            return self.getToken(nim_Parser.EQUALS, 0)

        def anyStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.AnyStmtContext)
            else:
                return self.getTypedRuleContext(nim_Parser.AnyStmtContext,i)


        def COLON(self):
            return self.getToken(nim_Parser.COLON, 0)

        def macroRoutineType(self):
            return self.getTypedRuleContext(nim_Parser.MacroRoutineTypeContext,0)


        def ind(self):
            return self.getTypedRuleContext(nim_Parser.IndContext,0)


        def ded(self):
            return self.getTypedRuleContext(nim_Parser.DedContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_macroRoutineTail

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacroRoutineTail" ):
                listener.enterMacroRoutineTail(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacroRoutineTail" ):
                listener.exitMacroRoutineTail(self)




    def macroRoutineTail(self):

        localctx = nim_Parser.MacroRoutineTailContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_macroRoutineTail)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 988
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==nim_Parser.COLON:
                self.state = 986
                self.match(nim_Parser.COLON)
                self.state = 987
                self.macroRoutineType()


            self.state = 990
            self.match(nim_Parser.EQUALS)
            self.state = 1000
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [nim_Parser.OPEN_PAREN, nim_Parser.CLOSE_PAREN, nim_Parser.OPEN_BRACK, nim_Parser.CLOSE_BRACK, nim_Parser.OBJECT, nim_Parser.TYPE, nim_Parser.DOLLAR_SIGN, nim_Parser.AT, nim_Parser.MINUS_OPERATOR, nim_Parser.VARIABLE, nim_Parser.LET, nim_Parser.CONST, nim_Parser.PROC, nim_Parser.RETURN, nim_Parser.CASE, nim_Parser.IF, nim_Parser.WHILE, nim_Parser.FOR, nim_Parser.CONTINUE, nim_Parser.BREAK, nim_Parser.TEMPLATE, nim_Parser.WHEN, nim_Parser.IMPORT, nim_Parser.FROM, nim_Parser.REF, nim_Parser.BLOCK, nim_Parser.MACRO, nim_Parser.NIL, nim_Parser.DISCARD, nim_Parser.SYM_HEADER, nim_Parser.IDENTIFIER, nim_Parser.INT_LIT, nim_Parser.INT8_LIT, nim_Parser.INT16_LIT, nim_Parser.INT32_LIT, nim_Parser.INT64_LIT, nim_Parser.UINT_LIT, nim_Parser.UINT8_LIT, nim_Parser.UINT16_LIT, nim_Parser.UINT32_LIT, nim_Parser.UINT64_LIT, nim_Parser.FLOAT_LIT, nim_Parser.FLOAT32_LIT, nim_Parser.FLOAT64_LIT, nim_Parser.CHAR_LIT, nim_Parser.STR_LIT, nim_Parser.TRIPLESTR_LIT, nim_Parser.RSTR_LIT, nim_Parser.GENERALIZED_STR_LIT, nim_Parser.GENERALIZED_TRIPLESTR_LIT]:
                self.state = 991
                self.anyStmt()
                pass
            elif token in [nim_Parser.INDENT]:
                self.state = 992
                self.ind()
                self.state = 994 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 993
                    self.anyStmt()
                    self.state = 996 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nim_Parser.OPEN_PAREN) | (1 << nim_Parser.CLOSE_PAREN) | (1 << nim_Parser.OPEN_BRACK) | (1 << nim_Parser.CLOSE_BRACK) | (1 << nim_Parser.OBJECT) | (1 << nim_Parser.TYPE) | (1 << nim_Parser.DOLLAR_SIGN) | (1 << nim_Parser.AT) | (1 << nim_Parser.MINUS_OPERATOR) | (1 << nim_Parser.VARIABLE) | (1 << nim_Parser.LET) | (1 << nim_Parser.CONST) | (1 << nim_Parser.PROC) | (1 << nim_Parser.RETURN) | (1 << nim_Parser.CASE) | (1 << nim_Parser.IF) | (1 << nim_Parser.WHILE) | (1 << nim_Parser.FOR) | (1 << nim_Parser.CONTINUE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (nim_Parser.BREAK - 64)) | (1 << (nim_Parser.TEMPLATE - 64)) | (1 << (nim_Parser.WHEN - 64)) | (1 << (nim_Parser.IMPORT - 64)) | (1 << (nim_Parser.FROM - 64)) | (1 << (nim_Parser.REF - 64)) | (1 << (nim_Parser.BLOCK - 64)) | (1 << (nim_Parser.MACRO - 64)) | (1 << (nim_Parser.NIL - 64)) | (1 << (nim_Parser.DISCARD - 64)) | (1 << (nim_Parser.SYM_HEADER - 64)) | (1 << (nim_Parser.IDENTIFIER - 64)) | (1 << (nim_Parser.INT_LIT - 64)) | (1 << (nim_Parser.INT8_LIT - 64)) | (1 << (nim_Parser.INT16_LIT - 64)) | (1 << (nim_Parser.INT32_LIT - 64)) | (1 << (nim_Parser.INT64_LIT - 64)) | (1 << (nim_Parser.UINT_LIT - 64)) | (1 << (nim_Parser.UINT8_LIT - 64)) | (1 << (nim_Parser.UINT16_LIT - 64)) | (1 << (nim_Parser.UINT32_LIT - 64)) | (1 << (nim_Parser.UINT64_LIT - 64)) | (1 << (nim_Parser.FLOAT_LIT - 64)) | (1 << (nim_Parser.FLOAT32_LIT - 64)) | (1 << (nim_Parser.FLOAT64_LIT - 64)) | (1 << (nim_Parser.CHAR_LIT - 64)) | (1 << (nim_Parser.STR_LIT - 64)) | (1 << (nim_Parser.TRIPLESTR_LIT - 64)) | (1 << (nim_Parser.RSTR_LIT - 64)) | (1 << (nim_Parser.GENERALIZED_STR_LIT - 64)) | (1 << (nim_Parser.GENERALIZED_TRIPLESTR_LIT - 64)))) != 0)):
                        break

                self.state = 998
                self.ded()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MacroRoutineContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def macroRoutineHeader(self):
            return self.getTypedRuleContext(nim_Parser.MacroRoutineHeaderContext,0)


        def macroRoutineBodyList(self):
            return self.getTypedRuleContext(nim_Parser.MacroRoutineBodyListContext,0)


        def macroRoutineTail(self):
            return self.getTypedRuleContext(nim_Parser.MacroRoutineTailContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_macroRoutine

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacroRoutine" ):
                listener.enterMacroRoutine(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacroRoutine" ):
                listener.exitMacroRoutine(self)




    def macroRoutine(self):

        localctx = nim_Parser.MacroRoutineContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_macroRoutine)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1002
            self.macroRoutineHeader()
            self.state = 1003
            self.macroRoutineBodyList()
            self.state = 1004
            self.macroRoutineTail()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeSectionBodyExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleExpr(self):
            return self.getTypedRuleContext(nim_Parser.SimpleExprContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_typeSectionBodyExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeSectionBodyExpr" ):
                listener.enterTypeSectionBodyExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeSectionBodyExpr" ):
                listener.exitTypeSectionBodyExpr(self)




    def typeSectionBodyExpr(self):

        localctx = nim_Parser.TypeSectionBodyExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_typeSectionBodyExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1006
            self.simpleExpr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeSectionBodyHeaderContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(nim_Parser.IDENTIFIER, 0)

        def EQUALS(self):
            return self.getToken(nim_Parser.EQUALS, 0)

        def arrayConstr(self):
            return self.getTypedRuleContext(nim_Parser.ArrayConstrContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_typeSectionBodyHeader

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeSectionBodyHeader" ):
                listener.enterTypeSectionBodyHeader(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeSectionBodyHeader" ):
                listener.exitTypeSectionBodyHeader(self)




    def typeSectionBodyHeader(self):

        localctx = nim_Parser.TypeSectionBodyHeaderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_typeSectionBodyHeader)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1008
            self.match(nim_Parser.IDENTIFIER)
            self.state = 1010
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==nim_Parser.OPEN_BRACK:
                self.state = 1009
                self.arrayConstr()


            self.state = 1012
            self.match(nim_Parser.EQUALS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeSectionBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeSectionBodyHeader(self):
            return self.getTypedRuleContext(nim_Parser.TypeSectionBodyHeaderContext,0)


        def typeSectionBodyExpr(self):
            return self.getTypedRuleContext(nim_Parser.TypeSectionBodyExprContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_typeSectionBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeSectionBody" ):
                listener.enterTypeSectionBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeSectionBody" ):
                listener.exitTypeSectionBody(self)




    def typeSectionBody(self):

        localctx = nim_Parser.TypeSectionBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_typeSectionBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1014
            self.typeSectionBodyHeader()
            self.state = 1015
            self.typeSectionBodyExpr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeSectionBodyListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ind(self):
            return self.getTypedRuleContext(nim_Parser.IndContext,0)


        def ded(self):
            return self.getTypedRuleContext(nim_Parser.DedContext,0)


        def typeSectionBody(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.TypeSectionBodyContext)
            else:
                return self.getTypedRuleContext(nim_Parser.TypeSectionBodyContext,i)


        def getRuleIndex(self):
            return nim_Parser.RULE_typeSectionBodyList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeSectionBodyList" ):
                listener.enterTypeSectionBodyList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeSectionBodyList" ):
                listener.exitTypeSectionBodyList(self)




    def typeSectionBodyList(self):

        localctx = nim_Parser.TypeSectionBodyListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_typeSectionBodyList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1017
            self.ind()
            self.state = 1019 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1018
                self.typeSectionBody()
                self.state = 1021 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==nim_Parser.IDENTIFIER):
                    break

            self.state = 1023
            self.ded()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeSectionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeSectionBodyList(self):
            return self.getTypedRuleContext(nim_Parser.TypeSectionBodyListContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_typeSection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeSection" ):
                listener.enterTypeSection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeSection" ):
                listener.exitTypeSection(self)




    def typeSection(self):

        localctx = nim_Parser.TypeSectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_typeSection)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1025
            self.typeSectionBodyList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableSectionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.VariableContext)
            else:
                return self.getTypedRuleContext(nim_Parser.VariableContext,i)


        def ind(self):
            return self.getTypedRuleContext(nim_Parser.IndContext,0)


        def ded(self):
            return self.getTypedRuleContext(nim_Parser.DedContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_variableSection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableSection" ):
                listener.enterVariableSection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableSection" ):
                listener.exitVariableSection(self)




    def variableSection(self):

        localctx = nim_Parser.VariableSectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_variableSection)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1036
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [nim_Parser.IDENTIFIER]:
                self.state = 1027
                self.variable()
                pass
            elif token in [nim_Parser.INDENT]:
                self.state = 1028
                self.ind()
                self.state = 1030 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1029
                    self.variable()
                    self.state = 1032 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==nim_Parser.IDENTIFIER):
                        break

                self.state = 1034
                self.ded()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantSectionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constant(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.ConstantContext)
            else:
                return self.getTypedRuleContext(nim_Parser.ConstantContext,i)


        def ind(self):
            return self.getTypedRuleContext(nim_Parser.IndContext,0)


        def ded(self):
            return self.getTypedRuleContext(nim_Parser.DedContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_constantSection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantSection" ):
                listener.enterConstantSection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantSection" ):
                listener.exitConstantSection(self)




    def constantSection(self):

        localctx = nim_Parser.ConstantSectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_constantSection)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1047
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [nim_Parser.IDENTIFIER]:
                self.state = 1038
                self.constant()
                pass
            elif token in [nim_Parser.INDENT]:
                self.state = 1039
                self.ind()
                self.state = 1041 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1040
                    self.constant()
                    self.state = 1043 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==nim_Parser.IDENTIFIER):
                        break

                self.state = 1045
                self.ded()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LetSectionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.IDENTIFIER)
            else:
                return self.getToken(nim_Parser.IDENTIFIER, i)

        def EQUALS(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.EQUALS)
            else:
                return self.getToken(nim_Parser.EQUALS, i)

        def simpleExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.SimpleExprContext)
            else:
                return self.getTypedRuleContext(nim_Parser.SimpleExprContext,i)


        def ind(self):
            return self.getTypedRuleContext(nim_Parser.IndContext,0)


        def ded(self):
            return self.getTypedRuleContext(nim_Parser.DedContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_letSection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLetSection" ):
                listener.enterLetSection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLetSection" ):
                listener.exitLetSection(self)




    def letSection(self):

        localctx = nim_Parser.LetSectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_letSection)
        self._la = 0 # Token type
        try:
            self.state = 1062
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [nim_Parser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1049
                self.match(nim_Parser.IDENTIFIER)
                self.state = 1050
                self.match(nim_Parser.EQUALS)
                self.state = 1051
                self.simpleExpr()
                pass
            elif token in [nim_Parser.INDENT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1052
                self.ind()
                self.state = 1056 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1053
                    self.match(nim_Parser.IDENTIFIER)
                    self.state = 1054
                    self.match(nim_Parser.EQUALS)
                    self.state = 1055
                    self.simpleExpr()
                    self.state = 1058 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==nim_Parser.IDENTIFIER):
                        break

                self.state = 1060
                self.ded()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(nim_Parser.IDENTIFIER, 0)

        def EQUALS(self):
            return self.getToken(nim_Parser.EQUALS, 0)

        def simpleExpr(self):
            return self.getTypedRuleContext(nim_Parser.SimpleExprContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_constant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant" ):
                listener.enterConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant" ):
                listener.exitConstant(self)




    def constant(self):

        localctx = nim_Parser.ConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_constant)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1064
            self.match(nim_Parser.IDENTIFIER)
            self.state = 1065
            self.match(nim_Parser.EQUALS)
            self.state = 1066
            self.simpleExpr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.IDENTIFIER)
            else:
                return self.getToken(nim_Parser.IDENTIFIER, i)

        def COLON(self):
            return self.getToken(nim_Parser.COLON, 0)

        def simpleExpr(self):
            return self.getTypedRuleContext(nim_Parser.SimpleExprContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.COMMA)
            else:
                return self.getToken(nim_Parser.COMMA, i)

        def EQUALS(self):
            return self.getToken(nim_Parser.EQUALS, 0)

        def anyExpr(self):
            return self.getTypedRuleContext(nim_Parser.AnyExprContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_variable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable" ):
                listener.enterVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable" ):
                listener.exitVariable(self)




    def variable(self):

        localctx = nim_Parser.VariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_variable)
        self._la = 0 # Token type
        try:
            self.state = 1102
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1068
                self.match(nim_Parser.IDENTIFIER)
                self.state = 1073
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==nim_Parser.COMMA:
                    self.state = 1069
                    self.match(nim_Parser.COMMA)
                    self.state = 1070
                    self.match(nim_Parser.IDENTIFIER)
                    self.state = 1075
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1076
                self.match(nim_Parser.COLON)
                self.state = 1077
                self.simpleExpr()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1078
                self.match(nim_Parser.IDENTIFIER)
                self.state = 1083
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==nim_Parser.COMMA:
                    self.state = 1079
                    self.match(nim_Parser.COMMA)
                    self.state = 1080
                    self.match(nim_Parser.IDENTIFIER)
                    self.state = 1085
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1086
                self.match(nim_Parser.EQUALS)
                self.state = 1087
                self.anyExpr()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1088
                self.match(nim_Parser.IDENTIFIER)
                self.state = 1093
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==nim_Parser.COMMA:
                    self.state = 1089
                    self.match(nim_Parser.COMMA)
                    self.state = 1090
                    self.match(nim_Parser.IDENTIFIER)
                    self.state = 1095
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1096
                self.match(nim_Parser.COLON)
                self.state = 1097
                self.simpleExpr()

                self.state = 1099
                self.match(nim_Parser.EQUALS)
                self.state = 1100
                self.anyExpr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_complexStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleStmt(self):
            return self.getTypedRuleContext(nim_Parser.SimpleStmtContext,0)


        def complexStmt(self):
            return self.getTypedRuleContext(nim_Parser.ComplexStmtContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_simple_complexStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_complexStmt" ):
                listener.enterSimple_complexStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_complexStmt" ):
                listener.exitSimple_complexStmt(self)




    def simple_complexStmt(self):

        localctx = nim_Parser.Simple_complexStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_simple_complexStmt)
        try:
            self.state = 1106
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [nim_Parser.RETURN, nim_Parser.CONTINUE, nim_Parser.BREAK, nim_Parser.IMPORT, nim_Parser.FROM, nim_Parser.DISCARD]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1104
                self.simpleStmt()
                pass
            elif token in [nim_Parser.TYPE, nim_Parser.VARIABLE, nim_Parser.LET, nim_Parser.CONST, nim_Parser.PROC, nim_Parser.CASE, nim_Parser.IF, nim_Parser.WHILE, nim_Parser.FOR, nim_Parser.TEMPLATE, nim_Parser.WHEN, nim_Parser.BLOCK, nim_Parser.MACRO]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1105
                self.complexStmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def importStmt(self):
            return self.getTypedRuleContext(nim_Parser.ImportStmtContext,0)


        def fromStmt(self):
            return self.getTypedRuleContext(nim_Parser.FromStmtContext,0)


        def discardStmt(self):
            return self.getTypedRuleContext(nim_Parser.DiscardStmtContext,0)


        def returnStmt(self):
            return self.getTypedRuleContext(nim_Parser.ReturnStmtContext,0)


        def breakStmt(self):
            return self.getTypedRuleContext(nim_Parser.BreakStmtContext,0)


        def continueStmt(self):
            return self.getTypedRuleContext(nim_Parser.ContinueStmtContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_simpleStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleStmt" ):
                listener.enterSimpleStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleStmt" ):
                listener.exitSimpleStmt(self)




    def simpleStmt(self):

        localctx = nim_Parser.SimpleStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_simpleStmt)
        try:
            self.state = 1114
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [nim_Parser.IMPORT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1108
                self.importStmt()
                pass
            elif token in [nim_Parser.FROM]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1109
                self.fromStmt()
                pass
            elif token in [nim_Parser.DISCARD]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1110
                self.discardStmt()
                pass
            elif token in [nim_Parser.RETURN]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1111
                self.returnStmt()
                pass
            elif token in [nim_Parser.BREAK]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1112
                self.breakStmt()
                pass
            elif token in [nim_Parser.CONTINUE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1113
                self.continueStmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComplexStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def forStmt(self):
            return self.getTypedRuleContext(nim_Parser.ForStmtContext,0)


        def ifStmt(self):
            return self.getTypedRuleContext(nim_Parser.IfStmtContext,0)


        def caseStmt(self):
            return self.getTypedRuleContext(nim_Parser.CaseStmtContext,0)


        def blockStmt(self):
            return self.getTypedRuleContext(nim_Parser.BlockStmtContext,0)


        def whileStmt(self):
            return self.getTypedRuleContext(nim_Parser.WhileStmtContext,0)


        def whenStmt(self):
            return self.getTypedRuleContext(nim_Parser.WhenStmtContext,0)


        def TEMPLATE(self):
            return self.getToken(nim_Parser.TEMPLATE, 0)

        def templateRoutine(self):
            return self.getTypedRuleContext(nim_Parser.TemplateRoutineContext,0)


        def PROC(self):
            return self.getToken(nim_Parser.PROC, 0)

        def procRoutine(self):
            return self.getTypedRuleContext(nim_Parser.ProcRoutineContext,0)


        def MACRO(self):
            return self.getToken(nim_Parser.MACRO, 0)

        def macroRoutine(self):
            return self.getTypedRuleContext(nim_Parser.MacroRoutineContext,0)


        def TYPE(self):
            return self.getToken(nim_Parser.TYPE, 0)

        def typeSection(self):
            return self.getTypedRuleContext(nim_Parser.TypeSectionContext,0)


        def CONST(self):
            return self.getToken(nim_Parser.CONST, 0)

        def constantSection(self):
            return self.getTypedRuleContext(nim_Parser.ConstantSectionContext,0)


        def VARIABLE(self):
            return self.getToken(nim_Parser.VARIABLE, 0)

        def variableSection(self):
            return self.getTypedRuleContext(nim_Parser.VariableSectionContext,0)


        def LET(self):
            return self.getToken(nim_Parser.LET, 0)

        def letSection(self):
            return self.getTypedRuleContext(nim_Parser.LetSectionContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_complexStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComplexStmt" ):
                listener.enterComplexStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComplexStmt" ):
                listener.exitComplexStmt(self)




    def complexStmt(self):

        localctx = nim_Parser.ComplexStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_complexStmt)
        try:
            self.state = 1136
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [nim_Parser.FOR]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1116
                self.forStmt()
                pass
            elif token in [nim_Parser.IF]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1117
                self.ifStmt()
                pass
            elif token in [nim_Parser.CASE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1118
                self.caseStmt()
                pass
            elif token in [nim_Parser.BLOCK]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1119
                self.blockStmt()
                pass
            elif token in [nim_Parser.WHILE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1120
                self.whileStmt()
                pass
            elif token in [nim_Parser.WHEN]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1121
                self.whenStmt()
                pass
            elif token in [nim_Parser.TEMPLATE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1122
                self.match(nim_Parser.TEMPLATE)
                self.state = 1123
                self.templateRoutine()
                pass
            elif token in [nim_Parser.PROC]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1124
                self.match(nim_Parser.PROC)
                self.state = 1125
                self.procRoutine()
                pass
            elif token in [nim_Parser.MACRO]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1126
                self.match(nim_Parser.MACRO)
                self.state = 1127
                self.macroRoutine()
                pass
            elif token in [nim_Parser.TYPE]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1128
                self.match(nim_Parser.TYPE)
                self.state = 1129
                self.typeSection()
                pass
            elif token in [nim_Parser.CONST]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1130
                self.match(nim_Parser.CONST)
                self.state = 1131
                self.constantSection()
                pass
            elif token in [nim_Parser.VARIABLE]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1132
                self.match(nim_Parser.VARIABLE)
                self.state = 1133
                self.variableSection()
                pass
            elif token in [nim_Parser.LET]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1134
                self.match(nim_Parser.LET)
                self.state = 1135
                self.letSection()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColonBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(nim_Parser.COLON, 0)

        def stmt(self):
            return self.getTypedRuleContext(nim_Parser.StmtContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_colonBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColonBody" ):
                listener.enterColonBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColonBody" ):
                listener.exitColonBody(self)




    def colonBody(self):

        localctx = nim_Parser.ColonBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_colonBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1138
            self.match(nim_Parser.COLON)
            self.state = 1139
            self.stmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identOrLiteral(self):
            return self.getTypedRuleContext(nim_Parser.IdentOrLiteralContext,0)


        def simpleExpr(self):
            return self.getTypedRuleContext(nim_Parser.SimpleExprContext,0)


        def EQUALS(self):
            return self.getToken(nim_Parser.EQUALS, 0)

        def anyExpr(self):
            return self.getTypedRuleContext(nim_Parser.AnyExprContext,0)


        def IDENTIFIER(self):
            return self.getToken(nim_Parser.IDENTIFIER, 0)

        def primaryParanthelessSuffix(self):
            return self.getTypedRuleContext(nim_Parser.PrimaryParanthelessSuffixContext,0)


        def primarySuffix(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.PrimarySuffixContext)
            else:
                return self.getTypedRuleContext(nim_Parser.PrimarySuffixContext,i)


        def getRuleIndex(self):
            return nim_Parser.RULE_exprStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprStmt" ):
                listener.enterExprStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprStmt" ):
                listener.exitExprStmt(self)




    def exprStmt(self):

        localctx = nim_Parser.ExprStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_exprStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1160
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,124,self._ctx)
            if la_ == 1:
                self.state = 1141
                self.simpleExpr()
                self.state = 1142
                self.match(nim_Parser.EQUALS)
                self.state = 1143
                self.anyExpr()
                pass

            elif la_ == 2:
                self.state = 1145
                self.identOrLiteral()
                self.state = 1147 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1146
                        self.primarySuffix()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1149 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,123,self._ctx)

                pass

            elif la_ == 3:
                self.state = 1151
                self.match(nim_Parser.IDENTIFIER)
                self.state = 1152
                self.primaryParanthelessSuffix()
                pass

            elif la_ == 4:
                self.state = 1153
                self.simpleExpr()
                self.state = 1154
                self.primaryParanthelessSuffix()
                pass

            elif la_ == 5:
                self.state = 1156
                self.simpleExpr()

                self.state = 1157
                self.match(nim_Parser.IDENTIFIER)
                self.state = 1158
                self.primaryParanthelessSuffix()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_complexStmt(self):
            return self.getTypedRuleContext(nim_Parser.Simple_complexStmtContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStmt" ):
                listener.enterStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStmt" ):
                listener.exitStmt(self)




    def stmt(self):

        localctx = nim_Parser.StmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1162
            self.simple_complexStmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModuleContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def anyStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nim_Parser.AnyStmtContext)
            else:
                return self.getTypedRuleContext(nim_Parser.AnyStmtContext,i)


        def EOF(self):
            return self.getToken(nim_Parser.EOF, 0)

        def SEMI_COLON(self, i:int=None):
            if i is None:
                return self.getTokens(nim_Parser.SEMI_COLON)
            else:
                return self.getToken(nim_Parser.SEMI_COLON, i)

        def getRuleIndex(self):
            return nim_Parser.RULE_module

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModule" ):
                listener.enterModule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModule" ):
                listener.exitModule(self)




    def module(self):

        localctx = nim_Parser.ModuleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_module)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1164
            self.anyStmt()
            self.state = 1171
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nim_Parser.SEMI_COLON) | (1 << nim_Parser.OPEN_PAREN) | (1 << nim_Parser.CLOSE_PAREN) | (1 << nim_Parser.OPEN_BRACK) | (1 << nim_Parser.CLOSE_BRACK) | (1 << nim_Parser.OBJECT) | (1 << nim_Parser.TYPE) | (1 << nim_Parser.DOLLAR_SIGN) | (1 << nim_Parser.AT) | (1 << nim_Parser.MINUS_OPERATOR) | (1 << nim_Parser.VARIABLE) | (1 << nim_Parser.LET) | (1 << nim_Parser.CONST) | (1 << nim_Parser.PROC) | (1 << nim_Parser.RETURN) | (1 << nim_Parser.CASE) | (1 << nim_Parser.IF) | (1 << nim_Parser.WHILE) | (1 << nim_Parser.FOR) | (1 << nim_Parser.CONTINUE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (nim_Parser.BREAK - 64)) | (1 << (nim_Parser.TEMPLATE - 64)) | (1 << (nim_Parser.WHEN - 64)) | (1 << (nim_Parser.IMPORT - 64)) | (1 << (nim_Parser.FROM - 64)) | (1 << (nim_Parser.REF - 64)) | (1 << (nim_Parser.BLOCK - 64)) | (1 << (nim_Parser.MACRO - 64)) | (1 << (nim_Parser.NIL - 64)) | (1 << (nim_Parser.DISCARD - 64)) | (1 << (nim_Parser.SYM_HEADER - 64)) | (1 << (nim_Parser.IDENTIFIER - 64)) | (1 << (nim_Parser.INT_LIT - 64)) | (1 << (nim_Parser.INT8_LIT - 64)) | (1 << (nim_Parser.INT16_LIT - 64)) | (1 << (nim_Parser.INT32_LIT - 64)) | (1 << (nim_Parser.INT64_LIT - 64)) | (1 << (nim_Parser.UINT_LIT - 64)) | (1 << (nim_Parser.UINT8_LIT - 64)) | (1 << (nim_Parser.UINT16_LIT - 64)) | (1 << (nim_Parser.UINT32_LIT - 64)) | (1 << (nim_Parser.UINT64_LIT - 64)) | (1 << (nim_Parser.FLOAT_LIT - 64)) | (1 << (nim_Parser.FLOAT32_LIT - 64)) | (1 << (nim_Parser.FLOAT64_LIT - 64)) | (1 << (nim_Parser.CHAR_LIT - 64)) | (1 << (nim_Parser.STR_LIT - 64)) | (1 << (nim_Parser.TRIPLESTR_LIT - 64)) | (1 << (nim_Parser.RSTR_LIT - 64)) | (1 << (nim_Parser.GENERALIZED_STR_LIT - 64)) | (1 << (nim_Parser.GENERALIZED_TRIPLESTR_LIT - 64)))) != 0):
                self.state = 1166
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nim_Parser.SEMI_COLON:
                    self.state = 1165
                    self.match(nim_Parser.SEMI_COLON)


                self.state = 1168
                self.anyStmt()
                self.state = 1173
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1174
            self.match(nim_Parser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StartContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def module(self):
            return self.getTypedRuleContext(nim_Parser.ModuleContext,0)


        def getRuleIndex(self):
            return nim_Parser.RULE_start

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStart" ):
                listener.enterStart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStart" ):
                listener.exitStart(self)




    def start(self):

        localctx = nim_Parser.StartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_start)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1176
            self.module()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





