IF  if
IDENTIFIER  name
OP5  ==
STR_LIT  ""
COLON  :
INDENT      
IMPORT  import
IDENTIFIER  x
DEDENT  
ELIF  elif
IDENTIFIER  name
OP5  ==
STR_LIT  "name"
COLON  :
INDENT      
IMPORT  import
IDENTIFIER  x
DEDENT  
ELSE  else
COLON  :
INDENT      
IMPORT  import
IDENTIFIER  name
DEDENT  
IF  if
IDENTIFIER  x4
COLON  :
IDENTIFIER  x4
EQUALS  =
IDENTIFIER  false
IF  if
NOT  not
IDENTIFIER  x4
COLON  :
INDENT      
IF  if
IDENTIFIER  y4
COLON  :
INDENT      
IDENTIFIER  y4
EQUALS  =
IDENTIFIER  false
DEDENT  
ELSE  else
COLON  :
INDENT      
IDENTIFIER  y4
EQUALS  =
IDENTIFIER  true
DEDENT  
DEDENT  
IF  if
NOT  not
IDENTIFIER  x4
COLON  :
INDENT      
IDENTIFIER  x4
EQUALS  =
IDENTIFIER  true
IDENTIFIER  y4
EQUALS  =
IDENTIFIER  true
DEDENT  
IF  if
IDENTIFIER  yes
OPEN_PAREN  (
STR_LIT  "Should I delete all your important files?"
CLOSE_PAREN  )
COLON  :
INDENT      
IMPORT  import
IDENTIFIER  x
DEDENT  
ELSE  else
COLON  :
INDENT      
IMPORT  import
IDENTIFIER  x
DEDENT  
IF  if
IDENTIFIER  i
OP8  +
IDENTIFIER  j
OP5  ==
INT_LIT  3145
COLON  :
INDENT      
IMPORT  import
IDENTIFIER  i
COMMA  ,
STR_LIT  ", "
COMMA  ,
IDENTIFIER  j
DEDENT  
IF  if
IDENTIFIER  n
OP5  <
INT_LIT  2
COLON  :
INDENT      
IDENTIFIER  result
EQUALS  =
IDENTIFIER  n
DEDENT  
ELSE  else
COLON  :
INDENT      
IDENTIFIER  result
EQUALS  =
IDENTIFIER  fibonacci
OPEN_PAREN  (
IDENTIFIER  n
OP8  -
INT_LIT  1
CLOSE_PAREN  )
OP8  +
OPEN_PAREN  (
IDENTIFIER  n
OP8  -
INT_LIT  2
CLOSE_PAREN  )
DOT  .
IDENTIFIER  fibonacci
DEDENT  
IF  if
IDENTIFIER  i
OP8  +
IDENTIFIER  j
OP5  ==
INT_LIT  3145
COLON  :
INDENT      
IDENTIFIER  echo
IDENTIFIER  i
COMMA  ,
STR_LIT  ", "
COMMA  ,
IDENTIFIER  j
DEDENT  
IF  if
IDENTIFIER  n
OP5  ==
INT_LIT  0
COLON  :
INDENT      
IDENTIFIER  bs
EQUALS  =
STR_LIT  "No more bottles"
DEDENT  
ELIF  elif
IDENTIFIER  n
OP5  ==
INT_LIT  1
COLON  :
INDENT      
IDENTIFIER  bs
EQUALS  =
STR_LIT  "1 bottle"
DEDENT  
ELSE  else
COLON  :
INDENT      
IDENTIFIER  bs
EQUALS  =
DOLLAR_SIGN  $
IDENTIFIER  n
OP7  &
STR_LIT  " bottles"
DEDENT  
VARIABLE  var
IDENTIFIER  r
EQUALS  =
IF  if
IDENTIFIER  inr
OP5  >=
INT_LIT  0
COLON  :
IDENTIFIER  inr
ELSE  else
COLON  :
IDENTIFIER  a
DOT  .
IDENTIFIER  high
IF  if
IDENTIFIER  n
OP5  <
INT_LIT  2
COLON  :
RETURN  return
IF  if
IDENTIFIER  a
OPEN_BRACK  [
IDENTIFIER  l
CLOSE_BRACK  ]
OP5  <
IDENTIFIER  p
COLON  :
INDENT      
IDENTIFIER  inc
IDENTIFIER  l
DEDENT  
IF  if
IDENTIFIER  a
OPEN_BRACK  [
IDENTIFIER  r
CLOSE_BRACK  ]
OP5  >
IDENTIFIER  p
COLON  :
INDENT      
IDENTIFIER  dec
IDENTIFIER  r
DEDENT  
IF  if
IDENTIFIER  l
OP5  <=
IDENTIFIER  r
COLON  :
INDENT      
IDENTIFIER  swap
IDENTIFIER  a
OPEN_BRACK  [
IDENTIFIER  l
CLOSE_BRACK  ]
COMMA  ,
IDENTIFIER  a
OPEN_BRACK  [
IDENTIFIER  r
CLOSE_BRACK  ]
IDENTIFIER  inc
IDENTIFIER  l
IDENTIFIER  dec
IDENTIFIER  r
DEDENT  
VARIABLE  var
IDENTIFIER  k
EQUALS  =
IF  if
IDENTIFIER  decode
COLON  :
INT_LIT  26
OP8  -
IDENTIFIER  k
ELSE  else
COLON  :
IDENTIFIER  k
IF  if
IDENTIFIER  ord
OPEN_PAREN  (
IDENTIFIER  i
CLOSE_PAREN  )
OP5  >=
INT_LIT  65
OP4  and
IDENTIFIER  ord
OPEN_PAREN  (
IDENTIFIER  i
CLOSE_PAREN  )
OP5  <=
INT_LIT  90
COLON  :
INDENT      
IDENTIFIER  result
DOT  .
IDENTIFIER  add
OPEN_PAREN  (
IDENTIFIER  chr
OPEN_PAREN  (
OPEN_PAREN  (
IDENTIFIER  ord
OPEN_PAREN  (
IDENTIFIER  i
CLOSE_PAREN  )
OP8  -
INT_LIT  65
OP8  +
IDENTIFIER  k
CLOSE_PAREN  )
OP9  mod
INT_LIT  26
OP8  +
INT_LIT  65
CLOSE_PAREN  )
CLOSE_PAREN  )
DEDENT  
IF  if
IDENTIFIER  b
OP5  <
INT_LIT  0
COLON  :
RETURN  return
IDENTIFIER  false
IF  if
IDENTIFIER  balanced
OPEN_PAREN  (
IDENTIFIER  s
CLOSE_PAREN  )
COLON  :
STR_LIT  "balanced"
ELSE  else
COLON  :
STR_LIT  "not balanced"
IF  if
IDENTIFIER  n
DOT  .
IDENTIFIER  isLeaf
COLON  :
IDENTIFIER  result
INT_LIT  1
EQUALS  =
DOLLAR_SIGN  $
IDENTIFIER  n
DOT  .
IDENTIFIER  data
ELSE  else
COLON  :
INDENT      
IF  if
IDENTIFIER  i
OP5  >
INT_LIT  0
COLON  :
IDENTIFIER  result
DOT  .
IDENTIFIER  add
STR_LIT  ", "
INDENT      
IMPORT  import
IDENTIFIER  p
DEDENT  
DEDENT  
IF  if
IDENTIFIER  n
DOT  .
IDENTIFIER  isLeaf
COLON  :
IMPORT  import
IDENTIFIER  p
ELSE  else
COLON  :
INDENT      
IMPORT  import
IDENTIFIER  p
DEDENT  
IF  if
IDENTIFIER  mmlen
OP5  >
INT_LIT  0
COLON  :
INDENT      
IMPORT  import
IDENTIFIER  p
DEDENT  
IF  if
IDENTIFIER  guess
OP5  <
IDENTIFIER  answer
COLON  :
INDENT      
IMPORT  import
IDENTIFIER  p
DEDENT  
ELIF  elif
IDENTIFIER  guess
OP5  >
IDENTIFIER  answer
COLON  :
INDENT      
IMPORT  import
IDENTIFIER  p
DEDENT  
ELSE  else
COLON  :
INDENT      
IMPORT  import
IDENTIFIER  p