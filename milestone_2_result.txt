PROC  proc
IDENTIFIER  quickSort
OPEN_BRACK  [
IDENTIFIER  T
CLOSE_BRACK  ]
OPEN_PAREN  (
IDENTIFIER  a
COLON  :
VARIABLE  var
IDENTIFIER  openarray
OPEN_BRACK  [
IDENTIFIER  T
CLOSE_BRACK  ]
COMMA  ,
IDENTIFIER  inl
EQUALS  =
INT_LIT  0
COMMA  ,
IDENTIFIER  inr
EQUALS  =
OP8  -
INT_LIT  1
CLOSE_PAREN  )
EQUALS  =
INDENT      
LET  let
IDENTIFIER  n
EQUALS  =
IDENTIFIER  r
OP8  -
IDENTIFIER  l
OP8  +
INT_LIT  1
IF  if
IDENTIFIER  n
OP5  <
INT_LIT  2
COLON  :
RETURN  return
LET  let
IDENTIFIER  p
EQUALS  =
IDENTIFIER  a
OPEN_BRACK  [
IDENTIFIER  l
OP8  +
INT_LIT  3
OP9  *
IDENTIFIER  n
OP9  div
INT_LIT  4
CLOSE_BRACK  ]
IF  if
IDENTIFIER  a
OPEN_BRACK  [
IDENTIFIER  l
CLOSE_BRACK  ]
OP5  <
IDENTIFIER  p
COLON  :
INDENT      
IDENTIFIER  inc
OPEN_PAREN  (
IDENTIFIER  l
CLOSE_PAREN  )
CONTINUE  continue
DEDENT  
IF  if
IDENTIFIER  a
OPEN_BRACK  [
IDENTIFIER  r
CLOSE_BRACK  ]
OP5  >
IDENTIFIER  p
COLON  :
INDENT      
IDENTIFIER  dec
OPEN_PAREN  (
IDENTIFIER  r
CLOSE_PAREN  )
CONTINUE  continue
DEDENT  
IF  if
IDENTIFIER  l
OP5  <=
IDENTIFIER  r
COLON  :
INDENT      
IDENTIFIER  swap
OPEN_PAREN  (
IDENTIFIER  a
OPEN_BRACK  [
IDENTIFIER  l
CLOSE_BRACK  ]
COMMA  ,
IDENTIFIER  a
OPEN_BRACK  [
IDENTIFIER  r
CLOSE_BRACK  ]
CLOSE_PAREN  )
IDENTIFIER  inc
OPEN_PAREN  (
IDENTIFIER  l
CLOSE_PAREN  )
IDENTIFIER  dec
OPEN_PAREN  (
IDENTIFIER  r
CLOSE_PAREN  )
DEDENT  
IDENTIFIER  quickSort
OPEN_PAREN  (
IDENTIFIER  a
COMMA  ,
IDENTIFIER  inl
COMMA  ,
IDENTIFIER  r
CLOSE_PAREN  )
IDENTIFIER  quickSort
OPEN_PAREN  (
IDENTIFIER  a
COMMA  ,
IDENTIFIER  l
COMMA  ,
IDENTIFIER  inr
CLOSE_PAREN  )
DEDENT  
PROC  proc
IDENTIFIER  GetBottleNumber
OPEN_PAREN  (
IDENTIFIER  n
COLON  :
IDENTIFIER  int
CLOSE_PAREN  )
COLON  :
IDENTIFIER  string
EQUALS  =
INDENT      
IF  if
IDENTIFIER  n
OP5  ==
INT_LIT  0
COLON  :
INDENT      
IDENTIFIER  bs
EQUALS  =
STR_LIT  "No more bottles"
DEDENT  
ELIF  elif
IDENTIFIER  n
OP5  ==
INT_LIT  1
COLON  :
INDENT      
IDENTIFIER  bs
EQUALS  =
STR_LIT  "1 bottle"
DEDENT  
ELSE  else
COLON  :
INDENT      
IDENTIFIER  bs
EQUALS  =
DOLLAR_SIGN  $
IDENTIFIER  n
OP7  &
STR_LIT  " bottles"
DEDENT  
RETURN  return
IDENTIFIER  bs
OP7  &
STR_LIT  " of beer"
DEDENT  
PROC  proc
IDENTIFIER  fibonacci
OPEN_PAREN  (
IDENTIFIER  n
COLON  :
IDENTIFIER  int
CLOSE_PAREN  )
COLON  :
IDENTIFIER  int
EQUALS  =
INDENT      
IF  if
IDENTIFIER  n
OP5  <
INT_LIT  2
COLON  :
INDENT      
IDENTIFIER  result
EQUALS  =
IDENTIFIER  n
DEDENT  
ELSE  else
COLON  :
INDENT      
IDENTIFIER  result
EQUALS  =
IDENTIFIER  fibonacci
OPEN_PAREN  (
IDENTIFIER  n
OP8  -
INT_LIT  1
CLOSE_PAREN  )
OP8  +
OPEN_PAREN  (
IDENTIFIER  n
OP8  -
INT_LIT  2
CLOSE_PAREN  )
DOT  .
IDENTIFIER  fibonacci
DEDENT  
DEDENT  
PROC  proc
IDENTIFIER  echoItem
OPEN_PAREN  (
IDENTIFIER  x
COLON  :
IDENTIFIER  string
CLOSE_PAREN  )
EQUALS  =
IMPORT  import
IDENTIFIER  x
PROC  proc
IDENTIFIER  forEach
OPEN_PAREN  (
IDENTIFIER  action
COLON  :
PROC  proc
OPEN_PAREN  (
IDENTIFIER  x
COLON  :
IDENTIFIER  string
CLOSE_PAREN  )
CLOSE_PAREN  )
EQUALS  =
INDENT      
FOR  for
IDENTIFIER  d
IN  in
IDENTIFIER  items
OPEN_PAREN  (
IDENTIFIER  data
CLOSE_PAREN  )
COLON  :
INDENT      
IDENTIFIER  action
OPEN_PAREN  (
IDENTIFIER  d
CLOSE_PAREN  )
DEDENT  
DEDENT  
PROC  proc
IDENTIFIER  yes
OPEN_PAREN  (
IDENTIFIER  question
COLON  :
IDENTIFIER  string
CLOSE_PAREN  )
COLON  :
IDENTIFIER  bool
EQUALS  =
INDENT      
IDENTIFIER  echo
OPEN_PAREN  (
IDENTIFIER  question
COMMA  ,
STR_LIT  " (y/n)"
CLOSE_PAREN  )
CASE  case
IDENTIFIER  readline
OF  of
STR_LIT  "y"
COMMA  ,
STR_LIT  "Y"
COMMA  ,
STR_LIT  "yes"
COMMA  ,
STR_LIT  "Yes"
COLON  :
RETURN  return
IDENTIFIER  true
OF  of
STR_LIT  "n"
COMMA  ,
STR_LIT  "N"
COMMA  ,
STR_LIT  "no"
COMMA  ,
STR_LIT  "No"
COLON  :
RETURN  return
IDENTIFIER  false
ELSE  else
COLON  :
IDENTIFIER  echo
OPEN_PAREN  (
STR_LIT  "Please be clear: yes or no"
CLOSE_PAREN  )