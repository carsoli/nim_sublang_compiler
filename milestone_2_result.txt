VARIABLE  var
IDENTIFIER  x
COMMA  ,
IDENTIFIER  y
COMMA  ,
IDENTIFIER  z
SEMI_COLON  ;
IDENTIFIER  int
IDENTIFIER  x
EQUALS  =
INT_LIT  10
IDENTIFIER  y
EQUALS  =
INT_LIT  25
IDENTIFIER  z
EQUALS  =
IDENTIFIER  x
OP8  +
IDENTIFIER  y
IDENTIFIER  echo
OPEN_PAREN  (
STR_LIT  "sum of "
COMMA  ,
IDENTIFIER  x
COMMA  ,
STR_LIT  " and "
COMMA  ,
IDENTIFIER  y
COMMA  ,
STR_LIT  " is "
COMMA  ,
IDENTIFIER  z
CLOSE_PAREN  )
VARIABLE  var
INDENT      
IDENTIFIER  j
COMMA  ,
IDENTIFIER  k
COLON  :
IDENTIFIER  int
IDENTIFIER  a
COMMA  ,
IDENTIFIER  b
COMMA  ,
IDENTIFIER  c
COLON  :
IDENTIFIER  string
DEDENT  
IDENTIFIER  j
EQUALS  =
INT_LIT  60
IDENTIFIER  k
EQUALS  =
INT_LIT  5
OP8  +
IDENTIFIER  j
SEMI_COLON  ;
IDENTIFIER  a
EQUALS  =
STR_LIT  " hello world "
IDENTIFIER  b
EQUALS  =
STR_LIT  "Bye world"
IDENTIFIER  c
EQUALS  =
STR_LIT  "Welcome"
IDENTIFIER  echo
OPEN_PAREN  (
IDENTIFIER  j
COMMA  ,
STR_LIT  " : "
COMMA  ,
IDENTIFIER  k
CLOSE_PAREN  )
IDENTIFIER  echo
OPEN_PAREN  (
IDENTIFIER  a
COMMA  ,
STR_LIT  " : "
COMMA  ,
IDENTIFIER  b
COMMA  ,
STR_LIT  " : "
COMMA  ,
IDENTIFIER  c
CLOSE_PAREN  )
CONST  const
INDENT      
IDENTIFIER  x1
EQUALS  =
INT_LIT  1
IDENTIFIER  y1
EQUALS  =
INT_LIT  2
IDENTIFIER  z1
EQUALS  =
IDENTIFIER  y1
OP8  +
INT_LIT  5
DEDENT  
IDENTIFIER  echo
OPEN_PAREN  (
IDENTIFIER  x1
COMMA  ,
STR_LIT  " : "
COMMA  ,
IDENTIFIER  y1
COMMA  ,
STR_LIT  " : "
COMMA  ,
IDENTIFIER  z1
CLOSE_PAREN  )
LET  let
IDENTIFIER  x2
EQUALS  =
STR_LIT  "abc"
IDENTIFIER  echo
OPEN_PAREN  (
IDENTIFIER  x2
CLOSE_PAREN  )
VARIABLE  var
IDENTIFIER  name
EQUALS  =
STR_LIT  ""
IF  if
IDENTIFIER  name
OP5  ==
STR_LIT  ""
COLON  :
INDENT      
IDENTIFIER  echo
STR_LIT  "Poor soul, you lost your name?"
DEDENT  
ELIF  elif
IDENTIFIER  name
OP5  ==
STR_LIT  "name"
COLON  :
INDENT      
IDENTIFIER  echo
STR_LIT  "Very funny, your name is name."
DEDENT  
ELSE  else
COLON  :
ERROR_INDENT    
IDENTIFIER  echo
STR_LIT  "Hi, "
COMMA  ,
IDENTIFIER  name
COMMA  ,
STR_LIT  "!"
IDENTIFIER  name
EQUALS  =
STR_LIT  "potato"
CASE  case
IDENTIFIER  name
OF  of
STR_LIT  ""
COLON  :
INDENT      
IDENTIFIER  echo
STR_LIT  "Poor soul, you lost your name?"
DEDENT  
OF  of
STR_LIT  "name"
COLON  :
INDENT      
IDENTIFIER  echo
STR_LIT  "Very funny, your name is name."
DEDENT  
OF  of
STR_LIT  "Dave"
COMMA  ,
STR_LIT  "Frank"
COLON  :
INDENT      
IDENTIFIER  echo
STR_LIT  "Cool name!"
DEDENT  
ELSE  else
COLON  :
INDENT      
IDENTIFIER  echo
STR_LIT  "Hi, "
COMMA  ,
IDENTIFIER  name
COMMA  ,
STR_LIT  "!"
DEDENT  
VARIABLE  var
IDENTIFIER  accm
EQUALS  =
STR_LIT  ""
FOR  for
IDENTIFIER  letter
IN  in
CHAR_LIT  'a'
OP6  ..
CHAR_LIT  'z'
COLON  :
INDENT      
IDENTIFIER  accm
DOT  .
IDENTIFIER  add
OPEN_PAREN  (
IDENTIFIER  letter
CLOSE_PAREN  )
DEDENT  
IDENTIFIER  echo
OPEN_PAREN  (
IDENTIFIER  accm
CLOSE_PAREN  )
VARIABLE  var
IDENTIFIER  x3
EQUALS  =
INT_LIT  1
WHILE  while
IDENTIFIER  x3
OP5  <=
INT_LIT  5
COLON  :
INDENT      
IDENTIFIER  echo
STR_LIT  "Counting : "
COMMA  ,
IDENTIFIER  x3
IDENTIFIER  x3
EQUALS  =
IDENTIFIER  x3
OP8  +
INT_LIT  1
DEDENT  
FOR  for
IDENTIFIER  i
IN  in
INT_LIT  1
OP6  ..
INT_LIT  5
COLON  :
INDENT      
IDENTIFIER  echo
STR_LIT  "i is "
COMMA  ,
IDENTIFIER  i
DEDENT  
VARIABLE  var
IDENTIFIER  s
EQUALS  =
STR_LIT  "some string"
FOR  for
IDENTIFIER  i
IN  in
INT_LIT  0
OP6  ..<
IDENTIFIER  s
DOT  .
IDENTIFIER  len
COLON  :
INDENT      
IDENTIFIER  echo
STR_LIT  "char in s is "
COMMA  ,
IDENTIFIER  s
OPEN_BRACK  [
IDENTIFIER  i
CLOSE_BRACK  ]
DEDENT  
WHILE  while
IDENTIFIER  true
COLON  :
INDENT      
IDENTIFIER  echo
STR_LIT  "looping"
BREAK  break
DEDENT  
CONST  const
IDENTIFIER  system
EQUALS  =
STR_LIT  "linux"
WHEN  when
IDENTIFIER  system
OP5  ==
STR_LIT  "windows"
COLON  :
INDENT      
IDENTIFIER  echo
STR_LIT  "running on Windows!"
DEDENT  
ELIF  elif
IDENTIFIER  system
OP5  ==
STR_LIT  "linux"
COLON  :
INDENT      
IDENTIFIER  echo
STR_LIT  "running on Linux!"
DEDENT  
ELIF  elif
IDENTIFIER  system
OP5  ==
STR_LIT  "macosx"
COLON  :
INDENT      
IDENTIFIER  echo
STR_LIT  "running on Mac OS X!"
DEDENT  
ELSE  else
COLON  :
INDENT      
IDENTIFIER  echo
STR_LIT  "unknown operating system"
DEDENT  
VARIABLE  var
IDENTIFIER  x4
EQUALS  =
IDENTIFIER  true
VARIABLE  var
IDENTIFIER  y4
EQUALS  =
IDENTIFIER  true
IF  if
IDENTIFIER  x4
COLON  :
IDENTIFIER  x4
EQUALS  =
IDENTIFIER  false
IF  if
NOT  not
IDENTIFIER  x4
COLON  :
INDENT      
IF  if
IDENTIFIER  y4
COLON  :
INDENT      
IDENTIFIER  y4
EQUALS  =
IDENTIFIER  false
DEDENT  
ELSE  else
COLON  :
INDENT      
IDENTIFIER  y4
EQUALS  =
IDENTIFIER  true
DEDENT  
DEDENT  
IDENTIFIER  echo
IDENTIFIER  y4
IF  if
NOT  not
IDENTIFIER  x4
COLON  :
INDENT      
IDENTIFIER  x4
EQUALS  =
IDENTIFIER  true
IDENTIFIER  y4
EQUALS  =
IDENTIFIER  true
DEDENT  
IDENTIFIER  echo
STR_LIT  "x4 is "
COMMA  ,
IDENTIFIER  x4
COMMA  ,
STR_LIT  " y4 is "
COMMA  ,
IDENTIFIER  y4
PROC  proc
IDENTIFIER  yes
OPEN_PAREN  (
IDENTIFIER  question
COLON  :
IDENTIFIER  string
CLOSE_PAREN  )
COLON  :
IDENTIFIER  bool
EQUALS  =
INDENT      
IDENTIFIER  echo
IDENTIFIER  question
COMMA  ,
STR_LIT  " (y/n)"
VARIABLE  var
IDENTIFIER  readline
EQUALS  =
STR_LIT  "n"
WHILE  while
IDENTIFIER  true
COLON  :
INDENT      
CASE  case
IDENTIFIER  readline
OF  of
STR_LIT  "y"
COMMA  ,
STR_LIT  "Y"
COMMA  ,
STR_LIT  "yes"
COMMA  ,
STR_LIT  "Yes"
COLON  :
RETURN  return
IDENTIFIER  true
OF  of
STR_LIT  "n"
COMMA  ,
STR_LIT  "N"
COMMA  ,
STR_LIT  "no"
COMMA  ,
STR_LIT  "No"
COLON  :
RETURN  return
IDENTIFIER  false
ELSE  else
COLON  :
IDENTIFIER  echo
STR_LIT  "Please be clear: yes or no"
DEDENT  
DEDENT  
IF  if
IDENTIFIER  yes
OPEN_PAREN  (
STR_LIT  "Should I delete all your important files?"
CLOSE_PAREN  )
COLON  :
INDENT      
IDENTIFIER  echo
STR_LIT  "I'm sorry Dave, I'm afraid I can't do that."
DEDENT  
ELSE  else
COLON  :
INDENT      
IDENTIFIER  echo
STR_LIT  "I think you know what the problem is just as well as I do."
DEDENT  
LET  let
INDENT      
IDENTIFIER  x5
EQUALS  =
INT_LIT  0
IDENTIFIER  y5
EQUALS  =
INT8_LIT  0'i8
IDENTIFIER  z5
EQUALS  =
INT64_LIT  0'i64
IDENTIFIER  u5
EQUALS  =
UINT_LIT  0'u
DEDENT  
IDENTIFIER  echo
STR_LIT  "x5 is "
COMMA  ,
IDENTIFIER  x5
COMMA  ,
STR_LIT  " y5 is "
COMMA  ,
IDENTIFIER  y5
COMMA  ,
STR_LIT  " z5 is "
COMMA  ,
IDENTIFIER  z5
COMMA  ,
STR_LIT  " u5 is "
COMMA  ,
IDENTIFIER  u5
BLOCK  block
IDENTIFIER  outer
COLON  :
INDENT      
FOR  for
IDENTIFIER  i
IN  in
INT_LIT  0
OP6  ..
INT_LIT  2000
COLON  :
INDENT      
FOR  for
IDENTIFIER  j
IN  in
INT_LIT  0
OP6  ..
INT_LIT  2000
COLON  :
INDENT      
IF  if
IDENTIFIER  i
OP8  +
IDENTIFIER  j
OP5  ==
INT_LIT  3145
COLON  :
INDENT      
IDENTIFIER  echo
IDENTIFIER  i
COMMA  ,
STR_LIT  ", "
COMMA  ,
IDENTIFIER  j
BREAK  break
IDENTIFIER  outer
DEDENT  
DEDENT  
DEDENT  
DEDENT  
PROC  proc
IDENTIFIER  fibonacci
OPEN_PAREN  (
IDENTIFIER  n
COLON  :
IDENTIFIER  int
CLOSE_PAREN  )
COLON  :
IDENTIFIER  int
EQUALS  =
INDENT      
IF  if
IDENTIFIER  n
OP5  <
INT_LIT  2
COLON  :
INDENT      
IDENTIFIER  result
EQUALS  =
IDENTIFIER  n
DEDENT  
ELSE  else
COLON  :
INDENT      
IDENTIFIER  result
EQUALS  =
IDENTIFIER  fibonacci
OPEN_PAREN  (
IDENTIFIER  n
OP8  -
INT_LIT  1
CLOSE_PAREN  )
OP8  +
OPEN_PAREN  (
IDENTIFIER  n
OP8  -
INT_LIT  2
CLOSE_PAREN  )
DOT  .
IDENTIFIER  fibonacci
DEDENT  
DEDENT  
IDENTIFIER  echo
IDENTIFIER  fibonacci
OPEN_PAREN  (
INT_LIT  10
CLOSE_PAREN  )
TYPE  type
INDENT      
IDENTIFIER  IntArray
EQUALS  =
IDENTIFIER  array
OPEN_BRACK  [
INT_LIT  0
OP6  ..
INT_LIT  5
COMMA  ,
IDENTIFIER  int
CLOSE_BRACK  ]
IDENTIFIER  QuickArray
EQUALS  =
IDENTIFIER  array
OPEN_BRACK  [
INT_LIT  6
COMMA  ,
IDENTIFIER  int
CLOSE_BRACK  ]
DEDENT  
VARIABLE  var
INDENT      
IDENTIFIER  x6
COLON  :
IDENTIFIER  IntArray
IDENTIFIER  y6
COLON  :
IDENTIFIER  QuickArray
DEDENT  
IDENTIFIER  x6
EQUALS  =
OPEN_BRACK  [
INT_LIT  1
COMMA  ,
INT_LIT  2
COMMA  ,
INT_LIT  3
COMMA  ,
INT_LIT  4
COMMA  ,
INT_LIT  5
COMMA  ,
INT_LIT  6
CLOSE_BRACK  ]
IDENTIFIER  y6
EQUALS  =
IDENTIFIER  x6
FOR  for
IDENTIFIER  i
IN  in
INT_LIT  0
OP6  ..
INT_LIT  5
COLON  :
INDENT      
IDENTIFIER  echo
IDENTIFIER  x6
OPEN_BRACK  [
IDENTIFIER  i
CLOSE_BRACK  ]
COMMA  ,
IDENTIFIER  y6
OPEN_BRACK  [
IDENTIFIER  i
CLOSE_BRACK  ]
DEDENT  
FOR  for
IDENTIFIER  value
IN  in
OP2  @
OPEN_BRACK  [
INT_LIT  3
COMMA  ,
INT_LIT  4
COMMA  ,
INT_LIT  5
CLOSE_BRACK  ]
COLON  :
INDENT      
IDENTIFIER  echo
IDENTIFIER  value
DEDENT  
FOR  for
IDENTIFIER  i
COMMA  ,
IDENTIFIER  value
IN  in
OP2  @
OPEN_BRACK  [
INT_LIT  3
COMMA  ,
INT_LIT  4
COMMA  ,
INT_LIT  5
CLOSE_BRACK  ]
COLON  :
INDENT      
IDENTIFIER  echo
STR_LIT  "index: "
COMMA  ,
DOLLAR_SIGN  $
IDENTIFIER  i
COMMA  ,
STR_LIT  ", value:"
COMMA  ,
DOLLAR_SIGN  $
IDENTIFIER  value
DEDENT  
PROC  proc
IDENTIFIER  echoItem
OPEN_PAREN  (
IDENTIFIER  x
COLON  :
IDENTIFIER  string
CLOSE_PAREN  )
EQUALS  =
IDENTIFIER  echo
IDENTIFIER  x
PROC  proc
IDENTIFIER  forEach
OPEN_PAREN  (
IDENTIFIER  action
COLON  :
PROC  proc
OPEN_PAREN  (
IDENTIFIER  x
COLON  :
IDENTIFIER  string
CLOSE_PAREN  )
CLOSE_PAREN  )
EQUALS  =
INDENT      
CONST  const
INDENT      
IDENTIFIER  data
EQUALS  =
OPEN_BRACK  [
STR_LIT  "hi"
COMMA  ,
STR_LIT  "bye"
COMMA  ,
STR_LIT  "later"
COMMA  ,
STR_LIT  "not today"
COMMA  ,
STR_LIT  "leave[]"
CLOSE_BRACK  ]
DEDENT  
FOR  for
IDENTIFIER  d
IN  in
IDENTIFIER  items
OPEN_PAREN  (
IDENTIFIER  data
CLOSE_PAREN  )
COLON  :
INDENT      
IDENTIFIER  action
OPEN_PAREN  (
IDENTIFIER  d
CLOSE_PAREN  )
DEDENT  
DEDENT  
IDENTIFIER  forEach
OPEN_PAREN  (
IDENTIFIER  echoItem
CLOSE_PAREN  )