IDENTIFIER  echo
STR_LIT  "Poor soul, you lost your name?"
IDENTIFIER  echo
STR_LIT  "Counting : "
COMMA  ,
IDENTIFIER  x3
IDENTIFIER  echo
STR_LIT  "char in s is "
COMMA  ,
IDENTIFIER  s
OPEN_BRACK  [
IDENTIFIER  i
CLOSE_BRACK  ]
IDENTIFIER  echo
IDENTIFIER  y4
IDENTIFIER  echo
IDENTIFIER  fibonacci
OPEN_PAREN  (
INT_LIT  10
CLOSE_PAREN  )
IDENTIFIER  echo
IDENTIFIER  x6
OPEN_BRACK  [
IDENTIFIER  i
CLOSE_BRACK  ]
COMMA  ,
IDENTIFIER  y6
OPEN_BRACK  [
IDENTIFIER  i
CLOSE_BRACK  ]
IDENTIFIER  echo
IDENTIFIER  value
IDENTIFIER  echo
STR_LIT  "index: "
COMMA  ,
DOLLAR_SIGN  $
IDENTIFIER  i
COMMA  ,
STR_LIT  ", value:"
COMMA  ,
DOLLAR_SIGN  $
IDENTIFIER  value
IDENTIFIER  inc
IDENTIFIER  l
IDENTIFIER  dec
IDENTIFIER  r
IDENTIFIER  quickSort
IDENTIFIER  a
IDENTIFIER  echo
IDENTIFIER  a
IDENTIFIER  echo
IDENTIFIER  caesar
OPEN_PAREN  (
IDENTIFIER  enc
COMMA  ,
INT_LIT  11
COMMA  ,
IDENTIFIER  decode
EQUALS  =
IDENTIFIER  true
CLOSE_PAREN  )
IDENTIFIER  echo
STR_LIT  "'"
COMMA  ,
IDENTIFIER  s
COMMA  ,
STR_LIT  "' is "
COMMA  ,
OPEN_PAREN  (
IF  if
IDENTIFIER  balanced
OPEN_PAREN  (
IDENTIFIER  s
CLOSE_PAREN  )
COLON  :
STR_LIT  "balanced"
ELSE  else
COLON  :
STR_LIT  "not balanced"
CLOSE_PAREN  )
IDENTIFIER  s
DOT  .
IDENTIFIER  add
IDENTIFIER  x
IDENTIFIER  result
DOT  .
IDENTIFIER  add
STR_LIT  ", "
IDENTIFIER  echo
IDENTIFIER  flatten
OPEN_PAREN  (
IDENTIFIER  x
CLOSE_PAREN  )
IDENTIFIER  x
EQUALS  =
AT  @
OPEN_BRACK  [
INT_LIT  1
COMMA  ,
INT_LIT  2
CLOSE_BRACK  ]
IDENTIFIER  result
DOT  .
IDENTIFIER  add
IDENTIFIER  flatten
IDENTIFIER  x
VARIABLE  var
IDENTIFIER  x
EQUALS  =
IDENTIFIER  L
OPEN_PAREN  (
IDENTIFIER  L
OPEN_PAREN  (
IDENTIFIER  N
INT_LIT  1
CLOSE_PAREN  )
COMMA  ,
IDENTIFIER  N
INT_LIT  2
COMMA  ,
IDENTIFIER  L
OPEN_PAREN  (
IDENTIFIER  L
OPEN_PAREN  (
IDENTIFIER  N
INT_LIT  3
COMMA  ,
IDENTIFIER  N
INT_LIT  4
CLOSE_PAREN  )
COMMA  ,
IDENTIFIER  N
INT_LIT  5
CLOSE_PAREN  )
COMMA  ,
IDENTIFIER  L
OPEN_PAREN  (
IDENTIFIER  L
OPEN_PAREN  (
IDENTIFIER  L
OPEN_BRACK  [
IDENTIFIER  int
CLOSE_BRACK  ]
OPEN_PAREN  (
CLOSE_PAREN  )
CLOSE_PAREN  )
CLOSE_PAREN  )
COMMA  ,
IDENTIFIER  L
OPEN_PAREN  (
IDENTIFIER  L
OPEN_PAREN  (
IDENTIFIER  L
OPEN_PAREN  (
IDENTIFIER  N
INT_LIT  6
CLOSE_PAREN  )
CLOSE_PAREN  )
CLOSE_PAREN  )
COMMA  ,
IDENTIFIER  N
INT_LIT  7
COMMA  ,
IDENTIFIER  N
INT_LIT  8
COMMA  ,
IDENTIFIER  L
OPEN_BRACK  [
IDENTIFIER  int
CLOSE_BRACK  ]
OPEN_PAREN  (
CLOSE_PAREN  )
CLOSE_PAREN  )
IDENTIFIER  assert
INT_LIT  1_999_999
OP5  ==
INT_LIT  1999999
IDENTIFIER  assert
INT_LIT  0o377
OP5  ==
INT_LIT  255
IDENTIFIER  assert
INT_LIT  0xff
OP5  ==
INT_LIT  255
IDENTIFIER  assert
FLOAT64_LIT  0b0_10001110100_0000101001000111101011101111111011000101001101001001'f64
OP5  ==
FLOAT_LIT  1.7282561e+35
IDENTIFIER  assert
INT_LIT  1_999_999
OP5  ==
INT_LIT  1999999