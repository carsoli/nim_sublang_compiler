TYPE  type
INDENT      
IDENTIFIER  TreeList
OPEN_BRACK  [
IDENTIFIER  T
CLOSE_BRACK  ]
EQUALS  =
REF  ref
IDENTIFIER  TTreeList
OPEN_BRACK  [
IDENTIFIER  T
CLOSE_BRACK  ]
IDENTIFIER  TTreeList
OPEN_BRACK  [
IDENTIFIER  T
CLOSE_BRACK  ]
EQUALS  =
OBJECT  object
INDENT      
CASE  case
IDENTIFIER  isLeaf
COLON  :
IDENTIFIER  bool
OF  of
IDENTIFIER  true
COLON  :
IDENTIFIER  data
COLON  :
IDENTIFIER  T
OF  of
IDENTIFIER  false
COLON  :
IDENTIFIER  list
COLON  :
IDENTIFIER  seq
OPEN_BRACK  [
IDENTIFIER  TreeList
OPEN_BRACK  [
IDENTIFIER  T
CLOSE_BRACK  ]
CLOSE_BRACK  ]
DEDENT  
DEDENT  
PROC  proc
IDENTIFIER  L
OPEN_BRACK  [
IDENTIFIER  T
CLOSE_BRACK  ]
OPEN_PAREN  (
IDENTIFIER  list
COLON  :
IDENTIFIER  varargs
OPEN_BRACK  [
IDENTIFIER  TreeList
OPEN_BRACK  [
IDENTIFIER  T
CLOSE_BRACK  ]
CLOSE_BRACK  ]
CLOSE_PAREN  )
COLON  :
IDENTIFIER  TreeList
OPEN_BRACK  [
IDENTIFIER  T
CLOSE_BRACK  ]
EQUALS  =
INDENT      
VARIABLE  var
IDENTIFIER  s
COLON  :
IDENTIFIER  seq
OPEN_BRACK  [
IDENTIFIER  TreeList
OPEN_BRACK  [
IDENTIFIER  T
CLOSE_BRACK  ]
CLOSE_BRACK  ]
EQUALS  =
OP2  @
OPEN_BRACK  [
CLOSE_BRACK  ]
FOR  for
IDENTIFIER  x
IN  in
IDENTIFIER  list
COLON  :
IDENTIFIER  s
DOT  .
IDENTIFIER  add
IDENTIFIER  x
IDENTIFIER  TreeList
OPEN_BRACK  [
IDENTIFIER  T
CLOSE_BRACK  ]
OPEN_PAREN  (
IDENTIFIER  isLeaf
COLON  :
IDENTIFIER  false
COMMA  ,
IDENTIFIER  list
COLON  :
IDENTIFIER  s
CLOSE_PAREN  )
DEDENT  
PROC  proc
IDENTIFIER  N
OPEN_BRACK  [
IDENTIFIER  T
CLOSE_BRACK  ]
OPEN_PAREN  (
IDENTIFIER  data
COLON  :
IDENTIFIER  T
CLOSE_PAREN  )
COLON  :
IDENTIFIER  TreeList
OPEN_BRACK  [
IDENTIFIER  T
CLOSE_BRACK  ]
EQUALS  =
INDENT      
IDENTIFIER  TreeList
OPEN_BRACK  [
IDENTIFIER  T
CLOSE_BRACK  ]
OPEN_PAREN  (
IDENTIFIER  isLeaf
COLON  :
IDENTIFIER  true
COMMA  ,
IDENTIFIER  data
COLON  :
IDENTIFIER  data
CLOSE_PAREN  )
DEDENT  
PROC  proc
SYM_HEADER  `
DOLLAR_SIGN  $
SYM_HEADER  `
OPEN_BRACK  [
IDENTIFIER  T
CLOSE_BRACK  ]
OPEN_PAREN  (
IDENTIFIER  n
COLON  :
IDENTIFIER  TreeList
OPEN_BRACK  [
IDENTIFIER  T
CLOSE_BRACK  ]
CLOSE_PAREN  )
COLON  :
IDENTIFIER  string
EQUALS  =
INDENT      
IF  if
IDENTIFIER  n
DOT  .
IDENTIFIER  isLeaf
COLON  :
IDENTIFIER  result
EQUALS  =
DOLLAR_SIGN  $
IDENTIFIER  n
DOT  .
IDENTIFIER  data
ELSE  else
COLON  :
INDENT      
IDENTIFIER  result
EQUALS  =
STR_LIT  "["
FOR  for
IDENTIFIER  i
COMMA  ,
IDENTIFIER  x
IN  in
IDENTIFIER  n
DOT  .
IDENTIFIER  list
COLON  :
INDENT      
IF  if
IDENTIFIER  i
OP5  >
INT_LIT  0
COLON  :
IDENTIFIER  result
DOT  .
IDENTIFIER  add
STR_LIT  ", "
IDENTIFIER  result
DOT  .
IDENTIFIER  add
OPEN_PAREN  (
DOLLAR_SIGN  $
IDENTIFIER  x
CLOSE_PAREN  )
DEDENT  
IDENTIFIER  result
DOT  .
IDENTIFIER  add
STR_LIT  "]"
DEDENT  
DEDENT  
PROC  proc
IDENTIFIER  flatten
OPEN_BRACK  [
IDENTIFIER  T
CLOSE_BRACK  ]
OPEN_PAREN  (
IDENTIFIER  n
COLON  :
IDENTIFIER  TreeList
OPEN_BRACK  [
IDENTIFIER  T
CLOSE_BRACK  ]
CLOSE_PAREN  )
COLON  :
IDENTIFIER  seq
OPEN_BRACK  [
IDENTIFIER  T
CLOSE_BRACK  ]
EQUALS  =
INDENT      
IF  if
IDENTIFIER  n
DOT  .
IDENTIFIER  isLeaf
COLON  :
IDENTIFIER  result
EQUALS  =
OP2  @
OPEN_BRACK  [
IDENTIFIER  n
DOT  .
IDENTIFIER  data
CLOSE_BRACK  ]
ELSE  else
COLON  :
INDENT      
IDENTIFIER  result
EQUALS  =
OP2  @
OPEN_BRACK  [
CLOSE_BRACK  ]
FOR  for
IDENTIFIER  x
IN  in
IDENTIFIER  n
DOT  .
IDENTIFIER  list
COLON  :
INDENT      
IDENTIFIER  result
DOT  .
IDENTIFIER  add
IDENTIFIER  flatten
IDENTIFIER  x
DEDENT  
DEDENT  
DEDENT  
VARIABLE  var
IDENTIFIER  x
EQUALS  =
IDENTIFIER  L
OPEN_PAREN  (
IDENTIFIER  L
OPEN_PAREN  (
IDENTIFIER  N
INT_LIT  1
CLOSE_PAREN  )
COMMA  ,
IDENTIFIER  N
INT_LIT  2
COMMA  ,
IDENTIFIER  L
OPEN_PAREN  (
IDENTIFIER  L
OPEN_PAREN  (
IDENTIFIER  N
INT_LIT  3
COMMA  ,
IDENTIFIER  N
INT_LIT  4
CLOSE_PAREN  )
COMMA  ,
IDENTIFIER  N
INT_LIT  5
CLOSE_PAREN  )
COMMA  ,
IDENTIFIER  L
OPEN_PAREN  (
IDENTIFIER  L
OPEN_PAREN  (
IDENTIFIER  L
OPEN_BRACK  [
IDENTIFIER  int
CLOSE_BRACK  ]
OPEN_PAREN  (
CLOSE_PAREN  )
CLOSE_PAREN  )
CLOSE_PAREN  )
COMMA  ,
IDENTIFIER  L
OPEN_PAREN  (
IDENTIFIER  L
OPEN_PAREN  (
IDENTIFIER  L
OPEN_PAREN  (
IDENTIFIER  N
INT_LIT  6
CLOSE_PAREN  )
CLOSE_PAREN  )
CLOSE_PAREN  )
COMMA  ,
IDENTIFIER  N
INT_LIT  7
COMMA  ,
IDENTIFIER  N
INT_LIT  8
COMMA  ,
IDENTIFIER  L
OPEN_BRACK  [
IDENTIFIER  int
CLOSE_BRACK  ]
OPEN_PAREN  (
CLOSE_PAREN  )
CLOSE_PAREN  )
IDENTIFIER  echo
IDENTIFIER  x
IDENTIFIER  echo
IDENTIFIER  flatten
OPEN_PAREN  (
IDENTIFIER  x
CLOSE_PAREN  )