PROC  proc
IDENTIFIER  yes
OPEN_PAREN  (
IDENTIFIER  question
COLON  :
IDENTIFIER  string
CLOSE_PAREN  )
COLON  :
IDENTIFIER  bool
EQUALS  =
INDENT      
IDENTIFIER  echo
IDENTIFIER  question
COMMA  ,
STR_LIT  " (y/n)"
VARIABLE  var
IDENTIFIER  readline
EQUALS  =
STR_LIT  "n"
WHILE  while
IDENTIFIER  true
COLON  :
INDENT      
CASE  case
IDENTIFIER  readline
OF  of
STR_LIT  "y"
COMMA  ,
STR_LIT  "Y"
COMMA  ,
STR_LIT  "yes"
COMMA  ,
STR_LIT  "Yes"
COLON  :
RETURN  return
IDENTIFIER  true
OF  of
STR_LIT  "n"
COMMA  ,
STR_LIT  "N"
COMMA  ,
STR_LIT  "no"
COMMA  ,
STR_LIT  "No"
COLON  :
RETURN  return
IDENTIFIER  false
ELSE  else
COLON  :
IDENTIFIER  echo
STR_LIT  "Please be clear: yes or no"
DEDENT  
DEDENT  
IF  if
IDENTIFIER  yes
OPEN_PAREN  (
STR_LIT  "Should I delete all your important files?"
CLOSE_PAREN  )
COLON  :
INDENT      
IDENTIFIER  echo
STR_LIT  "I'm sorry Dave, I'm afraid I can't do that."
DEDENT  
ELSE  else
COLON  :
INDENT      
IDENTIFIER  echo
STR_LIT  "I think you know what the problem is just as well as I do."
DEDENT  
LET  let
INDENT      
IDENTIFIER  x5
EQUALS  =
INT_LIT  0
IDENTIFIER  y5
EQUALS  =
INT8_LIT  0'i8
IDENTIFIER  z5
EQUALS  =
INT64_LIT  0'i64
IDENTIFIER  u5
EQUALS  =
UINT_LIT  0'u
DEDENT  
IDENTIFIER  echo
STR_LIT  "x5 is "
COMMA  ,
IDENTIFIER  x5
COMMA  ,
STR_LIT  " y5 is "
COMMA  ,
IDENTIFIER  y5
COMMA  ,
STR_LIT  " z5 is "
COMMA  ,
IDENTIFIER  z5
COMMA  ,
STR_LIT  " u5 is "
COMMA  ,
IDENTIFIER  u5
BLOCK  block
IDENTIFIER  outer
COLON  :
INDENT      
FOR  for
IDENTIFIER  i
IN  in
INT_LIT  0
OP6  ..
INT_LIT  2000
COLON  :
INDENT      
FOR  for
IDENTIFIER  j
IN  in
INT_LIT  0
OP6  ..
INT_LIT  2000
COLON  :
INDENT      
IF  if
IDENTIFIER  i
OP8  +
IDENTIFIER  j
OP5  ==
INT_LIT  3145
COLON  :
INDENT      
IDENTIFIER  echo
IDENTIFIER  i
COMMA  ,
STR_LIT  ", "
COMMA  ,
IDENTIFIER  j
BREAK  break
IDENTIFIER  outer
DEDENT  
DEDENT  
DEDENT  
DEDENT  
PROC  proc
IDENTIFIER  fibonacci
OPEN_PAREN  (
IDENTIFIER  n
COLON  :
IDENTIFIER  int
CLOSE_PAREN  )
COLON  :
IDENTIFIER  int
EQUALS  =
INDENT      
IF  if
IDENTIFIER  n
OP5  <
INT_LIT  2
COLON  :
INDENT      
IDENTIFIER  result
EQUALS  =
IDENTIFIER  n
DEDENT  
ELSE  else
COLON  :
INDENT      
IDENTIFIER  result
EQUALS  =
IDENTIFIER  fibonacci
OPEN_PAREN  (
IDENTIFIER  n
MINUS_OPERATOR  -
INT_LIT  1
CLOSE_PAREN  )
OP8  +
OPEN_PAREN  (
IDENTIFIER  n
MINUS_OPERATOR  -
INT_LIT  2
CLOSE_PAREN  )
DOT  .
IDENTIFIER  fibonacci
DEDENT  
DEDENT  
IDENTIFIER  echo
IDENTIFIER  fibonacci
OPEN_PAREN  (
INT_LIT  10
CLOSE_PAREN  )
TYPE  type
INDENT      
IDENTIFIER  IntArray
EQUALS  =
IDENTIFIER  array
OPEN_BRACK  [
INT_LIT  0
OP6  ..
INT_LIT  5
COMMA  ,
IDENTIFIER  int
CLOSE_BRACK  ]
IDENTIFIER  QuickArray
EQUALS  =
IDENTIFIER  array
OPEN_BRACK  [
INT_LIT  6
COMMA  ,
IDENTIFIER  int
CLOSE_BRACK  ]
DEDENT  
VARIABLE  var
INDENT      
IDENTIFIER  x6
COLON  :
IDENTIFIER  IntArray
IDENTIFIER  y6
COLON  :
IDENTIFIER  QuickArray
DEDENT  
IDENTIFIER  x6
EQUALS  =
OPEN_BRACK  [
INT_LIT  1
COMMA  ,
INT_LIT  2
COMMA  ,
INT_LIT  3
COMMA  ,
INT_LIT  4
COMMA  ,
INT_LIT  5
COMMA  ,
INT_LIT  6
CLOSE_BRACK  ]
IDENTIFIER  y6
EQUALS  =
IDENTIFIER  x6
FOR  for
IDENTIFIER  i
IN  in
INT_LIT  0
OP6  ..
INT_LIT  5
COLON  :
INDENT      
IDENTIFIER  echo
IDENTIFIER  x6
OPEN_BRACK  [
IDENTIFIER  i
CLOSE_BRACK  ]
COMMA  ,
IDENTIFIER  y6
OPEN_BRACK  [
IDENTIFIER  i
CLOSE_BRACK  ]
DEDENT  
FOR  for
IDENTIFIER  value
IN  in
AT  @
OPEN_BRACK  [
INT_LIT  3
COMMA  ,
INT_LIT  4
COMMA  ,
INT_LIT  5
CLOSE_BRACK  ]
COLON  :
INDENT      
IDENTIFIER  echo
IDENTIFIER  value
DEDENT  
FOR  for
IDENTIFIER  i
COMMA  ,
IDENTIFIER  value
IN  in
AT  @
OPEN_BRACK  [
INT_LIT  3
COMMA  ,
INT_LIT  4
COMMA  ,
INT_LIT  5
CLOSE_BRACK  ]
COLON  :
INDENT      
IDENTIFIER  echo
STR_LIT  "index: "
COMMA  ,
DOLLAR_SIGN  $
IDENTIFIER  i
COMMA  ,
STR_LIT  ", value:"
COMMA  ,
DOLLAR_SIGN  $
IDENTIFIER  value
DEDENT  
PROC  proc
IDENTIFIER  echoItem
OPEN_PAREN  (
IDENTIFIER  x
COLON  :
IDENTIFIER  string
CLOSE_PAREN  )
EQUALS  =
IDENTIFIER  echo
IDENTIFIER  x
PROC  proc
IDENTIFIER  forEach
OPEN_PAREN  (
IDENTIFIER  action
COLON  :
PROC  proc
OPEN_PAREN  (
IDENTIFIER  x
COLON  :
IDENTIFIER  string
CLOSE_PAREN  )
CLOSE_PAREN  )
EQUALS  =
INDENT      
CONST  const
INDENT      
IDENTIFIER  data
EQUALS  =
OPEN_BRACK  [
STR_LIT  "hi"
COMMA  ,
STR_LIT  "bye"
COMMA  ,
STR_LIT  "later"
COMMA  ,
STR_LIT  "not today"
COMMA  ,
STR_LIT  "leave[]"
CLOSE_BRACK  ]
DEDENT  
FOR  for
IDENTIFIER  d
IN  in
IDENTIFIER  items
OPEN_PAREN  (
IDENTIFIER  data
CLOSE_PAREN  )
COLON  :
INDENT      
IDENTIFIER  action
OPEN_PAREN  (
IDENTIFIER  d
CLOSE_PAREN  )
DEDENT  
DEDENT  
IDENTIFIER  forEach
OPEN_PAREN  (
IDENTIFIER  echoItem
CLOSE_PAREN  )