WHILE  while
IDENTIFIER  x3
OP5  <=
INT_LIT  5
COLON  :
INDENT      
IDENTIFIER  echo
OPEN_PAREN  (
STR_LIT  "Counting : "
COMMA  ,
IDENTIFIER  x3
CLOSE_PAREN  )
IDENTIFIER  x3
EQUALS  =
IDENTIFIER  x3
OP8  +
INT_LIT  1
DEDENT  
WHILE  while
IDENTIFIER  true
COLON  :
INDENT      
CASE  case
IDENTIFIER  readline
OF  of
STR_LIT  "y"
COMMA  ,
STR_LIT  "Y"
COMMA  ,
STR_LIT  "yes"
COMMA  ,
STR_LIT  "Yes"
COLON  :
RETURN  return
IDENTIFIER  true
OF  of
STR_LIT  "n"
COMMA  ,
STR_LIT  "N"
COMMA  ,
STR_LIT  "no"
COMMA  ,
STR_LIT  "No"
COLON  :
RETURN  return
IDENTIFIER  false
ELSE  else
COLON  :
IDENTIFIER  echo
OPEN_PAREN  (
STR_LIT  "Please be clear: yes or no"
CLOSE_PAREN  )
DEDENT  
WHILE  while
IDENTIFIER  true
COLON  :
INDENT      
IDENTIFIER  echo
OPEN_PAREN  (
STR_LIT  "looping"
CLOSE_PAREN  )
BREAK  break
DEDENT  
WHILE  while
IDENTIFIER  mmpos
OP5  <
IDENTIFIER  inp
DOT  .
IDENTIFIER  len
COLON  :
INDENT      
BLOCK  block
IDENTIFIER  searchSubs
COLON  :
INDENT      
IDENTIFIER  actions
IDENTIFIER  inc
OPEN_PAREN  (
IDENTIFIER  mmpos
CLOSE_PAREN  )
DEDENT  
DEDENT  
WHILE  while
IDENTIFIER  true
COLON  :
INDENT      
IDENTIFIER  echo
OPEN_PAREN  (
STR_LIT  "I have a number from 1 to 10, what is it? "
CLOSE_PAREN  )
LET  let
IDENTIFIER  guess
EQUALS  =
IDENTIFIER  parseInt
OPEN_PAREN  (
IDENTIFIER  stdin
DOT  .
IDENTIFIER  readLine
CLOSE_PAREN  )
IF  if
IDENTIFIER  guess
OP5  <
IDENTIFIER  answer
COLON  :
INDENT      
IDENTIFIER  echo
OPEN_PAREN  (
STR_LIT  "Too low, try again"
CLOSE_PAREN  )
DEDENT  
ELIF  elif
IDENTIFIER  guess
OP5  >
IDENTIFIER  answer
COLON  :
INDENT      
IDENTIFIER  echo
OPEN_PAREN  (
STR_LIT  "Too high, try again"
CLOSE_PAREN  )
DEDENT  
ELSE  else
COLON  :
INDENT      
IDENTIFIER  echo
OPEN_PAREN  (
STR_LIT  "Correct!"
CLOSE_PAREN  )
BREAK  break
DEDENT  
DEDENT  
WHILE  while
IDENTIFIER  l
OP5  <=
IDENTIFIER  r
COLON  :
INDENT      
IF  if
IDENTIFIER  a
OPEN_BRACK  [
IDENTIFIER  l
CLOSE_BRACK  ]
OP5  <
IDENTIFIER  p
COLON  :
INDENT      
IDENTIFIER  inc
OPEN_PAREN  (
IDENTIFIER  l
CLOSE_PAREN  )
CONTINUE  continue
DEDENT  
IF  if
IDENTIFIER  a
OPEN_BRACK  [
IDENTIFIER  r
CLOSE_BRACK  ]
OP5  >
IDENTIFIER  p
COLON  :
INDENT      
IDENTIFIER  dec
OPEN_PAREN  (
IDENTIFIER  r
CLOSE_PAREN  )
CONTINUE  continue
DEDENT  
IF  if
IDENTIFIER  l
OP5  <=
IDENTIFIER  r
COLON  :
INDENT      
IDENTIFIER  swap
OPEN_PAREN  (
IDENTIFIER  a
OPEN_BRACK  [
IDENTIFIER  l
CLOSE_BRACK  ]
COMMA  ,
IDENTIFIER  a
OPEN_BRACK  [
IDENTIFIER  r
CLOSE_BRACK  ]
CLOSE_PAREN  )
CLOSE_PAREN  )
IDENTIFIER  inc
OPEN_PAREN  (
IDENTIFIER  l
CLOSE_PAREN  )
IDENTIFIER  dec
OPEN_PAREN  (
IDENTIFIER  r
CLOSE_PAREN  )