# Generated from m2_Parser.g4 by ANTLR 4.7.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3s")
        buf.write("\u0510\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\4n\tn\4o\to\3\2\3\2")
        buf.write("\3\3\3\3\3\4\3\4\3\4\3\4\5\4\u00e7\n\4\3\5\3\5\3\6\3\6")
        buf.write("\3\7\3\7\3\b\3\b\3\b\3\b\5\b\u00f3\n\b\3\t\3\t\3\n\3\n")
        buf.write("\3\13\3\13\3\f\3\f\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r")
        buf.write("\3\r\3\r\5\r\u0108\n\r\3\16\3\16\3\17\3\17\3\20\5\20\u010f")
        buf.write("\n\20\3\21\5\21\u0112\n\21\3\22\3\22\3\23\3\23\3\24\3")
        buf.write("\24\3\25\3\25\5\25\u011c\n\25\3\26\3\26\3\27\3\27\3\27")
        buf.write("\5\27\u0123\n\27\3\30\3\30\3\30\3\30\3\30\5\30\u012a\n")
        buf.write("\30\3\30\3\30\3\30\5\30\u012f\n\30\7\30\u0131\n\30\f\30")
        buf.write("\16\30\u0134\13\30\3\30\3\30\3\30\5\30\u0139\n\30\3\30")
        buf.write("\3\30\3\30\5\30\u013e\n\30\7\30\u0140\n\30\f\30\16\30")
        buf.write("\u0143\13\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\5\30\u014c")
        buf.write("\n\30\3\30\3\30\3\30\5\30\u0151\n\30\7\30\u0153\n\30\f")
        buf.write("\30\16\30\u0156\13\30\5\30\u0158\n\30\3\30\3\30\3\30\3")
        buf.write("\30\3\30\3\30\7\30\u0160\n\30\f\30\16\30\u0163\13\30\5")
        buf.write("\30\u0165\n\30\5\30\u0167\n\30\5\30\u0169\n\30\3\30\3")
        buf.write("\30\3\30\3\31\3\31\3\31\3\31\5\31\u0172\n\31\7\31\u0174")
        buf.write("\n\31\f\31\16\31\u0177\13\31\3\31\3\31\3\31\3\32\3\32")
        buf.write("\3\32\3\32\5\32\u0180\n\32\7\32\u0182\n\32\f\32\16\32")
        buf.write("\u0185\13\32\3\32\3\32\3\32\3\33\3\33\3\34\3\34\3\34\3")
        buf.write("\34\3\34\5\34\u0191\n\34\3\35\3\35\3\36\3\36\3\36\7\36")
        buf.write("\u0198\n\36\f\36\16\36\u019b\13\36\3\37\3\37\3\37\5\37")
        buf.write("\u01a0\n\37\7\37\u01a2\n\37\f\37\16\37\u01a5\13\37\3\37")
        buf.write("\3\37\3\37\3\37\3\37\5\37\u01ac\n\37\3\37\3\37\3\37\3")
        buf.write("\37\3\37\3\37\3\37\3\37\5\37\u01b6\n\37\3 \3 \3 \3 \7")
        buf.write(" \u01bc\n \f \16 \u01bf\13 \3 \3 \7 \u01c3\n \f \16 \u01c6")
        buf.write("\13 \5 \u01c8\n \3!\3!\3!\3!\3!\5!\u01cf\n!\7!\u01d1\n")
        buf.write("!\f!\16!\u01d4\13!\3!\3!\5!\u01d8\n!\3!\3!\3\"\3\"\3\"")
        buf.write("\3\"\3\"\7\"\u01e1\n\"\f\"\16\"\u01e4\13\"\3#\3#\3#\3")
        buf.write("#\3#\7#\u01eb\n#\f#\16#\u01ee\13#\3$\3$\3$\3$\3$\7$\u01f5")
        buf.write("\n$\f$\16$\u01f8\13$\3%\3%\3%\3%\3%\7%\u01ff\n%\f%\16")
        buf.write("%\u0202\13%\3&\3&\3&\3&\3&\7&\u0209\n&\f&\16&\u020c\13")
        buf.write("&\3\'\3\'\3\'\3\'\3\'\7\'\u0213\n\'\f\'\16\'\u0216\13")
        buf.write("\'\3(\3(\3(\3(\3(\7(\u021d\n(\f(\16(\u0220\13(\3)\3)\3")
        buf.write(")\3)\3)\7)\u0227\n)\f)\16)\u022a\13)\3*\3*\3*\3*\3*\7")
        buf.write("*\u0231\n*\f*\16*\u0234\13*\3+\3+\3+\3+\3+\7+\u023b\n")
        buf.write("+\f+\16+\u023e\13+\3,\3,\3,\3,\3,\7,\u0245\n,\f,\16,\u0248")
        buf.write("\13,\3-\3-\3-\7-\u024d\n-\f-\16-\u0250\13-\3.\3.\3.\5")
        buf.write(".\u0255\n.\3/\3/\3/\3/\5/\u025b\n/\3\60\3\60\3\60\7\60")
        buf.write("\u0260\n\60\f\60\16\60\u0263\13\60\3\60\5\60\u0266\n\60")
        buf.write("\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\7\61")
        buf.write("\u0272\n\61\f\61\16\61\u0275\13\61\3\61\3\61\3\61\3\61")
        buf.write("\3\62\3\62\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63")
        buf.write("\5\63\u0286\n\63\5\63\u0288\n\63\3\64\3\64\6\64\u028c")
        buf.write("\n\64\r\64\16\64\u028d\3\64\3\64\3\64\3\64\5\64\u0294")
        buf.write("\n\64\3\65\3\65\5\65\u0298\n\65\3\65\3\65\3\65\3\66\3")
        buf.write("\66\3\66\3\67\3\67\3\67\38\38\38\38\38\38\38\38\38\38")
        buf.write("\58\u02ad\n8\39\39\3:\5:\u02b2\n:\3:\3:\3:\3:\3:\3:\5")
        buf.write(":\u02ba\n:\3;\3;\3<\3<\3<\3=\3=\3=\5=\u02c4\n=\3>\3>\3")
        buf.write(">\5>\u02c9\n>\3?\3?\3?\5?\u02ce\n?\3@\3@\3@\5@\u02d3\n")
        buf.write("@\3A\3A\3A\3A\3A\7A\u02da\nA\fA\16A\u02dd\13A\3B\3B\3")
        buf.write("B\3B\3B\3B\3B\7B\u02e6\nB\fB\16B\u02e9\13B\3C\3C\3C\3")
        buf.write("C\3D\3D\3D\5D\u02f2\nD\3D\3D\3D\3D\3D\5D\u02f9\nD\3E\3")
        buf.write("E\3E\3E\3E\3F\6F\u0301\nF\rF\16F\u0302\3F\3F\3F\3F\3F")
        buf.write("\7F\u030a\nF\fF\16F\u030d\13F\3F\3F\3F\5F\u0312\nF\3G")
        buf.write("\3G\3G\3G\3G\5G\u0319\nG\5G\u031b\nG\3H\3H\3H\3H\3H\3")
        buf.write("H\3H\3H\5H\u0325\nH\3I\3I\3I\3I\3I\3I\3I\3I\7I\u032f\n")
        buf.write("I\fI\16I\u0332\13I\3I\3I\3I\5I\u0337\nI\3J\3J\5J\u033b")
        buf.write("\nJ\3K\3K\3K\5K\u0340\nK\3K\5K\u0343\nK\3L\3L\5L\u0347")
        buf.write("\nL\3M\3M\3M\3N\3N\3N\3O\3O\3O\3O\3O\3P\3P\3P\7P\u0357")
        buf.write("\nP\fP\16P\u035a\13P\3P\3P\5P\u035e\nP\3P\3P\3P\3P\5P")
        buf.write("\u0364\nP\3Q\3Q\3Q\3Q\3Q\7Q\u036b\nQ\fQ\16Q\u036e\13Q")
        buf.write("\5Q\u0370\nQ\3Q\3Q\3Q\3R\3R\5R\u0377\nR\3S\3S\5S\u037b")
        buf.write("\nS\3T\3T\3T\3T\3T\3T\3T\3T\3T\7T\u0386\nT\fT\16T\u0389")
        buf.write("\13T\3T\3T\3T\5T\u038e\nT\3U\3U\3U\3U\3U\3V\3V\7V\u0397")
        buf.write("\nV\fV\16V\u039a\13V\3V\3V\3V\3V\3V\7V\u03a1\nV\fV\16")
        buf.write("V\u03a4\13V\3V\3V\3V\5V\u03a9\nV\3W\3W\3W\3W\3W\5W\u03b0")
        buf.write("\nW\3W\3W\3W\3W\3W\5W\u03b7\nW\3X\3X\6X\u03bb\nX\rX\16")
        buf.write("X\u03bc\3X\3X\3X\3X\3X\3X\3X\5X\u03c6\nX\3Y\3Y\5Y\u03ca")
        buf.write("\nY\3Y\3Y\5Y\u03ce\nY\3Y\3Y\3Z\5Z\u03d3\nZ\3Z\3Z\3[\3")
        buf.write("[\3[\7[\u03da\n[\f[\16[\u03dd\13[\5[\u03df\n[\3[\5[\u03e2")
        buf.write("\n[\3[\3[\3[\3[\7[\u03e8\n[\f[\16[\u03eb\13[\5[\u03ed")
        buf.write("\n[\5[\u03ef\n[\3[\3[\3[\3\\\3\\\5\\\u03f6\n\\\3\\\3\\")
        buf.write("\3\\\3\\\3\\\3]\3]\3]\5]\u0400\n]\3]\3]\3]\3]\3]\3^\3")
        buf.write("^\3^\3^\3^\7^\u040c\n^\f^\16^\u040f\13^\3^\3^\3^\3^\3")
        buf.write("^\3^\3_\3_\3_\7_\u041a\n_\f_\16_\u041d\13_\3_\5_\u0420")
        buf.write("\n_\3_\3_\3_\3_\5_\u0426\n_\3_\3_\3_\3_\5_\u042c\n_\3")
        buf.write("`\3`\3`\7`\u0431\n`\f`\16`\u0434\13`\3`\5`\u0437\n`\3")
        buf.write("`\3`\3`\3`\3`\3`\3`\3`\5`\u0441\n`\3a\3a\3a\3a\7a\u0447")
        buf.write("\na\fa\16a\u044a\13a\5a\u044c\na\3a\3a\3a\3a\7a\u0452")
        buf.write("\na\fa\16a\u0455\13a\5a\u0457\na\3b\5b\u045a\nb\3b\3b")
        buf.write("\3b\3b\5b\u0460\nb\3c\3c\3c\5c\u0465\nc\3c\3c\5c\u0469")
        buf.write("\nc\3c\3c\3d\3d\5d\u046f\nd\3d\5d\u0472\nd\3d\3d\3e\3")
        buf.write("e\3e\3e\3e\5e\u047b\ne\3f\3f\3f\3f\7f\u0481\nf\ff\16f")
        buf.write("\u0484\13f\3f\3f\3f\3f\3f\3g\3g\5g\u048d\ng\3g\3g\3g\3")
        buf.write("h\3h\3h\5h\u0495\nh\3h\3h\5h\u0499\nh\3h\3h\5h\u049d\n")
        buf.write("h\3h\3h\3i\3i\3i\6i\u04a4\ni\ri\16i\u04a5\3i\3i\5i\u04aa")
        buf.write("\ni\3j\3j\3j\6j\u04af\nj\rj\16j\u04b0\3j\3j\5j\u04b5\n")
        buf.write("j\3k\3k\3k\6k\u04ba\nk\rk\16k\u04bb\3k\3k\5k\u04c0\nk")
        buf.write("\3l\3l\3l\3l\3l\3l\3l\3l\3l\3l\3l\3l\3l\3l\3l\3l\3l\5")
        buf.write("l\u04d3\nl\3m\3m\5m\u04d7\nm\3m\5m\u04da\nm\3m\3m\5m\u04de")
        buf.write("\nm\7m\u04e0\nm\fm\16m\u04e3\13m\3m\3m\3m\5m\u04e8\nm")
        buf.write("\3m\5m\u04eb\nm\3m\3m\5m\u04ef\nm\7m\u04f1\nm\fm\16m\u04f4")
        buf.write("\13m\3m\3m\3m\3m\5m\u04fa\nm\3m\7m\u04fd\nm\fm\16m\u0500")
        buf.write("\13m\5m\u0502\nm\3n\3n\3n\7n\u0507\nn\fn\16n\u050a\13")
        buf.write("n\5n\u050c\nn\3o\3o\3o\2\2p\2\4\6\b\n\f\16\20\22\24\26")
        buf.write("\30\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\")
        buf.write("^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a")
        buf.write("\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c")
        buf.write("\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae")
        buf.write("\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0")
        buf.write("\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2")
        buf.write("\u00d4\u00d6\u00d8\u00da\u00dc\2\13\4\2\27\27\35\35\4")
        buf.write("\2\30\32!!\3\3mm\6\2\'\'++BBKK\t\2\')\678<<>>DDOOUU\3")
        buf.write("\2kl\5\2QQYbdj\3\2\b\t\3\2\'(\2\u056c\2\u00de\3\2\2\2")
        buf.write("\4\u00e0\3\2\2\2\6\u00e6\3\2\2\2\b\u00e8\3\2\2\2\n\u00ea")
        buf.write("\3\2\2\2\f\u00ec\3\2\2\2\16\u00f2\3\2\2\2\20\u00f4\3\2")
        buf.write("\2\2\22\u00f6\3\2\2\2\24\u00f8\3\2\2\2\26\u00fa\3\2\2")
        buf.write("\2\30\u0107\3\2\2\2\32\u0109\3\2\2\2\34\u010b\3\2\2\2")
        buf.write("\36\u010e\3\2\2\2 \u0111\3\2\2\2\"\u0113\3\2\2\2$\u0115")
        buf.write("\3\2\2\2&\u0117\3\2\2\2(\u011b\3\2\2\2*\u011d\3\2\2\2")
        buf.write(",\u011f\3\2\2\2.\u0124\3\2\2\2\60\u016d\3\2\2\2\62\u017b")
        buf.write("\3\2\2\2\64\u0189\3\2\2\2\66\u0190\3\2\2\28\u0192\3\2")
        buf.write("\2\2:\u0194\3\2\2\2<\u01b5\3\2\2\2>\u01c7\3\2\2\2@\u01c9")
        buf.write("\3\2\2\2B\u01db\3\2\2\2D\u01e5\3\2\2\2F\u01ef\3\2\2\2")
        buf.write("H\u01f9\3\2\2\2J\u0203\3\2\2\2L\u020d\3\2\2\2N\u0217\3")
        buf.write("\2\2\2P\u0221\3\2\2\2R\u022b\3\2\2\2T\u0235\3\2\2\2V\u023f")
        buf.write("\3\2\2\2X\u0249\3\2\2\2Z\u0251\3\2\2\2\\\u0256\3\2\2\2")
        buf.write("^\u025c\3\2\2\2`\u0267\3\2\2\2b\u027a\3\2\2\2d\u0287\3")
        buf.write("\2\2\2f\u0293\3\2\2\2h\u0295\3\2\2\2j\u029c\3\2\2\2l\u029f")
        buf.write("\3\2\2\2n\u02a2\3\2\2\2p\u02ae\3\2\2\2r\u02b1\3\2\2\2")
        buf.write("t\u02bb\3\2\2\2v\u02bd\3\2\2\2x\u02c0\3\2\2\2z\u02c5\3")
        buf.write("\2\2\2|\u02ca\3\2\2\2~\u02cf\3\2\2\2\u0080\u02d4\3\2\2")
        buf.write("\2\u0082\u02de\3\2\2\2\u0084\u02ea\3\2\2\2\u0086\u02ee")
        buf.write("\3\2\2\2\u0088\u02fa\3\2\2\2\u008a\u0300\3\2\2\2\u008c")
        buf.write("\u0313\3\2\2\2\u008e\u0324\3\2\2\2\u0090\u0326\3\2\2\2")
        buf.write("\u0092\u0338\3\2\2\2\u0094\u033c\3\2\2\2\u0096\u0344\3")
        buf.write("\2\2\2\u0098\u0348\3\2\2\2\u009a\u034b\3\2\2\2\u009c\u034e")
        buf.write("\3\2\2\2\u009e\u0353\3\2\2\2\u00a0\u0365\3\2\2\2\u00a2")
        buf.write("\u0374\3\2\2\2\u00a4\u037a\3\2\2\2\u00a6\u037c\3\2\2\2")
        buf.write("\u00a8\u038f\3\2\2\2\u00aa\u0394\3\2\2\2\u00ac\u03aa\3")
        buf.write("\2\2\2\u00ae\u03c5\3\2\2\2\u00b0\u03c7\3\2\2\2\u00b2\u03d2")
        buf.write("\3\2\2\2\u00b4\u03de\3\2\2\2\u00b6\u03f3\3\2\2\2\u00b8")
        buf.write("\u03fc\3\2\2\2\u00ba\u0406\3\2\2\2\u00bc\u0416\3\2\2\2")
        buf.write("\u00be\u042d\3\2\2\2\u00c0\u0456\3\2\2\2\u00c2\u0459\3")
        buf.write("\2\2\2\u00c4\u0461\3\2\2\2\u00c6\u046e\3\2\2\2\u00c8\u0475")
        buf.write("\3\2\2\2\u00ca\u047c\3\2\2\2\u00cc\u048a\3\2\2\2\u00ce")
        buf.write("\u0491\3\2\2\2\u00d0\u04a9\3\2\2\2\u00d2\u04b4\3\2\2\2")
        buf.write("\u00d4\u04bf\3\2\2\2\u00d6\u04d2\3\2\2\2\u00d8\u0501\3")
        buf.write("\2\2\2\u00da\u050b\3\2\2\2\u00dc\u050d\3\2\2\2\u00de\u00df")
        buf.write("\7\34\2\2\u00df\3\3\2\2\2\u00e0\u00e1\t\2\2\2\u00e1\5")
        buf.write("\3\2\2\2\u00e2\u00e7\7\36\2\2\u00e3\u00e7\7\25\2\2\u00e4")
        buf.write("\u00e5\7\25\2\2\u00e5\u00e7\7\25\2\2\u00e6\u00e2\3\2\2")
        buf.write("\2\u00e6\u00e3\3\2\2\2\u00e6\u00e4\3\2\2\2\u00e7\7\3\2")
        buf.write("\2\2\u00e8\u00e9\7\37\2\2\u00e9\t\3\2\2\2\u00ea\u00eb")
        buf.write("\7 \2\2\u00eb\13\3\2\2\2\u00ec\u00ed\t\3\2\2\u00ed\r\3")
        buf.write("\2\2\2\u00ee\u00f3\7\"\2\2\u00ef\u00f3\7\26\2\2\u00f0")
        buf.write("\u00f1\7\26\2\2\u00f1\u00f3\7\26\2\2\u00f2\u00ee\3\2\2")
        buf.write("\2\u00f2\u00ef\3\2\2\2\u00f2\u00f0\3\2\2\2\u00f3\17\3")
        buf.write("\2\2\2\u00f4\u00f5\7#\2\2\u00f5\21\3\2\2\2\u00f6\u00f7")
        buf.write("\7$\2\2\u00f7\23\3\2\2\2\u00f8\u00f9\7%\2\2\u00f9\25\3")
        buf.write("\2\2\2\u00fa\u00fb\7&\2\2\u00fb\27\3\2\2\2\u00fc\u0108")
        buf.write("\5\2\2\2\u00fd\u0108\5\4\3\2\u00fe\u0108\5\6\4\2\u00ff")
        buf.write("\u0108\5\b\5\2\u0100\u0108\5\n\6\2\u0101\u0108\5\f\7\2")
        buf.write("\u0102\u0108\5\16\b\2\u0103\u0108\5\20\t\2\u0104\u0108")
        buf.write("\5\22\n\2\u0105\u0108\5\24\13\2\u0106\u0108\5\26\f\2\u0107")
        buf.write("\u00fc\3\2\2\2\u0107\u00fd\3\2\2\2\u0107\u00fe\3\2\2\2")
        buf.write("\u0107\u00ff\3\2\2\2\u0107\u0100\3\2\2\2\u0107\u0101\3")
        buf.write("\2\2\2\u0107\u0102\3\2\2\2\u0107\u0103\3\2\2\2\u0107\u0104")
        buf.write("\3\2\2\2\u0107\u0105\3\2\2\2\u0107\u0106\3\2\2\2\u0108")
        buf.write("\31\3\2\2\2\u0109\u010a\5\30\r\2\u010a\33\3\2\2\2\u010b")
        buf.write("\u010c\7q\2\2\u010c\35\3\2\2\2\u010d\u010f\5\34\17\2\u010e")
        buf.write("\u010d\3\2\2\2\u010e\u010f\3\2\2\2\u010f\37\3\2\2\2\u0110")
        buf.write("\u0112\5\34\17\2\u0111\u0110\3\2\2\2\u0111\u0112\3\2\2")
        buf.write("\2\u0112!\3\2\2\2\u0113\u0114\t\4\2\2\u0114#\3\2\2\2\u0115")
        buf.write("\u0116\t\5\2\2\u0116%\3\2\2\2\u0117\u0118\t\6\2\2\u0118")
        buf.write("\'\3\2\2\2\u0119\u011c\5$\23\2\u011a\u011c\5&\24\2\u011b")
        buf.write("\u0119\3\2\2\2\u011b\u011a\3\2\2\2\u011c)\3\2\2\2\u011d")
        buf.write("\u011e\t\7\2\2\u011e+\3\2\2\2\u011f\u0122\5@!\2\u0120")
        buf.write("\u0121\7\25\2\2\u0121\u0123\5\u00d8m\2\u0122\u0120\3\2")
        buf.write("\2\2\u0122\u0123\3\2\2\2\u0123-\3\2\2\2\u0124\u0125\7")
        buf.write("\n\2\2\u0125\u0168\5\36\20\2\u0126\u0129\6\30\2\2\u0127")
        buf.write("\u012a\5\u00d6l\2\u0128\u012a\5\u008eH\2\u0129\u0127\3")
        buf.write("\2\2\2\u0129\u0128\3\2\2\2\u012a\u0132\3\2\2\2\u012b\u012e")
        buf.write("\7\t\2\2\u012c\u012f\5\u00d6l\2\u012d\u012f\5\u008eH\2")
        buf.write("\u012e\u012c\3\2\2\2\u012e\u012d\3\2\2\2\u012f\u0131\3")
        buf.write("\2\2\2\u0130\u012b\3\2\2\2\u0131\u0134\3\2\2\2\u0132\u0130")
        buf.write("\3\2\2\2\u0132\u0133\3\2\2\2\u0133\u0169\3\2\2\2\u0134")
        buf.write("\u0132\3\2\2\2\u0135\u0138\7\t\2\2\u0136\u0139\5\u00d6")
        buf.write("l\2\u0137\u0139\5\u008eH\2\u0138\u0136\3\2\2\2\u0138\u0137")
        buf.write("\3\2\2\2\u0139\u0141\3\2\2\2\u013a\u013d\7\t\2\2\u013b")
        buf.write("\u013e\5\u00d6l\2\u013c\u013e\5\u008eH\2\u013d\u013b\3")
        buf.write("\2\2\2\u013d\u013c\3\2\2\2\u013e\u0140\3\2\2\2\u013f\u013a")
        buf.write("\3\2\2\2\u0140\u0143\3\2\2\2\u0141\u013f\3\2\2\2\u0141")
        buf.write("\u0142\3\2\2\2\u0142\u0169\3\2\2\2\u0143\u0141\3\2\2\2")
        buf.write("\u0144\u0169\5,\27\2\u0145\u0166\5B\"\2\u0146\u0147\7")
        buf.write("\27\2\2\u0147\u0157\5r:\2\u0148\u014b\7\t\2\2\u0149\u014c")
        buf.write("\5\u00d6l\2\u014a\u014c\5\u008eH\2\u014b\u0149\3\2\2\2")
        buf.write("\u014b\u014a\3\2\2\2\u014c\u0154\3\2\2\2\u014d\u0150\7")
        buf.write("\t\2\2\u014e\u0151\5\u00d6l\2\u014f\u0151\5\u008eH\2\u0150")
        buf.write("\u014e\3\2\2\2\u0150\u014f\3\2\2\2\u0151\u0153\3\2\2\2")
        buf.write("\u0152\u014d\3\2\2\2\u0153\u0156\3\2\2\2\u0154\u0152\3")
        buf.write("\2\2\2\u0154\u0155\3\2\2\2\u0155\u0158\3\2\2\2\u0156\u0154")
        buf.write("\3\2\2\2\u0157\u0148\3\2\2\2\u0157\u0158\3\2\2\2\u0158")
        buf.write("\u0167\3\2\2\2\u0159\u015a\7\25\2\2\u015a\u0164\5r:\2")
        buf.write("\u015b\u015c\7\b\2\2\u015c\u0161\5\\/\2\u015d\u015e\7")
        buf.write("\b\2\2\u015e\u0160\5\\/\2\u015f\u015d\3\2\2\2\u0160\u0163")
        buf.write("\3\2\2\2\u0161\u015f\3\2\2\2\u0161\u0162\3\2\2\2\u0162")
        buf.write("\u0165\3\2\2\2\u0163\u0161\3\2\2\2\u0164\u015b\3\2\2\2")
        buf.write("\u0164\u0165\3\2\2\2\u0165\u0167\3\2\2\2\u0166\u0146\3")
        buf.write("\2\2\2\u0166\u0159\3\2\2\2\u0167\u0169\3\2\2\2\u0168\u0126")
        buf.write("\3\2\2\2\u0168\u0135\3\2\2\2\u0168\u0144\3\2\2\2\u0168")
        buf.write("\u0145\3\2\2\2\u0169\u016a\3\2\2\2\u016a\u016b\5 \21\2")
        buf.write("\u016b\u016c\7\13\2\2\u016c/\3\2\2\2\u016d\u016e\7\n\2")
        buf.write("\2\u016e\u0175\5\36\20\2\u016f\u0171\5\\/\2\u0170\u0172")
        buf.write("\7\b\2\2\u0171\u0170\3\2\2\2\u0171\u0172\3\2\2\2\u0172")
        buf.write("\u0174\3\2\2\2\u0173\u016f\3\2\2\2\u0174\u0177\3\2\2\2")
        buf.write("\u0175\u0173\3\2\2\2\u0175\u0176\3\2\2\2\u0176\u0178\3")
        buf.write("\2\2\2\u0177\u0175\3\2\2\2\u0178\u0179\5 \21\2\u0179\u017a")
        buf.write("\7\13\2\2\u017a\61\3\2\2\2\u017b\u017c\7\16\2\2\u017c")
        buf.write("\u0183\5\36\20\2\u017d\u017f\5\\/\2\u017e\u0180\7\b\2")
        buf.write("\2\u017f\u017e\3\2\2\2\u017f\u0180\3\2\2\2\u0180\u0182")
        buf.write("\3\2\2\2\u0181\u017d\3\2\2\2\u0182\u0185\3\2\2\2\u0183")
        buf.write("\u0181\3\2\2\2\u0183\u0184\3\2\2\2\u0184\u0186\3\2\2\2")
        buf.write("\u0185\u0183\3\2\2\2\u0186\u0187\5 \21\2\u0187\u0188\7")
        buf.write("\17\2\2\u0188\63\3\2\2\2\u0189\u018a\5B\"\2\u018a\65\3")
        buf.write("\2\2\2\u018b\u0191\5*\26\2\u018c\u0191\5f\64\2\u018d\u0191")
        buf.write("\5b\62\2\u018e\u0191\5.\30\2\u018f\u0191\5\62\32\2\u0190")
        buf.write("\u018b\3\2\2\2\u0190\u018c\3\2\2\2\u0190\u018d\3\2\2\2")
        buf.write("\u0190\u018e\3\2\2\2\u0190\u018f\3\2\2\2\u0191\67\3\2")
        buf.write("\2\2\u0192\u0193\5r:\2\u01939\3\2\2\2\u0194\u0199\58\35")
        buf.write("\2\u0195\u0196\7\b\2\2\u0196\u0198\58\35\2\u0197\u0195")
        buf.write("\3\2\2\2\u0198\u019b\3\2\2\2\u0199\u0197\3\2\2\2\u0199")
        buf.write("\u019a\3\2\2\2\u019a;\3\2\2\2\u019b\u0199\3\2\2\2\u019c")
        buf.write("\u01a3\7\n\2\2\u019d\u019f\5\\/\2\u019e\u01a0\7\b\2\2")
        buf.write("\u019f\u019e\3\2\2\2\u019f\u01a0\3\2\2\2\u01a0\u01a2\3")
        buf.write("\2\2\2\u01a1\u019d\3\2\2\2\u01a2\u01a5\3\2\2\2\u01a3\u01a1")
        buf.write("\3\2\2\2\u01a3\u01a4\3\2\2\2\u01a4\u01a6\3\2\2\2\u01a5")
        buf.write("\u01a3\3\2\2\2\u01a6\u01b6\7\13\2\2\u01a7\u01a8\7\26\2")
        buf.write("\2\u01a8\u01a9\5\36\20\2\u01a9\u01ab\5f\64\2\u01aa\u01ac")
        buf.write("\5*\26\2\u01ab\u01aa\3\2\2\2\u01ab\u01ac\3\2\2\2\u01ac")
        buf.write("\u01b6\3\2\2\2\u01ad\u01ae\7\16\2\2\u01ae\u01af\5\36\20")
        buf.write("\2\u01af\u01b0\5:\36\2\u01b0\u01b1\5 \21\2\u01b1\u01b2")
        buf.write("\7\17\2\2\u01b2\u01b6\3\2\2\2\u01b3\u01b4\6\37\3\2\u01b4")
        buf.write("\u01b6\5r:\2\u01b5\u019c\3\2\2\2\u01b5\u01a7\3\2\2\2\u01b5")
        buf.write("\u01ad\3\2\2\2\u01b5\u01b3\3\2\2\2\u01b6=\3\2\2\2\u01b7")
        buf.write("\u01b8\5$\23\2\u01b8\u01b9\5\64\33\2\u01b9\u01c8\3\2\2")
        buf.write("\2\u01ba\u01bc\5\32\16\2\u01bb\u01ba\3\2\2\2\u01bc\u01bf")
        buf.write("\3\2\2\2\u01bd\u01bb\3\2\2\2\u01bd\u01be\3\2\2\2\u01be")
        buf.write("\u01c0\3\2\2\2\u01bf\u01bd\3\2\2\2\u01c0\u01c4\5\66\34")
        buf.write("\2\u01c1\u01c3\5<\37\2\u01c2\u01c1\3\2\2\2\u01c3\u01c6")
        buf.write("\3\2\2\2\u01c4\u01c2\3\2\2\2\u01c4\u01c5\3\2\2\2\u01c5")
        buf.write("\u01c8\3\2\2\2\u01c6\u01c4\3\2\2\2\u01c7\u01b7\3\2\2\2")
        buf.write("\u01c7\u01bd\3\2\2\2\u01c8?\3\2\2\2\u01c9\u01ca\7\f\2")
        buf.write("\2\u01ca\u01cb\7\26\2\2\u01cb\u01d2\5\36\20\2\u01cc\u01ce")
        buf.write("\5Z.\2\u01cd\u01cf\7\b\2\2\u01ce\u01cd\3\2\2\2\u01ce\u01cf")
        buf.write("\3\2\2\2\u01cf\u01d1\3\2\2\2\u01d0\u01cc\3\2\2\2\u01d1")
        buf.write("\u01d4\3\2\2\2\u01d2\u01d0\3\2\2\2\u01d2\u01d3\3\2\2\2")
        buf.write("\u01d3\u01d5\3\2\2\2\u01d4\u01d2\3\2\2\2\u01d5\u01d7\5")
        buf.write(" \21\2\u01d6\u01d8\7\26\2\2\u01d7\u01d6\3\2\2\2\u01d7")
        buf.write("\u01d8\3\2\2\2\u01d8\u01d9\3\2\2\2\u01d9\u01da\7\r\2\2")
        buf.write("\u01daA\3\2\2\2\u01db\u01e2\5D#\2\u01dc\u01dd\7\34\2\2")
        buf.write("\u01dd\u01de\5\36\20\2\u01de\u01df\5D#\2\u01df\u01e1\3")
        buf.write("\2\2\2\u01e0\u01dc\3\2\2\2\u01e1\u01e4\3\2\2\2\u01e2\u01e0")
        buf.write("\3\2\2\2\u01e2\u01e3\3\2\2\2\u01e3C\3\2\2\2\u01e4\u01e2")
        buf.write("\3\2\2\2\u01e5\u01ec\5F$\2\u01e6\u01e7\7\35\2\2\u01e7")
        buf.write("\u01e8\5\36\20\2\u01e8\u01e9\5F$\2\u01e9\u01eb\3\2\2\2")
        buf.write("\u01ea\u01e6\3\2\2\2\u01eb\u01ee\3\2\2\2\u01ec\u01ea\3")
        buf.write("\2\2\2\u01ec\u01ed\3\2\2\2\u01edE\3\2\2\2\u01ee\u01ec")
        buf.write("\3\2\2\2\u01ef\u01f6\5H%\2\u01f0\u01f1\7\36\2\2\u01f1")
        buf.write("\u01f2\5\36\20\2\u01f2\u01f3\5H%\2\u01f3\u01f5\3\2\2\2")
        buf.write("\u01f4\u01f0\3\2\2\2\u01f5\u01f8\3\2\2\2\u01f6\u01f4\3")
        buf.write("\2\2\2\u01f6\u01f7\3\2\2\2\u01f7G\3\2\2\2\u01f8\u01f6")
        buf.write("\3\2\2\2\u01f9\u0200\5J&\2\u01fa\u01fb\7\37\2\2\u01fb")
        buf.write("\u01fc\5\36\20\2\u01fc\u01fd\5J&\2\u01fd\u01ff\3\2\2\2")
        buf.write("\u01fe\u01fa\3\2\2\2\u01ff\u0202\3\2\2\2\u0200\u01fe\3")
        buf.write("\2\2\2\u0200\u0201\3\2\2\2\u0201I\3\2\2\2\u0202\u0200")
        buf.write("\3\2\2\2\u0203\u020a\5L\'\2\u0204\u0205\7 \2\2\u0205\u0206")
        buf.write("\5\36\20\2\u0206\u0207\5L\'\2\u0207\u0209\3\2\2\2\u0208")
        buf.write("\u0204\3\2\2\2\u0209\u020c\3\2\2\2\u020a\u0208\3\2\2\2")
        buf.write("\u020a\u020b\3\2\2\2\u020bK\3\2\2\2\u020c\u020a\3\2\2")
        buf.write("\2\u020d\u0214\5N(\2\u020e\u020f\7!\2\2\u020f\u0210\5")
        buf.write("\36\20\2\u0210\u0211\5N(\2\u0211\u0213\3\2\2\2\u0212\u020e")
        buf.write("\3\2\2\2\u0213\u0216\3\2\2\2\u0214\u0212\3\2\2\2\u0214")
        buf.write("\u0215\3\2\2\2\u0215M\3\2\2\2\u0216\u0214\3\2\2\2\u0217")
        buf.write("\u021e\5P)\2\u0218\u0219\7\"\2\2\u0219\u021a\5\36\20\2")
        buf.write("\u021a\u021b\5P)\2\u021b\u021d\3\2\2\2\u021c\u0218\3\2")
        buf.write("\2\2\u021d\u0220\3\2\2\2\u021e\u021c\3\2\2\2\u021e\u021f")
        buf.write("\3\2\2\2\u021fO\3\2\2\2\u0220\u021e\3\2\2\2\u0221\u0228")
        buf.write("\5R*\2\u0222\u0223\7#\2\2\u0223\u0224\5\36\20\2\u0224")
        buf.write("\u0225\5R*\2\u0225\u0227\3\2\2\2\u0226\u0222\3\2\2\2\u0227")
        buf.write("\u022a\3\2\2\2\u0228\u0226\3\2\2\2\u0228\u0229\3\2\2\2")
        buf.write("\u0229Q\3\2\2\2\u022a\u0228\3\2\2\2\u022b\u0232\5T+\2")
        buf.write("\u022c\u022d\7$\2\2\u022d\u022e\5\36\20\2\u022e\u022f")
        buf.write("\5T+\2\u022f\u0231\3\2\2\2\u0230\u022c\3\2\2\2\u0231\u0234")
        buf.write("\3\2\2\2\u0232\u0230\3\2\2\2\u0232\u0233\3\2\2\2\u0233")
        buf.write("S\3\2\2\2\u0234\u0232\3\2\2\2\u0235\u023c\5V,\2\u0236")
        buf.write("\u0237\7%\2\2\u0237\u0238\5\36\20\2\u0238\u0239\5V,\2")
        buf.write("\u0239\u023b\3\2\2\2\u023a\u0236\3\2\2\2\u023b\u023e\3")
        buf.write("\2\2\2\u023c\u023a\3\2\2\2\u023c\u023d\3\2\2\2\u023dU")
        buf.write("\3\2\2\2\u023e\u023c\3\2\2\2\u023f\u0246\5> \2\u0240\u0241")
        buf.write("\7&\2\2\u0241\u0242\5\36\20\2\u0242\u0243\5> \2\u0243")
        buf.write("\u0245\3\2\2\2\u0244\u0240\3\2\2\2\u0245\u0248\3\2\2\2")
        buf.write("\u0246\u0244\3\2\2\2\u0246\u0247\3\2\2\2\u0247W\3\2\2")
        buf.write("\2\u0248\u0246\3\2\2\2\u0249\u024e\5r:\2\u024a\u024b\7")
        buf.write("\b\2\2\u024b\u024d\5r:\2\u024c\u024a\3\2\2\2\u024d\u0250")
        buf.write("\3\2\2\2\u024e\u024c\3\2\2\2\u024e\u024f\3\2\2\2\u024f")
        buf.write("Y\3\2\2\2\u0250\u024e\3\2\2\2\u0251\u0254\5r:\2\u0252")
        buf.write("\u0253\7\25\2\2\u0253\u0255\5r:\2\u0254\u0252\3\2\2\2")
        buf.write("\u0254\u0255\3\2\2\2\u0255[\3\2\2\2\u0256\u025a\5r:\2")
        buf.write("\u0257\u025b\7\25\2\2\u0258\u0259\7\27\2\2\u0259\u025b")
        buf.write("\5r:\2\u025a\u0257\3\2\2\2\u025a\u0258\3\2\2\2\u025a\u025b")
        buf.write("\3\2\2\2\u025b]\3\2\2\2\u025c\u0261\5\\/\2\u025d\u025e")
        buf.write("\7\b\2\2\u025e\u0260\5\\/\2\u025f\u025d\3\2\2\2\u0260")
        buf.write("\u0263\3\2\2\2\u0261\u025f\3\2\2\2\u0261\u0262\3\2\2\2")
        buf.write("\u0262\u0265\3\2\2\2\u0263\u0261\3\2\2\2\u0264\u0266\7")
        buf.write("\b\2\2\u0265\u0264\3\2\2\2\u0265\u0266\3\2\2\2\u0266_")
        buf.write("\3\2\2\2\u0267\u0268\5r:\2\u0268\u0269\7\25\2\2\u0269")
        buf.write("\u026a\5r:\2\u026a\u0273\5\36\20\2\u026b\u026c\79\2\2")
        buf.write("\u026c\u026d\5r:\2\u026d\u026e\7\25\2\2\u026e\u026f\5")
        buf.write("r:\2\u026f\u0270\5\36\20\2\u0270\u0272\3\2\2\2\u0271\u026b")
        buf.write("\3\2\2\2\u0272\u0275\3\2\2\2\u0273\u0271\3\2\2\2\u0273")
        buf.write("\u0274\3\2\2\2\u0274\u0276\3\2\2\2\u0275\u0273\3\2\2\2")
        buf.write("\u0276\u0277\7:\2\2\u0277\u0278\7\25\2\2\u0278\u0279\5")
        buf.write("r:\2\u0279a\3\2\2\2\u027a\u027b\t\b\2\2\u027bc\3\2\2\2")
        buf.write("\u027c\u0288\5(\25\2\u027d\u0288\7X\2\2\u027e\u0288\5")
        buf.write("b\62\2\u027f\u0286\5\30\r\2\u0280\u0286\7\n\2\2\u0281")
        buf.write("\u0286\7\13\2\2\u0282\u0286\7\16\2\2\u0283\u0286\7\17")
        buf.write("\2\2\u0284\u0286\7\27\2\2\u0285\u027f\3\2\2\2\u0285\u0280")
        buf.write("\3\2\2\2\u0285\u0281\3\2\2\2\u0285\u0282\3\2\2\2\u0285")
        buf.write("\u0283\3\2\2\2\u0285\u0284\3\2\2\2\u0286\u0288\3\2\2\2")
        buf.write("\u0287\u027c\3\2\2\2\u0287\u027d\3\2\2\2\u0287\u027e\3")
        buf.write("\2\2\2\u0287\u0285\3\2\2\2\u0288e\3\2\2\2\u0289\u028b")
        buf.write("\7W\2\2\u028a\u028c\5d\63\2\u028b\u028a\3\2\2\2\u028c")
        buf.write("\u028d\3\2\2\2\u028d\u028b\3\2\2\2\u028d\u028e\3\2\2\2")
        buf.write("\u028e\u028f\3\2\2\2\u028f\u0290\7W\2\2\u0290\u0294\3")
        buf.write("\2\2\2\u0291\u0294\5(\25\2\u0292\u0294\7X\2\2\u0293\u0289")
        buf.write("\3\2\2\2\u0293\u0291\3\2\2\2\u0293\u0292\3\2\2\2\u0294")
        buf.write("g\3\2\2\2\u0295\u0297\7O\2\2\u0296\u0298\5f\64\2\u0297")
        buf.write("\u0296\3\2\2\2\u0297\u0298\3\2\2\2\u0298\u0299\3\2\2\2")
        buf.write("\u0299\u029a\7\25\2\2\u029a\u029b\5\u00d8m\2\u029bi\3")
        buf.write("\2\2\2\u029c\u029d\78\2\2\u029d\u029e\5`\61\2\u029ek\3")
        buf.write("\2\2\2\u029f\u02a0\7D\2\2\u02a0\u02a1\5`\61\2\u02a1m\3")
        buf.write("\2\2\2\u02a2\u02a3\5r:\2\u02a3\u02a4\7\26\2\2\u02a4\u02ac")
        buf.write("\5\36\20\2\u02a5\u02ad\5f\64\2\u02a6\u02a7\7\16\2\2\u02a7")
        buf.write("\u02a8\7\25\2\2\u02a8\u02a9\3\2\2\2\u02a9\u02aa\5X-\2")
        buf.write("\u02aa\u02ab\7\17\2\2\u02ab\u02ad\3\2\2\2\u02ac\u02a5")
        buf.write("\3\2\2\2\u02ac\u02a6\3\2\2\2\u02ado\3\2\2\2\u02ae\u02af")
        buf.write("\5\u00caf\2\u02afq\3\2\2\2\u02b0\u02b2\7\32\2\2\u02b1")
        buf.write("\u02b0\3\2\2\2\u02b1\u02b2\3\2\2\2\u02b2\u02b9\3\2\2\2")
        buf.write("\u02b3\u02ba\5h\65\2\u02b4\u02ba\5p9\2\u02b5\u02ba\5j")
        buf.write("\66\2\u02b6\u02ba\5l\67\2\u02b7\u02ba\5\u0084C\2\u02b8")
        buf.write("\u02ba\5B\"\2\u02b9\u02b3\3\2\2\2\u02b9\u02b4\3\2\2\2")
        buf.write("\u02b9\u02b5\3\2\2\2\u02b9\u02b6\3\2\2\2\u02b9\u02b7\3")
        buf.write("\2\2\2\u02b9\u02b8\3\2\2\2\u02bas\3\2\2\2\u02bb\u02bc")
        buf.write("\7X\2\2\u02bcu\3\2\2\2\u02bd\u02be\7\25\2\2\u02be\u02bf")
        buf.write("\5\u00d8m\2\u02bfw\3\2\2\2\u02c0\u02c1\7\62\2\2\u02c1")
        buf.write("\u02c3\5\36\20\2\u02c2\u02c4\5r:\2\u02c3\u02c2\3\2\2\2")
        buf.write("\u02c3\u02c4\3\2\2\2\u02c4y\3\2\2\2\u02c5\u02c6\7U\2\2")
        buf.write("\u02c6\u02c8\5\36\20\2\u02c7\u02c9\5r:\2\u02c8\u02c7\3")
        buf.write("\2\2\2\u02c8\u02c9\3\2\2\2\u02c9{\3\2\2\2\u02ca\u02cb")
        buf.write("\7@\2\2\u02cb\u02cd\5\36\20\2\u02cc\u02ce\5r:\2\u02cd")
        buf.write("\u02cc\3\2\2\2\u02cd\u02ce\3\2\2\2\u02ce}\3\2\2\2\u02cf")
        buf.write("\u02d0\7?\2\2\u02d0\u02d2\5\36\20\2\u02d1\u02d3\5r:\2")
        buf.write("\u02d2\u02d1\3\2\2\2\u02d2\u02d3\3\2\2\2\u02d3\177\3\2")
        buf.write("\2\2\u02d4\u02d5\7G\2\2\u02d5\u02d6\5\36\20\2\u02d6\u02db")
        buf.write("\5r:\2\u02d7\u02d8\7\b\2\2\u02d8\u02da\5r:\2\u02d9\u02d7")
        buf.write("\3\2\2\2\u02da\u02dd\3\2\2\2\u02db\u02d9\3\2\2\2\u02db")
        buf.write("\u02dc\3\2\2\2\u02dc\u0081\3\2\2\2\u02dd\u02db\3\2\2\2")
        buf.write("\u02de\u02df\7H\2\2\u02df\u02e0\5t;\2\u02e0\u02e1\7G\2")
        buf.write("\2\u02e1\u02e2\5\36\20\2\u02e2\u02e7\5r:\2\u02e3\u02e4")
        buf.write("\7\b\2\2\u02e4\u02e6\5r:\2\u02e5\u02e3\3\2\2\2\u02e6\u02e9")
        buf.write("\3\2\2\2\u02e7\u02e5\3\2\2\2\u02e7\u02e8\3\2\2\2\u02e8")
        buf.write("\u0083\3\2\2\2\u02e9\u02e7\3\2\2\2\u02ea\u02eb\7\67\2")
        buf.write("\2\u02eb\u02ec\7X\2\2\u02ec\u02ed\5\u008aF\2\u02ed\u0085")
        buf.write("\3\2\2\2\u02ee\u02ef\7\67\2\2\u02ef\u02f1\5r:\2\u02f0")
        buf.write("\u02f2\7\25\2\2\u02f1\u02f0\3\2\2\2\u02f1\u02f2\3\2\2")
        buf.write("\2\u02f2\u02f8\3\2\2\2\u02f3\u02f4\5\34\17\2\u02f4\u02f5")
        buf.write("\5\u008aF\2\u02f5\u02f6\5\"\22\2\u02f6\u02f9\3\2\2\2\u02f7")
        buf.write("\u02f9\5\u008aF\2\u02f8\u02f3\3\2\2\2\u02f8\u02f7\3\2")
        buf.write("\2\2\u02f9\u0087\3\2\2\2\u02fa\u02fb\7\31\2\2\u02fb\u02fc")
        buf.write("\5X-\2\u02fc\u02fd\7\25\2\2\u02fd\u02fe\5\u00d8m\2\u02fe")
        buf.write("\u0089\3\2\2\2\u02ff\u0301\5\u0088E\2\u0300\u02ff\3\2")
        buf.write("\2\2\u0301\u0302\3\2\2\2\u0302\u0300\3\2\2\2\u0302\u0303")
        buf.write("\3\2\2\2\u0303\u030b\3\2\2\2\u0304\u0305\79\2\2\u0305")
        buf.write("\u0306\5r:\2\u0306\u0307\7\25\2\2\u0307\u0308\5\u00d8")
        buf.write("m\2\u0308\u030a\3\2\2\2\u0309\u0304\3\2\2\2\u030a\u030d")
        buf.write("\3\2\2\2\u030b\u0309\3\2\2\2\u030b\u030c\3\2\2\2\u030c")
        buf.write("\u0311\3\2\2\2\u030d\u030b\3\2\2\2\u030e\u030f\7:\2\2")
        buf.write("\u030f\u0310\7\25\2\2\u0310\u0312\5\u00d8m\2\u0311\u030e")
        buf.write("\3\2\2\2\u0311\u0312\3\2\2\2\u0312\u008b\3\2\2\2\u0313")
        buf.write("\u031a\5B\"\2\u0314\u0315\7\27\2\2\u0315\u0316\5\36\20")
        buf.write("\2\u0316\u0318\5r:\2\u0317\u0319\5v<\2\u0318\u0317\3\2")
        buf.write("\2\2\u0318\u0319\3\2\2\2\u0319\u031b\3\2\2\2\u031a\u0314")
        buf.write("\3\2\2\2\u031a\u031b\3\2\2\2\u031b\u008d\3\2\2\2\u031c")
        buf.write("\u0325\5x=\2\u031d\u0325\5z>\2\u031e\u0325\5|?\2\u031f")
        buf.write("\u0325\5~@\2\u0320\u0325\5,\27\2\u0321\u0325\5\u0080A")
        buf.write("\2\u0322\u0325\5\u0082B\2\u0323\u0325\5\u008cG\2\u0324")
        buf.write("\u031c\3\2\2\2\u0324\u031d\3\2\2\2\u0324\u031e\3\2\2\2")
        buf.write("\u0324\u031f\3\2\2\2\u0324\u0320\3\2\2\2\u0324\u0321\3")
        buf.write("\2\2\2\u0324\u0322\3\2\2\2\u0324\u0323\3\2\2\2\u0325\u008f")
        buf.write("\3\2\2\2\u0326\u0327\5r:\2\u0327\u0328\7\25\2\2\u0328")
        buf.write("\u0330\5\u00d8m\2\u0329\u032a\79\2\2\u032a\u032b\5r:\2")
        buf.write("\u032b\u032c\7\25\2\2\u032c\u032d\5\u00d8m\2\u032d\u032f")
        buf.write("\3\2\2\2\u032e\u0329\3\2\2\2\u032f\u0332\3\2\2\2\u0330")
        buf.write("\u032e\3\2\2\2\u0330\u0331\3\2\2\2\u0331\u0336\3\2\2\2")
        buf.write("\u0332\u0330\3\2\2\2\u0333\u0334\7:\2\2\u0334\u0335\7")
        buf.write("\25\2\2\u0335\u0337\5\u00d8m\2\u0336\u0333\3\2\2\2\u0336")
        buf.write("\u0337\3\2\2\2\u0337\u0091\3\2\2\2\u0338\u033a\5f\64\2")
        buf.write("\u0339\u033b\5\30\r\2\u033a\u0339\3\2\2\2\u033a\u033b")
        buf.write("\3\2\2\2\u033b\u0093\3\2\2\2\u033c\u033f\5f\64\2\u033d")
        buf.write("\u033e\7\26\2\2\u033e\u0340\5f\64\2\u033f\u033d\3\2\2")
        buf.write("\2\u033f\u0340\3\2\2\2\u0340\u0342\3\2\2\2\u0341\u0343")
        buf.write("\5\30\r\2\u0342\u0341\3\2\2\2\u0342\u0343\3\2\2\2\u0343")
        buf.write("\u0095\3\2\2\2\u0344\u0346\5\u0092J\2\u0345\u0347\5@!")
        buf.write("\2\u0346\u0345\3\2\2\2\u0346\u0347\3\2\2\2\u0347\u0097")
        buf.write("\3\2\2\2\u0348\u0349\78\2\2\u0349\u034a\5\u0090I\2\u034a")
        buf.write("\u0099\3\2\2\2\u034b\u034c\7D\2\2\u034c\u034d\5\u0090")
        buf.write("I\2\u034d\u009b\3\2\2\2\u034e\u034f\7<\2\2\u034f\u0350")
        buf.write("\5r:\2\u0350\u0351\7\25\2\2\u0351\u0352\5\u00d8m\2\u0352")
        buf.write("\u009d\3\2\2\2\u0353\u0358\5f\64\2\u0354\u0355\7\b\2\2")
        buf.write("\u0355\u0357\5f\64\2\u0356\u0354\3\2\2\2\u0357\u035a\3")
        buf.write("\2\2\2\u0358\u0356\3\2\2\2\u0358\u0359\3\2\2\2\u0359\u035d")
        buf.write("\3\2\2\2\u035a\u0358\3\2\2\2\u035b\u035c\7\25\2\2\u035c")
        buf.write("\u035e\5r:\2\u035d\u035b\3\2\2\2\u035d\u035e\3\2\2\2\u035e")
        buf.write("\u0363\3\2\2\2\u035f\u0360\7\27\2\2\u0360\u0361\5\36\20")
        buf.write("\2\u0361\u0362\5r:\2\u0362\u0364\3\2\2\2\u0363\u035f\3")
        buf.write("\2\2\2\u0363\u0364\3\2\2\2\u0364\u009f\3\2\2\2\u0365\u0366")
        buf.write("\7\16\2\2\u0366\u036f\5\36\20\2\u0367\u036c\5\u009eP\2")
        buf.write("\u0368\u0369\t\t\2\2\u0369\u036b\5\u009eP\2\u036a\u0368")
        buf.write("\3\2\2\2\u036b\u036e\3\2\2\2\u036c\u036a\3\2\2\2\u036c")
        buf.write("\u036d\3\2\2\2\u036d\u0370\3\2\2\2\u036e\u036c\3\2\2\2")
        buf.write("\u036f\u0367\3\2\2\2\u036f\u0370\3\2\2\2\u0370\u0371\3")
        buf.write("\2\2\2\u0371\u0372\5 \21\2\u0372\u0373\7\17\2\2\u0373")
        buf.write("\u00a1\3\2\2\2\u0374\u0376\5\u0094K\2\u0375\u0377\5@!")
        buf.write("\2\u0376\u0375\3\2\2\2\u0376\u0377\3\2\2\2\u0377\u00a3")
        buf.write("\3\2\2\2\u0378\u037b\5B\"\2\u0379\u037b\5\u00b0Y\2\u037a")
        buf.write("\u0378\3\2\2\2\u037a\u0379\3\2\2\2\u037b\u00a5\3\2\2\2")
        buf.write("\u037c\u037d\7D\2\2\u037d\u037e\5r:\2\u037e\u037f\7\25")
        buf.write("\2\2\u037f\u0387\5\u00aeX\2\u0380\u0381\79\2\2\u0381\u0382")
        buf.write("\5r:\2\u0382\u0383\7\25\2\2\u0383\u0384\5\u00aeX\2\u0384")
        buf.write("\u0386\3\2\2\2\u0385\u0380\3\2\2\2\u0386\u0389\3\2\2\2")
        buf.write("\u0387\u0385\3\2\2\2\u0387\u0388\3\2\2\2\u0388\u038d\3")
        buf.write("\2\2\2\u0389\u0387\3\2\2\2\u038a\u038b\7:\2\2\u038b\u038c")
        buf.write("\7\25\2\2\u038c\u038e\5\u00aeX\2\u038d\u038a\3\2\2\2\u038d")
        buf.write("\u038e\3\2\2\2\u038e\u00a7\3\2\2\2\u038f\u0390\7\31\2")
        buf.write("\2\u0390\u0391\5X-\2\u0391\u0392\7\25\2\2\u0392\u0393")
        buf.write("\5\u00aeX\2\u0393\u00a9\3\2\2\2\u0394\u0398\5\u00a8U\2")
        buf.write("\u0395\u0397\5\u00a8U\2\u0396\u0395\3\2\2\2\u0397\u039a")
        buf.write("\3\2\2\2\u0398\u0396\3\2\2\2\u0398\u0399\3\2\2\2\u0399")
        buf.write("\u03a2\3\2\2\2\u039a\u0398\3\2\2\2\u039b\u039c\79\2\2")
        buf.write("\u039c\u039d\5r:\2\u039d\u039e\7\25\2\2\u039e\u039f\5")
        buf.write("\u00aeX\2\u039f\u03a1\3\2\2\2\u03a0\u039b\3\2\2\2\u03a1")
        buf.write("\u03a4\3\2\2\2\u03a2\u03a0\3\2\2\2\u03a2\u03a3\3\2\2\2")
        buf.write("\u03a3\u03a8\3\2\2\2\u03a4\u03a2\3\2\2\2\u03a5\u03a6\7")
        buf.write(":\2\2\u03a6\u03a7\7\25\2\2\u03a7\u03a9\5\u00aeX\2\u03a8")
        buf.write("\u03a5\3\2\2\2\u03a8\u03a9\3\2\2\2\u03a9\u00ab\3\2\2\2")
        buf.write("\u03aa\u03ab\7\67\2\2\u03ab\u03ac\5\u0096L\2\u03ac\u03ad")
        buf.write("\7\25\2\2\u03ad\u03af\5\64\33\2\u03ae\u03b0\7\25\2\2\u03af")
        buf.write("\u03ae\3\2\2\2\u03af\u03b0\3\2\2\2\u03b0\u03b6\3\2\2\2")
        buf.write("\u03b1\u03b2\5\34\17\2\u03b2\u03b3\5\u00aaV\2\u03b3\u03b4")
        buf.write("\5\"\22\2\u03b4\u03b7\3\2\2\2\u03b5\u03b7\5\u00aaV\2\u03b6")
        buf.write("\u03b1\3\2\2\2\u03b6\u03b5\3\2\2\2\u03b7\u00ad\3\2\2\2")
        buf.write("\u03b8\u03ba\5\34\17\2\u03b9\u03bb\5\u00aeX\2\u03ba\u03b9")
        buf.write("\3\2\2\2\u03bb\u03bc\3\2\2\2\u03bc\u03ba\3\2\2\2\u03bc")
        buf.write("\u03bd\3\2\2\2\u03bd\u03be\3\2\2\2\u03be\u03bf\5\"\22")
        buf.write("\2\u03bf\u03c6\3\2\2\2\u03c0\u03c6\5\u00a6T\2\u03c1\u03c6")
        buf.write("\5\u00acW\2\u03c2\u03c6\7Q\2\2\u03c3\u03c6\7U\2\2\u03c4")
        buf.write("\u03c6\5\u00bc_\2\u03c5\u03b8\3\2\2\2\u03c5\u03c0\3\2")
        buf.write("\2\2\u03c5\u03c1\3\2\2\2\u03c5\u03c2\3\2\2\2\u03c5\u03c3")
        buf.write("\3\2\2\2\u03c5\u03c4\3\2\2\2\u03c6\u00af\3\2\2\2\u03c7")
        buf.write("\u03c9\7\22\2\2\u03c8\u03ca\5@!\2\u03c9\u03c8\3\2\2\2")
        buf.write("\u03c9\u03ca\3\2\2\2\u03ca\u03cd\3\2\2\2\u03cb\u03cc\7")
        buf.write("\31\2\2\u03cc\u03ce\5\64\33\2\u03cd\u03cb\3\2\2\2\u03cd")
        buf.write("\u03ce\3\2\2\2\u03ce\u03cf\3\2\2\2\u03cf\u03d0\5\u00ae")
        buf.write("X\2\u03d0\u00b1\3\2\2\2\u03d1\u03d3\7\'\2\2\u03d2\u03d1")
        buf.write("\3\2\2\2\u03d2\u03d3\3\2\2\2\u03d3\u03d4\3\2\2\2\u03d4")
        buf.write("\u03d5\5f\64\2\u03d5\u00b3\3\2\2\2\u03d6\u03db\5\u00b2")
        buf.write("Z\2\u03d7\u03d8\7\b\2\2\u03d8\u03da\5\u00b2Z\2\u03d9\u03d7")
        buf.write("\3\2\2\2\u03da\u03dd\3\2\2\2\u03db\u03d9\3\2\2\2\u03db")
        buf.write("\u03dc\3\2\2\2\u03dc\u03df\3\2\2\2\u03dd\u03db\3\2\2\2")
        buf.write("\u03de\u03d6\3\2\2\2\u03de\u03df\3\2\2\2\u03df\u03e1\3")
        buf.write("\2\2\2\u03e0\u03e2\5@!\2\u03e1\u03e0\3\2\2\2\u03e1\u03e2")
        buf.write("\3\2\2\2\u03e2\u03ee\3\2\2\2\u03e3\u03ec\7\31\2\2\u03e4")
        buf.write("\u03e9\5\64\33\2\u03e5\u03e6\7\b\2\2\u03e6\u03e8\5\64")
        buf.write("\33\2\u03e7\u03e5\3\2\2\2\u03e8\u03eb\3\2\2\2\u03e9\u03e7")
        buf.write("\3\2\2\2\u03e9\u03ea\3\2\2\2\u03ea\u03ed\3\2\2\2\u03eb")
        buf.write("\u03e9\3\2\2\2\u03ec\u03e4\3\2\2\2\u03ec\u03ed\3\2\2\2")
        buf.write("\u03ed\u03ef\3\2\2\2\u03ee\u03e3\3\2\2\2\u03ee\u03ef\3")
        buf.write("\2\2\2\u03ef\u03f0\3\2\2\2\u03f0\u03f1\6[\4\2\u03f1\u03f2")
        buf.write("\5\u00d8m\2\u03f2\u00b5\3\2\2\2\u03f3\u03f5\5\u00a2R\2")
        buf.write("\u03f4\u03f6\5\u00a0Q\2\u03f5\u03f4\3\2\2\2\u03f5\u03f6")
        buf.write("\3\2\2\2\u03f6\u03f7\3\2\2\2\u03f7\u03f8\7\27\2\2\u03f8")
        buf.write("\u03f9\5\36\20\2\u03f9\u03fa\5\u00a4S\2\u03fa\u03fb\5")
        buf.write("\36\20\2\u03fb\u00b7\3\2\2\2\u03fc\u03ff\5\u0096L\2\u03fd")
        buf.write("\u03fe\7\25\2\2\u03fe\u0400\5\64\33\2\u03ff\u03fd\3\2")
        buf.write("\2\2\u03ff\u0400\3\2\2\2\u0400\u0401\3\2\2\2\u0401\u0402")
        buf.write("\7\27\2\2\u0402\u0403\5\36\20\2\u0403\u0404\5r:\2\u0404")
        buf.write("\u0405\5\36\20\2\u0405\u00b9\3\2\2\2\u0406\u0407\7\n\2")
        buf.write("\2\u0407\u0408\5\36\20\2\u0408\u040d\5\u0096L\2\u0409")
        buf.write("\u040a\7\b\2\2\u040a\u040c\5\u0096L\2\u040b\u0409\3\2")
        buf.write("\2\2\u040c\u040f\3\2\2\2\u040d\u040b\3\2\2\2\u040d\u040e")
        buf.write("\3\2\2\2\u040e\u0410\3\2\2\2\u040f\u040d\3\2\2\2\u0410")
        buf.write("\u0411\5 \21\2\u0411\u0412\7\13\2\2\u0412\u0413\7\27\2")
        buf.write("\2\u0413\u0414\5\36\20\2\u0414\u0415\5r:\2\u0415\u00bb")
        buf.write("\3\2\2\2\u0416\u041b\5\u0096L\2\u0417\u0418\7\b\2\2\u0418")
        buf.write("\u041a\5\u0096L\2\u0419\u0417\3\2\2\2\u041a\u041d\3\2")
        buf.write("\2\2\u041b\u0419\3\2\2\2\u041b\u041c\3\2\2\2\u041c\u041f")
        buf.write("\3\2\2\2\u041d\u041b\3\2\2\2\u041e\u0420\7\b\2\2\u041f")
        buf.write("\u041e\3\2\2\2\u041f\u0420\3\2\2\2\u0420\u0425\3\2\2\2")
        buf.write("\u0421\u0422\7\25\2\2\u0422\u0423\5\36\20\2\u0423\u0424")
        buf.write("\5\64\33\2\u0424\u0426\3\2\2\2\u0425\u0421\3\2\2\2\u0425")
        buf.write("\u0426\3\2\2\2\u0426\u042b\3\2\2\2\u0427\u0428\7\27\2")
        buf.write("\2\u0428\u0429\5\36\20\2\u0429\u042a\5r:\2\u042a\u042c")
        buf.write("\3\2\2\2\u042b\u0427\3\2\2\2\u042b\u042c\3\2\2\2\u042c")
        buf.write("\u00bd\3\2\2\2\u042d\u0432\7X\2\2\u042e\u042f\7\b\2\2")
        buf.write("\u042f\u0431\7X\2\2\u0430\u042e\3\2\2\2\u0431\u0434\3")
        buf.write("\2\2\2\u0432\u0430\3\2\2\2\u0432\u0433\3\2\2\2\u0433\u0436")
        buf.write("\3\2\2\2\u0434\u0432\3\2\2\2\u0435\u0437\7\b\2\2\u0436")
        buf.write("\u0435\3\2\2\2\u0436\u0437\3\2\2\2\u0437\u0440\3\2\2\2")
        buf.write("\u0438\u0439\7\25\2\2\u0439\u043a\5\36\20\2\u043a\u043b")
        buf.write("\5\64\33\2\u043b\u0441\3\2\2\2\u043c\u043d\7\27\2\2\u043d")
        buf.write("\u043e\5\36\20\2\u043e\u043f\5r:\2\u043f\u0441\3\2\2\2")
        buf.write("\u0440\u0438\3\2\2\2\u0440\u043c\3\2\2\2\u0441\u00bf\3")
        buf.write("\2\2\2\u0442\u044b\7\n\2\2\u0443\u0448\5\u00bc_\2\u0444")
        buf.write("\u0445\t\t\2\2\u0445\u0447\5\u00bc_\2\u0446\u0444\3\2")
        buf.write("\2\2\u0447\u044a\3\2\2\2\u0448\u0446\3\2\2\2\u0448\u0449")
        buf.write("\3\2\2\2\u0449\u044c\3\2\2\2\u044a\u0448\3\2\2\2\u044b")
        buf.write("\u0443\3\2\2\2\u044b\u044c\3\2\2\2\u044c\u044d\3\2\2\2")
        buf.write("\u044d\u0457\7\13\2\2\u044e\u0453\5\u00bc_\2\u044f\u0450")
        buf.write("\t\t\2\2\u0450\u0452\5\u00bc_\2\u0451\u044f\3\2\2\2\u0452")
        buf.write("\u0455\3\2\2\2\u0453\u0451\3\2\2\2\u0453\u0454\3\2\2\2")
        buf.write("\u0454\u0457\3\2\2\2\u0455\u0453\3\2\2\2\u0456\u0442\3")
        buf.write("\2\2\2\u0456\u044e\3\2\2\2\u0457\u00c1\3\2\2\2\u0458\u045a")
        buf.write("\5\u00c0a\2\u0459\u0458\3\2\2\2\u0459\u045a\3\2\2\2\u045a")
        buf.write("\u045f\3\2\2\2\u045b\u045c\7\25\2\2\u045c\u045d\5\36\20")
        buf.write("\2\u045d\u045e\5\64\33\2\u045e\u0460\3\2\2\2\u045f\u045b")
        buf.write("\3\2\2\2\u045f\u0460\3\2\2\2\u0460\u00c3\3\2\2\2\u0461")
        buf.write("\u0462\7+\2\2\u0462\u0464\5\u00c2b\2\u0463\u0465\5@!\2")
        buf.write("\u0464\u0463\3\2\2\2\u0464\u0465\3\2\2\2\u0465\u0468\3")
        buf.write("\2\2\2\u0466\u0467\7\27\2\2\u0467\u0469\5\u00d8m\2\u0468")
        buf.write("\u0466\3\2\2\2\u0468\u0469\3\2\2\2\u0469\u046a\3\2\2\2")
        buf.write("\u046a\u046b\5\36\20\2\u046b\u00c5\3\2\2\2\u046c\u046f")
        buf.write("\5\u00ba^\2\u046d\u046f\5\u00be`\2\u046e\u046c\3\2\2\2")
        buf.write("\u046e\u046d\3\2\2\2\u046f\u0471\3\2\2\2\u0470\u0472\5")
        buf.write("v<\2\u0471\u0470\3\2\2\2\u0471\u0472\3\2\2\2\u0472\u0473")
        buf.write("\3\2\2\2\u0473\u0474\5\36\20\2\u0474\u00c7\3\2\2\2\u0475")
        buf.write("\u047a\5f\64\2\u0476\u0477\7\26\2\2\u0477\u0478\5\36\20")
        buf.write("\2\u0478\u0479\5f\64\2\u0479\u047b\3\2\2\2\u047a\u0476")
        buf.write("\3\2\2\2\u047a\u047b\3\2\2\2\u047b\u00c9\3\2\2\2\u047c")
        buf.write("\u047d\7>\2\2\u047d\u0482\5\u0096L\2\u047e\u047f\7\b\2")
        buf.write("\2\u047f\u0481\5\u0096L\2\u0480\u047e\3\2\2\2\u0481\u0484")
        buf.write("\3\2\2\2\u0482\u0480\3\2\2\2\u0482\u0483\3\2\2\2\u0483")
        buf.write("\u0485\3\2\2\2\u0484\u0482\3\2\2\2\u0485\u0486\7\30\2")
        buf.write("\2\u0486\u0487\5r:\2\u0487\u0488\7\25\2\2\u0488\u0489")
        buf.write("\5\u00d8m\2\u0489\u00cb\3\2\2\2\u048a\u048c\7O\2\2\u048b")
        buf.write("\u048d\5f\64\2\u048c\u048b\3\2\2\2\u048c\u048d\3\2\2\2")
        buf.write("\u048d\u048e\3\2\2\2\u048e\u048f\7\25\2\2\u048f\u0490")
        buf.write("\5\u00d8m\2\u0490\u00cd\3\2\2\2\u0491\u0492\5\36\20\2")
        buf.write("\u0492\u0494\5\u0092J\2\u0493\u0495\5\u00a0Q\2\u0494\u0493")
        buf.write("\3\2\2\2\u0494\u0495\3\2\2\2\u0495\u0496\3\2\2\2\u0496")
        buf.write("\u0498\5\u00c2b\2\u0497\u0499\5@!\2\u0498\u0497\3\2\2")
        buf.write("\2\u0498\u0499\3\2\2\2\u0499\u049c\3\2\2\2\u049a\u049b")
        buf.write("\7\27\2\2\u049b\u049d\5\u00d8m\2\u049c\u049a\3\2\2\2\u049c")
        buf.write("\u049d\3\2\2\2\u049d\u049e\3\2\2\2\u049e\u049f\5\36\20")
        buf.write("\2\u049f\u00cf\3\2\2\2\u04a0\u04aa\5\u00b6\\\2\u04a1\u04a3")
        buf.write("\5\34\17\2\u04a2\u04a4\5\u00b6\\\2\u04a3\u04a2\3\2\2\2")
        buf.write("\u04a4\u04a5\3\2\2\2\u04a5\u04a3\3\2\2\2\u04a5\u04a6\3")
        buf.write("\2\2\2\u04a6\u04a7\3\2\2\2\u04a7\u04a8\5\"\22\2\u04a8")
        buf.write("\u04aa\3\2\2\2\u04a9\u04a0\3\2\2\2\u04a9\u04a1\3\2\2\2")
        buf.write("\u04aa\u00d1\3\2\2\2\u04ab\u04b5\5\u00b8]\2\u04ac\u04ae")
        buf.write("\5\34\17\2\u04ad\u04af\5\u00b8]\2\u04ae\u04ad\3\2\2\2")
        buf.write("\u04af\u04b0\3\2\2\2\u04b0\u04ae\3\2\2\2\u04b0\u04b1\3")
        buf.write("\2\2\2\u04b1\u04b2\3\2\2\2\u04b2\u04b3\5\"\22\2\u04b3")
        buf.write("\u04b5\3\2\2\2\u04b4\u04ab\3\2\2\2\u04b4\u04ac\3\2\2\2")
        buf.write("\u04b5\u00d3\3\2\2\2\u04b6\u04c0\5\u00c6d\2\u04b7\u04b9")
        buf.write("\5\34\17\2\u04b8\u04ba\5\u00c6d\2\u04b9\u04b8\3\2\2\2")
        buf.write("\u04ba\u04bb\3\2\2\2\u04bb\u04b9\3\2\2\2\u04bb\u04bc\3")
        buf.write("\2\2\2\u04bc\u04bd\3\2\2\2\u04bd\u04be\5\"\22\2\u04be")
        buf.write("\u04c0\3\2\2\2\u04bf\u04b6\3\2\2\2\u04bf\u04b7\3\2\2\2")
        buf.write("\u04c0\u00d5\3\2\2\2\u04c1\u04d3\5\u0098M\2\u04c2\u04d3")
        buf.write("\5\u009aN\2\u04c3\u04d3\5\u009cO\2\u04c4\u04d3\5\u00ca")
        buf.write("f\2\u04c5\u04d3\5\u00ccg\2\u04c6\u04c7\7+\2\2\u04c7\u04d3")
        buf.write("\5\u00ceh\2\u04c8\u04c9\7P\2\2\u04c9\u04d3\5\u00ceh\2")
        buf.write("\u04ca\u04cb\7A\2\2\u04cb\u04d3\5\u00ceh\2\u04cc\u04cd")
        buf.write("\7\24\2\2\u04cd\u04d3\5\u00d0i\2\u04ce\u04cf\7)\2\2\u04cf")
        buf.write("\u04d3\5\u00d2j\2\u04d0\u04d1\t\n\2\2\u04d1\u04d3\5\u00d4")
        buf.write("k\2\u04d2\u04c1\3\2\2\2\u04d2\u04c2\3\2\2\2\u04d2\u04c3")
        buf.write("\3\2\2\2\u04d2\u04c4\3\2\2\2\u04d2\u04c5\3\2\2\2\u04d2")
        buf.write("\u04c6\3\2\2\2\u04d2\u04c8\3\2\2\2\u04d2\u04ca\3\2\2\2")
        buf.write("\u04d2\u04cc\3\2\2\2\u04d2\u04ce\3\2\2\2\u04d2\u04d0\3")
        buf.write("\2\2\2\u04d3\u00d7\3\2\2\2\u04d4\u04d7\5\u00d6l\2\u04d5")
        buf.write("\u04d7\5\u008eH\2\u04d6\u04d4\3\2\2\2\u04d6\u04d5\3\2")
        buf.write("\2\2\u04d7\u04e1\3\2\2\2\u04d8\u04da\7\t\2\2\u04d9\u04d8")
        buf.write("\3\2\2\2\u04d9\u04da\3\2\2\2\u04da\u04dd\3\2\2\2\u04db")
        buf.write("\u04de\5\u00d6l\2\u04dc\u04de\5\u008eH\2\u04dd\u04db\3")
        buf.write("\2\2\2\u04dd\u04dc\3\2\2\2\u04de\u04e0\3\2\2\2\u04df\u04d9")
        buf.write("\3\2\2\2\u04e0\u04e3\3\2\2\2\u04e1\u04df\3\2\2\2\u04e1")
        buf.write("\u04e2\3\2\2\2\u04e2\u0502\3\2\2\2\u04e3\u04e1\3\2\2\2")
        buf.write("\u04e4\u04e7\5\34\17\2\u04e5\u04e8\5\u00d6l\2\u04e6\u04e8")
        buf.write("\5\u008eH\2\u04e7\u04e5\3\2\2\2\u04e7\u04e6\3\2\2\2\u04e8")
        buf.write("\u04f2\3\2\2\2\u04e9\u04eb\7\t\2\2\u04ea\u04e9\3\2\2\2")
        buf.write("\u04ea\u04eb\3\2\2\2\u04eb\u04ee\3\2\2\2\u04ec\u04ef\5")
        buf.write("\u00d6l\2\u04ed\u04ef\5\u008eH\2\u04ee\u04ec\3\2\2\2\u04ee")
        buf.write("\u04ed\3\2\2\2\u04ef\u04f1\3\2\2\2\u04f0\u04ea\3\2\2\2")
        buf.write("\u04f1\u04f4\3\2\2\2\u04f2\u04f0\3\2\2\2\u04f2\u04f3\3")
        buf.write("\2\2\2\u04f3\u04f5\3\2\2\2\u04f4\u04f2\3\2\2\2\u04f5\u04f6")
        buf.write("\5\"\22\2\u04f6\u0502\3\2\2\2\u04f7\u04fe\5\u008eH\2\u04f8")
        buf.write("\u04fa\7\t\2\2\u04f9\u04f8\3\2\2\2\u04f9\u04fa\3\2\2\2")
        buf.write("\u04fa\u04fb\3\2\2\2\u04fb\u04fd\5\u008eH\2\u04fc\u04f9")
        buf.write("\3\2\2\2\u04fd\u0500\3\2\2\2\u04fe\u04fc\3\2\2\2\u04fe")
        buf.write("\u04ff\3\2\2\2\u04ff\u0502\3\2\2\2\u0500\u04fe\3\2\2\2")
        buf.write("\u0501\u04d6\3\2\2\2\u0501\u04e4\3\2\2\2\u0501\u04f7\3")
        buf.write("\2\2\2\u0502\u00d9\3\2\2\2\u0503\u0508\5\u00d8m\2\u0504")
        buf.write("\u0505\7\t\2\2\u0505\u0507\5\u00d8m\2\u0506\u0504\3\2")
        buf.write("\2\2\u0507\u050a\3\2\2\2\u0508\u0506\3\2\2\2\u0508\u0509")
        buf.write("\3\2\2\2\u0509\u050c\3\2\2\2\u050a\u0508\3\2\2\2\u050b")
        buf.write("\u0503\3\2\2\2\u050b\u050c\3\2\2\2\u050c\u00db\3\2\2\2")
        buf.write("\u050d\u050e\5\u00dan\2\u050e\u00dd\3\2\2\2\u009b\u00e6")
        buf.write("\u00f2\u0107\u010e\u0111\u011b\u0122\u0129\u012e\u0132")
        buf.write("\u0138\u013d\u0141\u014b\u0150\u0154\u0157\u0161\u0164")
        buf.write("\u0166\u0168\u0171\u0175\u017f\u0183\u0190\u0199\u019f")
        buf.write("\u01a3\u01ab\u01b5\u01bd\u01c4\u01c7\u01ce\u01d2\u01d7")
        buf.write("\u01e2\u01ec\u01f6\u0200\u020a\u0214\u021e\u0228\u0232")
        buf.write("\u023c\u0246\u024e\u0254\u025a\u0261\u0265\u0273\u0285")
        buf.write("\u0287\u028d\u0293\u0297\u02ac\u02b1\u02b9\u02c3\u02c8")
        buf.write("\u02cd\u02d2\u02db\u02e7\u02f1\u02f8\u0302\u030b\u0311")
        buf.write("\u0318\u031a\u0324\u0330\u0336\u033a\u033f\u0342\u0346")
        buf.write("\u0358\u035d\u0363\u036c\u036f\u0376\u037a\u0387\u038d")
        buf.write("\u0398\u03a2\u03a8\u03af\u03b6\u03bc\u03c5\u03c9\u03cd")
        buf.write("\u03d2\u03db\u03de\u03e1\u03e9\u03ec\u03ee\u03f5\u03ff")
        buf.write("\u040d\u041b\u041f\u0425\u042b\u0432\u0436\u0440\u0448")
        buf.write("\u044b\u0453\u0456\u0459\u045f\u0464\u0468\u046e\u0471")
        buf.write("\u047a\u0482\u048c\u0494\u0498\u049c\u04a5\u04a9\u04b0")
        buf.write("\u04b4\u04bb\u04bf\u04d2\u04d6\u04d9\u04dd\u04e1\u04e7")
        buf.write("\u04ea\u04ee\u04f2\u04f9\u04fe\u0501\u0508\u050b")
        return buf.getvalue()


class m2_Parser ( Parser ):

    grammarFileName = "m2_Parser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "' '", "','", "';'", "'('", "')'", "'{'", 
                     "'}'", "'['", "']'", "'interface'", "'enum'", "'object'", 
                     "'concept'", "'type'", "':'", "'.'", "'='", "'in'", 
                     "'of'", "'not'", "'$'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'var'", "'let'", "'const'", "'bind'", "'proc'", "'static'", 
                     "'method'", "'func'", "'mixin'", "'end'", "'except'", 
                     "'return'", "'try'", "'raise'", "'finally'", "'out'", 
                     "'case'", "'if'", "'elif'", "'else'", "'do'", "'while'", 
                     "'iterator'", "'for'", "'continue'", "'break'", "'template'", 
                     "'tuple'", "'using'", "'when'", "'yield'", "'include'", 
                     "'import'", "'from'", "'as'", "'export'", "'ref'", 
                     "'ptr'", "'addr'", "'asm'", "'block'", "'macro'", "'nil'", 
                     "'cast'", "'converter'", "'defer'", "'discard'", "'distinct'", 
                     "'`'" ]

    symbolicNames = [ "<INVALID>", "DOCUMENTATION_COMMENT", "MULTILINE_COMMENT", 
                      "COMMENT", "UNCONDITIONAL_NEWLINE", "WS", "COMMA", 
                      "SEMI_COLON", "OPEN_PAREN", "CLOSE_PAREN", "OPEN_BRACE", 
                      "CLOSE_BRACE", "OPEN_BRACK", "CLOSE_BRACK", "INTERFACE", 
                      "ENUM", "OBJECT", "CONCEPT", "TYPE", "COLON", "DOT", 
                      "EQUALS", "IN", "OF", "NOT", "DOLLAR_SIGN", "OP0", 
                      "OP1", "OP2", "OP3", "OP4", "OP5", "OP6", "OP7", "OP8", 
                      "OP9", "OP10", "VARIABLE", "LET", "CONST", "BIND", 
                      "PROC", "STATIC", "METHOD", "FUNC", "MIXIN", "END", 
                      "EXCEPT", "RETURN", "TRY", "RAISE", "FINALLY", "OUT", 
                      "CASE", "IF", "ELIF", "ELSE", "DO", "WHILE", "ITERATOR", 
                      "FOR", "CONTINUE", "BREAK", "TEMPLATE", "TUPLE", "USING", 
                      "WHEN", "YIELD", "INCLUDE", "IMPORT", "FROM", "AS", 
                      "EXPORT", "REF", "PTR", "ADDR", "ASM", "BLOCK", "MACRO", 
                      "NIL", "CAST", "CONVERTER", "DEFER", "DISCARD", "DISTINCT", 
                      "SYM_HEADER", "IDENTIFIER", "INT_LIT", "INT8_LIT", 
                      "INT16_LIT", "INT32_LIT", "INT64_LIT", "UINT_LIT", 
                      "UINT8_LIT", "UINT16_LIT", "UINT32_LIT", "UINT64_LIT", 
                      "EXP", "FLOAT_LIT", "FLOAT32_LIT", "FLOAT64_LIT", 
                      "CHAR_LIT", "STR_LIT", "TRIPLESTR_LIT", "RSTR_LIT", 
                      "GENERALIZED_STR_LIT", "GENERALIZED_TRIPLESTR_LIT", 
                      "DEDENT", "EXIT", "USELESS_LINE", "USELSSS_INDENTS", 
                      "INDENT", "INDENTS_PASS", "ERROR_INDENT" ]

    RULE_op0 = 0
    RULE_op1 = 1
    RULE_op2 = 2
    RULE_op3 = 3
    RULE_op4 = 4
    RULE_op5 = 5
    RULE_op6 = 6
    RULE_op7 = 7
    RULE_op8 = 8
    RULE_op9 = 9
    RULE_op10 = 10
    RULE_operator = 11
    RULE_prefixOperator = 12
    RULE_ind = 13
    RULE_optInd = 14
    RULE_optPar = 15
    RULE_ded = 16
    RULE_typeKeyw = 17
    RULE_parKeyw = 18
    RULE_keyw = 19
    RULE_generalizedLit = 20
    RULE_pragmaStmt = 21
    RULE_par = 22
    RULE_tupleConstr = 23
    RULE_arrayConstr = 24
    RULE_typeDesc = 25
    RULE_identOrLiteral = 26
    RULE_indexExpr = 27
    RULE_indexExprList = 28
    RULE_primarySuffix = 29
    RULE_primary = 30
    RULE_pragma = 31
    RULE_simpleExpr = 32
    RULE_arrowExpr = 33
    RULE_assignExpr = 34
    RULE_orExpr = 35
    RULE_andExpr = 36
    RULE_cmpExpr = 37
    RULE_sliceExpr = 38
    RULE_ampExpr = 39
    RULE_plusExpr = 40
    RULE_mulExpr = 41
    RULE_dollarExpr = 42
    RULE_exprList = 43
    RULE_exprColonExpr = 44
    RULE_exprColonEqExpr = 45
    RULE_exprColonEqExprList = 46
    RULE_condExpr = 47
    RULE_literal = 48
    RULE_symbolBody = 49
    RULE_symbol = 50
    RULE_blockExpr = 51
    RULE_ifExpr = 52
    RULE_whenExpr = 53
    RULE_dotExpr = 54
    RULE_forExpr = 55
    RULE_expr = 56
    RULE_moduleName = 57
    RULE_colonBody = 58
    RULE_returnStmt = 59
    RULE_discardStmt = 60
    RULE_breakStmt = 61
    RULE_continueStmt = 62
    RULE_importStmt = 63
    RULE_fromStmt = 64
    RULE_caseExpr = 65
    RULE_caseStmt = 66
    RULE_ofBranch = 67
    RULE_ofBranches = 68
    RULE_exprStmt = 69
    RULE_simpleStmt = 70
    RULE_condStmt = 71
    RULE_identVis = 72
    RULE_identVisDot = 73
    RULE_identWithPragma = 74
    RULE_ifStmt = 75
    RULE_whenStmt = 76
    RULE_whileStmt = 77
    RULE_genericParam = 78
    RULE_genericParamList = 79
    RULE_identWithPragmaDot = 80
    RULE_typeDefAux = 81
    RULE_objectWhen = 82
    RULE_objectBranch = 83
    RULE_objectBranches = 84
    RULE_objectCase = 85
    RULE_objectPart = 86
    RULE_objectType = 87
    RULE_typeClassParam = 88
    RULE_typeClass = 89
    RULE_typeDef = 90
    RULE_constant = 91
    RULE_varTuple = 92
    RULE_declColonEquals = 93
    RULE_identColonEquals = 94
    RULE_paramList = 95
    RULE_paramListColon = 96
    RULE_procExpr = 97
    RULE_variable = 98
    RULE_qualifiedIdent = 99
    RULE_forStmt = 100
    RULE_blockStmt = 101
    RULE_routine = 102
    RULE_typeDefSection = 103
    RULE_constantSection = 104
    RULE_variableSection = 105
    RULE_complexStmt = 106
    RULE_stmt = 107
    RULE_module = 108
    RULE_start = 109

    ruleNames =  [ "op0", "op1", "op2", "op3", "op4", "op5", "op6", "op7", 
                   "op8", "op9", "op10", "operator", "prefixOperator", "ind", 
                   "optInd", "optPar", "ded", "typeKeyw", "parKeyw", "keyw", 
                   "generalizedLit", "pragmaStmt", "par", "tupleConstr", 
                   "arrayConstr", "typeDesc", "identOrLiteral", "indexExpr", 
                   "indexExprList", "primarySuffix", "primary", "pragma", 
                   "simpleExpr", "arrowExpr", "assignExpr", "orExpr", "andExpr", 
                   "cmpExpr", "sliceExpr", "ampExpr", "plusExpr", "mulExpr", 
                   "dollarExpr", "exprList", "exprColonExpr", "exprColonEqExpr", 
                   "exprColonEqExprList", "condExpr", "literal", "symbolBody", 
                   "symbol", "blockExpr", "ifExpr", "whenExpr", "dotExpr", 
                   "forExpr", "expr", "moduleName", "colonBody", "returnStmt", 
                   "discardStmt", "breakStmt", "continueStmt", "importStmt", 
                   "fromStmt", "caseExpr", "caseStmt", "ofBranch", "ofBranches", 
                   "exprStmt", "simpleStmt", "condStmt", "identVis", "identVisDot", 
                   "identWithPragma", "ifStmt", "whenStmt", "whileStmt", 
                   "genericParam", "genericParamList", "identWithPragmaDot", 
                   "typeDefAux", "objectWhen", "objectBranch", "objectBranches", 
                   "objectCase", "objectPart", "objectType", "typeClassParam", 
                   "typeClass", "typeDef", "constant", "varTuple", "declColonEquals", 
                   "identColonEquals", "paramList", "paramListColon", "procExpr", 
                   "variable", "qualifiedIdent", "forStmt", "blockStmt", 
                   "routine", "typeDefSection", "constantSection", "variableSection", 
                   "complexStmt", "stmt", "module", "start" ]

    EOF = Token.EOF
    DOCUMENTATION_COMMENT=1
    MULTILINE_COMMENT=2
    COMMENT=3
    UNCONDITIONAL_NEWLINE=4
    WS=5
    COMMA=6
    SEMI_COLON=7
    OPEN_PAREN=8
    CLOSE_PAREN=9
    OPEN_BRACE=10
    CLOSE_BRACE=11
    OPEN_BRACK=12
    CLOSE_BRACK=13
    INTERFACE=14
    ENUM=15
    OBJECT=16
    CONCEPT=17
    TYPE=18
    COLON=19
    DOT=20
    EQUALS=21
    IN=22
    OF=23
    NOT=24
    DOLLAR_SIGN=25
    OP0=26
    OP1=27
    OP2=28
    OP3=29
    OP4=30
    OP5=31
    OP6=32
    OP7=33
    OP8=34
    OP9=35
    OP10=36
    VARIABLE=37
    LET=38
    CONST=39
    BIND=40
    PROC=41
    STATIC=42
    METHOD=43
    FUNC=44
    MIXIN=45
    END=46
    EXCEPT=47
    RETURN=48
    TRY=49
    RAISE=50
    FINALLY=51
    OUT=52
    CASE=53
    IF=54
    ELIF=55
    ELSE=56
    DO=57
    WHILE=58
    ITERATOR=59
    FOR=60
    CONTINUE=61
    BREAK=62
    TEMPLATE=63
    TUPLE=64
    USING=65
    WHEN=66
    YIELD=67
    INCLUDE=68
    IMPORT=69
    FROM=70
    AS=71
    EXPORT=72
    REF=73
    PTR=74
    ADDR=75
    ASM=76
    BLOCK=77
    MACRO=78
    NIL=79
    CAST=80
    CONVERTER=81
    DEFER=82
    DISCARD=83
    DISTINCT=84
    SYM_HEADER=85
    IDENTIFIER=86
    INT_LIT=87
    INT8_LIT=88
    INT16_LIT=89
    INT32_LIT=90
    INT64_LIT=91
    UINT_LIT=92
    UINT8_LIT=93
    UINT16_LIT=94
    UINT32_LIT=95
    UINT64_LIT=96
    EXP=97
    FLOAT_LIT=98
    FLOAT32_LIT=99
    FLOAT64_LIT=100
    CHAR_LIT=101
    STR_LIT=102
    TRIPLESTR_LIT=103
    RSTR_LIT=104
    GENERALIZED_STR_LIT=105
    GENERALIZED_TRIPLESTR_LIT=106
    DEDENT=107
    EXIT=108
    USELESS_LINE=109
    USELSSS_INDENTS=110
    INDENT=111
    INDENTS_PASS=112
    ERROR_INDENT=113

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None



    parKeyWList = [DISCARD, IF, WHILE, CASE, FOR, BLOCK, CONST, LET, WHEN, VARIABLE]
    literals = [INT_LIT, INT8_LIT, INT16_LIT , INT32_LIT , INT64_LIT, UINT_LIT , UINT8_LIT , UINT16_LIT , UINT32_LIT , UINT64_LIT, 
    FLOAT_LIT , FLOAT32_LIT , FLOAT64_LIT, STR_LIT , RSTR_LIT , TRIPLESTR_LIT, CHAR_LIT, NIL ]
    primarySuffixList = [SYM_HEADER, IDENTIFIER, literals, TYPE]



    class Op0Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OP0(self):
            return self.getToken(m2_Parser.OP0, 0)

        def getRuleIndex(self):
            return m2_Parser.RULE_op0

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOp0" ):
                listener.enterOp0(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOp0" ):
                listener.exitOp0(self)




    def op0(self):

        localctx = m2_Parser.Op0Context(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_op0)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 220
            self.match(m2_Parser.OP0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Op1Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OP1(self):
            return self.getToken(m2_Parser.OP1, 0)

        def EQUALS(self):
            return self.getToken(m2_Parser.EQUALS, 0)

        def getRuleIndex(self):
            return m2_Parser.RULE_op1

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOp1" ):
                listener.enterOp1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOp1" ):
                listener.exitOp1(self)




    def op1(self):

        localctx = m2_Parser.Op1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_op1)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 222
            _la = self._input.LA(1)
            if not(_la==m2_Parser.EQUALS or _la==m2_Parser.OP1):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Op2Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OP2(self):
            return self.getToken(m2_Parser.OP2, 0)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.COLON)
            else:
                return self.getToken(m2_Parser.COLON, i)

        def getRuleIndex(self):
            return m2_Parser.RULE_op2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOp2" ):
                listener.enterOp2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOp2" ):
                listener.exitOp2(self)




    def op2(self):

        localctx = m2_Parser.Op2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_op2)
        try:
            self.state = 228
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 224
                self.match(m2_Parser.OP2)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 225
                self.match(m2_Parser.COLON)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 226
                self.match(m2_Parser.COLON)
                self.state = 227
                self.match(m2_Parser.COLON)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Op3Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OP3(self):
            return self.getToken(m2_Parser.OP3, 0)

        def getRuleIndex(self):
            return m2_Parser.RULE_op3

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOp3" ):
                listener.enterOp3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOp3" ):
                listener.exitOp3(self)




    def op3(self):

        localctx = m2_Parser.Op3Context(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_op3)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 230
            self.match(m2_Parser.OP3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Op4Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OP4(self):
            return self.getToken(m2_Parser.OP4, 0)

        def getRuleIndex(self):
            return m2_Parser.RULE_op4

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOp4" ):
                listener.enterOp4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOp4" ):
                listener.exitOp4(self)




    def op4(self):

        localctx = m2_Parser.Op4Context(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_op4)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 232
            self.match(m2_Parser.OP4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Op5Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OP5(self):
            return self.getToken(m2_Parser.OP5, 0)

        def IN(self):
            return self.getToken(m2_Parser.IN, 0)

        def OF(self):
            return self.getToken(m2_Parser.OF, 0)

        def NOT(self):
            return self.getToken(m2_Parser.NOT, 0)

        def getRuleIndex(self):
            return m2_Parser.RULE_op5

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOp5" ):
                listener.enterOp5(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOp5" ):
                listener.exitOp5(self)




    def op5(self):

        localctx = m2_Parser.Op5Context(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_op5)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 234
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << m2_Parser.IN) | (1 << m2_Parser.OF) | (1 << m2_Parser.NOT) | (1 << m2_Parser.OP5))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Op6Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OP6(self):
            return self.getToken(m2_Parser.OP6, 0)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.DOT)
            else:
                return self.getToken(m2_Parser.DOT, i)

        def getRuleIndex(self):
            return m2_Parser.RULE_op6

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOp6" ):
                listener.enterOp6(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOp6" ):
                listener.exitOp6(self)




    def op6(self):

        localctx = m2_Parser.Op6Context(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_op6)
        try:
            self.state = 240
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 236
                self.match(m2_Parser.OP6)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 237
                self.match(m2_Parser.DOT)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 238
                self.match(m2_Parser.DOT)
                self.state = 239
                self.match(m2_Parser.DOT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Op7Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OP7(self):
            return self.getToken(m2_Parser.OP7, 0)

        def getRuleIndex(self):
            return m2_Parser.RULE_op7

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOp7" ):
                listener.enterOp7(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOp7" ):
                listener.exitOp7(self)




    def op7(self):

        localctx = m2_Parser.Op7Context(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_op7)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 242
            self.match(m2_Parser.OP7)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Op8Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OP8(self):
            return self.getToken(m2_Parser.OP8, 0)

        def getRuleIndex(self):
            return m2_Parser.RULE_op8

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOp8" ):
                listener.enterOp8(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOp8" ):
                listener.exitOp8(self)




    def op8(self):

        localctx = m2_Parser.Op8Context(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_op8)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 244
            self.match(m2_Parser.OP8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Op9Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OP9(self):
            return self.getToken(m2_Parser.OP9, 0)

        def getRuleIndex(self):
            return m2_Parser.RULE_op9

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOp9" ):
                listener.enterOp9(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOp9" ):
                listener.exitOp9(self)




    def op9(self):

        localctx = m2_Parser.Op9Context(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_op9)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 246
            self.match(m2_Parser.OP9)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Op10Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OP10(self):
            return self.getToken(m2_Parser.OP10, 0)

        def getRuleIndex(self):
            return m2_Parser.RULE_op10

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOp10" ):
                listener.enterOp10(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOp10" ):
                listener.exitOp10(self)




    def op10(self):

        localctx = m2_Parser.Op10Context(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_op10)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 248
            self.match(m2_Parser.OP10)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def op0(self):
            return self.getTypedRuleContext(m2_Parser.Op0Context,0)


        def op1(self):
            return self.getTypedRuleContext(m2_Parser.Op1Context,0)


        def op2(self):
            return self.getTypedRuleContext(m2_Parser.Op2Context,0)


        def op3(self):
            return self.getTypedRuleContext(m2_Parser.Op3Context,0)


        def op4(self):
            return self.getTypedRuleContext(m2_Parser.Op4Context,0)


        def op5(self):
            return self.getTypedRuleContext(m2_Parser.Op5Context,0)


        def op6(self):
            return self.getTypedRuleContext(m2_Parser.Op6Context,0)


        def op7(self):
            return self.getTypedRuleContext(m2_Parser.Op7Context,0)


        def op8(self):
            return self.getTypedRuleContext(m2_Parser.Op8Context,0)


        def op9(self):
            return self.getTypedRuleContext(m2_Parser.Op9Context,0)


        def op10(self):
            return self.getTypedRuleContext(m2_Parser.Op10Context,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperator" ):
                listener.enterOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperator" ):
                listener.exitOperator(self)




    def operator(self):

        localctx = m2_Parser.OperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_operator)
        try:
            self.state = 261
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [m2_Parser.OP0]:
                self.enterOuterAlt(localctx, 1)
                self.state = 250
                self.op0()
                pass
            elif token in [m2_Parser.EQUALS, m2_Parser.OP1]:
                self.enterOuterAlt(localctx, 2)
                self.state = 251
                self.op1()
                pass
            elif token in [m2_Parser.COLON, m2_Parser.OP2]:
                self.enterOuterAlt(localctx, 3)
                self.state = 252
                self.op2()
                pass
            elif token in [m2_Parser.OP3]:
                self.enterOuterAlt(localctx, 4)
                self.state = 253
                self.op3()
                pass
            elif token in [m2_Parser.OP4]:
                self.enterOuterAlt(localctx, 5)
                self.state = 254
                self.op4()
                pass
            elif token in [m2_Parser.IN, m2_Parser.OF, m2_Parser.NOT, m2_Parser.OP5]:
                self.enterOuterAlt(localctx, 6)
                self.state = 255
                self.op5()
                pass
            elif token in [m2_Parser.DOT, m2_Parser.OP6]:
                self.enterOuterAlt(localctx, 7)
                self.state = 256
                self.op6()
                pass
            elif token in [m2_Parser.OP7]:
                self.enterOuterAlt(localctx, 8)
                self.state = 257
                self.op7()
                pass
            elif token in [m2_Parser.OP8]:
                self.enterOuterAlt(localctx, 9)
                self.state = 258
                self.op8()
                pass
            elif token in [m2_Parser.OP9]:
                self.enterOuterAlt(localctx, 10)
                self.state = 259
                self.op9()
                pass
            elif token in [m2_Parser.OP10]:
                self.enterOuterAlt(localctx, 11)
                self.state = 260
                self.op10()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrefixOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def operator(self):
            return self.getTypedRuleContext(m2_Parser.OperatorContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_prefixOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrefixOperator" ):
                listener.enterPrefixOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrefixOperator" ):
                listener.exitPrefixOperator(self)




    def prefixOperator(self):

        localctx = m2_Parser.PrefixOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_prefixOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 263
            self.operator()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INDENT(self):
            return self.getToken(m2_Parser.INDENT, 0)

        def getRuleIndex(self):
            return m2_Parser.RULE_ind

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInd" ):
                listener.enterInd(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInd" ):
                listener.exitInd(self)




    def ind(self):

        localctx = m2_Parser.IndContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_ind)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 265
            self.match(m2_Parser.INDENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptIndContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ind(self):
            return self.getTypedRuleContext(m2_Parser.IndContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_optInd

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptInd" ):
                listener.enterOptInd(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptInd" ):
                listener.exitOptInd(self)




    def optInd(self):

        localctx = m2_Parser.OptIndContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_optInd)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 268
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
            if la_ == 1:
                self.state = 267
                self.ind()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptParContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ind(self):
            return self.getTypedRuleContext(m2_Parser.IndContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_optPar

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptPar" ):
                listener.enterOptPar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptPar" ):
                listener.exitOptPar(self)




    def optPar(self):

        localctx = m2_Parser.OptParContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_optPar)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 271
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==m2_Parser.INDENT:
                self.state = 270
                self.ind()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DedContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEDENT(self):
            return self.getToken(m2_Parser.DEDENT, 0)

        def EOF(self):
            return self.getToken(m2_Parser.EOF, 0)

        def getRuleIndex(self):
            return m2_Parser.RULE_ded

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDed" ):
                listener.enterDed(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDed" ):
                listener.exitDed(self)




    def ded(self):

        localctx = m2_Parser.DedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_ded)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 273
            _la = self._input.LA(1)
            if not(_la==m2_Parser.EOF or _la==m2_Parser.DEDENT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeKeywContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VARIABLE(self):
            return self.getToken(m2_Parser.VARIABLE, 0)

        def REF(self):
            return self.getToken(m2_Parser.REF, 0)

        def TUPLE(self):
            return self.getToken(m2_Parser.TUPLE, 0)

        def PROC(self):
            return self.getToken(m2_Parser.PROC, 0)

        def getRuleIndex(self):
            return m2_Parser.RULE_typeKeyw

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeKeyw" ):
                listener.enterTypeKeyw(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeKeyw" ):
                listener.exitTypeKeyw(self)




    def typeKeyw(self):

        localctx = m2_Parser.TypeKeywContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_typeKeyw)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 275
            _la = self._input.LA(1)
            if not(((((_la - 37)) & ~0x3f) == 0 and ((1 << (_la - 37)) & ((1 << (m2_Parser.VARIABLE - 37)) | (1 << (m2_Parser.PROC - 37)) | (1 << (m2_Parser.TUPLE - 37)) | (1 << (m2_Parser.REF - 37)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParKeywContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DISCARD(self):
            return self.getToken(m2_Parser.DISCARD, 0)

        def IF(self):
            return self.getToken(m2_Parser.IF, 0)

        def WHILE(self):
            return self.getToken(m2_Parser.WHILE, 0)

        def CASE(self):
            return self.getToken(m2_Parser.CASE, 0)

        def FOR(self):
            return self.getToken(m2_Parser.FOR, 0)

        def BLOCK(self):
            return self.getToken(m2_Parser.BLOCK, 0)

        def CONST(self):
            return self.getToken(m2_Parser.CONST, 0)

        def LET(self):
            return self.getToken(m2_Parser.LET, 0)

        def WHEN(self):
            return self.getToken(m2_Parser.WHEN, 0)

        def VARIABLE(self):
            return self.getToken(m2_Parser.VARIABLE, 0)

        def getRuleIndex(self):
            return m2_Parser.RULE_parKeyw

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParKeyw" ):
                listener.enterParKeyw(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParKeyw" ):
                listener.exitParKeyw(self)




    def parKeyw(self):

        localctx = m2_Parser.ParKeywContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_parKeyw)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 277
            _la = self._input.LA(1)
            if not(((((_la - 37)) & ~0x3f) == 0 and ((1 << (_la - 37)) & ((1 << (m2_Parser.VARIABLE - 37)) | (1 << (m2_Parser.LET - 37)) | (1 << (m2_Parser.CONST - 37)) | (1 << (m2_Parser.CASE - 37)) | (1 << (m2_Parser.IF - 37)) | (1 << (m2_Parser.WHILE - 37)) | (1 << (m2_Parser.FOR - 37)) | (1 << (m2_Parser.WHEN - 37)) | (1 << (m2_Parser.BLOCK - 37)) | (1 << (m2_Parser.DISCARD - 37)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeywContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeKeyw(self):
            return self.getTypedRuleContext(m2_Parser.TypeKeywContext,0)


        def parKeyw(self):
            return self.getTypedRuleContext(m2_Parser.ParKeywContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_keyw

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyw" ):
                listener.enterKeyw(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyw" ):
                listener.exitKeyw(self)




    def keyw(self):

        localctx = m2_Parser.KeywContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_keyw)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 281
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.state = 279
                self.typeKeyw()
                pass

            elif la_ == 2:
                self.state = 280
                self.parKeyw()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GeneralizedLitContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GENERALIZED_STR_LIT(self):
            return self.getToken(m2_Parser.GENERALIZED_STR_LIT, 0)

        def GENERALIZED_TRIPLESTR_LIT(self):
            return self.getToken(m2_Parser.GENERALIZED_TRIPLESTR_LIT, 0)

        def getRuleIndex(self):
            return m2_Parser.RULE_generalizedLit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneralizedLit" ):
                listener.enterGeneralizedLit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneralizedLit" ):
                listener.exitGeneralizedLit(self)




    def generalizedLit(self):

        localctx = m2_Parser.GeneralizedLitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_generalizedLit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 283
            _la = self._input.LA(1)
            if not(_la==m2_Parser.GENERALIZED_STR_LIT or _la==m2_Parser.GENERALIZED_TRIPLESTR_LIT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PragmaStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pragma(self):
            return self.getTypedRuleContext(m2_Parser.PragmaContext,0)


        def COLON(self):
            return self.getToken(m2_Parser.COLON, 0)

        def stmt(self):
            return self.getTypedRuleContext(m2_Parser.StmtContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_pragmaStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragmaStmt" ):
                listener.enterPragmaStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragmaStmt" ):
                listener.exitPragmaStmt(self)




    def pragmaStmt(self):

        localctx = m2_Parser.PragmaStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_pragmaStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 285
            self.pragma()
            self.state = 288
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
            if la_ == 1:
                self.state = 286
                self.match(m2_Parser.COLON)
                self.state = 287
                self.stmt()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(m2_Parser.OPEN_PAREN, 0)

        def optInd(self):
            return self.getTypedRuleContext(m2_Parser.OptIndContext,0)


        def optPar(self):
            return self.getTypedRuleContext(m2_Parser.OptParContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(m2_Parser.CLOSE_PAREN, 0)

        def SEMI_COLON(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.SEMI_COLON)
            else:
                return self.getToken(m2_Parser.SEMI_COLON, i)

        def pragmaStmt(self):
            return self.getTypedRuleContext(m2_Parser.PragmaStmtContext,0)


        def simpleExpr(self):
            return self.getTypedRuleContext(m2_Parser.SimpleExprContext,0)


        def complexStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.ComplexStmtContext)
            else:
                return self.getTypedRuleContext(m2_Parser.ComplexStmtContext,i)


        def simpleStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.SimpleStmtContext)
            else:
                return self.getTypedRuleContext(m2_Parser.SimpleStmtContext,i)


        def EQUALS(self):
            return self.getToken(m2_Parser.EQUALS, 0)

        def expr(self):
            return self.getTypedRuleContext(m2_Parser.ExprContext,0)


        def COLON(self):
            return self.getToken(m2_Parser.COLON, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.COMMA)
            else:
                return self.getToken(m2_Parser.COMMA, i)

        def exprColonEqExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.ExprColonEqExprContext)
            else:
                return self.getTypedRuleContext(m2_Parser.ExprColonEqExprContext,i)


        def getRuleIndex(self):
            return m2_Parser.RULE_par

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPar" ):
                listener.enterPar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPar" ):
                listener.exitPar(self)




    def par(self):

        localctx = m2_Parser.ParContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_par)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 290
            self.match(m2_Parser.OPEN_PAREN)
            self.state = 291
            self.optInd()
            self.state = 358
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,20,self._ctx)
            if la_ == 1:
                self.state = 292
                if not self._input.LT(1).type in self.parKeyWList:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self._input.LT(1).type in self.parKeyWList")
                self.state = 295
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
                if la_ == 1:
                    self.state = 293
                    self.complexStmt()
                    pass

                elif la_ == 2:
                    self.state = 294
                    self.simpleStmt()
                    pass


                self.state = 304
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==m2_Parser.SEMI_COLON:
                    self.state = 297
                    self.match(m2_Parser.SEMI_COLON)
                    self.state = 300
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
                    if la_ == 1:
                        self.state = 298
                        self.complexStmt()
                        pass

                    elif la_ == 2:
                        self.state = 299
                        self.simpleStmt()
                        pass


                    self.state = 306
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 307
                self.match(m2_Parser.SEMI_COLON)
                self.state = 310
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
                if la_ == 1:
                    self.state = 308
                    self.complexStmt()
                    pass

                elif la_ == 2:
                    self.state = 309
                    self.simpleStmt()
                    pass


                self.state = 319
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==m2_Parser.SEMI_COLON:
                    self.state = 312
                    self.match(m2_Parser.SEMI_COLON)
                    self.state = 315
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
                    if la_ == 1:
                        self.state = 313
                        self.complexStmt()
                        pass

                    elif la_ == 2:
                        self.state = 314
                        self.simpleStmt()
                        pass


                    self.state = 321
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 322
                self.pragmaStmt()
                pass

            elif la_ == 4:
                self.state = 323
                self.simpleExpr()
                self.state = 356
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [m2_Parser.EQUALS]:
                    self.state = 324
                    self.match(m2_Parser.EQUALS)
                    self.state = 325
                    self.expr()
                    self.state = 341
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==m2_Parser.SEMI_COLON:
                        self.state = 326
                        self.match(m2_Parser.SEMI_COLON)
                        self.state = 329
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
                        if la_ == 1:
                            self.state = 327
                            self.complexStmt()
                            pass

                        elif la_ == 2:
                            self.state = 328
                            self.simpleStmt()
                            pass


                        self.state = 338
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==m2_Parser.SEMI_COLON:
                            self.state = 331
                            self.match(m2_Parser.SEMI_COLON)
                            self.state = 334
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
                            if la_ == 1:
                                self.state = 332
                                self.complexStmt()
                                pass

                            elif la_ == 2:
                                self.state = 333
                                self.simpleStmt()
                                pass


                            self.state = 340
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)



                    pass
                elif token in [m2_Parser.COLON]:
                    self.state = 343
                    self.match(m2_Parser.COLON)
                    self.state = 344
                    self.expr()
                    self.state = 354
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==m2_Parser.COMMA:
                        self.state = 345
                        self.match(m2_Parser.COMMA)
                        self.state = 346
                        self.exprColonEqExpr()
                        self.state = 351
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==m2_Parser.COMMA:
                            self.state = 347
                            self.match(m2_Parser.COMMA)
                            self.state = 348
                            self.exprColonEqExpr()
                            self.state = 353
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)



                    pass
                else:
                    raise NoViableAltException(self)

                pass


            self.state = 360
            self.optPar()
            self.state = 361
            self.match(m2_Parser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TupleConstrContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(m2_Parser.OPEN_PAREN, 0)

        def optInd(self):
            return self.getTypedRuleContext(m2_Parser.OptIndContext,0)


        def optPar(self):
            return self.getTypedRuleContext(m2_Parser.OptParContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(m2_Parser.CLOSE_PAREN, 0)

        def exprColonEqExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.ExprColonEqExprContext)
            else:
                return self.getTypedRuleContext(m2_Parser.ExprColonEqExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.COMMA)
            else:
                return self.getToken(m2_Parser.COMMA, i)

        def getRuleIndex(self):
            return m2_Parser.RULE_tupleConstr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTupleConstr" ):
                listener.enterTupleConstr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTupleConstr" ):
                listener.exitTupleConstr(self)




    def tupleConstr(self):

        localctx = m2_Parser.TupleConstrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_tupleConstr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 363
            self.match(m2_Parser.OPEN_PAREN)
            self.state = 364
            self.optInd()
            self.state = 371
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << m2_Parser.OPEN_PAREN) | (1 << m2_Parser.OPEN_BRACK) | (1 << m2_Parser.COLON) | (1 << m2_Parser.DOT) | (1 << m2_Parser.EQUALS) | (1 << m2_Parser.IN) | (1 << m2_Parser.OF) | (1 << m2_Parser.NOT) | (1 << m2_Parser.OP0) | (1 << m2_Parser.OP1) | (1 << m2_Parser.OP2) | (1 << m2_Parser.OP3) | (1 << m2_Parser.OP4) | (1 << m2_Parser.OP5) | (1 << m2_Parser.OP6) | (1 << m2_Parser.OP7) | (1 << m2_Parser.OP8) | (1 << m2_Parser.OP9) | (1 << m2_Parser.OP10) | (1 << m2_Parser.VARIABLE) | (1 << m2_Parser.LET) | (1 << m2_Parser.CONST) | (1 << m2_Parser.PROC) | (1 << m2_Parser.CASE) | (1 << m2_Parser.IF) | (1 << m2_Parser.WHILE) | (1 << m2_Parser.FOR))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (m2_Parser.TUPLE - 64)) | (1 << (m2_Parser.WHEN - 64)) | (1 << (m2_Parser.REF - 64)) | (1 << (m2_Parser.BLOCK - 64)) | (1 << (m2_Parser.NIL - 64)) | (1 << (m2_Parser.DISCARD - 64)) | (1 << (m2_Parser.SYM_HEADER - 64)) | (1 << (m2_Parser.IDENTIFIER - 64)) | (1 << (m2_Parser.INT_LIT - 64)) | (1 << (m2_Parser.INT8_LIT - 64)) | (1 << (m2_Parser.INT16_LIT - 64)) | (1 << (m2_Parser.INT32_LIT - 64)) | (1 << (m2_Parser.INT64_LIT - 64)) | (1 << (m2_Parser.UINT_LIT - 64)) | (1 << (m2_Parser.UINT8_LIT - 64)) | (1 << (m2_Parser.UINT16_LIT - 64)) | (1 << (m2_Parser.UINT32_LIT - 64)) | (1 << (m2_Parser.UINT64_LIT - 64)) | (1 << (m2_Parser.FLOAT_LIT - 64)) | (1 << (m2_Parser.FLOAT32_LIT - 64)) | (1 << (m2_Parser.FLOAT64_LIT - 64)) | (1 << (m2_Parser.CHAR_LIT - 64)) | (1 << (m2_Parser.STR_LIT - 64)) | (1 << (m2_Parser.TRIPLESTR_LIT - 64)) | (1 << (m2_Parser.RSTR_LIT - 64)) | (1 << (m2_Parser.GENERALIZED_STR_LIT - 64)) | (1 << (m2_Parser.GENERALIZED_TRIPLESTR_LIT - 64)))) != 0):
                self.state = 365
                self.exprColonEqExpr()
                self.state = 367
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==m2_Parser.COMMA:
                    self.state = 366
                    self.match(m2_Parser.COMMA)


                self.state = 373
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 374
            self.optPar()
            self.state = 375
            self.match(m2_Parser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayConstrContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACK(self):
            return self.getToken(m2_Parser.OPEN_BRACK, 0)

        def optInd(self):
            return self.getTypedRuleContext(m2_Parser.OptIndContext,0)


        def optPar(self):
            return self.getTypedRuleContext(m2_Parser.OptParContext,0)


        def CLOSE_BRACK(self):
            return self.getToken(m2_Parser.CLOSE_BRACK, 0)

        def exprColonEqExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.ExprColonEqExprContext)
            else:
                return self.getTypedRuleContext(m2_Parser.ExprColonEqExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.COMMA)
            else:
                return self.getToken(m2_Parser.COMMA, i)

        def getRuleIndex(self):
            return m2_Parser.RULE_arrayConstr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayConstr" ):
                listener.enterArrayConstr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayConstr" ):
                listener.exitArrayConstr(self)




    def arrayConstr(self):

        localctx = m2_Parser.ArrayConstrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_arrayConstr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 377
            self.match(m2_Parser.OPEN_BRACK)
            self.state = 378
            self.optInd()
            self.state = 385
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << m2_Parser.OPEN_PAREN) | (1 << m2_Parser.OPEN_BRACK) | (1 << m2_Parser.COLON) | (1 << m2_Parser.DOT) | (1 << m2_Parser.EQUALS) | (1 << m2_Parser.IN) | (1 << m2_Parser.OF) | (1 << m2_Parser.NOT) | (1 << m2_Parser.OP0) | (1 << m2_Parser.OP1) | (1 << m2_Parser.OP2) | (1 << m2_Parser.OP3) | (1 << m2_Parser.OP4) | (1 << m2_Parser.OP5) | (1 << m2_Parser.OP6) | (1 << m2_Parser.OP7) | (1 << m2_Parser.OP8) | (1 << m2_Parser.OP9) | (1 << m2_Parser.OP10) | (1 << m2_Parser.VARIABLE) | (1 << m2_Parser.LET) | (1 << m2_Parser.CONST) | (1 << m2_Parser.PROC) | (1 << m2_Parser.CASE) | (1 << m2_Parser.IF) | (1 << m2_Parser.WHILE) | (1 << m2_Parser.FOR))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (m2_Parser.TUPLE - 64)) | (1 << (m2_Parser.WHEN - 64)) | (1 << (m2_Parser.REF - 64)) | (1 << (m2_Parser.BLOCK - 64)) | (1 << (m2_Parser.NIL - 64)) | (1 << (m2_Parser.DISCARD - 64)) | (1 << (m2_Parser.SYM_HEADER - 64)) | (1 << (m2_Parser.IDENTIFIER - 64)) | (1 << (m2_Parser.INT_LIT - 64)) | (1 << (m2_Parser.INT8_LIT - 64)) | (1 << (m2_Parser.INT16_LIT - 64)) | (1 << (m2_Parser.INT32_LIT - 64)) | (1 << (m2_Parser.INT64_LIT - 64)) | (1 << (m2_Parser.UINT_LIT - 64)) | (1 << (m2_Parser.UINT8_LIT - 64)) | (1 << (m2_Parser.UINT16_LIT - 64)) | (1 << (m2_Parser.UINT32_LIT - 64)) | (1 << (m2_Parser.UINT64_LIT - 64)) | (1 << (m2_Parser.FLOAT_LIT - 64)) | (1 << (m2_Parser.FLOAT32_LIT - 64)) | (1 << (m2_Parser.FLOAT64_LIT - 64)) | (1 << (m2_Parser.CHAR_LIT - 64)) | (1 << (m2_Parser.STR_LIT - 64)) | (1 << (m2_Parser.TRIPLESTR_LIT - 64)) | (1 << (m2_Parser.RSTR_LIT - 64)) | (1 << (m2_Parser.GENERALIZED_STR_LIT - 64)) | (1 << (m2_Parser.GENERALIZED_TRIPLESTR_LIT - 64)))) != 0):
                self.state = 379
                self.exprColonEqExpr()
                self.state = 381
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==m2_Parser.COMMA:
                    self.state = 380
                    self.match(m2_Parser.COMMA)


                self.state = 387
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 388
            self.optPar()
            self.state = 389
            self.match(m2_Parser.CLOSE_BRACK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeDescContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleExpr(self):
            return self.getTypedRuleContext(m2_Parser.SimpleExprContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_typeDesc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeDesc" ):
                listener.enterTypeDesc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeDesc" ):
                listener.exitTypeDesc(self)




    def typeDesc(self):

        localctx = m2_Parser.TypeDescContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_typeDesc)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 391
            self.simpleExpr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentOrLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def generalizedLit(self):
            return self.getTypedRuleContext(m2_Parser.GeneralizedLitContext,0)


        def symbol(self):
            return self.getTypedRuleContext(m2_Parser.SymbolContext,0)


        def literal(self):
            return self.getTypedRuleContext(m2_Parser.LiteralContext,0)


        def par(self):
            return self.getTypedRuleContext(m2_Parser.ParContext,0)


        def arrayConstr(self):
            return self.getTypedRuleContext(m2_Parser.ArrayConstrContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_identOrLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentOrLiteral" ):
                listener.enterIdentOrLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentOrLiteral" ):
                listener.exitIdentOrLiteral(self)




    def identOrLiteral(self):

        localctx = m2_Parser.IdentOrLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_identOrLiteral)
        try:
            self.state = 398
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [m2_Parser.GENERALIZED_STR_LIT, m2_Parser.GENERALIZED_TRIPLESTR_LIT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 393
                self.generalizedLit()
                pass
            elif token in [m2_Parser.VARIABLE, m2_Parser.LET, m2_Parser.CONST, m2_Parser.PROC, m2_Parser.CASE, m2_Parser.IF, m2_Parser.WHILE, m2_Parser.FOR, m2_Parser.TUPLE, m2_Parser.WHEN, m2_Parser.REF, m2_Parser.BLOCK, m2_Parser.DISCARD, m2_Parser.SYM_HEADER, m2_Parser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 394
                self.symbol()
                pass
            elif token in [m2_Parser.NIL, m2_Parser.INT_LIT, m2_Parser.INT8_LIT, m2_Parser.INT16_LIT, m2_Parser.INT32_LIT, m2_Parser.INT64_LIT, m2_Parser.UINT_LIT, m2_Parser.UINT8_LIT, m2_Parser.UINT16_LIT, m2_Parser.UINT32_LIT, m2_Parser.UINT64_LIT, m2_Parser.FLOAT_LIT, m2_Parser.FLOAT32_LIT, m2_Parser.FLOAT64_LIT, m2_Parser.CHAR_LIT, m2_Parser.STR_LIT, m2_Parser.TRIPLESTR_LIT, m2_Parser.RSTR_LIT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 395
                self.literal()
                pass
            elif token in [m2_Parser.OPEN_PAREN]:
                self.enterOuterAlt(localctx, 4)
                self.state = 396
                self.par()
                pass
            elif token in [m2_Parser.OPEN_BRACK]:
                self.enterOuterAlt(localctx, 5)
                self.state = 397
                self.arrayConstr()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(m2_Parser.ExprContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_indexExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexExpr" ):
                listener.enterIndexExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexExpr" ):
                listener.exitIndexExpr(self)




    def indexExpr(self):

        localctx = m2_Parser.IndexExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_indexExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 400
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexExprListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def indexExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.IndexExprContext)
            else:
                return self.getTypedRuleContext(m2_Parser.IndexExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.COMMA)
            else:
                return self.getToken(m2_Parser.COMMA, i)

        def getRuleIndex(self):
            return m2_Parser.RULE_indexExprList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexExprList" ):
                listener.enterIndexExprList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexExprList" ):
                listener.exitIndexExprList(self)




    def indexExprList(self):

        localctx = m2_Parser.IndexExprListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_indexExprList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 402
            self.indexExpr()
            self.state = 407
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==m2_Parser.COMMA:
                self.state = 403
                self.match(m2_Parser.COMMA)
                self.state = 404
                self.indexExpr()
                self.state = 409
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimarySuffixContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(m2_Parser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(m2_Parser.CLOSE_PAREN, 0)

        def exprColonEqExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.ExprColonEqExprContext)
            else:
                return self.getTypedRuleContext(m2_Parser.ExprColonEqExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.COMMA)
            else:
                return self.getToken(m2_Parser.COMMA, i)

        def DOT(self):
            return self.getToken(m2_Parser.DOT, 0)

        def optInd(self):
            return self.getTypedRuleContext(m2_Parser.OptIndContext,0)


        def symbol(self):
            return self.getTypedRuleContext(m2_Parser.SymbolContext,0)


        def generalizedLit(self):
            return self.getTypedRuleContext(m2_Parser.GeneralizedLitContext,0)


        def OPEN_BRACK(self):
            return self.getToken(m2_Parser.OPEN_BRACK, 0)

        def indexExprList(self):
            return self.getTypedRuleContext(m2_Parser.IndexExprListContext,0)


        def optPar(self):
            return self.getTypedRuleContext(m2_Parser.OptParContext,0)


        def CLOSE_BRACK(self):
            return self.getToken(m2_Parser.CLOSE_BRACK, 0)

        def expr(self):
            return self.getTypedRuleContext(m2_Parser.ExprContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_primarySuffix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimarySuffix" ):
                listener.enterPrimarySuffix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimarySuffix" ):
                listener.exitPrimarySuffix(self)




    def primarySuffix(self):

        localctx = m2_Parser.PrimarySuffixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_primarySuffix)
        self._la = 0 # Token type
        try:
            self.state = 435
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 410
                self.match(m2_Parser.OPEN_PAREN)
                self.state = 417
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << m2_Parser.OPEN_PAREN) | (1 << m2_Parser.OPEN_BRACK) | (1 << m2_Parser.COLON) | (1 << m2_Parser.DOT) | (1 << m2_Parser.EQUALS) | (1 << m2_Parser.IN) | (1 << m2_Parser.OF) | (1 << m2_Parser.NOT) | (1 << m2_Parser.OP0) | (1 << m2_Parser.OP1) | (1 << m2_Parser.OP2) | (1 << m2_Parser.OP3) | (1 << m2_Parser.OP4) | (1 << m2_Parser.OP5) | (1 << m2_Parser.OP6) | (1 << m2_Parser.OP7) | (1 << m2_Parser.OP8) | (1 << m2_Parser.OP9) | (1 << m2_Parser.OP10) | (1 << m2_Parser.VARIABLE) | (1 << m2_Parser.LET) | (1 << m2_Parser.CONST) | (1 << m2_Parser.PROC) | (1 << m2_Parser.CASE) | (1 << m2_Parser.IF) | (1 << m2_Parser.WHILE) | (1 << m2_Parser.FOR))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (m2_Parser.TUPLE - 64)) | (1 << (m2_Parser.WHEN - 64)) | (1 << (m2_Parser.REF - 64)) | (1 << (m2_Parser.BLOCK - 64)) | (1 << (m2_Parser.NIL - 64)) | (1 << (m2_Parser.DISCARD - 64)) | (1 << (m2_Parser.SYM_HEADER - 64)) | (1 << (m2_Parser.IDENTIFIER - 64)) | (1 << (m2_Parser.INT_LIT - 64)) | (1 << (m2_Parser.INT8_LIT - 64)) | (1 << (m2_Parser.INT16_LIT - 64)) | (1 << (m2_Parser.INT32_LIT - 64)) | (1 << (m2_Parser.INT64_LIT - 64)) | (1 << (m2_Parser.UINT_LIT - 64)) | (1 << (m2_Parser.UINT8_LIT - 64)) | (1 << (m2_Parser.UINT16_LIT - 64)) | (1 << (m2_Parser.UINT32_LIT - 64)) | (1 << (m2_Parser.UINT64_LIT - 64)) | (1 << (m2_Parser.FLOAT_LIT - 64)) | (1 << (m2_Parser.FLOAT32_LIT - 64)) | (1 << (m2_Parser.FLOAT64_LIT - 64)) | (1 << (m2_Parser.CHAR_LIT - 64)) | (1 << (m2_Parser.STR_LIT - 64)) | (1 << (m2_Parser.TRIPLESTR_LIT - 64)) | (1 << (m2_Parser.RSTR_LIT - 64)) | (1 << (m2_Parser.GENERALIZED_STR_LIT - 64)) | (1 << (m2_Parser.GENERALIZED_TRIPLESTR_LIT - 64)))) != 0):
                    self.state = 411
                    self.exprColonEqExpr()
                    self.state = 413
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==m2_Parser.COMMA:
                        self.state = 412
                        self.match(m2_Parser.COMMA)


                    self.state = 419
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 420
                self.match(m2_Parser.CLOSE_PAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 421
                self.match(m2_Parser.DOT)
                self.state = 422
                self.optInd()
                self.state = 423
                self.symbol()
                self.state = 425
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
                if la_ == 1:
                    self.state = 424
                    self.generalizedLit()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 427
                self.match(m2_Parser.OPEN_BRACK)
                self.state = 428
                self.optInd()
                self.state = 429
                self.indexExprList()
                self.state = 430
                self.optPar()
                self.state = 431
                self.match(m2_Parser.CLOSE_BRACK)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 433
                if not self._input.LT(1).type in self.primarySuffixList:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self._input.LT(1).type in self.primarySuffixList")
                self.state = 434
                self.expr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeKeyw(self):
            return self.getTypedRuleContext(m2_Parser.TypeKeywContext,0)


        def typeDesc(self):
            return self.getTypedRuleContext(m2_Parser.TypeDescContext,0)


        def identOrLiteral(self):
            return self.getTypedRuleContext(m2_Parser.IdentOrLiteralContext,0)


        def prefixOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.PrefixOperatorContext)
            else:
                return self.getTypedRuleContext(m2_Parser.PrefixOperatorContext,i)


        def primarySuffix(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.PrimarySuffixContext)
            else:
                return self.getTypedRuleContext(m2_Parser.PrimarySuffixContext,i)


        def getRuleIndex(self):
            return m2_Parser.RULE_primary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimary" ):
                listener.enterPrimary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimary" ):
                listener.exitPrimary(self)




    def primary(self):

        localctx = m2_Parser.PrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_primary)
        self._la = 0 # Token type
        try:
            self.state = 453
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 437
                self.typeKeyw()
                self.state = 438
                self.typeDesc()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 443
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << m2_Parser.COLON) | (1 << m2_Parser.DOT) | (1 << m2_Parser.EQUALS) | (1 << m2_Parser.IN) | (1 << m2_Parser.OF) | (1 << m2_Parser.NOT) | (1 << m2_Parser.OP0) | (1 << m2_Parser.OP1) | (1 << m2_Parser.OP2) | (1 << m2_Parser.OP3) | (1 << m2_Parser.OP4) | (1 << m2_Parser.OP5) | (1 << m2_Parser.OP6) | (1 << m2_Parser.OP7) | (1 << m2_Parser.OP8) | (1 << m2_Parser.OP9) | (1 << m2_Parser.OP10))) != 0):
                    self.state = 440
                    self.prefixOperator()
                    self.state = 445
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 446
                self.identOrLiteral()
                self.state = 450
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,32,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 447
                        self.primarySuffix() 
                    self.state = 452
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,32,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PragmaContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(m2_Parser.OPEN_BRACE, 0)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.DOT)
            else:
                return self.getToken(m2_Parser.DOT, i)

        def optInd(self):
            return self.getTypedRuleContext(m2_Parser.OptIndContext,0)


        def optPar(self):
            return self.getTypedRuleContext(m2_Parser.OptParContext,0)


        def CLOSE_BRACE(self):
            return self.getToken(m2_Parser.CLOSE_BRACE, 0)

        def exprColonExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.ExprColonExprContext)
            else:
                return self.getTypedRuleContext(m2_Parser.ExprColonExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.COMMA)
            else:
                return self.getToken(m2_Parser.COMMA, i)

        def getRuleIndex(self):
            return m2_Parser.RULE_pragma

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragma" ):
                listener.enterPragma(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragma" ):
                listener.exitPragma(self)




    def pragma(self):

        localctx = m2_Parser.PragmaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_pragma)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 455
            self.match(m2_Parser.OPEN_BRACE)
            self.state = 456
            self.match(m2_Parser.DOT)
            self.state = 457
            self.optInd()
            self.state = 464
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,35,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 458
                    self.exprColonExpr()
                    self.state = 460
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==m2_Parser.COMMA:
                        self.state = 459
                        self.match(m2_Parser.COMMA)

             
                self.state = 466
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,35,self._ctx)

            self.state = 467
            self.optPar()

            self.state = 469
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==m2_Parser.DOT:
                self.state = 468
                self.match(m2_Parser.DOT)


            self.state = 471
            self.match(m2_Parser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arrowExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.ArrowExprContext)
            else:
                return self.getTypedRuleContext(m2_Parser.ArrowExprContext,i)


        def OP0(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.OP0)
            else:
                return self.getToken(m2_Parser.OP0, i)

        def optInd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.OptIndContext)
            else:
                return self.getTypedRuleContext(m2_Parser.OptIndContext,i)


        def getRuleIndex(self):
            return m2_Parser.RULE_simpleExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleExpr" ):
                listener.enterSimpleExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleExpr" ):
                listener.exitSimpleExpr(self)




    def simpleExpr(self):

        localctx = m2_Parser.SimpleExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_simpleExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 473
            self.arrowExpr()
            self.state = 480
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,37,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 474
                    self.match(m2_Parser.OP0)
                    self.state = 475
                    self.optInd()
                    self.state = 476
                    self.arrowExpr() 
                self.state = 482
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,37,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrowExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.AssignExprContext)
            else:
                return self.getTypedRuleContext(m2_Parser.AssignExprContext,i)


        def OP1(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.OP1)
            else:
                return self.getToken(m2_Parser.OP1, i)

        def optInd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.OptIndContext)
            else:
                return self.getTypedRuleContext(m2_Parser.OptIndContext,i)


        def getRuleIndex(self):
            return m2_Parser.RULE_arrowExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrowExpr" ):
                listener.enterArrowExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrowExpr" ):
                listener.exitArrowExpr(self)




    def arrowExpr(self):

        localctx = m2_Parser.ArrowExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_arrowExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 483
            self.assignExpr()
            self.state = 490
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,38,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 484
                    self.match(m2_Parser.OP1)
                    self.state = 485
                    self.optInd()
                    self.state = 486
                    self.assignExpr() 
                self.state = 492
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,38,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def orExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.OrExprContext)
            else:
                return self.getTypedRuleContext(m2_Parser.OrExprContext,i)


        def OP2(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.OP2)
            else:
                return self.getToken(m2_Parser.OP2, i)

        def optInd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.OptIndContext)
            else:
                return self.getTypedRuleContext(m2_Parser.OptIndContext,i)


        def getRuleIndex(self):
            return m2_Parser.RULE_assignExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignExpr" ):
                listener.enterAssignExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignExpr" ):
                listener.exitAssignExpr(self)




    def assignExpr(self):

        localctx = m2_Parser.AssignExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_assignExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 493
            self.orExpr()
            self.state = 500
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,39,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 494
                    self.match(m2_Parser.OP2)
                    self.state = 495
                    self.optInd()
                    self.state = 496
                    self.orExpr() 
                self.state = 502
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,39,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def andExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.AndExprContext)
            else:
                return self.getTypedRuleContext(m2_Parser.AndExprContext,i)


        def OP3(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.OP3)
            else:
                return self.getToken(m2_Parser.OP3, i)

        def optInd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.OptIndContext)
            else:
                return self.getTypedRuleContext(m2_Parser.OptIndContext,i)


        def getRuleIndex(self):
            return m2_Parser.RULE_orExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrExpr" ):
                listener.enterOrExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrExpr" ):
                listener.exitOrExpr(self)




    def orExpr(self):

        localctx = m2_Parser.OrExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_orExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 503
            self.andExpr()
            self.state = 510
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,40,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 504
                    self.match(m2_Parser.OP3)
                    self.state = 505
                    self.optInd()
                    self.state = 506
                    self.andExpr() 
                self.state = 512
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,40,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AndExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def cmpExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.CmpExprContext)
            else:
                return self.getTypedRuleContext(m2_Parser.CmpExprContext,i)


        def OP4(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.OP4)
            else:
                return self.getToken(m2_Parser.OP4, i)

        def optInd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.OptIndContext)
            else:
                return self.getTypedRuleContext(m2_Parser.OptIndContext,i)


        def getRuleIndex(self):
            return m2_Parser.RULE_andExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAndExpr" ):
                listener.enterAndExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAndExpr" ):
                listener.exitAndExpr(self)




    def andExpr(self):

        localctx = m2_Parser.AndExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_andExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 513
            self.cmpExpr()
            self.state = 520
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,41,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 514
                    self.match(m2_Parser.OP4)
                    self.state = 515
                    self.optInd()
                    self.state = 516
                    self.cmpExpr() 
                self.state = 522
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,41,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CmpExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sliceExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.SliceExprContext)
            else:
                return self.getTypedRuleContext(m2_Parser.SliceExprContext,i)


        def OP5(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.OP5)
            else:
                return self.getToken(m2_Parser.OP5, i)

        def optInd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.OptIndContext)
            else:
                return self.getTypedRuleContext(m2_Parser.OptIndContext,i)


        def getRuleIndex(self):
            return m2_Parser.RULE_cmpExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCmpExpr" ):
                listener.enterCmpExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCmpExpr" ):
                listener.exitCmpExpr(self)




    def cmpExpr(self):

        localctx = m2_Parser.CmpExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_cmpExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 523
            self.sliceExpr()
            self.state = 530
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,42,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 524
                    self.match(m2_Parser.OP5)
                    self.state = 525
                    self.optInd()
                    self.state = 526
                    self.sliceExpr() 
                self.state = 532
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,42,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SliceExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ampExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.AmpExprContext)
            else:
                return self.getTypedRuleContext(m2_Parser.AmpExprContext,i)


        def OP6(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.OP6)
            else:
                return self.getToken(m2_Parser.OP6, i)

        def optInd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.OptIndContext)
            else:
                return self.getTypedRuleContext(m2_Parser.OptIndContext,i)


        def getRuleIndex(self):
            return m2_Parser.RULE_sliceExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSliceExpr" ):
                listener.enterSliceExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSliceExpr" ):
                listener.exitSliceExpr(self)




    def sliceExpr(self):

        localctx = m2_Parser.SliceExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_sliceExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 533
            self.ampExpr()
            self.state = 540
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,43,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 534
                    self.match(m2_Parser.OP6)
                    self.state = 535
                    self.optInd()
                    self.state = 536
                    self.ampExpr() 
                self.state = 542
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,43,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AmpExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def plusExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.PlusExprContext)
            else:
                return self.getTypedRuleContext(m2_Parser.PlusExprContext,i)


        def OP7(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.OP7)
            else:
                return self.getToken(m2_Parser.OP7, i)

        def optInd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.OptIndContext)
            else:
                return self.getTypedRuleContext(m2_Parser.OptIndContext,i)


        def getRuleIndex(self):
            return m2_Parser.RULE_ampExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAmpExpr" ):
                listener.enterAmpExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAmpExpr" ):
                listener.exitAmpExpr(self)




    def ampExpr(self):

        localctx = m2_Parser.AmpExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_ampExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 543
            self.plusExpr()
            self.state = 550
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,44,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 544
                    self.match(m2_Parser.OP7)
                    self.state = 545
                    self.optInd()
                    self.state = 546
                    self.plusExpr() 
                self.state = 552
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,44,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PlusExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mulExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.MulExprContext)
            else:
                return self.getTypedRuleContext(m2_Parser.MulExprContext,i)


        def OP8(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.OP8)
            else:
                return self.getToken(m2_Parser.OP8, i)

        def optInd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.OptIndContext)
            else:
                return self.getTypedRuleContext(m2_Parser.OptIndContext,i)


        def getRuleIndex(self):
            return m2_Parser.RULE_plusExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlusExpr" ):
                listener.enterPlusExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlusExpr" ):
                listener.exitPlusExpr(self)




    def plusExpr(self):

        localctx = m2_Parser.PlusExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_plusExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 553
            self.mulExpr()
            self.state = 560
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,45,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 554
                    self.match(m2_Parser.OP8)
                    self.state = 555
                    self.optInd()
                    self.state = 556
                    self.mulExpr() 
                self.state = 562
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,45,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MulExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dollarExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.DollarExprContext)
            else:
                return self.getTypedRuleContext(m2_Parser.DollarExprContext,i)


        def OP9(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.OP9)
            else:
                return self.getToken(m2_Parser.OP9, i)

        def optInd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.OptIndContext)
            else:
                return self.getTypedRuleContext(m2_Parser.OptIndContext,i)


        def getRuleIndex(self):
            return m2_Parser.RULE_mulExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMulExpr" ):
                listener.enterMulExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMulExpr" ):
                listener.exitMulExpr(self)




    def mulExpr(self):

        localctx = m2_Parser.MulExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_mulExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 563
            self.dollarExpr()
            self.state = 570
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,46,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 564
                    self.match(m2_Parser.OP9)
                    self.state = 565
                    self.optInd()
                    self.state = 566
                    self.dollarExpr() 
                self.state = 572
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,46,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DollarExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primary(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.PrimaryContext)
            else:
                return self.getTypedRuleContext(m2_Parser.PrimaryContext,i)


        def OP10(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.OP10)
            else:
                return self.getToken(m2_Parser.OP10, i)

        def optInd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.OptIndContext)
            else:
                return self.getTypedRuleContext(m2_Parser.OptIndContext,i)


        def getRuleIndex(self):
            return m2_Parser.RULE_dollarExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDollarExpr" ):
                listener.enterDollarExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDollarExpr" ):
                listener.exitDollarExpr(self)




    def dollarExpr(self):

        localctx = m2_Parser.DollarExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_dollarExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 573
            self.primary()
            self.state = 580
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,47,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 574
                    self.match(m2_Parser.OP10)
                    self.state = 575
                    self.optInd()
                    self.state = 576
                    self.primary() 
                self.state = 582
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,47,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.ExprContext)
            else:
                return self.getTypedRuleContext(m2_Parser.ExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.COMMA)
            else:
                return self.getToken(m2_Parser.COMMA, i)

        def getRuleIndex(self):
            return m2_Parser.RULE_exprList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprList" ):
                listener.enterExprList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprList" ):
                listener.exitExprList(self)




    def exprList(self):

        localctx = m2_Parser.ExprListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_exprList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 583
            self.expr()
            self.state = 588
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==m2_Parser.COMMA:
                self.state = 584
                self.match(m2_Parser.COMMA)
                self.state = 585
                self.expr()
                self.state = 590
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprColonExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.ExprContext)
            else:
                return self.getTypedRuleContext(m2_Parser.ExprContext,i)


        def COLON(self):
            return self.getToken(m2_Parser.COLON, 0)

        def getRuleIndex(self):
            return m2_Parser.RULE_exprColonExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprColonExpr" ):
                listener.enterExprColonExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprColonExpr" ):
                listener.exitExprColonExpr(self)




    def exprColonExpr(self):

        localctx = m2_Parser.ExprColonExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_exprColonExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 591
            self.expr()
            self.state = 594
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,49,self._ctx)
            if la_ == 1:
                self.state = 592
                self.match(m2_Parser.COLON)
                self.state = 593
                self.expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprColonEqExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.ExprContext)
            else:
                return self.getTypedRuleContext(m2_Parser.ExprContext,i)


        def COLON(self):
            return self.getToken(m2_Parser.COLON, 0)

        def EQUALS(self):
            return self.getToken(m2_Parser.EQUALS, 0)

        def getRuleIndex(self):
            return m2_Parser.RULE_exprColonEqExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprColonEqExpr" ):
                listener.enterExprColonEqExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprColonEqExpr" ):
                listener.exitExprColonEqExpr(self)




    def exprColonEqExpr(self):

        localctx = m2_Parser.ExprColonEqExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_exprColonEqExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 596
            self.expr()
            self.state = 600
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
            if la_ == 1:
                self.state = 597
                self.match(m2_Parser.COLON)

            elif la_ == 2:
                self.state = 598
                self.match(m2_Parser.EQUALS)
                self.state = 599
                self.expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprColonEqExprListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exprColonEqExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.ExprColonEqExprContext)
            else:
                return self.getTypedRuleContext(m2_Parser.ExprColonEqExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.COMMA)
            else:
                return self.getToken(m2_Parser.COMMA, i)

        def getRuleIndex(self):
            return m2_Parser.RULE_exprColonEqExprList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprColonEqExprList" ):
                listener.enterExprColonEqExprList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprColonEqExprList" ):
                listener.exitExprColonEqExprList(self)




    def exprColonEqExprList(self):

        localctx = m2_Parser.ExprColonEqExprListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_exprColonEqExprList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 602
            self.exprColonEqExpr()
            self.state = 607
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,51,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 603
                    self.match(m2_Parser.COMMA)
                    self.state = 604
                    self.exprColonEqExpr() 
                self.state = 609
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,51,self._ctx)

            self.state = 611
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==m2_Parser.COMMA:
                self.state = 610
                self.match(m2_Parser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CondExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.ExprContext)
            else:
                return self.getTypedRuleContext(m2_Parser.ExprContext,i)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.COLON)
            else:
                return self.getToken(m2_Parser.COLON, i)

        def optInd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.OptIndContext)
            else:
                return self.getTypedRuleContext(m2_Parser.OptIndContext,i)


        def ELSE(self):
            return self.getToken(m2_Parser.ELSE, 0)

        def ELIF(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.ELIF)
            else:
                return self.getToken(m2_Parser.ELIF, i)

        def getRuleIndex(self):
            return m2_Parser.RULE_condExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondExpr" ):
                listener.enterCondExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondExpr" ):
                listener.exitCondExpr(self)




    def condExpr(self):

        localctx = m2_Parser.CondExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_condExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 613
            self.expr()
            self.state = 614
            self.match(m2_Parser.COLON)
            self.state = 615
            self.expr()
            self.state = 616
            self.optInd()
            self.state = 625
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==m2_Parser.ELIF:
                self.state = 617
                self.match(m2_Parser.ELIF)
                self.state = 618
                self.expr()
                self.state = 619
                self.match(m2_Parser.COLON)
                self.state = 620
                self.expr()
                self.state = 621
                self.optInd()
                self.state = 627
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 628
            self.match(m2_Parser.ELSE)
            self.state = 629
            self.match(m2_Parser.COLON)
            self.state = 630
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT_LIT(self):
            return self.getToken(m2_Parser.INT_LIT, 0)

        def INT8_LIT(self):
            return self.getToken(m2_Parser.INT8_LIT, 0)

        def INT16_LIT(self):
            return self.getToken(m2_Parser.INT16_LIT, 0)

        def INT32_LIT(self):
            return self.getToken(m2_Parser.INT32_LIT, 0)

        def INT64_LIT(self):
            return self.getToken(m2_Parser.INT64_LIT, 0)

        def UINT_LIT(self):
            return self.getToken(m2_Parser.UINT_LIT, 0)

        def UINT8_LIT(self):
            return self.getToken(m2_Parser.UINT8_LIT, 0)

        def UINT16_LIT(self):
            return self.getToken(m2_Parser.UINT16_LIT, 0)

        def UINT32_LIT(self):
            return self.getToken(m2_Parser.UINT32_LIT, 0)

        def UINT64_LIT(self):
            return self.getToken(m2_Parser.UINT64_LIT, 0)

        def FLOAT_LIT(self):
            return self.getToken(m2_Parser.FLOAT_LIT, 0)

        def FLOAT32_LIT(self):
            return self.getToken(m2_Parser.FLOAT32_LIT, 0)

        def FLOAT64_LIT(self):
            return self.getToken(m2_Parser.FLOAT64_LIT, 0)

        def STR_LIT(self):
            return self.getToken(m2_Parser.STR_LIT, 0)

        def RSTR_LIT(self):
            return self.getToken(m2_Parser.RSTR_LIT, 0)

        def TRIPLESTR_LIT(self):
            return self.getToken(m2_Parser.TRIPLESTR_LIT, 0)

        def CHAR_LIT(self):
            return self.getToken(m2_Parser.CHAR_LIT, 0)

        def NIL(self):
            return self.getToken(m2_Parser.NIL, 0)

        def getRuleIndex(self):
            return m2_Parser.RULE_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral" ):
                listener.enterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral" ):
                listener.exitLiteral(self)




    def literal(self):

        localctx = m2_Parser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 632
            _la = self._input.LA(1)
            if not(((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & ((1 << (m2_Parser.NIL - 79)) | (1 << (m2_Parser.INT_LIT - 79)) | (1 << (m2_Parser.INT8_LIT - 79)) | (1 << (m2_Parser.INT16_LIT - 79)) | (1 << (m2_Parser.INT32_LIT - 79)) | (1 << (m2_Parser.INT64_LIT - 79)) | (1 << (m2_Parser.UINT_LIT - 79)) | (1 << (m2_Parser.UINT8_LIT - 79)) | (1 << (m2_Parser.UINT16_LIT - 79)) | (1 << (m2_Parser.UINT32_LIT - 79)) | (1 << (m2_Parser.UINT64_LIT - 79)) | (1 << (m2_Parser.FLOAT_LIT - 79)) | (1 << (m2_Parser.FLOAT32_LIT - 79)) | (1 << (m2_Parser.FLOAT64_LIT - 79)) | (1 << (m2_Parser.CHAR_LIT - 79)) | (1 << (m2_Parser.STR_LIT - 79)) | (1 << (m2_Parser.TRIPLESTR_LIT - 79)) | (1 << (m2_Parser.RSTR_LIT - 79)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SymbolBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def keyw(self):
            return self.getTypedRuleContext(m2_Parser.KeywContext,0)


        def IDENTIFIER(self):
            return self.getToken(m2_Parser.IDENTIFIER, 0)

        def literal(self):
            return self.getTypedRuleContext(m2_Parser.LiteralContext,0)


        def operator(self):
            return self.getTypedRuleContext(m2_Parser.OperatorContext,0)


        def OPEN_PAREN(self):
            return self.getToken(m2_Parser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(m2_Parser.CLOSE_PAREN, 0)

        def OPEN_BRACK(self):
            return self.getToken(m2_Parser.OPEN_BRACK, 0)

        def CLOSE_BRACK(self):
            return self.getToken(m2_Parser.CLOSE_BRACK, 0)

        def EQUALS(self):
            return self.getToken(m2_Parser.EQUALS, 0)

        def getRuleIndex(self):
            return m2_Parser.RULE_symbolBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSymbolBody" ):
                listener.enterSymbolBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSymbolBody" ):
                listener.exitSymbolBody(self)




    def symbolBody(self):

        localctx = m2_Parser.SymbolBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_symbolBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 645
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [m2_Parser.VARIABLE, m2_Parser.LET, m2_Parser.CONST, m2_Parser.PROC, m2_Parser.CASE, m2_Parser.IF, m2_Parser.WHILE, m2_Parser.FOR, m2_Parser.TUPLE, m2_Parser.WHEN, m2_Parser.REF, m2_Parser.BLOCK, m2_Parser.DISCARD]:
                self.state = 634
                self.keyw()
                pass
            elif token in [m2_Parser.IDENTIFIER]:
                self.state = 635
                self.match(m2_Parser.IDENTIFIER)
                pass
            elif token in [m2_Parser.NIL, m2_Parser.INT_LIT, m2_Parser.INT8_LIT, m2_Parser.INT16_LIT, m2_Parser.INT32_LIT, m2_Parser.INT64_LIT, m2_Parser.UINT_LIT, m2_Parser.UINT8_LIT, m2_Parser.UINT16_LIT, m2_Parser.UINT32_LIT, m2_Parser.UINT64_LIT, m2_Parser.FLOAT_LIT, m2_Parser.FLOAT32_LIT, m2_Parser.FLOAT64_LIT, m2_Parser.CHAR_LIT, m2_Parser.STR_LIT, m2_Parser.TRIPLESTR_LIT, m2_Parser.RSTR_LIT]:
                self.state = 636
                self.literal()
                pass
            elif token in [m2_Parser.OPEN_PAREN, m2_Parser.CLOSE_PAREN, m2_Parser.OPEN_BRACK, m2_Parser.CLOSE_BRACK, m2_Parser.COLON, m2_Parser.DOT, m2_Parser.EQUALS, m2_Parser.IN, m2_Parser.OF, m2_Parser.NOT, m2_Parser.OP0, m2_Parser.OP1, m2_Parser.OP2, m2_Parser.OP3, m2_Parser.OP4, m2_Parser.OP5, m2_Parser.OP6, m2_Parser.OP7, m2_Parser.OP8, m2_Parser.OP9, m2_Parser.OP10]:
                self.state = 643
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
                if la_ == 1:
                    self.state = 637
                    self.operator()
                    pass

                elif la_ == 2:
                    self.state = 638
                    self.match(m2_Parser.OPEN_PAREN)
                    pass

                elif la_ == 3:
                    self.state = 639
                    self.match(m2_Parser.CLOSE_PAREN)
                    pass

                elif la_ == 4:
                    self.state = 640
                    self.match(m2_Parser.OPEN_BRACK)
                    pass

                elif la_ == 5:
                    self.state = 641
                    self.match(m2_Parser.CLOSE_BRACK)
                    pass

                elif la_ == 6:
                    self.state = 642
                    self.match(m2_Parser.EQUALS)
                    pass


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SymbolContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SYM_HEADER(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.SYM_HEADER)
            else:
                return self.getToken(m2_Parser.SYM_HEADER, i)

        def symbolBody(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.SymbolBodyContext)
            else:
                return self.getTypedRuleContext(m2_Parser.SymbolBodyContext,i)


        def keyw(self):
            return self.getTypedRuleContext(m2_Parser.KeywContext,0)


        def IDENTIFIER(self):
            return self.getToken(m2_Parser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return m2_Parser.RULE_symbol

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSymbol" ):
                listener.enterSymbol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSymbol" ):
                listener.exitSymbol(self)




    def symbol(self):

        localctx = m2_Parser.SymbolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_symbol)
        self._la = 0 # Token type
        try:
            self.state = 657
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [m2_Parser.SYM_HEADER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 647
                self.match(m2_Parser.SYM_HEADER)
                self.state = 649 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 648
                    self.symbolBody()
                    self.state = 651 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << m2_Parser.OPEN_PAREN) | (1 << m2_Parser.CLOSE_PAREN) | (1 << m2_Parser.OPEN_BRACK) | (1 << m2_Parser.CLOSE_BRACK) | (1 << m2_Parser.COLON) | (1 << m2_Parser.DOT) | (1 << m2_Parser.EQUALS) | (1 << m2_Parser.IN) | (1 << m2_Parser.OF) | (1 << m2_Parser.NOT) | (1 << m2_Parser.OP0) | (1 << m2_Parser.OP1) | (1 << m2_Parser.OP2) | (1 << m2_Parser.OP3) | (1 << m2_Parser.OP4) | (1 << m2_Parser.OP5) | (1 << m2_Parser.OP6) | (1 << m2_Parser.OP7) | (1 << m2_Parser.OP8) | (1 << m2_Parser.OP9) | (1 << m2_Parser.OP10) | (1 << m2_Parser.VARIABLE) | (1 << m2_Parser.LET) | (1 << m2_Parser.CONST) | (1 << m2_Parser.PROC) | (1 << m2_Parser.CASE) | (1 << m2_Parser.IF) | (1 << m2_Parser.WHILE) | (1 << m2_Parser.FOR))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (m2_Parser.TUPLE - 64)) | (1 << (m2_Parser.WHEN - 64)) | (1 << (m2_Parser.REF - 64)) | (1 << (m2_Parser.BLOCK - 64)) | (1 << (m2_Parser.NIL - 64)) | (1 << (m2_Parser.DISCARD - 64)) | (1 << (m2_Parser.IDENTIFIER - 64)) | (1 << (m2_Parser.INT_LIT - 64)) | (1 << (m2_Parser.INT8_LIT - 64)) | (1 << (m2_Parser.INT16_LIT - 64)) | (1 << (m2_Parser.INT32_LIT - 64)) | (1 << (m2_Parser.INT64_LIT - 64)) | (1 << (m2_Parser.UINT_LIT - 64)) | (1 << (m2_Parser.UINT8_LIT - 64)) | (1 << (m2_Parser.UINT16_LIT - 64)) | (1 << (m2_Parser.UINT32_LIT - 64)) | (1 << (m2_Parser.UINT64_LIT - 64)) | (1 << (m2_Parser.FLOAT_LIT - 64)) | (1 << (m2_Parser.FLOAT32_LIT - 64)) | (1 << (m2_Parser.FLOAT64_LIT - 64)) | (1 << (m2_Parser.CHAR_LIT - 64)) | (1 << (m2_Parser.STR_LIT - 64)) | (1 << (m2_Parser.TRIPLESTR_LIT - 64)) | (1 << (m2_Parser.RSTR_LIT - 64)))) != 0)):
                        break

                self.state = 653
                self.match(m2_Parser.SYM_HEADER)
                pass
            elif token in [m2_Parser.VARIABLE, m2_Parser.LET, m2_Parser.CONST, m2_Parser.PROC, m2_Parser.CASE, m2_Parser.IF, m2_Parser.WHILE, m2_Parser.FOR, m2_Parser.TUPLE, m2_Parser.WHEN, m2_Parser.REF, m2_Parser.BLOCK, m2_Parser.DISCARD]:
                self.enterOuterAlt(localctx, 2)
                self.state = 655
                self.keyw()
                pass
            elif token in [m2_Parser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 3)
                self.state = 656
                self.match(m2_Parser.IDENTIFIER)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BLOCK(self):
            return self.getToken(m2_Parser.BLOCK, 0)

        def COLON(self):
            return self.getToken(m2_Parser.COLON, 0)

        def stmt(self):
            return self.getTypedRuleContext(m2_Parser.StmtContext,0)


        def symbol(self):
            return self.getTypedRuleContext(m2_Parser.SymbolContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_blockExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockExpr" ):
                listener.enterBlockExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockExpr" ):
                listener.exitBlockExpr(self)




    def blockExpr(self):

        localctx = m2_Parser.BlockExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_blockExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 659
            self.match(m2_Parser.BLOCK)
            self.state = 661
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 37)) & ~0x3f) == 0 and ((1 << (_la - 37)) & ((1 << (m2_Parser.VARIABLE - 37)) | (1 << (m2_Parser.LET - 37)) | (1 << (m2_Parser.CONST - 37)) | (1 << (m2_Parser.PROC - 37)) | (1 << (m2_Parser.CASE - 37)) | (1 << (m2_Parser.IF - 37)) | (1 << (m2_Parser.WHILE - 37)) | (1 << (m2_Parser.FOR - 37)) | (1 << (m2_Parser.TUPLE - 37)) | (1 << (m2_Parser.WHEN - 37)) | (1 << (m2_Parser.REF - 37)) | (1 << (m2_Parser.BLOCK - 37)) | (1 << (m2_Parser.DISCARD - 37)) | (1 << (m2_Parser.SYM_HEADER - 37)) | (1 << (m2_Parser.IDENTIFIER - 37)))) != 0):
                self.state = 660
                self.symbol()


            self.state = 663
            self.match(m2_Parser.COLON)
            self.state = 664
            self.stmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(m2_Parser.IF, 0)

        def condExpr(self):
            return self.getTypedRuleContext(m2_Parser.CondExprContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_ifExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfExpr" ):
                listener.enterIfExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfExpr" ):
                listener.exitIfExpr(self)




    def ifExpr(self):

        localctx = m2_Parser.IfExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_ifExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 666
            self.match(m2_Parser.IF)
            self.state = 667
            self.condExpr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhenExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(m2_Parser.WHEN, 0)

        def condExpr(self):
            return self.getTypedRuleContext(m2_Parser.CondExprContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_whenExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhenExpr" ):
                listener.enterWhenExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhenExpr" ):
                listener.exitWhenExpr(self)




    def whenExpr(self):

        localctx = m2_Parser.WhenExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_whenExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 669
            self.match(m2_Parser.WHEN)
            self.state = 670
            self.condExpr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DotExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(m2_Parser.ExprContext,0)


        def DOT(self):
            return self.getToken(m2_Parser.DOT, 0)

        def optInd(self):
            return self.getTypedRuleContext(m2_Parser.OptIndContext,0)


        def symbol(self):
            return self.getTypedRuleContext(m2_Parser.SymbolContext,0)


        def exprList(self):
            return self.getTypedRuleContext(m2_Parser.ExprListContext,0)


        def CLOSE_BRACK(self):
            return self.getToken(m2_Parser.CLOSE_BRACK, 0)

        def OPEN_BRACK(self):
            return self.getToken(m2_Parser.OPEN_BRACK, 0)

        def COLON(self):
            return self.getToken(m2_Parser.COLON, 0)

        def getRuleIndex(self):
            return m2_Parser.RULE_dotExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDotExpr" ):
                listener.enterDotExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDotExpr" ):
                listener.exitDotExpr(self)




    def dotExpr(self):

        localctx = m2_Parser.DotExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_dotExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 672
            self.expr()
            self.state = 673
            self.match(m2_Parser.DOT)
            self.state = 674
            self.optInd()
            self.state = 682
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [m2_Parser.VARIABLE, m2_Parser.LET, m2_Parser.CONST, m2_Parser.PROC, m2_Parser.CASE, m2_Parser.IF, m2_Parser.WHILE, m2_Parser.FOR, m2_Parser.TUPLE, m2_Parser.WHEN, m2_Parser.REF, m2_Parser.BLOCK, m2_Parser.DISCARD, m2_Parser.SYM_HEADER, m2_Parser.IDENTIFIER]:
                self.state = 675
                self.symbol()
                pass
            elif token in [m2_Parser.OPEN_BRACK]:
                self.state = 676
                self.match(m2_Parser.OPEN_BRACK)
                self.state = 677
                self.match(m2_Parser.COLON)
                self.state = 679
                self.exprList()
                self.state = 680
                self.match(m2_Parser.CLOSE_BRACK)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def forStmt(self):
            return self.getTypedRuleContext(m2_Parser.ForStmtContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_forExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForExpr" ):
                listener.enterForExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForExpr" ):
                listener.exitForExpr(self)




    def forExpr(self):

        localctx = m2_Parser.ForExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_forExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 684
            self.forStmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def blockExpr(self):
            return self.getTypedRuleContext(m2_Parser.BlockExprContext,0)


        def forExpr(self):
            return self.getTypedRuleContext(m2_Parser.ForExprContext,0)


        def ifExpr(self):
            return self.getTypedRuleContext(m2_Parser.IfExprContext,0)


        def whenExpr(self):
            return self.getTypedRuleContext(m2_Parser.WhenExprContext,0)


        def caseExpr(self):
            return self.getTypedRuleContext(m2_Parser.CaseExprContext,0)


        def simpleExpr(self):
            return self.getTypedRuleContext(m2_Parser.SimpleExprContext,0)


        def NOT(self):
            return self.getToken(m2_Parser.NOT, 0)

        def getRuleIndex(self):
            return m2_Parser.RULE_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr" ):
                listener.enterExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr" ):
                listener.exitExpr(self)




    def expr(self):

        localctx = m2_Parser.ExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 687
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
            if la_ == 1:
                self.state = 686
                self.match(m2_Parser.NOT)


            self.state = 695
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
            if la_ == 1:
                self.state = 689
                self.blockExpr()
                pass

            elif la_ == 2:
                self.state = 690
                self.forExpr()
                pass

            elif la_ == 3:
                self.state = 691
                self.ifExpr()
                pass

            elif la_ == 4:
                self.state = 692
                self.whenExpr()
                pass

            elif la_ == 5:
                self.state = 693
                self.caseExpr()
                pass

            elif la_ == 6:
                self.state = 694
                self.simpleExpr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModuleNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(m2_Parser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return m2_Parser.RULE_moduleName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleName" ):
                listener.enterModuleName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleName" ):
                listener.exitModuleName(self)




    def moduleName(self):

        localctx = m2_Parser.ModuleNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_moduleName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 697
            self.match(m2_Parser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColonBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(m2_Parser.COLON, 0)

        def stmt(self):
            return self.getTypedRuleContext(m2_Parser.StmtContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_colonBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColonBody" ):
                listener.enterColonBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColonBody" ):
                listener.exitColonBody(self)




    def colonBody(self):

        localctx = m2_Parser.ColonBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_colonBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 699
            self.match(m2_Parser.COLON)
            self.state = 700
            self.stmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(m2_Parser.RETURN, 0)

        def optInd(self):
            return self.getTypedRuleContext(m2_Parser.OptIndContext,0)


        def expr(self):
            return self.getTypedRuleContext(m2_Parser.ExprContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_returnStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnStmt" ):
                listener.enterReturnStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnStmt" ):
                listener.exitReturnStmt(self)




    def returnStmt(self):

        localctx = m2_Parser.ReturnStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_returnStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 702
            self.match(m2_Parser.RETURN)
            self.state = 703
            self.optInd()
            self.state = 705
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
            if la_ == 1:
                self.state = 704
                self.expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiscardStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DISCARD(self):
            return self.getToken(m2_Parser.DISCARD, 0)

        def optInd(self):
            return self.getTypedRuleContext(m2_Parser.OptIndContext,0)


        def expr(self):
            return self.getTypedRuleContext(m2_Parser.ExprContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_discardStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiscardStmt" ):
                listener.enterDiscardStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiscardStmt" ):
                listener.exitDiscardStmt(self)




    def discardStmt(self):

        localctx = m2_Parser.DiscardStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_discardStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 707
            self.match(m2_Parser.DISCARD)
            self.state = 708
            self.optInd()
            self.state = 710
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
            if la_ == 1:
                self.state = 709
                self.expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BreakStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BREAK(self):
            return self.getToken(m2_Parser.BREAK, 0)

        def optInd(self):
            return self.getTypedRuleContext(m2_Parser.OptIndContext,0)


        def expr(self):
            return self.getTypedRuleContext(m2_Parser.ExprContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_breakStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBreakStmt" ):
                listener.enterBreakStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBreakStmt" ):
                listener.exitBreakStmt(self)




    def breakStmt(self):

        localctx = m2_Parser.BreakStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_breakStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 712
            self.match(m2_Parser.BREAK)
            self.state = 713
            self.optInd()
            self.state = 715
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
            if la_ == 1:
                self.state = 714
                self.expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContinueStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTINUE(self):
            return self.getToken(m2_Parser.CONTINUE, 0)

        def optInd(self):
            return self.getTypedRuleContext(m2_Parser.OptIndContext,0)


        def expr(self):
            return self.getTypedRuleContext(m2_Parser.ExprContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_continueStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContinueStmt" ):
                listener.enterContinueStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContinueStmt" ):
                listener.exitContinueStmt(self)




    def continueStmt(self):

        localctx = m2_Parser.ContinueStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_continueStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 717
            self.match(m2_Parser.CONTINUE)
            self.state = 718
            self.optInd()
            self.state = 720
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
            if la_ == 1:
                self.state = 719
                self.expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPORT(self):
            return self.getToken(m2_Parser.IMPORT, 0)

        def optInd(self):
            return self.getTypedRuleContext(m2_Parser.OptIndContext,0)


        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.ExprContext)
            else:
                return self.getTypedRuleContext(m2_Parser.ExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.COMMA)
            else:
                return self.getToken(m2_Parser.COMMA, i)

        def getRuleIndex(self):
            return m2_Parser.RULE_importStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportStmt" ):
                listener.enterImportStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportStmt" ):
                listener.exitImportStmt(self)




    def importStmt(self):

        localctx = m2_Parser.ImportStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_importStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 722
            self.match(m2_Parser.IMPORT)
            self.state = 723
            self.optInd()
            self.state = 724
            self.expr()
            self.state = 729
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,66,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 725
                    self.match(m2_Parser.COMMA)
                    self.state = 726
                    self.expr() 
                self.state = 731
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,66,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FromStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(m2_Parser.FROM, 0)

        def moduleName(self):
            return self.getTypedRuleContext(m2_Parser.ModuleNameContext,0)


        def IMPORT(self):
            return self.getToken(m2_Parser.IMPORT, 0)

        def optInd(self):
            return self.getTypedRuleContext(m2_Parser.OptIndContext,0)


        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.ExprContext)
            else:
                return self.getTypedRuleContext(m2_Parser.ExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.COMMA)
            else:
                return self.getToken(m2_Parser.COMMA, i)

        def getRuleIndex(self):
            return m2_Parser.RULE_fromStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFromStmt" ):
                listener.enterFromStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFromStmt" ):
                listener.exitFromStmt(self)




    def fromStmt(self):

        localctx = m2_Parser.FromStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_fromStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 732
            self.match(m2_Parser.FROM)
            self.state = 733
            self.moduleName()
            self.state = 734
            self.match(m2_Parser.IMPORT)
            self.state = 735
            self.optInd()
            self.state = 736
            self.expr()
            self.state = 741
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,67,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 737
                    self.match(m2_Parser.COMMA)
                    self.state = 738
                    self.expr() 
                self.state = 743
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,67,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CaseExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(m2_Parser.CASE, 0)

        def IDENTIFIER(self):
            return self.getToken(m2_Parser.IDENTIFIER, 0)

        def ofBranches(self):
            return self.getTypedRuleContext(m2_Parser.OfBranchesContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_caseExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseExpr" ):
                listener.enterCaseExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseExpr" ):
                listener.exitCaseExpr(self)




    def caseExpr(self):

        localctx = m2_Parser.CaseExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_caseExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 744
            self.match(m2_Parser.CASE)
            self.state = 745
            self.match(m2_Parser.IDENTIFIER)
            self.state = 746
            self.ofBranches()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CaseStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(m2_Parser.CASE, 0)

        def expr(self):
            return self.getTypedRuleContext(m2_Parser.ExprContext,0)


        def ofBranches(self):
            return self.getTypedRuleContext(m2_Parser.OfBranchesContext,0)


        def COLON(self):
            return self.getToken(m2_Parser.COLON, 0)

        def ind(self):
            return self.getTypedRuleContext(m2_Parser.IndContext,0)


        def ded(self):
            return self.getTypedRuleContext(m2_Parser.DedContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_caseStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseStmt" ):
                listener.enterCaseStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseStmt" ):
                listener.exitCaseStmt(self)




    def caseStmt(self):

        localctx = m2_Parser.CaseStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_caseStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 748
            self.match(m2_Parser.CASE)
            self.state = 749
            self.expr()
            self.state = 751
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==m2_Parser.COLON:
                self.state = 750
                self.match(m2_Parser.COLON)


            self.state = 758
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [m2_Parser.INDENT]:
                self.state = 753
                self.ind()
                self.state = 754
                self.ofBranches()
                self.state = 755
                self.ded()
                pass
            elif token in [m2_Parser.OF]:
                self.state = 757
                self.ofBranches()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OfBranchContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OF(self):
            return self.getToken(m2_Parser.OF, 0)

        def exprList(self):
            return self.getTypedRuleContext(m2_Parser.ExprListContext,0)


        def COLON(self):
            return self.getToken(m2_Parser.COLON, 0)

        def stmt(self):
            return self.getTypedRuleContext(m2_Parser.StmtContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_ofBranch

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOfBranch" ):
                listener.enterOfBranch(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOfBranch" ):
                listener.exitOfBranch(self)




    def ofBranch(self):

        localctx = m2_Parser.OfBranchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_ofBranch)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 760
            self.match(m2_Parser.OF)
            self.state = 761
            self.exprList()
            self.state = 762
            self.match(m2_Parser.COLON)
            self.state = 763
            self.stmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OfBranchesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ofBranch(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.OfBranchContext)
            else:
                return self.getTypedRuleContext(m2_Parser.OfBranchContext,i)


        def ELIF(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.ELIF)
            else:
                return self.getToken(m2_Parser.ELIF, i)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.ExprContext)
            else:
                return self.getTypedRuleContext(m2_Parser.ExprContext,i)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.COLON)
            else:
                return self.getToken(m2_Parser.COLON, i)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.StmtContext)
            else:
                return self.getTypedRuleContext(m2_Parser.StmtContext,i)


        def ELSE(self):
            return self.getToken(m2_Parser.ELSE, 0)

        def getRuleIndex(self):
            return m2_Parser.RULE_ofBranches

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOfBranches" ):
                listener.enterOfBranches(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOfBranches" ):
                listener.exitOfBranches(self)




    def ofBranches(self):

        localctx = m2_Parser.OfBranchesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_ofBranches)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 766 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 765
                    self.ofBranch()

                else:
                    raise NoViableAltException(self)
                self.state = 768 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,70,self._ctx)

            self.state = 777
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,71,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 770
                    self.match(m2_Parser.ELIF)
                    self.state = 771
                    self.expr()
                    self.state = 772
                    self.match(m2_Parser.COLON)
                    self.state = 773
                    self.stmt() 
                self.state = 779
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,71,self._ctx)

            self.state = 783
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,72,self._ctx)
            if la_ == 1:
                self.state = 780
                self.match(m2_Parser.ELSE)
                self.state = 781
                self.match(m2_Parser.COLON)
                self.state = 782
                self.stmt()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleExpr(self):
            return self.getTypedRuleContext(m2_Parser.SimpleExprContext,0)


        def EQUALS(self):
            return self.getToken(m2_Parser.EQUALS, 0)

        def optInd(self):
            return self.getTypedRuleContext(m2_Parser.OptIndContext,0)


        def expr(self):
            return self.getTypedRuleContext(m2_Parser.ExprContext,0)


        def colonBody(self):
            return self.getTypedRuleContext(m2_Parser.ColonBodyContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_exprStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprStmt" ):
                listener.enterExprStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprStmt" ):
                listener.exitExprStmt(self)




    def exprStmt(self):

        localctx = m2_Parser.ExprStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_exprStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 785
            self.simpleExpr()
            self.state = 792
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
            if la_ == 1:
                self.state = 786
                self.match(m2_Parser.EQUALS)
                self.state = 787
                self.optInd()
                self.state = 788
                self.expr()
                self.state = 790
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
                if la_ == 1:
                    self.state = 789
                    self.colonBody()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def returnStmt(self):
            return self.getTypedRuleContext(m2_Parser.ReturnStmtContext,0)


        def discardStmt(self):
            return self.getTypedRuleContext(m2_Parser.DiscardStmtContext,0)


        def breakStmt(self):
            return self.getTypedRuleContext(m2_Parser.BreakStmtContext,0)


        def continueStmt(self):
            return self.getTypedRuleContext(m2_Parser.ContinueStmtContext,0)


        def pragmaStmt(self):
            return self.getTypedRuleContext(m2_Parser.PragmaStmtContext,0)


        def importStmt(self):
            return self.getTypedRuleContext(m2_Parser.ImportStmtContext,0)


        def fromStmt(self):
            return self.getTypedRuleContext(m2_Parser.FromStmtContext,0)


        def exprStmt(self):
            return self.getTypedRuleContext(m2_Parser.ExprStmtContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_simpleStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleStmt" ):
                listener.enterSimpleStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleStmt" ):
                listener.exitSimpleStmt(self)




    def simpleStmt(self):

        localctx = m2_Parser.SimpleStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_simpleStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 802
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
            if la_ == 1:
                self.state = 794
                self.returnStmt()
                pass

            elif la_ == 2:
                self.state = 795
                self.discardStmt()
                pass

            elif la_ == 3:
                self.state = 796
                self.breakStmt()
                pass

            elif la_ == 4:
                self.state = 797
                self.continueStmt()
                pass

            elif la_ == 5:
                self.state = 798
                self.pragmaStmt()
                pass

            elif la_ == 6:
                self.state = 799
                self.importStmt()
                pass

            elif la_ == 7:
                self.state = 800
                self.fromStmt()
                pass

            elif la_ == 8:
                self.state = 801
                self.exprStmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CondStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.ExprContext)
            else:
                return self.getTypedRuleContext(m2_Parser.ExprContext,i)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.COLON)
            else:
                return self.getToken(m2_Parser.COLON, i)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.StmtContext)
            else:
                return self.getTypedRuleContext(m2_Parser.StmtContext,i)


        def ELIF(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.ELIF)
            else:
                return self.getToken(m2_Parser.ELIF, i)

        def ELSE(self):
            return self.getToken(m2_Parser.ELSE, 0)

        def getRuleIndex(self):
            return m2_Parser.RULE_condStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondStmt" ):
                listener.enterCondStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondStmt" ):
                listener.exitCondStmt(self)




    def condStmt(self):

        localctx = m2_Parser.CondStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_condStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 804
            self.expr()
            self.state = 805
            self.match(m2_Parser.COLON)
            self.state = 806
            self.stmt()
            self.state = 814
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,76,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 807
                    self.match(m2_Parser.ELIF)
                    self.state = 808
                    self.expr()
                    self.state = 809
                    self.match(m2_Parser.COLON)
                    self.state = 810
                    self.stmt() 
                self.state = 816
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,76,self._ctx)

            self.state = 820
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
            if la_ == 1:
                self.state = 817
                self.match(m2_Parser.ELSE)
                self.state = 818
                self.match(m2_Parser.COLON)
                self.state = 819
                self.stmt()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentVisContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self):
            return self.getTypedRuleContext(m2_Parser.SymbolContext,0)


        def operator(self):
            return self.getTypedRuleContext(m2_Parser.OperatorContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_identVis

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentVis" ):
                listener.enterIdentVis(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentVis" ):
                listener.exitIdentVis(self)




    def identVis(self):

        localctx = m2_Parser.IdentVisContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_identVis)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 822
            self.symbol()
            self.state = 824
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
            if la_ == 1:
                self.state = 823
                self.operator()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentVisDotContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.SymbolContext)
            else:
                return self.getTypedRuleContext(m2_Parser.SymbolContext,i)


        def DOT(self):
            return self.getToken(m2_Parser.DOT, 0)

        def operator(self):
            return self.getTypedRuleContext(m2_Parser.OperatorContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_identVisDot

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentVisDot" ):
                listener.enterIdentVisDot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentVisDot" ):
                listener.exitIdentVisDot(self)




    def identVisDot(self):

        localctx = m2_Parser.IdentVisDotContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_identVisDot)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 826
            self.symbol()
            self.state = 829
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,79,self._ctx)
            if la_ == 1:
                self.state = 827
                self.match(m2_Parser.DOT)
                self.state = 828
                self.symbol()


            self.state = 832
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
            if la_ == 1:
                self.state = 831
                self.operator()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentWithPragmaContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identVis(self):
            return self.getTypedRuleContext(m2_Parser.IdentVisContext,0)


        def pragma(self):
            return self.getTypedRuleContext(m2_Parser.PragmaContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_identWithPragma

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentWithPragma" ):
                listener.enterIdentWithPragma(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentWithPragma" ):
                listener.exitIdentWithPragma(self)




    def identWithPragma(self):

        localctx = m2_Parser.IdentWithPragmaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_identWithPragma)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 834
            self.identVis()
            self.state = 836
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
            if la_ == 1:
                self.state = 835
                self.pragma()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(m2_Parser.IF, 0)

        def condStmt(self):
            return self.getTypedRuleContext(m2_Parser.CondStmtContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_ifStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfStmt" ):
                listener.enterIfStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfStmt" ):
                listener.exitIfStmt(self)




    def ifStmt(self):

        localctx = m2_Parser.IfStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_ifStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 838
            self.match(m2_Parser.IF)
            self.state = 839
            self.condStmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhenStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(m2_Parser.WHEN, 0)

        def condStmt(self):
            return self.getTypedRuleContext(m2_Parser.CondStmtContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_whenStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhenStmt" ):
                listener.enterWhenStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhenStmt" ):
                listener.exitWhenStmt(self)




    def whenStmt(self):

        localctx = m2_Parser.WhenStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_whenStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 841
            self.match(m2_Parser.WHEN)
            self.state = 842
            self.condStmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(m2_Parser.WHILE, 0)

        def expr(self):
            return self.getTypedRuleContext(m2_Parser.ExprContext,0)


        def COLON(self):
            return self.getToken(m2_Parser.COLON, 0)

        def stmt(self):
            return self.getTypedRuleContext(m2_Parser.StmtContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_whileStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileStmt" ):
                listener.enterWhileStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileStmt" ):
                listener.exitWhileStmt(self)




    def whileStmt(self):

        localctx = m2_Parser.WhileStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_whileStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 844
            self.match(m2_Parser.WHILE)
            self.state = 845
            self.expr()
            self.state = 846
            self.match(m2_Parser.COLON)
            self.state = 847
            self.stmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericParamContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.SymbolContext)
            else:
                return self.getTypedRuleContext(m2_Parser.SymbolContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.COMMA)
            else:
                return self.getToken(m2_Parser.COMMA, i)

        def COLON(self):
            return self.getToken(m2_Parser.COLON, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.ExprContext)
            else:
                return self.getTypedRuleContext(m2_Parser.ExprContext,i)


        def EQUALS(self):
            return self.getToken(m2_Parser.EQUALS, 0)

        def optInd(self):
            return self.getTypedRuleContext(m2_Parser.OptIndContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_genericParam

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericParam" ):
                listener.enterGenericParam(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericParam" ):
                listener.exitGenericParam(self)




    def genericParam(self):

        localctx = m2_Parser.GenericParamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_genericParam)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 849
            self.symbol()
            self.state = 854
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,82,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 850
                    self.match(m2_Parser.COMMA)
                    self.state = 851
                    self.symbol() 
                self.state = 856
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,82,self._ctx)

            self.state = 859
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==m2_Parser.COLON:
                self.state = 857
                self.match(m2_Parser.COLON)
                self.state = 858
                self.expr()


            self.state = 865
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==m2_Parser.EQUALS:
                self.state = 861
                self.match(m2_Parser.EQUALS)
                self.state = 862
                self.optInd()
                self.state = 863
                self.expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericParamListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACK(self):
            return self.getToken(m2_Parser.OPEN_BRACK, 0)

        def optInd(self):
            return self.getTypedRuleContext(m2_Parser.OptIndContext,0)


        def optPar(self):
            return self.getTypedRuleContext(m2_Parser.OptParContext,0)


        def CLOSE_BRACK(self):
            return self.getToken(m2_Parser.CLOSE_BRACK, 0)

        def genericParam(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.GenericParamContext)
            else:
                return self.getTypedRuleContext(m2_Parser.GenericParamContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.COMMA)
            else:
                return self.getToken(m2_Parser.COMMA, i)

        def SEMI_COLON(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.SEMI_COLON)
            else:
                return self.getToken(m2_Parser.SEMI_COLON, i)

        def getRuleIndex(self):
            return m2_Parser.RULE_genericParamList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericParamList" ):
                listener.enterGenericParamList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericParamList" ):
                listener.exitGenericParamList(self)




    def genericParamList(self):

        localctx = m2_Parser.GenericParamListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_genericParamList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 867
            self.match(m2_Parser.OPEN_BRACK)
            self.state = 868
            self.optInd()
            self.state = 877
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 37)) & ~0x3f) == 0 and ((1 << (_la - 37)) & ((1 << (m2_Parser.VARIABLE - 37)) | (1 << (m2_Parser.LET - 37)) | (1 << (m2_Parser.CONST - 37)) | (1 << (m2_Parser.PROC - 37)) | (1 << (m2_Parser.CASE - 37)) | (1 << (m2_Parser.IF - 37)) | (1 << (m2_Parser.WHILE - 37)) | (1 << (m2_Parser.FOR - 37)) | (1 << (m2_Parser.TUPLE - 37)) | (1 << (m2_Parser.WHEN - 37)) | (1 << (m2_Parser.REF - 37)) | (1 << (m2_Parser.BLOCK - 37)) | (1 << (m2_Parser.DISCARD - 37)) | (1 << (m2_Parser.SYM_HEADER - 37)) | (1 << (m2_Parser.IDENTIFIER - 37)))) != 0):
                self.state = 869
                self.genericParam()
                self.state = 874
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==m2_Parser.COMMA or _la==m2_Parser.SEMI_COLON:
                    self.state = 870
                    _la = self._input.LA(1)
                    if not(_la==m2_Parser.COMMA or _la==m2_Parser.SEMI_COLON):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 871
                    self.genericParam()
                    self.state = 876
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 879
            self.optPar()
            self.state = 880
            self.match(m2_Parser.CLOSE_BRACK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentWithPragmaDotContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identVisDot(self):
            return self.getTypedRuleContext(m2_Parser.IdentVisDotContext,0)


        def pragma(self):
            return self.getTypedRuleContext(m2_Parser.PragmaContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_identWithPragmaDot

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentWithPragmaDot" ):
                listener.enterIdentWithPragmaDot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentWithPragmaDot" ):
                listener.exitIdentWithPragmaDot(self)




    def identWithPragmaDot(self):

        localctx = m2_Parser.IdentWithPragmaDotContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_identWithPragmaDot)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 882
            self.identVisDot()
            self.state = 884
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==m2_Parser.OPEN_BRACE:
                self.state = 883
                self.pragma()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeDefAuxContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleExpr(self):
            return self.getTypedRuleContext(m2_Parser.SimpleExprContext,0)


        def objectType(self):
            return self.getTypedRuleContext(m2_Parser.ObjectTypeContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_typeDefAux

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeDefAux" ):
                listener.enterTypeDefAux(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeDefAux" ):
                listener.exitTypeDefAux(self)




    def typeDefAux(self):

        localctx = m2_Parser.TypeDefAuxContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_typeDefAux)
        try:
            self.state = 888
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [m2_Parser.OPEN_PAREN, m2_Parser.OPEN_BRACK, m2_Parser.COLON, m2_Parser.DOT, m2_Parser.EQUALS, m2_Parser.IN, m2_Parser.OF, m2_Parser.NOT, m2_Parser.OP0, m2_Parser.OP1, m2_Parser.OP2, m2_Parser.OP3, m2_Parser.OP4, m2_Parser.OP5, m2_Parser.OP6, m2_Parser.OP7, m2_Parser.OP8, m2_Parser.OP9, m2_Parser.OP10, m2_Parser.VARIABLE, m2_Parser.LET, m2_Parser.CONST, m2_Parser.PROC, m2_Parser.CASE, m2_Parser.IF, m2_Parser.WHILE, m2_Parser.FOR, m2_Parser.TUPLE, m2_Parser.WHEN, m2_Parser.REF, m2_Parser.BLOCK, m2_Parser.NIL, m2_Parser.DISCARD, m2_Parser.SYM_HEADER, m2_Parser.IDENTIFIER, m2_Parser.INT_LIT, m2_Parser.INT8_LIT, m2_Parser.INT16_LIT, m2_Parser.INT32_LIT, m2_Parser.INT64_LIT, m2_Parser.UINT_LIT, m2_Parser.UINT8_LIT, m2_Parser.UINT16_LIT, m2_Parser.UINT32_LIT, m2_Parser.UINT64_LIT, m2_Parser.FLOAT_LIT, m2_Parser.FLOAT32_LIT, m2_Parser.FLOAT64_LIT, m2_Parser.CHAR_LIT, m2_Parser.STR_LIT, m2_Parser.TRIPLESTR_LIT, m2_Parser.RSTR_LIT, m2_Parser.GENERALIZED_STR_LIT, m2_Parser.GENERALIZED_TRIPLESTR_LIT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 886
                self.simpleExpr()
                pass
            elif token in [m2_Parser.OBJECT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 887
                self.objectType()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObjectWhenContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(m2_Parser.WHEN, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.ExprContext)
            else:
                return self.getTypedRuleContext(m2_Parser.ExprContext,i)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.COLON)
            else:
                return self.getToken(m2_Parser.COLON, i)

        def objectPart(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.ObjectPartContext)
            else:
                return self.getTypedRuleContext(m2_Parser.ObjectPartContext,i)


        def ELIF(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.ELIF)
            else:
                return self.getToken(m2_Parser.ELIF, i)

        def ELSE(self):
            return self.getToken(m2_Parser.ELSE, 0)

        def getRuleIndex(self):
            return m2_Parser.RULE_objectWhen

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjectWhen" ):
                listener.enterObjectWhen(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjectWhen" ):
                listener.exitObjectWhen(self)




    def objectWhen(self):

        localctx = m2_Parser.ObjectWhenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_objectWhen)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 890
            self.match(m2_Parser.WHEN)
            self.state = 891
            self.expr()
            self.state = 892
            self.match(m2_Parser.COLON)
            self.state = 893
            self.objectPart()
            self.state = 901
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,89,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 894
                    self.match(m2_Parser.ELIF)
                    self.state = 895
                    self.expr()
                    self.state = 896
                    self.match(m2_Parser.COLON)
                    self.state = 897
                    self.objectPart() 
                self.state = 903
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,89,self._ctx)

            self.state = 907
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
            if la_ == 1:
                self.state = 904
                self.match(m2_Parser.ELSE)
                self.state = 905
                self.match(m2_Parser.COLON)
                self.state = 906
                self.objectPart()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObjectBranchContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OF(self):
            return self.getToken(m2_Parser.OF, 0)

        def exprList(self):
            return self.getTypedRuleContext(m2_Parser.ExprListContext,0)


        def COLON(self):
            return self.getToken(m2_Parser.COLON, 0)

        def objectPart(self):
            return self.getTypedRuleContext(m2_Parser.ObjectPartContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_objectBranch

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjectBranch" ):
                listener.enterObjectBranch(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjectBranch" ):
                listener.exitObjectBranch(self)




    def objectBranch(self):

        localctx = m2_Parser.ObjectBranchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_objectBranch)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 909
            self.match(m2_Parser.OF)
            self.state = 910
            self.exprList()
            self.state = 911
            self.match(m2_Parser.COLON)
            self.state = 912
            self.objectPart()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObjectBranchesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def objectBranch(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.ObjectBranchContext)
            else:
                return self.getTypedRuleContext(m2_Parser.ObjectBranchContext,i)


        def ELIF(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.ELIF)
            else:
                return self.getToken(m2_Parser.ELIF, i)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.ExprContext)
            else:
                return self.getTypedRuleContext(m2_Parser.ExprContext,i)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.COLON)
            else:
                return self.getToken(m2_Parser.COLON, i)

        def objectPart(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.ObjectPartContext)
            else:
                return self.getTypedRuleContext(m2_Parser.ObjectPartContext,i)


        def ELSE(self):
            return self.getToken(m2_Parser.ELSE, 0)

        def getRuleIndex(self):
            return m2_Parser.RULE_objectBranches

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjectBranches" ):
                listener.enterObjectBranches(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjectBranches" ):
                listener.exitObjectBranches(self)




    def objectBranches(self):

        localctx = m2_Parser.ObjectBranchesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_objectBranches)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 914
            self.objectBranch()
            self.state = 918
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,91,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 915
                    self.objectBranch() 
                self.state = 920
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,91,self._ctx)

            self.state = 928
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,92,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 921
                    self.match(m2_Parser.ELIF)
                    self.state = 922
                    self.expr()
                    self.state = 923
                    self.match(m2_Parser.COLON)
                    self.state = 924
                    self.objectPart() 
                self.state = 930
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,92,self._ctx)

            self.state = 934
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
            if la_ == 1:
                self.state = 931
                self.match(m2_Parser.ELSE)
                self.state = 932
                self.match(m2_Parser.COLON)
                self.state = 933
                self.objectPart()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObjectCaseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(m2_Parser.CASE, 0)

        def identWithPragma(self):
            return self.getTypedRuleContext(m2_Parser.IdentWithPragmaContext,0)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.COLON)
            else:
                return self.getToken(m2_Parser.COLON, i)

        def typeDesc(self):
            return self.getTypedRuleContext(m2_Parser.TypeDescContext,0)


        def objectBranches(self):
            return self.getTypedRuleContext(m2_Parser.ObjectBranchesContext,0)


        def ind(self):
            return self.getTypedRuleContext(m2_Parser.IndContext,0)


        def ded(self):
            return self.getTypedRuleContext(m2_Parser.DedContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_objectCase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjectCase" ):
                listener.enterObjectCase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjectCase" ):
                listener.exitObjectCase(self)




    def objectCase(self):

        localctx = m2_Parser.ObjectCaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_objectCase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 936
            self.match(m2_Parser.CASE)
            self.state = 937
            self.identWithPragma()
            self.state = 938
            self.match(m2_Parser.COLON)
            self.state = 939
            self.typeDesc()
            self.state = 941
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==m2_Parser.COLON:
                self.state = 940
                self.match(m2_Parser.COLON)


            self.state = 948
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [m2_Parser.INDENT]:
                self.state = 943
                self.ind()
                self.state = 944
                self.objectBranches()
                self.state = 945
                self.ded()
                pass
            elif token in [m2_Parser.OF]:
                self.state = 947
                self.objectBranches()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObjectPartContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ind(self):
            return self.getTypedRuleContext(m2_Parser.IndContext,0)


        def ded(self):
            return self.getTypedRuleContext(m2_Parser.DedContext,0)


        def objectPart(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.ObjectPartContext)
            else:
                return self.getTypedRuleContext(m2_Parser.ObjectPartContext,i)


        def objectWhen(self):
            return self.getTypedRuleContext(m2_Parser.ObjectWhenContext,0)


        def objectCase(self):
            return self.getTypedRuleContext(m2_Parser.ObjectCaseContext,0)


        def NIL(self):
            return self.getToken(m2_Parser.NIL, 0)

        def DISCARD(self):
            return self.getToken(m2_Parser.DISCARD, 0)

        def declColonEquals(self):
            return self.getTypedRuleContext(m2_Parser.DeclColonEqualsContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_objectPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjectPart" ):
                listener.enterObjectPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjectPart" ):
                listener.exitObjectPart(self)




    def objectPart(self):

        localctx = m2_Parser.ObjectPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_objectPart)
        self._la = 0 # Token type
        try:
            self.state = 963
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 950
                self.ind()
                self.state = 952 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 951
                    self.objectPart()
                    self.state = 954 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << m2_Parser.VARIABLE) | (1 << m2_Parser.LET) | (1 << m2_Parser.CONST) | (1 << m2_Parser.PROC) | (1 << m2_Parser.CASE) | (1 << m2_Parser.IF) | (1 << m2_Parser.WHILE) | (1 << m2_Parser.FOR))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (m2_Parser.TUPLE - 64)) | (1 << (m2_Parser.WHEN - 64)) | (1 << (m2_Parser.REF - 64)) | (1 << (m2_Parser.BLOCK - 64)) | (1 << (m2_Parser.NIL - 64)) | (1 << (m2_Parser.DISCARD - 64)) | (1 << (m2_Parser.SYM_HEADER - 64)) | (1 << (m2_Parser.IDENTIFIER - 64)) | (1 << (m2_Parser.INDENT - 64)))) != 0)):
                        break

                self.state = 956
                self.ded()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 958
                self.objectWhen()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 959
                self.objectCase()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 960
                self.match(m2_Parser.NIL)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 961
                self.match(m2_Parser.DISCARD)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 962
                self.declColonEquals()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObjectTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT(self):
            return self.getToken(m2_Parser.OBJECT, 0)

        def objectPart(self):
            return self.getTypedRuleContext(m2_Parser.ObjectPartContext,0)


        def pragma(self):
            return self.getTypedRuleContext(m2_Parser.PragmaContext,0)


        def OF(self):
            return self.getToken(m2_Parser.OF, 0)

        def typeDesc(self):
            return self.getTypedRuleContext(m2_Parser.TypeDescContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_objectType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjectType" ):
                listener.enterObjectType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjectType" ):
                listener.exitObjectType(self)




    def objectType(self):

        localctx = m2_Parser.ObjectTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_objectType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 965
            self.match(m2_Parser.OBJECT)
            self.state = 967
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==m2_Parser.OPEN_BRACE:
                self.state = 966
                self.pragma()


            self.state = 971
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==m2_Parser.OF:
                self.state = 969
                self.match(m2_Parser.OF)
                self.state = 970
                self.typeDesc()


            self.state = 973
            self.objectPart()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeClassParamContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self):
            return self.getTypedRuleContext(m2_Parser.SymbolContext,0)


        def VARIABLE(self):
            return self.getToken(m2_Parser.VARIABLE, 0)

        def getRuleIndex(self):
            return m2_Parser.RULE_typeClassParam

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeClassParam" ):
                listener.enterTypeClassParam(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeClassParam" ):
                listener.exitTypeClassParam(self)




    def typeClassParam(self):

        localctx = m2_Parser.TypeClassParamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_typeClassParam)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 976
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,100,self._ctx)
            if la_ == 1:
                self.state = 975
                self.match(m2_Parser.VARIABLE)


            self.state = 978
            self.symbol()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeClassContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stmt(self):
            return self.getTypedRuleContext(m2_Parser.StmtContext,0)


        def typeClassParam(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.TypeClassParamContext)
            else:
                return self.getTypedRuleContext(m2_Parser.TypeClassParamContext,i)


        def pragma(self):
            return self.getTypedRuleContext(m2_Parser.PragmaContext,0)


        def OF(self):
            return self.getToken(m2_Parser.OF, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.COMMA)
            else:
                return self.getToken(m2_Parser.COMMA, i)

        def typeDesc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.TypeDescContext)
            else:
                return self.getTypedRuleContext(m2_Parser.TypeDescContext,i)


        def getRuleIndex(self):
            return m2_Parser.RULE_typeClass

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeClass" ):
                listener.enterTypeClass(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeClass" ):
                listener.exitTypeClass(self)




    def typeClass(self):

        localctx = m2_Parser.TypeClassContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_typeClass)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 988
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,102,self._ctx)
            if la_ == 1:
                self.state = 980
                self.typeClassParam()
                self.state = 985
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,101,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 981
                        self.match(m2_Parser.COMMA)
                        self.state = 982
                        self.typeClassParam() 
                    self.state = 987
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,101,self._ctx)



            self.state = 991
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
            if la_ == 1:
                self.state = 990
                self.pragma()


            self.state = 1004
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
            if la_ == 1:
                self.state = 993
                self.match(m2_Parser.OF)
                self.state = 1002
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
                if la_ == 1:
                    self.state = 994
                    self.typeDesc()
                    self.state = 999
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,104,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 995
                            self.match(m2_Parser.COMMA)
                            self.state = 996
                            self.typeDesc() 
                        self.state = 1001
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,104,self._ctx)





            self.state = 1006
            if not self._input.LT(1).type == self.INDENT:
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "self._input.LT(1).type == self.INDENT")
            self.state = 1007
            self.stmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeDefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identWithPragmaDot(self):
            return self.getTypedRuleContext(m2_Parser.IdentWithPragmaDotContext,0)


        def EQUALS(self):
            return self.getToken(m2_Parser.EQUALS, 0)

        def optInd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.OptIndContext)
            else:
                return self.getTypedRuleContext(m2_Parser.OptIndContext,i)


        def typeDefAux(self):
            return self.getTypedRuleContext(m2_Parser.TypeDefAuxContext,0)


        def genericParamList(self):
            return self.getTypedRuleContext(m2_Parser.GenericParamListContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_typeDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeDef" ):
                listener.enterTypeDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeDef" ):
                listener.exitTypeDef(self)




    def typeDef(self):

        localctx = m2_Parser.TypeDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_typeDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1009
            self.identWithPragmaDot()
            self.state = 1011
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==m2_Parser.OPEN_BRACK:
                self.state = 1010
                self.genericParamList()


            self.state = 1013
            self.match(m2_Parser.EQUALS)
            self.state = 1014
            self.optInd()
            self.state = 1015
            self.typeDefAux()
            self.state = 1016
            self.optInd()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identWithPragma(self):
            return self.getTypedRuleContext(m2_Parser.IdentWithPragmaContext,0)


        def EQUALS(self):
            return self.getToken(m2_Parser.EQUALS, 0)

        def optInd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.OptIndContext)
            else:
                return self.getTypedRuleContext(m2_Parser.OptIndContext,i)


        def expr(self):
            return self.getTypedRuleContext(m2_Parser.ExprContext,0)


        def COLON(self):
            return self.getToken(m2_Parser.COLON, 0)

        def typeDesc(self):
            return self.getTypedRuleContext(m2_Parser.TypeDescContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_constant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant" ):
                listener.enterConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant" ):
                listener.exitConstant(self)




    def constant(self):

        localctx = m2_Parser.ConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_constant)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1018
            self.identWithPragma()
            self.state = 1021
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==m2_Parser.COLON:
                self.state = 1019
                self.match(m2_Parser.COLON)
                self.state = 1020
                self.typeDesc()


            self.state = 1023
            self.match(m2_Parser.EQUALS)
            self.state = 1024
            self.optInd()
            self.state = 1025
            self.expr()
            self.state = 1026
            self.optInd()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarTupleContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(m2_Parser.OPEN_PAREN, 0)

        def optInd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.OptIndContext)
            else:
                return self.getTypedRuleContext(m2_Parser.OptIndContext,i)


        def identWithPragma(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.IdentWithPragmaContext)
            else:
                return self.getTypedRuleContext(m2_Parser.IdentWithPragmaContext,i)


        def optPar(self):
            return self.getTypedRuleContext(m2_Parser.OptParContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(m2_Parser.CLOSE_PAREN, 0)

        def EQUALS(self):
            return self.getToken(m2_Parser.EQUALS, 0)

        def expr(self):
            return self.getTypedRuleContext(m2_Parser.ExprContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.COMMA)
            else:
                return self.getToken(m2_Parser.COMMA, i)

        def getRuleIndex(self):
            return m2_Parser.RULE_varTuple

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarTuple" ):
                listener.enterVarTuple(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarTuple" ):
                listener.exitVarTuple(self)




    def varTuple(self):

        localctx = m2_Parser.VarTupleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_varTuple)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1028
            self.match(m2_Parser.OPEN_PAREN)
            self.state = 1029
            self.optInd()
            self.state = 1030
            self.identWithPragma()
            self.state = 1035
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==m2_Parser.COMMA:
                self.state = 1031
                self.match(m2_Parser.COMMA)
                self.state = 1032
                self.identWithPragma()
                self.state = 1037
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1038
            self.optPar()
            self.state = 1039
            self.match(m2_Parser.CLOSE_PAREN)
            self.state = 1040
            self.match(m2_Parser.EQUALS)
            self.state = 1041
            self.optInd()
            self.state = 1042
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclColonEqualsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identWithPragma(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.IdentWithPragmaContext)
            else:
                return self.getTypedRuleContext(m2_Parser.IdentWithPragmaContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.COMMA)
            else:
                return self.getToken(m2_Parser.COMMA, i)

        def COLON(self):
            return self.getToken(m2_Parser.COLON, 0)

        def optInd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.OptIndContext)
            else:
                return self.getTypedRuleContext(m2_Parser.OptIndContext,i)


        def typeDesc(self):
            return self.getTypedRuleContext(m2_Parser.TypeDescContext,0)


        def EQUALS(self):
            return self.getToken(m2_Parser.EQUALS, 0)

        def expr(self):
            return self.getTypedRuleContext(m2_Parser.ExprContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_declColonEquals

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclColonEquals" ):
                listener.enterDeclColonEquals(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclColonEquals" ):
                listener.exitDeclColonEquals(self)




    def declColonEquals(self):

        localctx = m2_Parser.DeclColonEqualsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_declColonEquals)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1044
            self.identWithPragma()
            self.state = 1049
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,110,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1045
                    self.match(m2_Parser.COMMA)
                    self.state = 1046
                    self.identWithPragma() 
                self.state = 1051
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,110,self._ctx)

            self.state = 1053
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,111,self._ctx)
            if la_ == 1:
                self.state = 1052
                self.match(m2_Parser.COMMA)


            self.state = 1059
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,112,self._ctx)
            if la_ == 1:
                self.state = 1055
                self.match(m2_Parser.COLON)
                self.state = 1056
                self.optInd()
                self.state = 1057
                self.typeDesc()


            self.state = 1065
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,113,self._ctx)
            if la_ == 1:
                self.state = 1061
                self.match(m2_Parser.EQUALS)
                self.state = 1062
                self.optInd()
                self.state = 1063
                self.expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentColonEqualsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.IDENTIFIER)
            else:
                return self.getToken(m2_Parser.IDENTIFIER, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.COMMA)
            else:
                return self.getToken(m2_Parser.COMMA, i)

        def COLON(self):
            return self.getToken(m2_Parser.COLON, 0)

        def optInd(self):
            return self.getTypedRuleContext(m2_Parser.OptIndContext,0)


        def typeDesc(self):
            return self.getTypedRuleContext(m2_Parser.TypeDescContext,0)


        def EQUALS(self):
            return self.getToken(m2_Parser.EQUALS, 0)

        def expr(self):
            return self.getTypedRuleContext(m2_Parser.ExprContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_identColonEquals

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentColonEquals" ):
                listener.enterIdentColonEquals(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentColonEquals" ):
                listener.exitIdentColonEquals(self)




    def identColonEquals(self):

        localctx = m2_Parser.IdentColonEqualsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_identColonEquals)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1067
            self.match(m2_Parser.IDENTIFIER)
            self.state = 1072
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,114,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1068
                    self.match(m2_Parser.COMMA)
                    self.state = 1069
                    self.match(m2_Parser.IDENTIFIER) 
                self.state = 1074
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,114,self._ctx)

            self.state = 1076
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==m2_Parser.COMMA:
                self.state = 1075
                self.match(m2_Parser.COMMA)


            self.state = 1086
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [m2_Parser.COLON]:
                self.state = 1078
                self.match(m2_Parser.COLON)
                self.state = 1079
                self.optInd()
                self.state = 1080
                self.typeDesc()
                pass
            elif token in [m2_Parser.EQUALS]:
                self.state = 1082
                self.match(m2_Parser.EQUALS)
                self.state = 1083
                self.optInd()
                self.state = 1084
                self.expr()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParamListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(m2_Parser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(m2_Parser.CLOSE_PAREN, 0)

        def declColonEquals(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.DeclColonEqualsContext)
            else:
                return self.getTypedRuleContext(m2_Parser.DeclColonEqualsContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.COMMA)
            else:
                return self.getToken(m2_Parser.COMMA, i)

        def SEMI_COLON(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.SEMI_COLON)
            else:
                return self.getToken(m2_Parser.SEMI_COLON, i)

        def getRuleIndex(self):
            return m2_Parser.RULE_paramList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParamList" ):
                listener.enterParamList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParamList" ):
                listener.exitParamList(self)




    def paramList(self):

        localctx = m2_Parser.ParamListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_paramList)
        self._la = 0 # Token type
        try:
            self.state = 1108
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [m2_Parser.OPEN_PAREN]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1088
                self.match(m2_Parser.OPEN_PAREN)
                self.state = 1097
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 37)) & ~0x3f) == 0 and ((1 << (_la - 37)) & ((1 << (m2_Parser.VARIABLE - 37)) | (1 << (m2_Parser.LET - 37)) | (1 << (m2_Parser.CONST - 37)) | (1 << (m2_Parser.PROC - 37)) | (1 << (m2_Parser.CASE - 37)) | (1 << (m2_Parser.IF - 37)) | (1 << (m2_Parser.WHILE - 37)) | (1 << (m2_Parser.FOR - 37)) | (1 << (m2_Parser.TUPLE - 37)) | (1 << (m2_Parser.WHEN - 37)) | (1 << (m2_Parser.REF - 37)) | (1 << (m2_Parser.BLOCK - 37)) | (1 << (m2_Parser.DISCARD - 37)) | (1 << (m2_Parser.SYM_HEADER - 37)) | (1 << (m2_Parser.IDENTIFIER - 37)))) != 0):
                    self.state = 1089
                    self.declColonEquals()
                    self.state = 1094
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==m2_Parser.COMMA or _la==m2_Parser.SEMI_COLON:
                        self.state = 1090
                        _la = self._input.LA(1)
                        if not(_la==m2_Parser.COMMA or _la==m2_Parser.SEMI_COLON):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1091
                        self.declColonEquals()
                        self.state = 1096
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1099
                self.match(m2_Parser.CLOSE_PAREN)
                pass
            elif token in [m2_Parser.VARIABLE, m2_Parser.LET, m2_Parser.CONST, m2_Parser.PROC, m2_Parser.CASE, m2_Parser.IF, m2_Parser.WHILE, m2_Parser.FOR, m2_Parser.TUPLE, m2_Parser.WHEN, m2_Parser.REF, m2_Parser.BLOCK, m2_Parser.DISCARD, m2_Parser.SYM_HEADER, m2_Parser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1100
                self.declColonEquals()
                self.state = 1105
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,119,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1101
                        _la = self._input.LA(1)
                        if not(_la==m2_Parser.COMMA or _la==m2_Parser.SEMI_COLON):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1102
                        self.declColonEquals() 
                    self.state = 1107
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,119,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParamListColonContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def paramList(self):
            return self.getTypedRuleContext(m2_Parser.ParamListContext,0)


        def COLON(self):
            return self.getToken(m2_Parser.COLON, 0)

        def optInd(self):
            return self.getTypedRuleContext(m2_Parser.OptIndContext,0)


        def typeDesc(self):
            return self.getTypedRuleContext(m2_Parser.TypeDescContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_paramListColon

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParamListColon" ):
                listener.enterParamListColon(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParamListColon" ):
                listener.exitParamListColon(self)




    def paramListColon(self):

        localctx = m2_Parser.ParamListColonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_paramListColon)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1111
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,121,self._ctx)
            if la_ == 1:
                self.state = 1110
                self.paramList()


            self.state = 1117
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,122,self._ctx)
            if la_ == 1:
                self.state = 1113
                self.match(m2_Parser.COLON)
                self.state = 1114
                self.optInd()
                self.state = 1115
                self.typeDesc()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROC(self):
            return self.getToken(m2_Parser.PROC, 0)

        def paramListColon(self):
            return self.getTypedRuleContext(m2_Parser.ParamListColonContext,0)


        def optInd(self):
            return self.getTypedRuleContext(m2_Parser.OptIndContext,0)


        def pragma(self):
            return self.getTypedRuleContext(m2_Parser.PragmaContext,0)


        def EQUALS(self):
            return self.getToken(m2_Parser.EQUALS, 0)

        def stmt(self):
            return self.getTypedRuleContext(m2_Parser.StmtContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_procExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcExpr" ):
                listener.enterProcExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcExpr" ):
                listener.exitProcExpr(self)




    def procExpr(self):

        localctx = m2_Parser.ProcExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_procExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1119
            self.match(m2_Parser.PROC)
            self.state = 1120
            self.paramListColon()
            self.state = 1122
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==m2_Parser.OPEN_BRACE:
                self.state = 1121
                self.pragma()


            self.state = 1126
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==m2_Parser.EQUALS:
                self.state = 1124
                self.match(m2_Parser.EQUALS)
                self.state = 1125
                self.stmt()


            self.state = 1128
            self.optInd()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def optInd(self):
            return self.getTypedRuleContext(m2_Parser.OptIndContext,0)


        def varTuple(self):
            return self.getTypedRuleContext(m2_Parser.VarTupleContext,0)


        def identColonEquals(self):
            return self.getTypedRuleContext(m2_Parser.IdentColonEqualsContext,0)


        def colonBody(self):
            return self.getTypedRuleContext(m2_Parser.ColonBodyContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_variable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable" ):
                listener.enterVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable" ):
                listener.exitVariable(self)




    def variable(self):

        localctx = m2_Parser.VariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_variable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1132
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [m2_Parser.OPEN_PAREN]:
                self.state = 1130
                self.varTuple()
                pass
            elif token in [m2_Parser.IDENTIFIER]:
                self.state = 1131
                self.identColonEquals()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1135
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,126,self._ctx)
            if la_ == 1:
                self.state = 1134
                self.colonBody()


            self.state = 1137
            self.optInd()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedIdentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.SymbolContext)
            else:
                return self.getTypedRuleContext(m2_Parser.SymbolContext,i)


        def DOT(self):
            return self.getToken(m2_Parser.DOT, 0)

        def optInd(self):
            return self.getTypedRuleContext(m2_Parser.OptIndContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_qualifiedIdent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedIdent" ):
                listener.enterQualifiedIdent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedIdent" ):
                listener.exitQualifiedIdent(self)




    def qualifiedIdent(self):

        localctx = m2_Parser.QualifiedIdentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_qualifiedIdent)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1139
            self.symbol()
            self.state = 1144
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==m2_Parser.DOT:
                self.state = 1140
                self.match(m2_Parser.DOT)
                self.state = 1141
                self.optInd()
                self.state = 1142
                self.symbol()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(m2_Parser.FOR, 0)

        def IN(self):
            return self.getToken(m2_Parser.IN, 0)

        def expr(self):
            return self.getTypedRuleContext(m2_Parser.ExprContext,0)


        def COLON(self):
            return self.getToken(m2_Parser.COLON, 0)

        def stmt(self):
            return self.getTypedRuleContext(m2_Parser.StmtContext,0)


        def identWithPragma(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.IdentWithPragmaContext)
            else:
                return self.getTypedRuleContext(m2_Parser.IdentWithPragmaContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.COMMA)
            else:
                return self.getToken(m2_Parser.COMMA, i)

        def getRuleIndex(self):
            return m2_Parser.RULE_forStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForStmt" ):
                listener.enterForStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForStmt" ):
                listener.exitForStmt(self)




    def forStmt(self):

        localctx = m2_Parser.ForStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_forStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1146
            self.match(m2_Parser.FOR)

            self.state = 1147
            self.identWithPragma()
            self.state = 1152
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==m2_Parser.COMMA:
                self.state = 1148
                self.match(m2_Parser.COMMA)
                self.state = 1149
                self.identWithPragma()
                self.state = 1154
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1155
            self.match(m2_Parser.IN)
            self.state = 1156
            self.expr()
            self.state = 1157
            self.match(m2_Parser.COLON)
            self.state = 1158
            self.stmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BLOCK(self):
            return self.getToken(m2_Parser.BLOCK, 0)

        def COLON(self):
            return self.getToken(m2_Parser.COLON, 0)

        def stmt(self):
            return self.getTypedRuleContext(m2_Parser.StmtContext,0)


        def symbol(self):
            return self.getTypedRuleContext(m2_Parser.SymbolContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_blockStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockStmt" ):
                listener.enterBlockStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockStmt" ):
                listener.exitBlockStmt(self)




    def blockStmt(self):

        localctx = m2_Parser.BlockStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_blockStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1160
            self.match(m2_Parser.BLOCK)
            self.state = 1162
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 37)) & ~0x3f) == 0 and ((1 << (_la - 37)) & ((1 << (m2_Parser.VARIABLE - 37)) | (1 << (m2_Parser.LET - 37)) | (1 << (m2_Parser.CONST - 37)) | (1 << (m2_Parser.PROC - 37)) | (1 << (m2_Parser.CASE - 37)) | (1 << (m2_Parser.IF - 37)) | (1 << (m2_Parser.WHILE - 37)) | (1 << (m2_Parser.FOR - 37)) | (1 << (m2_Parser.TUPLE - 37)) | (1 << (m2_Parser.WHEN - 37)) | (1 << (m2_Parser.REF - 37)) | (1 << (m2_Parser.BLOCK - 37)) | (1 << (m2_Parser.DISCARD - 37)) | (1 << (m2_Parser.SYM_HEADER - 37)) | (1 << (m2_Parser.IDENTIFIER - 37)))) != 0):
                self.state = 1161
                self.symbol()


            self.state = 1164
            self.match(m2_Parser.COLON)
            self.state = 1165
            self.stmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RoutineContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def optInd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.OptIndContext)
            else:
                return self.getTypedRuleContext(m2_Parser.OptIndContext,i)


        def identVis(self):
            return self.getTypedRuleContext(m2_Parser.IdentVisContext,0)


        def paramListColon(self):
            return self.getTypedRuleContext(m2_Parser.ParamListColonContext,0)


        def genericParamList(self):
            return self.getTypedRuleContext(m2_Parser.GenericParamListContext,0)


        def pragma(self):
            return self.getTypedRuleContext(m2_Parser.PragmaContext,0)


        def EQUALS(self):
            return self.getToken(m2_Parser.EQUALS, 0)

        def stmt(self):
            return self.getTypedRuleContext(m2_Parser.StmtContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_routine

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoutine" ):
                listener.enterRoutine(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoutine" ):
                listener.exitRoutine(self)




    def routine(self):

        localctx = m2_Parser.RoutineContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_routine)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1167
            self.optInd()
            self.state = 1168
            self.identVis()
            self.state = 1170
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,130,self._ctx)
            if la_ == 1:
                self.state = 1169
                self.genericParamList()


            self.state = 1172
            self.paramListColon()
            self.state = 1174
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,131,self._ctx)
            if la_ == 1:
                self.state = 1173
                self.pragma()


            self.state = 1178
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,132,self._ctx)
            if la_ == 1:
                self.state = 1176
                self.match(m2_Parser.EQUALS)
                self.state = 1177
                self.stmt()


            self.state = 1180
            self.optInd()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeDefSectionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeDef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.TypeDefContext)
            else:
                return self.getTypedRuleContext(m2_Parser.TypeDefContext,i)


        def ind(self):
            return self.getTypedRuleContext(m2_Parser.IndContext,0)


        def ded(self):
            return self.getTypedRuleContext(m2_Parser.DedContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_typeDefSection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeDefSection" ):
                listener.enterTypeDefSection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeDefSection" ):
                listener.exitTypeDefSection(self)




    def typeDefSection(self):

        localctx = m2_Parser.TypeDefSectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_typeDefSection)
        self._la = 0 # Token type
        try:
            self.state = 1191
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [m2_Parser.VARIABLE, m2_Parser.LET, m2_Parser.CONST, m2_Parser.PROC, m2_Parser.CASE, m2_Parser.IF, m2_Parser.WHILE, m2_Parser.FOR, m2_Parser.TUPLE, m2_Parser.WHEN, m2_Parser.REF, m2_Parser.BLOCK, m2_Parser.DISCARD, m2_Parser.SYM_HEADER, m2_Parser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1182
                self.typeDef()
                pass
            elif token in [m2_Parser.INDENT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1183
                self.ind()
                self.state = 1185 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1184
                    self.typeDef()
                    self.state = 1187 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (((((_la - 37)) & ~0x3f) == 0 and ((1 << (_la - 37)) & ((1 << (m2_Parser.VARIABLE - 37)) | (1 << (m2_Parser.LET - 37)) | (1 << (m2_Parser.CONST - 37)) | (1 << (m2_Parser.PROC - 37)) | (1 << (m2_Parser.CASE - 37)) | (1 << (m2_Parser.IF - 37)) | (1 << (m2_Parser.WHILE - 37)) | (1 << (m2_Parser.FOR - 37)) | (1 << (m2_Parser.TUPLE - 37)) | (1 << (m2_Parser.WHEN - 37)) | (1 << (m2_Parser.REF - 37)) | (1 << (m2_Parser.BLOCK - 37)) | (1 << (m2_Parser.DISCARD - 37)) | (1 << (m2_Parser.SYM_HEADER - 37)) | (1 << (m2_Parser.IDENTIFIER - 37)))) != 0)):
                        break

                self.state = 1189
                self.ded()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantSectionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constant(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.ConstantContext)
            else:
                return self.getTypedRuleContext(m2_Parser.ConstantContext,i)


        def ind(self):
            return self.getTypedRuleContext(m2_Parser.IndContext,0)


        def ded(self):
            return self.getTypedRuleContext(m2_Parser.DedContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_constantSection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantSection" ):
                listener.enterConstantSection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantSection" ):
                listener.exitConstantSection(self)




    def constantSection(self):

        localctx = m2_Parser.ConstantSectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_constantSection)
        self._la = 0 # Token type
        try:
            self.state = 1202
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [m2_Parser.VARIABLE, m2_Parser.LET, m2_Parser.CONST, m2_Parser.PROC, m2_Parser.CASE, m2_Parser.IF, m2_Parser.WHILE, m2_Parser.FOR, m2_Parser.TUPLE, m2_Parser.WHEN, m2_Parser.REF, m2_Parser.BLOCK, m2_Parser.DISCARD, m2_Parser.SYM_HEADER, m2_Parser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1193
                self.constant()
                pass
            elif token in [m2_Parser.INDENT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1194
                self.ind()
                self.state = 1196 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1195
                    self.constant()
                    self.state = 1198 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (((((_la - 37)) & ~0x3f) == 0 and ((1 << (_la - 37)) & ((1 << (m2_Parser.VARIABLE - 37)) | (1 << (m2_Parser.LET - 37)) | (1 << (m2_Parser.CONST - 37)) | (1 << (m2_Parser.PROC - 37)) | (1 << (m2_Parser.CASE - 37)) | (1 << (m2_Parser.IF - 37)) | (1 << (m2_Parser.WHILE - 37)) | (1 << (m2_Parser.FOR - 37)) | (1 << (m2_Parser.TUPLE - 37)) | (1 << (m2_Parser.WHEN - 37)) | (1 << (m2_Parser.REF - 37)) | (1 << (m2_Parser.BLOCK - 37)) | (1 << (m2_Parser.DISCARD - 37)) | (1 << (m2_Parser.SYM_HEADER - 37)) | (1 << (m2_Parser.IDENTIFIER - 37)))) != 0)):
                        break

                self.state = 1200
                self.ded()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableSectionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.VariableContext)
            else:
                return self.getTypedRuleContext(m2_Parser.VariableContext,i)


        def ind(self):
            return self.getTypedRuleContext(m2_Parser.IndContext,0)


        def ded(self):
            return self.getTypedRuleContext(m2_Parser.DedContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_variableSection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableSection" ):
                listener.enterVariableSection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableSection" ):
                listener.exitVariableSection(self)




    def variableSection(self):

        localctx = m2_Parser.VariableSectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_variableSection)
        self._la = 0 # Token type
        try:
            self.state = 1213
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [m2_Parser.OPEN_PAREN, m2_Parser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1204
                self.variable()
                pass
            elif token in [m2_Parser.INDENT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1205
                self.ind()
                self.state = 1207 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1206
                    self.variable()
                    self.state = 1209 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==m2_Parser.OPEN_PAREN or _la==m2_Parser.IDENTIFIER):
                        break

                self.state = 1211
                self.ded()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComplexStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ifStmt(self):
            return self.getTypedRuleContext(m2_Parser.IfStmtContext,0)


        def whenStmt(self):
            return self.getTypedRuleContext(m2_Parser.WhenStmtContext,0)


        def whileStmt(self):
            return self.getTypedRuleContext(m2_Parser.WhileStmtContext,0)


        def forStmt(self):
            return self.getTypedRuleContext(m2_Parser.ForStmtContext,0)


        def blockStmt(self):
            return self.getTypedRuleContext(m2_Parser.BlockStmtContext,0)


        def PROC(self):
            return self.getToken(m2_Parser.PROC, 0)

        def routine(self):
            return self.getTypedRuleContext(m2_Parser.RoutineContext,0)


        def MACRO(self):
            return self.getToken(m2_Parser.MACRO, 0)

        def TEMPLATE(self):
            return self.getToken(m2_Parser.TEMPLATE, 0)

        def TYPE(self):
            return self.getToken(m2_Parser.TYPE, 0)

        def typeDefSection(self):
            return self.getTypedRuleContext(m2_Parser.TypeDefSectionContext,0)


        def CONST(self):
            return self.getToken(m2_Parser.CONST, 0)

        def constantSection(self):
            return self.getTypedRuleContext(m2_Parser.ConstantSectionContext,0)


        def variableSection(self):
            return self.getTypedRuleContext(m2_Parser.VariableSectionContext,0)


        def LET(self):
            return self.getToken(m2_Parser.LET, 0)

        def VARIABLE(self):
            return self.getToken(m2_Parser.VARIABLE, 0)

        def getRuleIndex(self):
            return m2_Parser.RULE_complexStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComplexStmt" ):
                listener.enterComplexStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComplexStmt" ):
                listener.exitComplexStmt(self)




    def complexStmt(self):

        localctx = m2_Parser.ComplexStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_complexStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1232
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [m2_Parser.IF]:
                self.state = 1215
                self.ifStmt()
                pass
            elif token in [m2_Parser.WHEN]:
                self.state = 1216
                self.whenStmt()
                pass
            elif token in [m2_Parser.WHILE]:
                self.state = 1217
                self.whileStmt()
                pass
            elif token in [m2_Parser.FOR]:
                self.state = 1218
                self.forStmt()
                pass
            elif token in [m2_Parser.BLOCK]:
                self.state = 1219
                self.blockStmt()
                pass
            elif token in [m2_Parser.PROC]:
                self.state = 1220
                self.match(m2_Parser.PROC)
                self.state = 1221
                self.routine()
                pass
            elif token in [m2_Parser.MACRO]:
                self.state = 1222
                self.match(m2_Parser.MACRO)
                self.state = 1223
                self.routine()
                pass
            elif token in [m2_Parser.TEMPLATE]:
                self.state = 1224
                self.match(m2_Parser.TEMPLATE)
                self.state = 1225
                self.routine()
                pass
            elif token in [m2_Parser.TYPE]:
                self.state = 1226
                self.match(m2_Parser.TYPE)
                self.state = 1227
                self.typeDefSection()
                pass
            elif token in [m2_Parser.CONST]:
                self.state = 1228
                self.match(m2_Parser.CONST)
                self.state = 1229
                self.constantSection()
                pass
            elif token in [m2_Parser.VARIABLE, m2_Parser.LET]:
                self.state = 1230
                _la = self._input.LA(1)
                if not(_la==m2_Parser.VARIABLE or _la==m2_Parser.LET):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1231
                self.variableSection()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def complexStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.ComplexStmtContext)
            else:
                return self.getTypedRuleContext(m2_Parser.ComplexStmtContext,i)


        def simpleStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.SimpleStmtContext)
            else:
                return self.getTypedRuleContext(m2_Parser.SimpleStmtContext,i)


        def SEMI_COLON(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.SEMI_COLON)
            else:
                return self.getToken(m2_Parser.SEMI_COLON, i)

        def ind(self):
            return self.getTypedRuleContext(m2_Parser.IndContext,0)


        def ded(self):
            return self.getTypedRuleContext(m2_Parser.DedContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStmt" ):
                listener.enterStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStmt" ):
                listener.exitStmt(self)




    def stmt(self):

        localctx = m2_Parser.StmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_stmt)
        self._la = 0 # Token type
        try:
            self.state = 1279
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,150,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1236
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,140,self._ctx)
                if la_ == 1:
                    self.state = 1234
                    self.complexStmt()
                    pass

                elif la_ == 2:
                    self.state = 1235
                    self.simpleStmt()
                    pass


                self.state = 1247
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,143,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1239
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==m2_Parser.SEMI_COLON:
                            self.state = 1238
                            self.match(m2_Parser.SEMI_COLON)


                        self.state = 1243
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,142,self._ctx)
                        if la_ == 1:
                            self.state = 1241
                            self.complexStmt()
                            pass

                        elif la_ == 2:
                            self.state = 1242
                            self.simpleStmt()
                            pass

                 
                    self.state = 1249
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,143,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1250
                self.ind()
                self.state = 1253
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,144,self._ctx)
                if la_ == 1:
                    self.state = 1251
                    self.complexStmt()
                    pass

                elif la_ == 2:
                    self.state = 1252
                    self.simpleStmt()
                    pass


                self.state = 1264
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << m2_Parser.SEMI_COLON) | (1 << m2_Parser.OPEN_PAREN) | (1 << m2_Parser.OPEN_BRACE) | (1 << m2_Parser.OPEN_BRACK) | (1 << m2_Parser.TYPE) | (1 << m2_Parser.COLON) | (1 << m2_Parser.DOT) | (1 << m2_Parser.EQUALS) | (1 << m2_Parser.IN) | (1 << m2_Parser.OF) | (1 << m2_Parser.NOT) | (1 << m2_Parser.OP0) | (1 << m2_Parser.OP1) | (1 << m2_Parser.OP2) | (1 << m2_Parser.OP3) | (1 << m2_Parser.OP4) | (1 << m2_Parser.OP5) | (1 << m2_Parser.OP6) | (1 << m2_Parser.OP7) | (1 << m2_Parser.OP8) | (1 << m2_Parser.OP9) | (1 << m2_Parser.OP10) | (1 << m2_Parser.VARIABLE) | (1 << m2_Parser.LET) | (1 << m2_Parser.CONST) | (1 << m2_Parser.PROC) | (1 << m2_Parser.RETURN) | (1 << m2_Parser.CASE) | (1 << m2_Parser.IF) | (1 << m2_Parser.WHILE) | (1 << m2_Parser.FOR) | (1 << m2_Parser.CONTINUE) | (1 << m2_Parser.BREAK) | (1 << m2_Parser.TEMPLATE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (m2_Parser.TUPLE - 64)) | (1 << (m2_Parser.WHEN - 64)) | (1 << (m2_Parser.IMPORT - 64)) | (1 << (m2_Parser.FROM - 64)) | (1 << (m2_Parser.REF - 64)) | (1 << (m2_Parser.BLOCK - 64)) | (1 << (m2_Parser.MACRO - 64)) | (1 << (m2_Parser.NIL - 64)) | (1 << (m2_Parser.DISCARD - 64)) | (1 << (m2_Parser.SYM_HEADER - 64)) | (1 << (m2_Parser.IDENTIFIER - 64)) | (1 << (m2_Parser.INT_LIT - 64)) | (1 << (m2_Parser.INT8_LIT - 64)) | (1 << (m2_Parser.INT16_LIT - 64)) | (1 << (m2_Parser.INT32_LIT - 64)) | (1 << (m2_Parser.INT64_LIT - 64)) | (1 << (m2_Parser.UINT_LIT - 64)) | (1 << (m2_Parser.UINT8_LIT - 64)) | (1 << (m2_Parser.UINT16_LIT - 64)) | (1 << (m2_Parser.UINT32_LIT - 64)) | (1 << (m2_Parser.UINT64_LIT - 64)) | (1 << (m2_Parser.FLOAT_LIT - 64)) | (1 << (m2_Parser.FLOAT32_LIT - 64)) | (1 << (m2_Parser.FLOAT64_LIT - 64)) | (1 << (m2_Parser.CHAR_LIT - 64)) | (1 << (m2_Parser.STR_LIT - 64)) | (1 << (m2_Parser.TRIPLESTR_LIT - 64)) | (1 << (m2_Parser.RSTR_LIT - 64)) | (1 << (m2_Parser.GENERALIZED_STR_LIT - 64)) | (1 << (m2_Parser.GENERALIZED_TRIPLESTR_LIT - 64)))) != 0):
                    self.state = 1256
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==m2_Parser.SEMI_COLON:
                        self.state = 1255
                        self.match(m2_Parser.SEMI_COLON)


                    self.state = 1260
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,146,self._ctx)
                    if la_ == 1:
                        self.state = 1258
                        self.complexStmt()
                        pass

                    elif la_ == 2:
                        self.state = 1259
                        self.simpleStmt()
                        pass


                    self.state = 1266
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1267
                self.ded()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1269
                self.simpleStmt()
                self.state = 1276
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,149,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1271
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==m2_Parser.SEMI_COLON:
                            self.state = 1270
                            self.match(m2_Parser.SEMI_COLON)


                        self.state = 1273
                        self.simpleStmt() 
                    self.state = 1278
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,149,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModuleContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.StmtContext)
            else:
                return self.getTypedRuleContext(m2_Parser.StmtContext,i)


        def SEMI_COLON(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.SEMI_COLON)
            else:
                return self.getToken(m2_Parser.SEMI_COLON, i)

        def getRuleIndex(self):
            return m2_Parser.RULE_module

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModule" ):
                listener.enterModule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModule" ):
                listener.exitModule(self)




    def module(self):

        localctx = m2_Parser.ModuleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_module)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1289
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << m2_Parser.OPEN_PAREN) | (1 << m2_Parser.OPEN_BRACE) | (1 << m2_Parser.OPEN_BRACK) | (1 << m2_Parser.TYPE) | (1 << m2_Parser.COLON) | (1 << m2_Parser.DOT) | (1 << m2_Parser.EQUALS) | (1 << m2_Parser.IN) | (1 << m2_Parser.OF) | (1 << m2_Parser.NOT) | (1 << m2_Parser.OP0) | (1 << m2_Parser.OP1) | (1 << m2_Parser.OP2) | (1 << m2_Parser.OP3) | (1 << m2_Parser.OP4) | (1 << m2_Parser.OP5) | (1 << m2_Parser.OP6) | (1 << m2_Parser.OP7) | (1 << m2_Parser.OP8) | (1 << m2_Parser.OP9) | (1 << m2_Parser.OP10) | (1 << m2_Parser.VARIABLE) | (1 << m2_Parser.LET) | (1 << m2_Parser.CONST) | (1 << m2_Parser.PROC) | (1 << m2_Parser.RETURN) | (1 << m2_Parser.CASE) | (1 << m2_Parser.IF) | (1 << m2_Parser.WHILE) | (1 << m2_Parser.FOR) | (1 << m2_Parser.CONTINUE) | (1 << m2_Parser.BREAK) | (1 << m2_Parser.TEMPLATE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (m2_Parser.TUPLE - 64)) | (1 << (m2_Parser.WHEN - 64)) | (1 << (m2_Parser.IMPORT - 64)) | (1 << (m2_Parser.FROM - 64)) | (1 << (m2_Parser.REF - 64)) | (1 << (m2_Parser.BLOCK - 64)) | (1 << (m2_Parser.MACRO - 64)) | (1 << (m2_Parser.NIL - 64)) | (1 << (m2_Parser.DISCARD - 64)) | (1 << (m2_Parser.SYM_HEADER - 64)) | (1 << (m2_Parser.IDENTIFIER - 64)) | (1 << (m2_Parser.INT_LIT - 64)) | (1 << (m2_Parser.INT8_LIT - 64)) | (1 << (m2_Parser.INT16_LIT - 64)) | (1 << (m2_Parser.INT32_LIT - 64)) | (1 << (m2_Parser.INT64_LIT - 64)) | (1 << (m2_Parser.UINT_LIT - 64)) | (1 << (m2_Parser.UINT8_LIT - 64)) | (1 << (m2_Parser.UINT16_LIT - 64)) | (1 << (m2_Parser.UINT32_LIT - 64)) | (1 << (m2_Parser.UINT64_LIT - 64)) | (1 << (m2_Parser.FLOAT_LIT - 64)) | (1 << (m2_Parser.FLOAT32_LIT - 64)) | (1 << (m2_Parser.FLOAT64_LIT - 64)) | (1 << (m2_Parser.CHAR_LIT - 64)) | (1 << (m2_Parser.STR_LIT - 64)) | (1 << (m2_Parser.TRIPLESTR_LIT - 64)) | (1 << (m2_Parser.RSTR_LIT - 64)) | (1 << (m2_Parser.GENERALIZED_STR_LIT - 64)) | (1 << (m2_Parser.GENERALIZED_TRIPLESTR_LIT - 64)) | (1 << (m2_Parser.INDENT - 64)))) != 0):
                self.state = 1281
                self.stmt()
                self.state = 1286
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==m2_Parser.SEMI_COLON:
                    self.state = 1282
                    self.match(m2_Parser.SEMI_COLON)
                    self.state = 1283
                    self.stmt()
                    self.state = 1288
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StartContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def module(self):
            return self.getTypedRuleContext(m2_Parser.ModuleContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_start

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStart" ):
                listener.enterStart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStart" ):
                listener.exitStart(self)




    def start(self):

        localctx = m2_Parser.StartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_start)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1291
            self.module()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[22] = self.par_sempred
        self._predicates[29] = self.primarySuffix_sempred
        self._predicates[89] = self.typeClass_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def par_sempred(self, localctx:ParContext, predIndex:int):
            if predIndex == 0:
                return self._input.LT(1).type in self.parKeyWList
         

    def primarySuffix_sempred(self, localctx:PrimarySuffixContext, predIndex:int):
            if predIndex == 1:
                return self._input.LT(1).type in self.primarySuffixList
         

    def typeClass_sempred(self, localctx:TypeClassContext, predIndex:int):
            if predIndex == 2:
                return self._input.LT(1).type == self.INDENT
         




