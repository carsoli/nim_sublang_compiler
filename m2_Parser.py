# Generated from m2_Parser.g4 by ANTLR 4.7.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3s")
        buf.write("\u051b\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\3")
        buf.write("\2\3\2\3\3\3\3\3\4\3\4\3\4\3\4\5\4\u00e9\n\4\3\5\3\5\3")
        buf.write("\6\3\6\3\7\3\7\3\b\3\b\3\b\3\b\5\b\u00f5\n\b\3\t\3\t\3")
        buf.write("\n\3\n\3\13\3\13\3\f\3\f\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3")
        buf.write("\r\3\r\3\r\3\r\5\r\u010a\n\r\3\16\3\16\3\17\3\17\3\20")
        buf.write("\5\20\u0111\n\20\3\21\5\21\u0114\n\21\3\22\3\22\3\23\3")
        buf.write("\23\3\24\3\24\3\25\3\25\5\25\u011e\n\25\3\26\3\26\3\27")
        buf.write("\3\27\3\27\5\27\u0125\n\27\3\30\3\30\3\30\3\30\3\30\5")
        buf.write("\30\u012c\n\30\3\30\3\30\3\30\5\30\u0131\n\30\7\30\u0133")
        buf.write("\n\30\f\30\16\30\u0136\13\30\3\30\3\30\3\30\5\30\u013b")
        buf.write("\n\30\3\30\3\30\3\30\5\30\u0140\n\30\7\30\u0142\n\30\f")
        buf.write("\30\16\30\u0145\13\30\3\30\3\30\3\30\3\30\3\30\3\30\3")
        buf.write("\30\5\30\u014e\n\30\3\30\3\30\3\30\5\30\u0153\n\30\7\30")
        buf.write("\u0155\n\30\f\30\16\30\u0158\13\30\5\30\u015a\n\30\3\30")
        buf.write("\3\30\3\30\3\30\3\30\3\30\7\30\u0162\n\30\f\30\16\30\u0165")
        buf.write("\13\30\5\30\u0167\n\30\5\30\u0169\n\30\5\30\u016b\n\30")
        buf.write("\3\30\3\30\3\30\3\31\3\31\3\31\3\31\5\31\u0174\n\31\7")
        buf.write("\31\u0176\n\31\f\31\16\31\u0179\13\31\3\31\3\31\3\31\3")
        buf.write("\32\3\32\3\32\3\32\5\32\u0182\n\32\7\32\u0184\n\32\f\32")
        buf.write("\16\32\u0187\13\32\3\32\3\32\3\32\3\33\3\33\3\34\3\34")
        buf.write("\3\35\3\35\3\35\7\35\u0193\n\35\f\35\16\35\u0196\13\35")
        buf.write("\3\36\3\36\3\36\5\36\u019b\n\36\7\36\u019d\n\36\f\36\16")
        buf.write("\36\u01a0\13\36\3\36\3\36\3\36\3\36\3\36\5\36\u01a7\n")
        buf.write("\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\5\36\u01b1")
        buf.write("\n\36\3\37\3\37\3\37\3\37\3\37\5\37\u01b8\n\37\3 \3 \3")
        buf.write(" \3 \5 \u01be\n \3!\3!\3!\3!\7!\u01c4\n!\f!\16!\u01c7")
        buf.write("\13!\3!\3!\7!\u01cb\n!\f!\16!\u01ce\13!\3!\5!\u01d1\n")
        buf.write("!\5!\u01d3\n!\3\"\3\"\3\"\3\"\3\"\5\"\u01da\n\"\7\"\u01dc")
        buf.write("\n\"\f\"\16\"\u01df\13\"\3\"\3\"\5\"\u01e3\n\"\3\"\3\"")
        buf.write("\3#\3#\3#\3#\3#\7#\u01ec\n#\f#\16#\u01ef\13#\3$\3$\3$")
        buf.write("\3$\3$\7$\u01f6\n$\f$\16$\u01f9\13$\3%\3%\3%\3%\3%\7%")
        buf.write("\u0200\n%\f%\16%\u0203\13%\3&\3&\3&\3&\3&\7&\u020a\n&")
        buf.write("\f&\16&\u020d\13&\3\'\3\'\3\'\3\'\3\'\7\'\u0214\n\'\f")
        buf.write("\'\16\'\u0217\13\'\3(\3(\3(\3(\3(\7(\u021e\n(\f(\16(\u0221")
        buf.write("\13(\3)\3)\3)\3)\3)\7)\u0228\n)\f)\16)\u022b\13)\3*\3")
        buf.write("*\3*\3*\3*\7*\u0232\n*\f*\16*\u0235\13*\3+\3+\3+\3+\3")
        buf.write("+\7+\u023c\n+\f+\16+\u023f\13+\3,\3,\3,\3,\3,\7,\u0246")
        buf.write("\n,\f,\16,\u0249\13,\3-\3-\3-\3-\3-\7-\u0250\n-\f-\16")
        buf.write("-\u0253\13-\3.\3.\3.\7.\u0258\n.\f.\16.\u025b\13.\3/\3")
        buf.write("/\3/\5/\u0260\n/\3\60\3\60\3\60\3\60\5\60\u0266\n\60\3")
        buf.write("\61\3\61\3\61\7\61\u026b\n\61\f\61\16\61\u026e\13\61\3")
        buf.write("\61\5\61\u0271\n\61\3\62\3\62\3\62\3\62\3\62\3\62\3\62")
        buf.write("\3\62\3\62\3\62\7\62\u027d\n\62\f\62\16\62\u0280\13\62")
        buf.write("\3\62\3\62\3\62\3\62\3\63\3\63\3\64\3\64\3\64\3\64\3\64")
        buf.write("\3\64\3\64\3\64\3\64\5\64\u0291\n\64\5\64\u0293\n\64\3")
        buf.write("\65\3\65\6\65\u0297\n\65\r\65\16\65\u0298\3\65\3\65\3")
        buf.write("\65\3\65\5\65\u029f\n\65\3\66\3\66\5\66\u02a3\n\66\3\66")
        buf.write("\3\66\3\66\3\67\3\67\3\67\38\38\38\39\39\39\39\39\39\3")
        buf.write("9\39\39\39\59\u02b8\n9\3:\3:\3;\5;\u02bd\n;\3;\3;\3;\3")
        buf.write(";\3;\3;\5;\u02c5\n;\3<\3<\3=\3=\3=\3>\3>\3>\5>\u02cf\n")
        buf.write(">\3?\3?\3?\5?\u02d4\n?\3@\3@\3@\5@\u02d9\n@\3A\3A\3A\5")
        buf.write("A\u02de\nA\3B\3B\3B\3B\3B\7B\u02e5\nB\fB\16B\u02e8\13")
        buf.write("B\3C\3C\3C\3C\3C\3C\3C\7C\u02f1\nC\fC\16C\u02f4\13C\3")
        buf.write("D\3D\3D\3D\3E\3E\3E\5E\u02fd\nE\3E\3E\3E\3E\3E\5E\u0304")
        buf.write("\nE\3F\3F\3F\3F\3F\3G\6G\u030c\nG\rG\16G\u030d\3G\3G\3")
        buf.write("G\3G\3G\7G\u0315\nG\fG\16G\u0318\13G\3G\3G\3G\5G\u031d")
        buf.write("\nG\3H\3H\3H\3H\3H\5H\u0324\nH\5H\u0326\nH\3I\3I\3I\3")
        buf.write("I\3I\3I\3I\3I\5I\u0330\nI\3J\3J\3J\3J\3J\3J\3J\3J\7J\u033a")
        buf.write("\nJ\fJ\16J\u033d\13J\3J\3J\3J\5J\u0342\nJ\3K\3K\5K\u0346")
        buf.write("\nK\3L\3L\3L\5L\u034b\nL\3L\5L\u034e\nL\3M\3M\5M\u0352")
        buf.write("\nM\3N\3N\3N\3O\3O\3O\3P\3P\3P\3P\3P\3Q\3Q\3Q\7Q\u0362")
        buf.write("\nQ\fQ\16Q\u0365\13Q\3Q\3Q\5Q\u0369\nQ\3Q\3Q\3Q\3Q\5Q")
        buf.write("\u036f\nQ\3R\3R\3R\3R\3R\7R\u0376\nR\fR\16R\u0379\13R")
        buf.write("\5R\u037b\nR\3R\3R\3R\3S\3S\5S\u0382\nS\3T\3T\5T\u0386")
        buf.write("\nT\3U\3U\3U\3U\3U\3U\3U\3U\3U\7U\u0391\nU\fU\16U\u0394")
        buf.write("\13U\3U\3U\3U\5U\u0399\nU\3V\3V\3V\3V\3V\3W\3W\7W\u03a2")
        buf.write("\nW\fW\16W\u03a5\13W\3W\3W\3W\3W\3W\7W\u03ac\nW\fW\16")
        buf.write("W\u03af\13W\3W\3W\3W\5W\u03b4\nW\3X\3X\3X\3X\3X\5X\u03bb")
        buf.write("\nX\3X\3X\3X\3X\3X\5X\u03c2\nX\3Y\3Y\6Y\u03c6\nY\rY\16")
        buf.write("Y\u03c7\3Y\3Y\3Y\3Y\3Y\3Y\3Y\5Y\u03d1\nY\3Z\3Z\5Z\u03d5")
        buf.write("\nZ\3Z\3Z\5Z\u03d9\nZ\3Z\3Z\3[\5[\u03de\n[\3[\3[\3\\\3")
        buf.write("\\\3\\\7\\\u03e5\n\\\f\\\16\\\u03e8\13\\\5\\\u03ea\n\\")
        buf.write("\3\\\5\\\u03ed\n\\\3\\\3\\\3\\\3\\\7\\\u03f3\n\\\f\\\16")
        buf.write("\\\u03f6\13\\\5\\\u03f8\n\\\5\\\u03fa\n\\\3\\\3\\\3\\")
        buf.write("\3]\3]\5]\u0401\n]\3]\3]\3]\3]\3]\3^\3^\3^\3^\3^\7^\u040d")
        buf.write("\n^\f^\16^\u0410\13^\3^\3^\3^\3^\3^\3^\3_\3_\3_\7_\u041b")
        buf.write("\n_\f_\16_\u041e\13_\3_\5_\u0421\n_\3_\3_\3_\3_\5_\u0427")
        buf.write("\n_\3_\3_\3_\3_\5_\u042d\n_\3`\3`\3`\7`\u0432\n`\f`\16")
        buf.write("`\u0435\13`\3`\5`\u0438\n`\3`\3`\3`\3`\3`\3`\3`\3`\5`")
        buf.write("\u0442\n`\3a\3a\3a\3a\7a\u0448\na\fa\16a\u044b\13a\5a")
        buf.write("\u044d\na\3a\3a\3a\3a\7a\u0453\na\fa\16a\u0456\13a\5a")
        buf.write("\u0458\na\3b\5b\u045b\nb\3b\3b\3b\3b\5b\u0461\nb\3c\3")
        buf.write("c\3c\5c\u0466\nc\3c\3c\5c\u046a\nc\3c\3c\3d\3d\3d\5d\u0471")
        buf.write("\nd\3d\3d\3d\3d\3d\3e\3e\5e\u047a\ne\3e\5e\u047d\ne\3")
        buf.write("e\3e\3f\3f\3f\3f\3f\5f\u0486\nf\3g\3g\3g\3g\7g\u048c\n")
        buf.write("g\fg\16g\u048f\13g\3g\3g\3g\3g\3g\3h\3h\5h\u0498\nh\3")
        buf.write("h\3h\3h\3i\3i\3i\5i\u04a0\ni\3i\3i\5i\u04a4\ni\3i\3i\5")
        buf.write("i\u04a8\ni\3i\3i\3j\3j\3j\6j\u04af\nj\rj\16j\u04b0\3j")
        buf.write("\3j\5j\u04b5\nj\3k\3k\3k\6k\u04ba\nk\rk\16k\u04bb\3k\3")
        buf.write("k\5k\u04c0\nk\3l\3l\3l\6l\u04c5\nl\rl\16l\u04c6\3l\3l")
        buf.write("\5l\u04cb\nl\3m\3m\3m\3m\3m\3m\3m\3m\3m\3m\3m\3m\3m\3")
        buf.write("m\3m\3m\3m\5m\u04de\nm\3n\3n\5n\u04e2\nn\3n\5n\u04e5\n")
        buf.write("n\3n\3n\5n\u04e9\nn\7n\u04eb\nn\fn\16n\u04ee\13n\3n\3")
        buf.write("n\3n\5n\u04f3\nn\3n\5n\u04f6\nn\3n\3n\5n\u04fa\nn\7n\u04fc")
        buf.write("\nn\fn\16n\u04ff\13n\3n\3n\3n\3n\5n\u0505\nn\3n\7n\u0508")
        buf.write("\nn\fn\16n\u050b\13n\5n\u050d\nn\3o\3o\3o\7o\u0512\no")
        buf.write("\fo\16o\u0515\13o\5o\u0517\no\3p\3p\3p\2\2q\2\4\6\b\n")
        buf.write("\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64\668:<")
        buf.write(">@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086")
        buf.write("\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098")
        buf.write("\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa")
        buf.write("\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc")
        buf.write("\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce")
        buf.write("\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\2\13")
        buf.write("\4\2\27\27\35\35\4\2\30\32!!\3\3mm\6\2\'\'++BBKK\t\2\'")
        buf.write(")\678<<>>DDOOUU\3\2kl\5\2QQYbdj\3\2\b\t\3\2\'(\2\u057a")
        buf.write("\2\u00e0\3\2\2\2\4\u00e2\3\2\2\2\6\u00e8\3\2\2\2\b\u00ea")
        buf.write("\3\2\2\2\n\u00ec\3\2\2\2\f\u00ee\3\2\2\2\16\u00f4\3\2")
        buf.write("\2\2\20\u00f6\3\2\2\2\22\u00f8\3\2\2\2\24\u00fa\3\2\2")
        buf.write("\2\26\u00fc\3\2\2\2\30\u0109\3\2\2\2\32\u010b\3\2\2\2")
        buf.write("\34\u010d\3\2\2\2\36\u0110\3\2\2\2 \u0113\3\2\2\2\"\u0115")
        buf.write("\3\2\2\2$\u0117\3\2\2\2&\u0119\3\2\2\2(\u011d\3\2\2\2")
        buf.write("*\u011f\3\2\2\2,\u0121\3\2\2\2.\u0126\3\2\2\2\60\u016f")
        buf.write("\3\2\2\2\62\u017d\3\2\2\2\64\u018b\3\2\2\2\66\u018d\3")
        buf.write("\2\2\28\u018f\3\2\2\2:\u01b0\3\2\2\2<\u01b7\3\2\2\2>\u01bd")
        buf.write("\3\2\2\2@\u01d2\3\2\2\2B\u01d4\3\2\2\2D\u01e6\3\2\2\2")
        buf.write("F\u01f0\3\2\2\2H\u01fa\3\2\2\2J\u0204\3\2\2\2L\u020e\3")
        buf.write("\2\2\2N\u0218\3\2\2\2P\u0222\3\2\2\2R\u022c\3\2\2\2T\u0236")
        buf.write("\3\2\2\2V\u0240\3\2\2\2X\u024a\3\2\2\2Z\u0254\3\2\2\2")
        buf.write("\\\u025c\3\2\2\2^\u0261\3\2\2\2`\u0267\3\2\2\2b\u0272")
        buf.write("\3\2\2\2d\u0285\3\2\2\2f\u0292\3\2\2\2h\u029e\3\2\2\2")
        buf.write("j\u02a0\3\2\2\2l\u02a7\3\2\2\2n\u02aa\3\2\2\2p\u02ad\3")
        buf.write("\2\2\2r\u02b9\3\2\2\2t\u02bc\3\2\2\2v\u02c6\3\2\2\2x\u02c8")
        buf.write("\3\2\2\2z\u02cb\3\2\2\2|\u02d0\3\2\2\2~\u02d5\3\2\2\2")
        buf.write("\u0080\u02da\3\2\2\2\u0082\u02df\3\2\2\2\u0084\u02e9\3")
        buf.write("\2\2\2\u0086\u02f5\3\2\2\2\u0088\u02f9\3\2\2\2\u008a\u0305")
        buf.write("\3\2\2\2\u008c\u030b\3\2\2\2\u008e\u031e\3\2\2\2\u0090")
        buf.write("\u032f\3\2\2\2\u0092\u0331\3\2\2\2\u0094\u0343\3\2\2\2")
        buf.write("\u0096\u0347\3\2\2\2\u0098\u034f\3\2\2\2\u009a\u0353\3")
        buf.write("\2\2\2\u009c\u0356\3\2\2\2\u009e\u0359\3\2\2\2\u00a0\u035e")
        buf.write("\3\2\2\2\u00a2\u0370\3\2\2\2\u00a4\u037f\3\2\2\2\u00a6")
        buf.write("\u0385\3\2\2\2\u00a8\u0387\3\2\2\2\u00aa\u039a\3\2\2\2")
        buf.write("\u00ac\u039f\3\2\2\2\u00ae\u03b5\3\2\2\2\u00b0\u03d0\3")
        buf.write("\2\2\2\u00b2\u03d2\3\2\2\2\u00b4\u03dd\3\2\2\2\u00b6\u03e9")
        buf.write("\3\2\2\2\u00b8\u03fe\3\2\2\2\u00ba\u0407\3\2\2\2\u00bc")
        buf.write("\u0417\3\2\2\2\u00be\u042e\3\2\2\2\u00c0\u0457\3\2\2\2")
        buf.write("\u00c2\u045a\3\2\2\2\u00c4\u0462\3\2\2\2\u00c6\u046d\3")
        buf.write("\2\2\2\u00c8\u0479\3\2\2\2\u00ca\u0480\3\2\2\2\u00cc\u0487")
        buf.write("\3\2\2\2\u00ce\u0495\3\2\2\2\u00d0\u049c\3\2\2\2\u00d2")
        buf.write("\u04b4\3\2\2\2\u00d4\u04bf\3\2\2\2\u00d6\u04ca\3\2\2\2")
        buf.write("\u00d8\u04dd\3\2\2\2\u00da\u050c\3\2\2\2\u00dc\u0516\3")
        buf.write("\2\2\2\u00de\u0518\3\2\2\2\u00e0\u00e1\7\34\2\2\u00e1")
        buf.write("\3\3\2\2\2\u00e2\u00e3\t\2\2\2\u00e3\5\3\2\2\2\u00e4\u00e9")
        buf.write("\7\36\2\2\u00e5\u00e9\7\25\2\2\u00e6\u00e7\7\25\2\2\u00e7")
        buf.write("\u00e9\7\25\2\2\u00e8\u00e4\3\2\2\2\u00e8\u00e5\3\2\2")
        buf.write("\2\u00e8\u00e6\3\2\2\2\u00e9\7\3\2\2\2\u00ea\u00eb\7\37")
        buf.write("\2\2\u00eb\t\3\2\2\2\u00ec\u00ed\7 \2\2\u00ed\13\3\2\2")
        buf.write("\2\u00ee\u00ef\t\3\2\2\u00ef\r\3\2\2\2\u00f0\u00f5\7\"")
        buf.write("\2\2\u00f1\u00f5\7\26\2\2\u00f2\u00f3\7\26\2\2\u00f3\u00f5")
        buf.write("\7\26\2\2\u00f4\u00f0\3\2\2\2\u00f4\u00f1\3\2\2\2\u00f4")
        buf.write("\u00f2\3\2\2\2\u00f5\17\3\2\2\2\u00f6\u00f7\7#\2\2\u00f7")
        buf.write("\21\3\2\2\2\u00f8\u00f9\7$\2\2\u00f9\23\3\2\2\2\u00fa")
        buf.write("\u00fb\7%\2\2\u00fb\25\3\2\2\2\u00fc\u00fd\7&\2\2\u00fd")
        buf.write("\27\3\2\2\2\u00fe\u010a\5\2\2\2\u00ff\u010a\5\4\3\2\u0100")
        buf.write("\u010a\5\6\4\2\u0101\u010a\5\b\5\2\u0102\u010a\5\n\6\2")
        buf.write("\u0103\u010a\5\f\7\2\u0104\u010a\5\16\b\2\u0105\u010a")
        buf.write("\5\20\t\2\u0106\u010a\5\22\n\2\u0107\u010a\5\24\13\2\u0108")
        buf.write("\u010a\5\26\f\2\u0109\u00fe\3\2\2\2\u0109\u00ff\3\2\2")
        buf.write("\2\u0109\u0100\3\2\2\2\u0109\u0101\3\2\2\2\u0109\u0102")
        buf.write("\3\2\2\2\u0109\u0103\3\2\2\2\u0109\u0104\3\2\2\2\u0109")
        buf.write("\u0105\3\2\2\2\u0109\u0106\3\2\2\2\u0109\u0107\3\2\2\2")
        buf.write("\u0109\u0108\3\2\2\2\u010a\31\3\2\2\2\u010b\u010c\5\30")
        buf.write("\r\2\u010c\33\3\2\2\2\u010d\u010e\7q\2\2\u010e\35\3\2")
        buf.write("\2\2\u010f\u0111\5\34\17\2\u0110\u010f\3\2\2\2\u0110\u0111")
        buf.write("\3\2\2\2\u0111\37\3\2\2\2\u0112\u0114\5\34\17\2\u0113")
        buf.write("\u0112\3\2\2\2\u0113\u0114\3\2\2\2\u0114!\3\2\2\2\u0115")
        buf.write("\u0116\t\4\2\2\u0116#\3\2\2\2\u0117\u0118\t\5\2\2\u0118")
        buf.write("%\3\2\2\2\u0119\u011a\t\6\2\2\u011a\'\3\2\2\2\u011b\u011e")
        buf.write("\5$\23\2\u011c\u011e\5&\24\2\u011d\u011b\3\2\2\2\u011d")
        buf.write("\u011c\3\2\2\2\u011e)\3\2\2\2\u011f\u0120\t\7\2\2\u0120")
        buf.write("+\3\2\2\2\u0121\u0124\5B\"\2\u0122\u0123\7\25\2\2\u0123")
        buf.write("\u0125\5\u00dan\2\u0124\u0122\3\2\2\2\u0124\u0125\3\2")
        buf.write("\2\2\u0125-\3\2\2\2\u0126\u0127\7\n\2\2\u0127\u016a\5")
        buf.write("\36\20\2\u0128\u012b\6\30\2\2\u0129\u012c\5\u00d8m\2\u012a")
        buf.write("\u012c\5\u0090I\2\u012b\u0129\3\2\2\2\u012b\u012a\3\2")
        buf.write("\2\2\u012c\u0134\3\2\2\2\u012d\u0130\7\t\2\2\u012e\u0131")
        buf.write("\5\u00d8m\2\u012f\u0131\5\u0090I\2\u0130\u012e\3\2\2\2")
        buf.write("\u0130\u012f\3\2\2\2\u0131\u0133\3\2\2\2\u0132\u012d\3")
        buf.write("\2\2\2\u0133\u0136\3\2\2\2\u0134\u0132\3\2\2\2\u0134\u0135")
        buf.write("\3\2\2\2\u0135\u016b\3\2\2\2\u0136\u0134\3\2\2\2\u0137")
        buf.write("\u013a\7\t\2\2\u0138\u013b\5\u00d8m\2\u0139\u013b\5\u0090")
        buf.write("I\2\u013a\u0138\3\2\2\2\u013a\u0139\3\2\2\2\u013b\u0143")
        buf.write("\3\2\2\2\u013c\u013f\7\t\2\2\u013d\u0140\5\u00d8m\2\u013e")
        buf.write("\u0140\5\u0090I\2\u013f\u013d\3\2\2\2\u013f\u013e\3\2")
        buf.write("\2\2\u0140\u0142\3\2\2\2\u0141\u013c\3\2\2\2\u0142\u0145")
        buf.write("\3\2\2\2\u0143\u0141\3\2\2\2\u0143\u0144\3\2\2\2\u0144")
        buf.write("\u016b\3\2\2\2\u0145\u0143\3\2\2\2\u0146\u016b\5,\27\2")
        buf.write("\u0147\u0168\5D#\2\u0148\u0149\7\27\2\2\u0149\u0159\5")
        buf.write("t;\2\u014a\u014d\7\t\2\2\u014b\u014e\5\u00d8m\2\u014c")
        buf.write("\u014e\5\u0090I\2\u014d\u014b\3\2\2\2\u014d\u014c\3\2")
        buf.write("\2\2\u014e\u0156\3\2\2\2\u014f\u0152\7\t\2\2\u0150\u0153")
        buf.write("\5\u00d8m\2\u0151\u0153\5\u0090I\2\u0152\u0150\3\2\2\2")
        buf.write("\u0152\u0151\3\2\2\2\u0153\u0155\3\2\2\2\u0154\u014f\3")
        buf.write("\2\2\2\u0155\u0158\3\2\2\2\u0156\u0154\3\2\2\2\u0156\u0157")
        buf.write("\3\2\2\2\u0157\u015a\3\2\2\2\u0158\u0156\3\2\2\2\u0159")
        buf.write("\u014a\3\2\2\2\u0159\u015a\3\2\2\2\u015a\u0169\3\2\2\2")
        buf.write("\u015b\u015c\7\25\2\2\u015c\u0166\5t;\2\u015d\u015e\7")
        buf.write("\b\2\2\u015e\u0163\5^\60\2\u015f\u0160\7\b\2\2\u0160\u0162")
        buf.write("\5^\60\2\u0161\u015f\3\2\2\2\u0162\u0165\3\2\2\2\u0163")
        buf.write("\u0161\3\2\2\2\u0163\u0164\3\2\2\2\u0164\u0167\3\2\2\2")
        buf.write("\u0165\u0163\3\2\2\2\u0166\u015d\3\2\2\2\u0166\u0167\3")
        buf.write("\2\2\2\u0167\u0169\3\2\2\2\u0168\u0148\3\2\2\2\u0168\u015b")
        buf.write("\3\2\2\2\u0169\u016b\3\2\2\2\u016a\u0128\3\2\2\2\u016a")
        buf.write("\u0137\3\2\2\2\u016a\u0146\3\2\2\2\u016a\u0147\3\2\2\2")
        buf.write("\u016b\u016c\3\2\2\2\u016c\u016d\5 \21\2\u016d\u016e\7")
        buf.write("\13\2\2\u016e/\3\2\2\2\u016f\u0170\7\n\2\2\u0170\u0177")
        buf.write("\5\36\20\2\u0171\u0173\5^\60\2\u0172\u0174\7\b\2\2\u0173")
        buf.write("\u0172\3\2\2\2\u0173\u0174\3\2\2\2\u0174\u0176\3\2\2\2")
        buf.write("\u0175\u0171\3\2\2\2\u0176\u0179\3\2\2\2\u0177\u0175\3")
        buf.write("\2\2\2\u0177\u0178\3\2\2\2\u0178\u017a\3\2\2\2\u0179\u0177")
        buf.write("\3\2\2\2\u017a\u017b\5 \21\2\u017b\u017c\7\13\2\2\u017c")
        buf.write("\61\3\2\2\2\u017d\u017e\7\16\2\2\u017e\u0185\5\36\20\2")
        buf.write("\u017f\u0181\5^\60\2\u0180\u0182\7\b\2\2\u0181\u0180\3")
        buf.write("\2\2\2\u0181\u0182\3\2\2\2\u0182\u0184\3\2\2\2\u0183\u017f")
        buf.write("\3\2\2\2\u0184\u0187\3\2\2\2\u0185\u0183\3\2\2\2\u0185")
        buf.write("\u0186\3\2\2\2\u0186\u0188\3\2\2\2\u0187\u0185\3\2\2\2")
        buf.write("\u0188\u0189\5 \21\2\u0189\u018a\7\17\2\2\u018a\63\3\2")
        buf.write("\2\2\u018b\u018c\5D#\2\u018c\65\3\2\2\2\u018d\u018e\5")
        buf.write("t;\2\u018e\67\3\2\2\2\u018f\u0194\5\66\34\2\u0190\u0191")
        buf.write("\7\b\2\2\u0191\u0193\5\66\34\2\u0192\u0190\3\2\2\2\u0193")
        buf.write("\u0196\3\2\2\2\u0194\u0192\3\2\2\2\u0194\u0195\3\2\2\2")
        buf.write("\u01959\3\2\2\2\u0196\u0194\3\2\2\2\u0197\u019e\7\n\2")
        buf.write("\2\u0198\u019a\5^\60\2\u0199\u019b\7\b\2\2\u019a\u0199")
        buf.write("\3\2\2\2\u019a\u019b\3\2\2\2\u019b\u019d\3\2\2\2\u019c")
        buf.write("\u0198\3\2\2\2\u019d\u01a0\3\2\2\2\u019e\u019c\3\2\2\2")
        buf.write("\u019e\u019f\3\2\2\2\u019f\u01a1\3\2\2\2\u01a0\u019e\3")
        buf.write("\2\2\2\u01a1\u01b1\7\13\2\2\u01a2\u01a3\7\26\2\2\u01a3")
        buf.write("\u01a4\5\36\20\2\u01a4\u01a6\5h\65\2\u01a5\u01a7\5*\26")
        buf.write("\2\u01a6\u01a5\3\2\2\2\u01a6\u01a7\3\2\2\2\u01a7\u01b1")
        buf.write("\3\2\2\2\u01a8\u01a9\7\16\2\2\u01a9\u01aa\5\36\20\2\u01aa")
        buf.write("\u01ab\58\35\2\u01ab\u01ac\5 \21\2\u01ac\u01ad\7\17\2")
        buf.write("\2\u01ad\u01b1\3\2\2\2\u01ae\u01af\6\36\3\2\u01af\u01b1")
        buf.write("\5t;\2\u01b0\u0197\3\2\2\2\u01b0\u01a2\3\2\2\2\u01b0\u01a8")
        buf.write("\3\2\2\2\u01b0\u01ae\3\2\2\2\u01b1;\3\2\2\2\u01b2\u01b8")
        buf.write("\5*\26\2\u01b3\u01b8\5h\65\2\u01b4\u01b8\5d\63\2\u01b5")
        buf.write("\u01b8\5.\30\2\u01b6\u01b8\5\62\32\2\u01b7\u01b2\3\2\2")
        buf.write("\2\u01b7\u01b3\3\2\2\2\u01b7\u01b4\3\2\2\2\u01b7\u01b5")
        buf.write("\3\2\2\2\u01b7\u01b6\3\2\2\2\u01b8=\3\2\2\2\u01b9\u01be")
        buf.write("\5*\26\2\u01ba\u01be\5h\65\2\u01bb\u01be\5.\30\2\u01bc")
        buf.write("\u01be\5\62\32\2\u01bd\u01b9\3\2\2\2\u01bd\u01ba\3\2\2")
        buf.write("\2\u01bd\u01bb\3\2\2\2\u01bd\u01bc\3\2\2\2\u01be?\3\2")
        buf.write("\2\2\u01bf\u01c0\5$\23\2\u01c0\u01c1\5\64\33\2\u01c1\u01d3")
        buf.write("\3\2\2\2\u01c2\u01c4\5\32\16\2\u01c3\u01c2\3\2\2\2\u01c4")
        buf.write("\u01c7\3\2\2\2\u01c5\u01c3\3\2\2\2\u01c5\u01c6\3\2\2\2")
        buf.write("\u01c6\u01d0\3\2\2\2\u01c7\u01c5\3\2\2\2\u01c8\u01cc\5")
        buf.write("> \2\u01c9\u01cb\5:\36\2\u01ca\u01c9\3\2\2\2\u01cb\u01ce")
        buf.write("\3\2\2\2\u01cc\u01ca\3\2\2\2\u01cc\u01cd\3\2\2\2\u01cd")
        buf.write("\u01d1\3\2\2\2\u01ce\u01cc\3\2\2\2\u01cf\u01d1\5<\37\2")
        buf.write("\u01d0\u01c8\3\2\2\2\u01d0\u01cf\3\2\2\2\u01d1\u01d3\3")
        buf.write("\2\2\2\u01d2\u01bf\3\2\2\2\u01d2\u01c5\3\2\2\2\u01d3A")
        buf.write("\3\2\2\2\u01d4\u01d5\7\f\2\2\u01d5\u01d6\7\26\2\2\u01d6")
        buf.write("\u01dd\5\36\20\2\u01d7\u01d9\5\\/\2\u01d8\u01da\7\b\2")
        buf.write("\2\u01d9\u01d8\3\2\2\2\u01d9\u01da\3\2\2\2\u01da\u01dc")
        buf.write("\3\2\2\2\u01db\u01d7\3\2\2\2\u01dc\u01df\3\2\2\2\u01dd")
        buf.write("\u01db\3\2\2\2\u01dd\u01de\3\2\2\2\u01de\u01e0\3\2\2\2")
        buf.write("\u01df\u01dd\3\2\2\2\u01e0\u01e2\5 \21\2\u01e1\u01e3\7")
        buf.write("\26\2\2\u01e2\u01e1\3\2\2\2\u01e2\u01e3\3\2\2\2\u01e3")
        buf.write("\u01e4\3\2\2\2\u01e4\u01e5\7\r\2\2\u01e5C\3\2\2\2\u01e6")
        buf.write("\u01ed\5F$\2\u01e7\u01e8\7\34\2\2\u01e8\u01e9\5\36\20")
        buf.write("\2\u01e9\u01ea\5F$\2\u01ea\u01ec\3\2\2\2\u01eb\u01e7\3")
        buf.write("\2\2\2\u01ec\u01ef\3\2\2\2\u01ed\u01eb\3\2\2\2\u01ed\u01ee")
        buf.write("\3\2\2\2\u01eeE\3\2\2\2\u01ef\u01ed\3\2\2\2\u01f0\u01f7")
        buf.write("\5H%\2\u01f1\u01f2\7\35\2\2\u01f2\u01f3\5\36\20\2\u01f3")
        buf.write("\u01f4\5H%\2\u01f4\u01f6\3\2\2\2\u01f5\u01f1\3\2\2\2\u01f6")
        buf.write("\u01f9\3\2\2\2\u01f7\u01f5\3\2\2\2\u01f7\u01f8\3\2\2\2")
        buf.write("\u01f8G\3\2\2\2\u01f9\u01f7\3\2\2\2\u01fa\u0201\5J&\2")
        buf.write("\u01fb\u01fc\7\36\2\2\u01fc\u01fd\5\36\20\2\u01fd\u01fe")
        buf.write("\5J&\2\u01fe\u0200\3\2\2\2\u01ff\u01fb\3\2\2\2\u0200\u0203")
        buf.write("\3\2\2\2\u0201\u01ff\3\2\2\2\u0201\u0202\3\2\2\2\u0202")
        buf.write("I\3\2\2\2\u0203\u0201\3\2\2\2\u0204\u020b\5L\'\2\u0205")
        buf.write("\u0206\7\37\2\2\u0206\u0207\5\36\20\2\u0207\u0208\5L\'")
        buf.write("\2\u0208\u020a\3\2\2\2\u0209\u0205\3\2\2\2\u020a\u020d")
        buf.write("\3\2\2\2\u020b\u0209\3\2\2\2\u020b\u020c\3\2\2\2\u020c")
        buf.write("K\3\2\2\2\u020d\u020b\3\2\2\2\u020e\u0215\5N(\2\u020f")
        buf.write("\u0210\7 \2\2\u0210\u0211\5\36\20\2\u0211\u0212\5N(\2")
        buf.write("\u0212\u0214\3\2\2\2\u0213\u020f\3\2\2\2\u0214\u0217\3")
        buf.write("\2\2\2\u0215\u0213\3\2\2\2\u0215\u0216\3\2\2\2\u0216M")
        buf.write("\3\2\2\2\u0217\u0215\3\2\2\2\u0218\u021f\5P)\2\u0219\u021a")
        buf.write("\7!\2\2\u021a\u021b\5\36\20\2\u021b\u021c\5P)\2\u021c")
        buf.write("\u021e\3\2\2\2\u021d\u0219\3\2\2\2\u021e\u0221\3\2\2\2")
        buf.write("\u021f\u021d\3\2\2\2\u021f\u0220\3\2\2\2\u0220O\3\2\2")
        buf.write("\2\u0221\u021f\3\2\2\2\u0222\u0229\5R*\2\u0223\u0224\7")
        buf.write("\"\2\2\u0224\u0225\5\36\20\2\u0225\u0226\5R*\2\u0226\u0228")
        buf.write("\3\2\2\2\u0227\u0223\3\2\2\2\u0228\u022b\3\2\2\2\u0229")
        buf.write("\u0227\3\2\2\2\u0229\u022a\3\2\2\2\u022aQ\3\2\2\2\u022b")
        buf.write("\u0229\3\2\2\2\u022c\u0233\5T+\2\u022d\u022e\7#\2\2\u022e")
        buf.write("\u022f\5\36\20\2\u022f\u0230\5T+\2\u0230\u0232\3\2\2\2")
        buf.write("\u0231\u022d\3\2\2\2\u0232\u0235\3\2\2\2\u0233\u0231\3")
        buf.write("\2\2\2\u0233\u0234\3\2\2\2\u0234S\3\2\2\2\u0235\u0233")
        buf.write("\3\2\2\2\u0236\u023d\5V,\2\u0237\u0238\7$\2\2\u0238\u0239")
        buf.write("\5\36\20\2\u0239\u023a\5V,\2\u023a\u023c\3\2\2\2\u023b")
        buf.write("\u0237\3\2\2\2\u023c\u023f\3\2\2\2\u023d\u023b\3\2\2\2")
        buf.write("\u023d\u023e\3\2\2\2\u023eU\3\2\2\2\u023f\u023d\3\2\2")
        buf.write("\2\u0240\u0247\5X-\2\u0241\u0242\7%\2\2\u0242\u0243\5")
        buf.write("\36\20\2\u0243\u0244\5X-\2\u0244\u0246\3\2\2\2\u0245\u0241")
        buf.write("\3\2\2\2\u0246\u0249\3\2\2\2\u0247\u0245\3\2\2\2\u0247")
        buf.write("\u0248\3\2\2\2\u0248W\3\2\2\2\u0249\u0247\3\2\2\2\u024a")
        buf.write("\u0251\5@!\2\u024b\u024c\7&\2\2\u024c\u024d\5\36\20\2")
        buf.write("\u024d\u024e\5@!\2\u024e\u0250\3\2\2\2\u024f\u024b\3\2")
        buf.write("\2\2\u0250\u0253\3\2\2\2\u0251\u024f\3\2\2\2\u0251\u0252")
        buf.write("\3\2\2\2\u0252Y\3\2\2\2\u0253\u0251\3\2\2\2\u0254\u0259")
        buf.write("\5t;\2\u0255\u0256\7\b\2\2\u0256\u0258\5t;\2\u0257\u0255")
        buf.write("\3\2\2\2\u0258\u025b\3\2\2\2\u0259\u0257\3\2\2\2\u0259")
        buf.write("\u025a\3\2\2\2\u025a[\3\2\2\2\u025b\u0259\3\2\2\2\u025c")
        buf.write("\u025f\5t;\2\u025d\u025e\7\25\2\2\u025e\u0260\5t;\2\u025f")
        buf.write("\u025d\3\2\2\2\u025f\u0260\3\2\2\2\u0260]\3\2\2\2\u0261")
        buf.write("\u0265\5t;\2\u0262\u0266\7\25\2\2\u0263\u0264\7\27\2\2")
        buf.write("\u0264\u0266\5t;\2\u0265\u0262\3\2\2\2\u0265\u0263\3\2")
        buf.write("\2\2\u0265\u0266\3\2\2\2\u0266_\3\2\2\2\u0267\u026c\5")
        buf.write("^\60\2\u0268\u0269\7\b\2\2\u0269\u026b\5^\60\2\u026a\u0268")
        buf.write("\3\2\2\2\u026b\u026e\3\2\2\2\u026c\u026a\3\2\2\2\u026c")
        buf.write("\u026d\3\2\2\2\u026d\u0270\3\2\2\2\u026e\u026c\3\2\2\2")
        buf.write("\u026f\u0271\7\b\2\2\u0270\u026f\3\2\2\2\u0270\u0271\3")
        buf.write("\2\2\2\u0271a\3\2\2\2\u0272\u0273\5t;\2\u0273\u0274\7")
        buf.write("\25\2\2\u0274\u0275\5t;\2\u0275\u027e\5\36\20\2\u0276")
        buf.write("\u0277\79\2\2\u0277\u0278\5t;\2\u0278\u0279\7\25\2\2\u0279")
        buf.write("\u027a\5t;\2\u027a\u027b\5\36\20\2\u027b\u027d\3\2\2\2")
        buf.write("\u027c\u0276\3\2\2\2\u027d\u0280\3\2\2\2\u027e\u027c\3")
        buf.write("\2\2\2\u027e\u027f\3\2\2\2\u027f\u0281\3\2\2\2\u0280\u027e")
        buf.write("\3\2\2\2\u0281\u0282\7:\2\2\u0282\u0283\7\25\2\2\u0283")
        buf.write("\u0284\5t;\2\u0284c\3\2\2\2\u0285\u0286\t\b\2\2\u0286")
        buf.write("e\3\2\2\2\u0287\u0293\5(\25\2\u0288\u0293\7X\2\2\u0289")
        buf.write("\u0293\5d\63\2\u028a\u0291\5\30\r\2\u028b\u0291\7\n\2")
        buf.write("\2\u028c\u0291\7\13\2\2\u028d\u0291\7\16\2\2\u028e\u0291")
        buf.write("\7\17\2\2\u028f\u0291\7\27\2\2\u0290\u028a\3\2\2\2\u0290")
        buf.write("\u028b\3\2\2\2\u0290\u028c\3\2\2\2\u0290\u028d\3\2\2\2")
        buf.write("\u0290\u028e\3\2\2\2\u0290\u028f\3\2\2\2\u0291\u0293\3")
        buf.write("\2\2\2\u0292\u0287\3\2\2\2\u0292\u0288\3\2\2\2\u0292\u0289")
        buf.write("\3\2\2\2\u0292\u0290\3\2\2\2\u0293g\3\2\2\2\u0294\u0296")
        buf.write("\7W\2\2\u0295\u0297\5f\64\2\u0296\u0295\3\2\2\2\u0297")
        buf.write("\u0298\3\2\2\2\u0298\u0296\3\2\2\2\u0298\u0299\3\2\2\2")
        buf.write("\u0299\u029a\3\2\2\2\u029a\u029b\7W\2\2\u029b\u029f\3")
        buf.write("\2\2\2\u029c\u029f\5(\25\2\u029d\u029f\7X\2\2\u029e\u0294")
        buf.write("\3\2\2\2\u029e\u029c\3\2\2\2\u029e\u029d\3\2\2\2\u029f")
        buf.write("i\3\2\2\2\u02a0\u02a2\7O\2\2\u02a1\u02a3\5h\65\2\u02a2")
        buf.write("\u02a1\3\2\2\2\u02a2\u02a3\3\2\2\2\u02a3\u02a4\3\2\2\2")
        buf.write("\u02a4\u02a5\7\25\2\2\u02a5\u02a6\5\u00dan\2\u02a6k\3")
        buf.write("\2\2\2\u02a7\u02a8\78\2\2\u02a8\u02a9\5b\62\2\u02a9m\3")
        buf.write("\2\2\2\u02aa\u02ab\7D\2\2\u02ab\u02ac\5b\62\2\u02aco\3")
        buf.write("\2\2\2\u02ad\u02ae\5t;\2\u02ae\u02af\7\26\2\2\u02af\u02b7")
        buf.write("\5\36\20\2\u02b0\u02b8\5h\65\2\u02b1\u02b2\7\16\2\2\u02b2")
        buf.write("\u02b3\7\25\2\2\u02b3\u02b4\3\2\2\2\u02b4\u02b5\5Z.\2")
        buf.write("\u02b5\u02b6\7\17\2\2\u02b6\u02b8\3\2\2\2\u02b7\u02b0")
        buf.write("\3\2\2\2\u02b7\u02b1\3\2\2\2\u02b8q\3\2\2\2\u02b9\u02ba")
        buf.write("\5\u00ccg\2\u02bas\3\2\2\2\u02bb\u02bd\7\32\2\2\u02bc")
        buf.write("\u02bb\3\2\2\2\u02bc\u02bd\3\2\2\2\u02bd\u02c4\3\2\2\2")
        buf.write("\u02be\u02c5\5j\66\2\u02bf\u02c5\5r:\2\u02c0\u02c5\5l")
        buf.write("\67\2\u02c1\u02c5\5n8\2\u02c2\u02c5\5\u0086D\2\u02c3\u02c5")
        buf.write("\5D#\2\u02c4\u02be\3\2\2\2\u02c4\u02bf\3\2\2\2\u02c4\u02c0")
        buf.write("\3\2\2\2\u02c4\u02c1\3\2\2\2\u02c4\u02c2\3\2\2\2\u02c4")
        buf.write("\u02c3\3\2\2\2\u02c5u\3\2\2\2\u02c6\u02c7\7X\2\2\u02c7")
        buf.write("w\3\2\2\2\u02c8\u02c9\7\25\2\2\u02c9\u02ca\5\u00dan\2")
        buf.write("\u02cay\3\2\2\2\u02cb\u02cc\7\62\2\2\u02cc\u02ce\5\36")
        buf.write("\20\2\u02cd\u02cf\5t;\2\u02ce\u02cd\3\2\2\2\u02ce\u02cf")
        buf.write("\3\2\2\2\u02cf{\3\2\2\2\u02d0\u02d1\7U\2\2\u02d1\u02d3")
        buf.write("\5\36\20\2\u02d2\u02d4\5t;\2\u02d3\u02d2\3\2\2\2\u02d3")
        buf.write("\u02d4\3\2\2\2\u02d4}\3\2\2\2\u02d5\u02d6\7@\2\2\u02d6")
        buf.write("\u02d8\5\36\20\2\u02d7\u02d9\5t;\2\u02d8\u02d7\3\2\2\2")
        buf.write("\u02d8\u02d9\3\2\2\2\u02d9\177\3\2\2\2\u02da\u02db\7?")
        buf.write("\2\2\u02db\u02dd\5\36\20\2\u02dc\u02de\5t;\2\u02dd\u02dc")
        buf.write("\3\2\2\2\u02dd\u02de\3\2\2\2\u02de\u0081\3\2\2\2\u02df")
        buf.write("\u02e0\7G\2\2\u02e0\u02e1\5\36\20\2\u02e1\u02e6\5t;\2")
        buf.write("\u02e2\u02e3\7\b\2\2\u02e3\u02e5\5t;\2\u02e4\u02e2\3\2")
        buf.write("\2\2\u02e5\u02e8\3\2\2\2\u02e6\u02e4\3\2\2\2\u02e6\u02e7")
        buf.write("\3\2\2\2\u02e7\u0083\3\2\2\2\u02e8\u02e6\3\2\2\2\u02e9")
        buf.write("\u02ea\7H\2\2\u02ea\u02eb\5v<\2\u02eb\u02ec\7G\2\2\u02ec")
        buf.write("\u02ed\5\36\20\2\u02ed\u02f2\5t;\2\u02ee\u02ef\7\b\2\2")
        buf.write("\u02ef\u02f1\5t;\2\u02f0\u02ee\3\2\2\2\u02f1\u02f4\3\2")
        buf.write("\2\2\u02f2\u02f0\3\2\2\2\u02f2\u02f3\3\2\2\2\u02f3\u0085")
        buf.write("\3\2\2\2\u02f4\u02f2\3\2\2\2\u02f5\u02f6\7\67\2\2\u02f6")
        buf.write("\u02f7\7X\2\2\u02f7\u02f8\5\u008cG\2\u02f8\u0087\3\2\2")
        buf.write("\2\u02f9\u02fa\7\67\2\2\u02fa\u02fc\5t;\2\u02fb\u02fd")
        buf.write("\7\25\2\2\u02fc\u02fb\3\2\2\2\u02fc\u02fd\3\2\2\2\u02fd")
        buf.write("\u0303\3\2\2\2\u02fe\u02ff\5\34\17\2\u02ff\u0300\5\u008c")
        buf.write("G\2\u0300\u0301\5\"\22\2\u0301\u0304\3\2\2\2\u0302\u0304")
        buf.write("\5\u008cG\2\u0303\u02fe\3\2\2\2\u0303\u0302\3\2\2\2\u0304")
        buf.write("\u0089\3\2\2\2\u0305\u0306\7\31\2\2\u0306\u0307\5Z.\2")
        buf.write("\u0307\u0308\7\25\2\2\u0308\u0309\5\u00dan\2\u0309\u008b")
        buf.write("\3\2\2\2\u030a\u030c\5\u008aF\2\u030b\u030a\3\2\2\2\u030c")
        buf.write("\u030d\3\2\2\2\u030d\u030b\3\2\2\2\u030d\u030e\3\2\2\2")
        buf.write("\u030e\u0316\3\2\2\2\u030f\u0310\79\2\2\u0310\u0311\5")
        buf.write("t;\2\u0311\u0312\7\25\2\2\u0312\u0313\5\u00dan\2\u0313")
        buf.write("\u0315\3\2\2\2\u0314\u030f\3\2\2\2\u0315\u0318\3\2\2\2")
        buf.write("\u0316\u0314\3\2\2\2\u0316\u0317\3\2\2\2\u0317\u031c\3")
        buf.write("\2\2\2\u0318\u0316\3\2\2\2\u0319\u031a\7:\2\2\u031a\u031b")
        buf.write("\7\25\2\2\u031b\u031d\5\u00dan\2\u031c\u0319\3\2\2\2\u031c")
        buf.write("\u031d\3\2\2\2\u031d\u008d\3\2\2\2\u031e\u0325\5D#\2\u031f")
        buf.write("\u0320\7\27\2\2\u0320\u0321\5\36\20\2\u0321\u0323\5t;")
        buf.write("\2\u0322\u0324\5x=\2\u0323\u0322\3\2\2\2\u0323\u0324\3")
        buf.write("\2\2\2\u0324\u0326\3\2\2\2\u0325\u031f\3\2\2\2\u0325\u0326")
        buf.write("\3\2\2\2\u0326\u008f\3\2\2\2\u0327\u0330\5z>\2\u0328\u0330")
        buf.write("\5|?\2\u0329\u0330\5~@\2\u032a\u0330\5\u0080A\2\u032b")
        buf.write("\u0330\5,\27\2\u032c\u0330\5\u0082B\2\u032d\u0330\5\u0084")
        buf.write("C\2\u032e\u0330\5\u008eH\2\u032f\u0327\3\2\2\2\u032f\u0328")
        buf.write("\3\2\2\2\u032f\u0329\3\2\2\2\u032f\u032a\3\2\2\2\u032f")
        buf.write("\u032b\3\2\2\2\u032f\u032c\3\2\2\2\u032f\u032d\3\2\2\2")
        buf.write("\u032f\u032e\3\2\2\2\u0330\u0091\3\2\2\2\u0331\u0332\5")
        buf.write("t;\2\u0332\u0333\7\25\2\2\u0333\u033b\5\u00dan\2\u0334")
        buf.write("\u0335\79\2\2\u0335\u0336\5t;\2\u0336\u0337\7\25\2\2\u0337")
        buf.write("\u0338\5\u00dan\2\u0338\u033a\3\2\2\2\u0339\u0334\3\2")
        buf.write("\2\2\u033a\u033d\3\2\2\2\u033b\u0339\3\2\2\2\u033b\u033c")
        buf.write("\3\2\2\2\u033c\u0341\3\2\2\2\u033d\u033b\3\2\2\2\u033e")
        buf.write("\u033f\7:\2\2\u033f\u0340\7\25\2\2\u0340\u0342\5\u00da")
        buf.write("n\2\u0341\u033e\3\2\2\2\u0341\u0342\3\2\2\2\u0342\u0093")
        buf.write("\3\2\2\2\u0343\u0345\5h\65\2\u0344\u0346\5\30\r\2\u0345")
        buf.write("\u0344\3\2\2\2\u0345\u0346\3\2\2\2\u0346\u0095\3\2\2\2")
        buf.write("\u0347\u034a\5h\65\2\u0348\u0349\7\26\2\2\u0349\u034b")
        buf.write("\5h\65\2\u034a\u0348\3\2\2\2\u034a\u034b\3\2\2\2\u034b")
        buf.write("\u034d\3\2\2\2\u034c\u034e\5\30\r\2\u034d\u034c\3\2\2")
        buf.write("\2\u034d\u034e\3\2\2\2\u034e\u0097\3\2\2\2\u034f\u0351")
        buf.write("\5\u0094K\2\u0350\u0352\5B\"\2\u0351\u0350\3\2\2\2\u0351")
        buf.write("\u0352\3\2\2\2\u0352\u0099\3\2\2\2\u0353\u0354\78\2\2")
        buf.write("\u0354\u0355\5\u0092J\2\u0355\u009b\3\2\2\2\u0356\u0357")
        buf.write("\7D\2\2\u0357\u0358\5\u0092J\2\u0358\u009d\3\2\2\2\u0359")
        buf.write("\u035a\7<\2\2\u035a\u035b\5t;\2\u035b\u035c\7\25\2\2\u035c")
        buf.write("\u035d\5\u00dan\2\u035d\u009f\3\2\2\2\u035e\u0363\5h\65")
        buf.write("\2\u035f\u0360\7\b\2\2\u0360\u0362\5h\65\2\u0361\u035f")
        buf.write("\3\2\2\2\u0362\u0365\3\2\2\2\u0363\u0361\3\2\2\2\u0363")
        buf.write("\u0364\3\2\2\2\u0364\u0368\3\2\2\2\u0365\u0363\3\2\2\2")
        buf.write("\u0366\u0367\7\25\2\2\u0367\u0369\5t;\2\u0368\u0366\3")
        buf.write("\2\2\2\u0368\u0369\3\2\2\2\u0369\u036e\3\2\2\2\u036a\u036b")
        buf.write("\7\27\2\2\u036b\u036c\5\36\20\2\u036c\u036d\5t;\2\u036d")
        buf.write("\u036f\3\2\2\2\u036e\u036a\3\2\2\2\u036e\u036f\3\2\2\2")
        buf.write("\u036f\u00a1\3\2\2\2\u0370\u0371\7\16\2\2\u0371\u037a")
        buf.write("\5\36\20\2\u0372\u0377\5\u00a0Q\2\u0373\u0374\t\t\2\2")
        buf.write("\u0374\u0376\5\u00a0Q\2\u0375\u0373\3\2\2\2\u0376\u0379")
        buf.write("\3\2\2\2\u0377\u0375\3\2\2\2\u0377\u0378\3\2\2\2\u0378")
        buf.write("\u037b\3\2\2\2\u0379\u0377\3\2\2\2\u037a\u0372\3\2\2\2")
        buf.write("\u037a\u037b\3\2\2\2\u037b\u037c\3\2\2\2\u037c\u037d\5")
        buf.write(" \21\2\u037d\u037e\7\17\2\2\u037e\u00a3\3\2\2\2\u037f")
        buf.write("\u0381\5\u0096L\2\u0380\u0382\5B\"\2\u0381\u0380\3\2\2")
        buf.write("\2\u0381\u0382\3\2\2\2\u0382\u00a5\3\2\2\2\u0383\u0386")
        buf.write("\5D#\2\u0384\u0386\5\u00b2Z\2\u0385\u0383\3\2\2\2\u0385")
        buf.write("\u0384\3\2\2\2\u0386\u00a7\3\2\2\2\u0387\u0388\7D\2\2")
        buf.write("\u0388\u0389\5t;\2\u0389\u038a\7\25\2\2\u038a\u0392\5")
        buf.write("\u00b0Y\2\u038b\u038c\79\2\2\u038c\u038d\5t;\2\u038d\u038e")
        buf.write("\7\25\2\2\u038e\u038f\5\u00b0Y\2\u038f\u0391\3\2\2\2\u0390")
        buf.write("\u038b\3\2\2\2\u0391\u0394\3\2\2\2\u0392\u0390\3\2\2\2")
        buf.write("\u0392\u0393\3\2\2\2\u0393\u0398\3\2\2\2\u0394\u0392\3")
        buf.write("\2\2\2\u0395\u0396\7:\2\2\u0396\u0397\7\25\2\2\u0397\u0399")
        buf.write("\5\u00b0Y\2\u0398\u0395\3\2\2\2\u0398\u0399\3\2\2\2\u0399")
        buf.write("\u00a9\3\2\2\2\u039a\u039b\7\31\2\2\u039b\u039c\5Z.\2")
        buf.write("\u039c\u039d\7\25\2\2\u039d\u039e\5\u00b0Y\2\u039e\u00ab")
        buf.write("\3\2\2\2\u039f\u03a3\5\u00aaV\2\u03a0\u03a2\5\u00aaV\2")
        buf.write("\u03a1\u03a0\3\2\2\2\u03a2\u03a5\3\2\2\2\u03a3\u03a1\3")
        buf.write("\2\2\2\u03a3\u03a4\3\2\2\2\u03a4\u03ad\3\2\2\2\u03a5\u03a3")
        buf.write("\3\2\2\2\u03a6\u03a7\79\2\2\u03a7\u03a8\5t;\2\u03a8\u03a9")
        buf.write("\7\25\2\2\u03a9\u03aa\5\u00b0Y\2\u03aa\u03ac\3\2\2\2\u03ab")
        buf.write("\u03a6\3\2\2\2\u03ac\u03af\3\2\2\2\u03ad\u03ab\3\2\2\2")
        buf.write("\u03ad\u03ae\3\2\2\2\u03ae\u03b3\3\2\2\2\u03af\u03ad\3")
        buf.write("\2\2\2\u03b0\u03b1\7:\2\2\u03b1\u03b2\7\25\2\2\u03b2\u03b4")
        buf.write("\5\u00b0Y\2\u03b3\u03b0\3\2\2\2\u03b3\u03b4\3\2\2\2\u03b4")
        buf.write("\u00ad\3\2\2\2\u03b5\u03b6\7\67\2\2\u03b6\u03b7\5\u0098")
        buf.write("M\2\u03b7\u03b8\7\25\2\2\u03b8\u03ba\5\64\33\2\u03b9\u03bb")
        buf.write("\7\25\2\2\u03ba\u03b9\3\2\2\2\u03ba\u03bb\3\2\2\2\u03bb")
        buf.write("\u03c1\3\2\2\2\u03bc\u03bd\5\34\17\2\u03bd\u03be\5\u00ac")
        buf.write("W\2\u03be\u03bf\5\"\22\2\u03bf\u03c2\3\2\2\2\u03c0\u03c2")
        buf.write("\5\u00acW\2\u03c1\u03bc\3\2\2\2\u03c1\u03c0\3\2\2\2\u03c2")
        buf.write("\u00af\3\2\2\2\u03c3\u03c5\5\34\17\2\u03c4\u03c6\5\u00b0")
        buf.write("Y\2\u03c5\u03c4\3\2\2\2\u03c6\u03c7\3\2\2\2\u03c7\u03c5")
        buf.write("\3\2\2\2\u03c7\u03c8\3\2\2\2\u03c8\u03c9\3\2\2\2\u03c9")
        buf.write("\u03ca\5\"\22\2\u03ca\u03d1\3\2\2\2\u03cb\u03d1\5\u00a8")
        buf.write("U\2\u03cc\u03d1\5\u00aeX\2\u03cd\u03d1\7Q\2\2\u03ce\u03d1")
        buf.write("\7U\2\2\u03cf\u03d1\5\u00bc_\2\u03d0\u03c3\3\2\2\2\u03d0")
        buf.write("\u03cb\3\2\2\2\u03d0\u03cc\3\2\2\2\u03d0\u03cd\3\2\2\2")
        buf.write("\u03d0\u03ce\3\2\2\2\u03d0\u03cf\3\2\2\2\u03d1\u00b1\3")
        buf.write("\2\2\2\u03d2\u03d4\7\22\2\2\u03d3\u03d5\5B\"\2\u03d4\u03d3")
        buf.write("\3\2\2\2\u03d4\u03d5\3\2\2\2\u03d5\u03d8\3\2\2\2\u03d6")
        buf.write("\u03d7\7\31\2\2\u03d7\u03d9\5\64\33\2\u03d8\u03d6\3\2")
        buf.write("\2\2\u03d8\u03d9\3\2\2\2\u03d9\u03da\3\2\2\2\u03da\u03db")
        buf.write("\5\u00b0Y\2\u03db\u00b3\3\2\2\2\u03dc\u03de\7\'\2\2\u03dd")
        buf.write("\u03dc\3\2\2\2\u03dd\u03de\3\2\2\2\u03de\u03df\3\2\2\2")
        buf.write("\u03df\u03e0\5h\65\2\u03e0\u00b5\3\2\2\2\u03e1\u03e6\5")
        buf.write("\u00b4[\2\u03e2\u03e3\7\b\2\2\u03e3\u03e5\5\u00b4[\2\u03e4")
        buf.write("\u03e2\3\2\2\2\u03e5\u03e8\3\2\2\2\u03e6\u03e4\3\2\2\2")
        buf.write("\u03e6\u03e7\3\2\2\2\u03e7\u03ea\3\2\2\2\u03e8\u03e6\3")
        buf.write("\2\2\2\u03e9\u03e1\3\2\2\2\u03e9\u03ea\3\2\2\2\u03ea\u03ec")
        buf.write("\3\2\2\2\u03eb\u03ed\5B\"\2\u03ec\u03eb\3\2\2\2\u03ec")
        buf.write("\u03ed\3\2\2\2\u03ed\u03f9\3\2\2\2\u03ee\u03f7\7\31\2")
        buf.write("\2\u03ef\u03f4\5\64\33\2\u03f0\u03f1\7\b\2\2\u03f1\u03f3")
        buf.write("\5\64\33\2\u03f2\u03f0\3\2\2\2\u03f3\u03f6\3\2\2\2\u03f4")
        buf.write("\u03f2\3\2\2\2\u03f4\u03f5\3\2\2\2\u03f5\u03f8\3\2\2\2")
        buf.write("\u03f6\u03f4\3\2\2\2\u03f7\u03ef\3\2\2\2\u03f7\u03f8\3")
        buf.write("\2\2\2\u03f8\u03fa\3\2\2\2\u03f9\u03ee\3\2\2\2\u03f9\u03fa")
        buf.write("\3\2\2\2\u03fa\u03fb\3\2\2\2\u03fb\u03fc\6\\\4\2\u03fc")
        buf.write("\u03fd\5\u00dan\2\u03fd\u00b7\3\2\2\2\u03fe\u0400\5\u00a4")
        buf.write("S\2\u03ff\u0401\5\u00a2R\2\u0400\u03ff\3\2\2\2\u0400\u0401")
        buf.write("\3\2\2\2\u0401\u0402\3\2\2\2\u0402\u0403\7\27\2\2\u0403")
        buf.write("\u0404\5\36\20\2\u0404\u0405\5\u00a6T\2\u0405\u0406\5")
        buf.write("\36\20\2\u0406\u00b9\3\2\2\2\u0407\u0408\7\n\2\2\u0408")
        buf.write("\u0409\5\36\20\2\u0409\u040e\5\u0098M\2\u040a\u040b\7")
        buf.write("\b\2\2\u040b\u040d\5\u0098M\2\u040c\u040a\3\2\2\2\u040d")
        buf.write("\u0410\3\2\2\2\u040e\u040c\3\2\2\2\u040e\u040f\3\2\2\2")
        buf.write("\u040f\u0411\3\2\2\2\u0410\u040e\3\2\2\2\u0411\u0412\5")
        buf.write(" \21\2\u0412\u0413\7\13\2\2\u0413\u0414\7\27\2\2\u0414")
        buf.write("\u0415\5\36\20\2\u0415\u0416\5t;\2\u0416\u00bb\3\2\2\2")
        buf.write("\u0417\u041c\5\u0098M\2\u0418\u0419\7\b\2\2\u0419\u041b")
        buf.write("\5\u0098M\2\u041a\u0418\3\2\2\2\u041b\u041e\3\2\2\2\u041c")
        buf.write("\u041a\3\2\2\2\u041c\u041d\3\2\2\2\u041d\u0420\3\2\2\2")
        buf.write("\u041e\u041c\3\2\2\2\u041f\u0421\7\b\2\2\u0420\u041f\3")
        buf.write("\2\2\2\u0420\u0421\3\2\2\2\u0421\u0426\3\2\2\2\u0422\u0423")
        buf.write("\7\25\2\2\u0423\u0424\5\36\20\2\u0424\u0425\5\64\33\2")
        buf.write("\u0425\u0427\3\2\2\2\u0426\u0422\3\2\2\2\u0426\u0427\3")
        buf.write("\2\2\2\u0427\u042c\3\2\2\2\u0428\u0429\7\27\2\2\u0429")
        buf.write("\u042a\5\36\20\2\u042a\u042b\5t;\2\u042b\u042d\3\2\2\2")
        buf.write("\u042c\u0428\3\2\2\2\u042c\u042d\3\2\2\2\u042d\u00bd\3")
        buf.write("\2\2\2\u042e\u0433\7X\2\2\u042f\u0430\7\b\2\2\u0430\u0432")
        buf.write("\7X\2\2\u0431\u042f\3\2\2\2\u0432\u0435\3\2\2\2\u0433")
        buf.write("\u0431\3\2\2\2\u0433\u0434\3\2\2\2\u0434\u0437\3\2\2\2")
        buf.write("\u0435\u0433\3\2\2\2\u0436\u0438\7\b\2\2\u0437\u0436\3")
        buf.write("\2\2\2\u0437\u0438\3\2\2\2\u0438\u0441\3\2\2\2\u0439\u043a")
        buf.write("\7\25\2\2\u043a\u043b\5\36\20\2\u043b\u043c\5\64\33\2")
        buf.write("\u043c\u0442\3\2\2\2\u043d\u043e\7\27\2\2\u043e\u043f")
        buf.write("\5\36\20\2\u043f\u0440\5t;\2\u0440\u0442\3\2\2\2\u0441")
        buf.write("\u0439\3\2\2\2\u0441\u043d\3\2\2\2\u0442\u00bf\3\2\2\2")
        buf.write("\u0443\u044c\7\n\2\2\u0444\u0449\5\u00bc_\2\u0445\u0446")
        buf.write("\t\t\2\2\u0446\u0448\5\u00bc_\2\u0447\u0445\3\2\2\2\u0448")
        buf.write("\u044b\3\2\2\2\u0449\u0447\3\2\2\2\u0449\u044a\3\2\2\2")
        buf.write("\u044a\u044d\3\2\2\2\u044b\u0449\3\2\2\2\u044c\u0444\3")
        buf.write("\2\2\2\u044c\u044d\3\2\2\2\u044d\u044e\3\2\2\2\u044e\u0458")
        buf.write("\7\13\2\2\u044f\u0454\5\u00bc_\2\u0450\u0451\t\t\2\2\u0451")
        buf.write("\u0453\5\u00bc_\2\u0452\u0450\3\2\2\2\u0453\u0456\3\2")
        buf.write("\2\2\u0454\u0452\3\2\2\2\u0454\u0455\3\2\2\2\u0455\u0458")
        buf.write("\3\2\2\2\u0456\u0454\3\2\2\2\u0457\u0443\3\2\2\2\u0457")
        buf.write("\u044f\3\2\2\2\u0458\u00c1\3\2\2\2\u0459\u045b\5\u00c0")
        buf.write("a\2\u045a\u0459\3\2\2\2\u045a\u045b\3\2\2\2\u045b\u0460")
        buf.write("\3\2\2\2\u045c\u045d\7\25\2\2\u045d\u045e\5\36\20\2\u045e")
        buf.write("\u045f\5\64\33\2\u045f\u0461\3\2\2\2\u0460\u045c\3\2\2")
        buf.write("\2\u0460\u0461\3\2\2\2\u0461\u00c3\3\2\2\2\u0462\u0463")
        buf.write("\7+\2\2\u0463\u0465\5\u00c2b\2\u0464\u0466\5B\"\2\u0465")
        buf.write("\u0464\3\2\2\2\u0465\u0466\3\2\2\2\u0466\u0469\3\2\2\2")
        buf.write("\u0467\u0468\7\27\2\2\u0468\u046a\5\u00dan\2\u0469\u0467")
        buf.write("\3\2\2\2\u0469\u046a\3\2\2\2\u046a\u046b\3\2\2\2\u046b")
        buf.write("\u046c\5\36\20\2\u046c\u00c5\3\2\2\2\u046d\u0470\5\u0098")
        buf.write("M\2\u046e\u046f\7\25\2\2\u046f\u0471\5\64\33\2\u0470\u046e")
        buf.write("\3\2\2\2\u0470\u0471\3\2\2\2\u0471\u0472\3\2\2\2\u0472")
        buf.write("\u0473\7\27\2\2\u0473\u0474\5\36\20\2\u0474\u0475\5t;")
        buf.write("\2\u0475\u0476\5\36\20\2\u0476\u00c7\3\2\2\2\u0477\u047a")
        buf.write("\5\u00ba^\2\u0478\u047a\5\u00be`\2\u0479\u0477\3\2\2\2")
        buf.write("\u0479\u0478\3\2\2\2\u047a\u047c\3\2\2\2\u047b\u047d\5")
        buf.write("x=\2\u047c\u047b\3\2\2\2\u047c\u047d\3\2\2\2\u047d\u047e")
        buf.write("\3\2\2\2\u047e\u047f\5\36\20\2\u047f\u00c9\3\2\2\2\u0480")
        buf.write("\u0485\5h\65\2\u0481\u0482\7\26\2\2\u0482\u0483\5\36\20")
        buf.write("\2\u0483\u0484\5h\65\2\u0484\u0486\3\2\2\2\u0485\u0481")
        buf.write("\3\2\2\2\u0485\u0486\3\2\2\2\u0486\u00cb\3\2\2\2\u0487")
        buf.write("\u0488\7>\2\2\u0488\u048d\5\u0098M\2\u0489\u048a\7\b\2")
        buf.write("\2\u048a\u048c\5\u0098M\2\u048b\u0489\3\2\2\2\u048c\u048f")
        buf.write("\3\2\2\2\u048d\u048b\3\2\2\2\u048d\u048e\3\2\2\2\u048e")
        buf.write("\u0490\3\2\2\2\u048f\u048d\3\2\2\2\u0490\u0491\7\30\2")
        buf.write("\2\u0491\u0492\5t;\2\u0492\u0493\7\25\2\2\u0493\u0494")
        buf.write("\5\u00dan\2\u0494\u00cd\3\2\2\2\u0495\u0497\7O\2\2\u0496")
        buf.write("\u0498\5h\65\2\u0497\u0496\3\2\2\2\u0497\u0498\3\2\2\2")
        buf.write("\u0498\u0499\3\2\2\2\u0499\u049a\7\25\2\2\u049a\u049b")
        buf.write("\5\u00dan\2\u049b\u00cf\3\2\2\2\u049c\u049d\5\36\20\2")
        buf.write("\u049d\u049f\5\u0094K\2\u049e\u04a0\5\u00a2R\2\u049f\u049e")
        buf.write("\3\2\2\2\u049f\u04a0\3\2\2\2\u04a0\u04a1\3\2\2\2\u04a1")
        buf.write("\u04a3\5\u00c2b\2\u04a2\u04a4\5B\"\2\u04a3\u04a2\3\2\2")
        buf.write("\2\u04a3\u04a4\3\2\2\2\u04a4\u04a7\3\2\2\2\u04a5\u04a6")
        buf.write("\7\27\2\2\u04a6\u04a8\5\u00dan\2\u04a7\u04a5\3\2\2\2\u04a7")
        buf.write("\u04a8\3\2\2\2\u04a8\u04a9\3\2\2\2\u04a9\u04aa\5\36\20")
        buf.write("\2\u04aa\u00d1\3\2\2\2\u04ab\u04b5\5\u00b8]\2\u04ac\u04ae")
        buf.write("\5\34\17\2\u04ad\u04af\5\u00b8]\2\u04ae\u04ad\3\2\2\2")
        buf.write("\u04af\u04b0\3\2\2\2\u04b0\u04ae\3\2\2\2\u04b0\u04b1\3")
        buf.write("\2\2\2\u04b1\u04b2\3\2\2\2\u04b2\u04b3\5\"\22\2\u04b3")
        buf.write("\u04b5\3\2\2\2\u04b4\u04ab\3\2\2\2\u04b4\u04ac\3\2\2\2")
        buf.write("\u04b5\u00d3\3\2\2\2\u04b6\u04c0\5\u00c6d\2\u04b7\u04b9")
        buf.write("\5\34\17\2\u04b8\u04ba\5\u00c6d\2\u04b9\u04b8\3\2\2\2")
        buf.write("\u04ba\u04bb\3\2\2\2\u04bb\u04b9\3\2\2\2\u04bb\u04bc\3")
        buf.write("\2\2\2\u04bc\u04bd\3\2\2\2\u04bd\u04be\5\"\22\2\u04be")
        buf.write("\u04c0\3\2\2\2\u04bf\u04b6\3\2\2\2\u04bf\u04b7\3\2\2\2")
        buf.write("\u04c0\u00d5\3\2\2\2\u04c1\u04cb\5\u00c8e\2\u04c2\u04c4")
        buf.write("\5\34\17\2\u04c3\u04c5\5\u00c8e\2\u04c4\u04c3\3\2\2\2")
        buf.write("\u04c5\u04c6\3\2\2\2\u04c6\u04c4\3\2\2\2\u04c6\u04c7\3")
        buf.write("\2\2\2\u04c7\u04c8\3\2\2\2\u04c8\u04c9\5\"\22\2\u04c9")
        buf.write("\u04cb\3\2\2\2\u04ca\u04c1\3\2\2\2\u04ca\u04c2\3\2\2\2")
        buf.write("\u04cb\u00d7\3\2\2\2\u04cc\u04de\5\u009aN\2\u04cd\u04de")
        buf.write("\5\u009cO\2\u04ce\u04de\5\u009eP\2\u04cf\u04de\5\u00cc")
        buf.write("g\2\u04d0\u04de\5\u00ceh\2\u04d1\u04d2\7+\2\2\u04d2\u04de")
        buf.write("\5\u00d0i\2\u04d3\u04d4\7P\2\2\u04d4\u04de\5\u00d0i\2")
        buf.write("\u04d5\u04d6\7A\2\2\u04d6\u04de\5\u00d0i\2\u04d7\u04d8")
        buf.write("\7\24\2\2\u04d8\u04de\5\u00d2j\2\u04d9\u04da\7)\2\2\u04da")
        buf.write("\u04de\5\u00d4k\2\u04db\u04dc\t\n\2\2\u04dc\u04de\5\u00d6")
        buf.write("l\2\u04dd\u04cc\3\2\2\2\u04dd\u04cd\3\2\2\2\u04dd\u04ce")
        buf.write("\3\2\2\2\u04dd\u04cf\3\2\2\2\u04dd\u04d0\3\2\2\2\u04dd")
        buf.write("\u04d1\3\2\2\2\u04dd\u04d3\3\2\2\2\u04dd\u04d5\3\2\2\2")
        buf.write("\u04dd\u04d7\3\2\2\2\u04dd\u04d9\3\2\2\2\u04dd\u04db\3")
        buf.write("\2\2\2\u04de\u00d9\3\2\2\2\u04df\u04e2\5\u00d8m\2\u04e0")
        buf.write("\u04e2\5\u0090I\2\u04e1\u04df\3\2\2\2\u04e1\u04e0\3\2")
        buf.write("\2\2\u04e2\u04ec\3\2\2\2\u04e3\u04e5\7\t\2\2\u04e4\u04e3")
        buf.write("\3\2\2\2\u04e4\u04e5\3\2\2\2\u04e5\u04e8\3\2\2\2\u04e6")
        buf.write("\u04e9\5\u00d8m\2\u04e7\u04e9\5\u0090I\2\u04e8\u04e6\3")
        buf.write("\2\2\2\u04e8\u04e7\3\2\2\2\u04e9\u04eb\3\2\2\2\u04ea\u04e4")
        buf.write("\3\2\2\2\u04eb\u04ee\3\2\2\2\u04ec\u04ea\3\2\2\2\u04ec")
        buf.write("\u04ed\3\2\2\2\u04ed\u050d\3\2\2\2\u04ee\u04ec\3\2\2\2")
        buf.write("\u04ef\u04f2\5\34\17\2\u04f0\u04f3\5\u00d8m\2\u04f1\u04f3")
        buf.write("\5\u0090I\2\u04f2\u04f0\3\2\2\2\u04f2\u04f1\3\2\2\2\u04f3")
        buf.write("\u04fd\3\2\2\2\u04f4\u04f6\7\t\2\2\u04f5\u04f4\3\2\2\2")
        buf.write("\u04f5\u04f6\3\2\2\2\u04f6\u04f9\3\2\2\2\u04f7\u04fa\5")
        buf.write("\u00d8m\2\u04f8\u04fa\5\u0090I\2\u04f9\u04f7\3\2\2\2\u04f9")
        buf.write("\u04f8\3\2\2\2\u04fa\u04fc\3\2\2\2\u04fb\u04f5\3\2\2\2")
        buf.write("\u04fc\u04ff\3\2\2\2\u04fd\u04fb\3\2\2\2\u04fd\u04fe\3")
        buf.write("\2\2\2\u04fe\u0500\3\2\2\2\u04ff\u04fd\3\2\2\2\u0500\u0501")
        buf.write("\5\"\22\2\u0501\u050d\3\2\2\2\u0502\u0509\5\u0090I\2\u0503")
        buf.write("\u0505\7\t\2\2\u0504\u0503\3\2\2\2\u0504\u0505\3\2\2\2")
        buf.write("\u0505\u0506\3\2\2\2\u0506\u0508\5\u0090I\2\u0507\u0504")
        buf.write("\3\2\2\2\u0508\u050b\3\2\2\2\u0509\u0507\3\2\2\2\u0509")
        buf.write("\u050a\3\2\2\2\u050a\u050d\3\2\2\2\u050b\u0509\3\2\2\2")
        buf.write("\u050c\u04e1\3\2\2\2\u050c\u04ef\3\2\2\2\u050c\u0502\3")
        buf.write("\2\2\2\u050d\u00db\3\2\2\2\u050e\u0513\5\u00dan\2\u050f")
        buf.write("\u0510\7\t\2\2\u0510\u0512\5\u00dan\2\u0511\u050f\3\2")
        buf.write("\2\2\u0512\u0515\3\2\2\2\u0513\u0511\3\2\2\2\u0513\u0514")
        buf.write("\3\2\2\2\u0514\u0517\3\2\2\2\u0515\u0513\3\2\2\2\u0516")
        buf.write("\u050e\3\2\2\2\u0516\u0517\3\2\2\2\u0517\u00dd\3\2\2\2")
        buf.write("\u0518\u0519\5\u00dco\2\u0519\u00df\3\2\2\2\u009d\u00e8")
        buf.write("\u00f4\u0109\u0110\u0113\u011d\u0124\u012b\u0130\u0134")
        buf.write("\u013a\u013f\u0143\u014d\u0152\u0156\u0159\u0163\u0166")
        buf.write("\u0168\u016a\u0173\u0177\u0181\u0185\u0194\u019a\u019e")
        buf.write("\u01a6\u01b0\u01b7\u01bd\u01c5\u01cc\u01d0\u01d2\u01d9")
        buf.write("\u01dd\u01e2\u01ed\u01f7\u0201\u020b\u0215\u021f\u0229")
        buf.write("\u0233\u023d\u0247\u0251\u0259\u025f\u0265\u026c\u0270")
        buf.write("\u027e\u0290\u0292\u0298\u029e\u02a2\u02b7\u02bc\u02c4")
        buf.write("\u02ce\u02d3\u02d8\u02dd\u02e6\u02f2\u02fc\u0303\u030d")
        buf.write("\u0316\u031c\u0323\u0325\u032f\u033b\u0341\u0345\u034a")
        buf.write("\u034d\u0351\u0363\u0368\u036e\u0377\u037a\u0381\u0385")
        buf.write("\u0392\u0398\u03a3\u03ad\u03b3\u03ba\u03c1\u03c7\u03d0")
        buf.write("\u03d4\u03d8\u03dd\u03e6\u03e9\u03ec\u03f4\u03f7\u03f9")
        buf.write("\u0400\u040e\u041c\u0420\u0426\u042c\u0433\u0437\u0441")
        buf.write("\u0449\u044c\u0454\u0457\u045a\u0460\u0465\u0469\u0470")
        buf.write("\u0479\u047c\u0485\u048d\u0497\u049f\u04a3\u04a7\u04b0")
        buf.write("\u04b4\u04bb\u04bf\u04c6\u04ca\u04dd\u04e1\u04e4\u04e8")
        buf.write("\u04ec\u04f2\u04f5\u04f9\u04fd\u0504\u0509\u050c\u0513")
        buf.write("\u0516")
        return buf.getvalue()


class m2_Parser ( Parser ):

    grammarFileName = "m2_Parser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "' '", "','", "';'", "'('", "')'", "'{'", 
                     "'}'", "'['", "']'", "'interface'", "'enum'", "'object'", 
                     "'concept'", "'type'", "':'", "'.'", "'='", "'in'", 
                     "'of'", "'not'", "'$'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'var'", "'let'", "'const'", "'bind'", "'proc'", "'static'", 
                     "'method'", "'func'", "'mixin'", "'end'", "'except'", 
                     "'return'", "'try'", "'raise'", "'finally'", "'out'", 
                     "'case'", "'if'", "'elif'", "'else'", "'do'", "'while'", 
                     "'iterator'", "'for'", "'continue'", "'break'", "'template'", 
                     "'tuple'", "'using'", "'when'", "'yield'", "'include'", 
                     "'import'", "'from'", "'as'", "'export'", "'ref'", 
                     "'ptr'", "'addr'", "'asm'", "'block'", "'macro'", "'nil'", 
                     "'cast'", "'converter'", "'defer'", "'discard'", "'distinct'", 
                     "'`'" ]

    symbolicNames = [ "<INVALID>", "DOCUMENTATION_COMMENT", "MULTILINE_COMMENT", 
                      "COMMENT", "UNCONDITIONAL_NEWLINE", "WS", "COMMA", 
                      "SEMI_COLON", "OPEN_PAREN", "CLOSE_PAREN", "OPEN_BRACE", 
                      "CLOSE_BRACE", "OPEN_BRACK", "CLOSE_BRACK", "INTERFACE", 
                      "ENUM", "OBJECT", "CONCEPT", "TYPE", "COLON", "DOT", 
                      "EQUALS", "IN", "OF", "NOT", "DOLLAR_SIGN", "OP0", 
                      "OP1", "OP2", "OP3", "OP4", "OP5", "OP6", "OP7", "OP8", 
                      "OP9", "OP10", "VARIABLE", "LET", "CONST", "BIND", 
                      "PROC", "STATIC", "METHOD", "FUNC", "MIXIN", "END", 
                      "EXCEPT", "RETURN", "TRY", "RAISE", "FINALLY", "OUT", 
                      "CASE", "IF", "ELIF", "ELSE", "DO", "WHILE", "ITERATOR", 
                      "FOR", "CONTINUE", "BREAK", "TEMPLATE", "TUPLE", "USING", 
                      "WHEN", "YIELD", "INCLUDE", "IMPORT", "FROM", "AS", 
                      "EXPORT", "REF", "PTR", "ADDR", "ASM", "BLOCK", "MACRO", 
                      "NIL", "CAST", "CONVERTER", "DEFER", "DISCARD", "DISTINCT", 
                      "SYM_HEADER", "IDENTIFIER", "INT_LIT", "INT8_LIT", 
                      "INT16_LIT", "INT32_LIT", "INT64_LIT", "UINT_LIT", 
                      "UINT8_LIT", "UINT16_LIT", "UINT32_LIT", "UINT64_LIT", 
                      "EXP", "FLOAT_LIT", "FLOAT32_LIT", "FLOAT64_LIT", 
                      "CHAR_LIT", "STR_LIT", "TRIPLESTR_LIT", "RSTR_LIT", 
                      "GENERALIZED_STR_LIT", "GENERALIZED_TRIPLESTR_LIT", 
                      "DEDENT", "EXIT", "USELESS_LINE", "USELSSS_INDENTS", 
                      "INDENT", "INDENTS_PASS", "ERROR_INDENT" ]

    RULE_op0 = 0
    RULE_op1 = 1
    RULE_op2 = 2
    RULE_op3 = 3
    RULE_op4 = 4
    RULE_op5 = 5
    RULE_op6 = 6
    RULE_op7 = 7
    RULE_op8 = 8
    RULE_op9 = 9
    RULE_op10 = 10
    RULE_operator = 11
    RULE_prefixOperator = 12
    RULE_ind = 13
    RULE_optInd = 14
    RULE_optPar = 15
    RULE_ded = 16
    RULE_typeKeyw = 17
    RULE_parKeyw = 18
    RULE_keyw = 19
    RULE_generalizedLit = 20
    RULE_pragmaStmt = 21
    RULE_par = 22
    RULE_tupleConstr = 23
    RULE_arrayConstr = 24
    RULE_typeDesc = 25
    RULE_indexExpr = 26
    RULE_indexExprList = 27
    RULE_primarySuffix = 28
    RULE_identOrLiteral = 29
    RULE_identGeneral = 30
    RULE_primary = 31
    RULE_pragma = 32
    RULE_simpleExpr = 33
    RULE_arrowExpr = 34
    RULE_assignExpr = 35
    RULE_orExpr = 36
    RULE_andExpr = 37
    RULE_cmpExpr = 38
    RULE_sliceExpr = 39
    RULE_ampExpr = 40
    RULE_plusExpr = 41
    RULE_mulExpr = 42
    RULE_dollarExpr = 43
    RULE_exprList = 44
    RULE_exprColonExpr = 45
    RULE_exprColonEqExpr = 46
    RULE_exprColonEqExprList = 47
    RULE_condExpr = 48
    RULE_literal = 49
    RULE_symbolBody = 50
    RULE_symbol = 51
    RULE_blockExpr = 52
    RULE_ifExpr = 53
    RULE_whenExpr = 54
    RULE_dotExpr = 55
    RULE_forExpr = 56
    RULE_expr = 57
    RULE_moduleName = 58
    RULE_colonBody = 59
    RULE_returnStmt = 60
    RULE_discardStmt = 61
    RULE_breakStmt = 62
    RULE_continueStmt = 63
    RULE_importStmt = 64
    RULE_fromStmt = 65
    RULE_caseExpr = 66
    RULE_caseStmt = 67
    RULE_ofBranch = 68
    RULE_ofBranches = 69
    RULE_exprStmt = 70
    RULE_simpleStmt = 71
    RULE_condStmt = 72
    RULE_identVis = 73
    RULE_identVisDot = 74
    RULE_identWithPragma = 75
    RULE_ifStmt = 76
    RULE_whenStmt = 77
    RULE_whileStmt = 78
    RULE_genericParam = 79
    RULE_genericParamList = 80
    RULE_identWithPragmaDot = 81
    RULE_typeDefAux = 82
    RULE_objectWhen = 83
    RULE_objectBranch = 84
    RULE_objectBranches = 85
    RULE_objectCase = 86
    RULE_objectPart = 87
    RULE_objectType = 88
    RULE_typeClassParam = 89
    RULE_typeClass = 90
    RULE_typeDef = 91
    RULE_varTuple = 92
    RULE_declColonEquals = 93
    RULE_identColonEquals = 94
    RULE_paramList = 95
    RULE_paramListColon = 96
    RULE_procExpr = 97
    RULE_constant = 98
    RULE_variable = 99
    RULE_qualifiedIdent = 100
    RULE_forStmt = 101
    RULE_blockStmt = 102
    RULE_routine = 103
    RULE_typeDefSection = 104
    RULE_constantSection = 105
    RULE_variableSection = 106
    RULE_complexStmt = 107
    RULE_stmt = 108
    RULE_module = 109
    RULE_start = 110

    ruleNames =  [ "op0", "op1", "op2", "op3", "op4", "op5", "op6", "op7", 
                   "op8", "op9", "op10", "operator", "prefixOperator", "ind", 
                   "optInd", "optPar", "ded", "typeKeyw", "parKeyw", "keyw", 
                   "generalizedLit", "pragmaStmt", "par", "tupleConstr", 
                   "arrayConstr", "typeDesc", "indexExpr", "indexExprList", 
                   "primarySuffix", "identOrLiteral", "identGeneral", "primary", 
                   "pragma", "simpleExpr", "arrowExpr", "assignExpr", "orExpr", 
                   "andExpr", "cmpExpr", "sliceExpr", "ampExpr", "plusExpr", 
                   "mulExpr", "dollarExpr", "exprList", "exprColonExpr", 
                   "exprColonEqExpr", "exprColonEqExprList", "condExpr", 
                   "literal", "symbolBody", "symbol", "blockExpr", "ifExpr", 
                   "whenExpr", "dotExpr", "forExpr", "expr", "moduleName", 
                   "colonBody", "returnStmt", "discardStmt", "breakStmt", 
                   "continueStmt", "importStmt", "fromStmt", "caseExpr", 
                   "caseStmt", "ofBranch", "ofBranches", "exprStmt", "simpleStmt", 
                   "condStmt", "identVis", "identVisDot", "identWithPragma", 
                   "ifStmt", "whenStmt", "whileStmt", "genericParam", "genericParamList", 
                   "identWithPragmaDot", "typeDefAux", "objectWhen", "objectBranch", 
                   "objectBranches", "objectCase", "objectPart", "objectType", 
                   "typeClassParam", "typeClass", "typeDef", "varTuple", 
                   "declColonEquals", "identColonEquals", "paramList", "paramListColon", 
                   "procExpr", "constant", "variable", "qualifiedIdent", 
                   "forStmt", "blockStmt", "routine", "typeDefSection", 
                   "constantSection", "variableSection", "complexStmt", 
                   "stmt", "module", "start" ]

    EOF = Token.EOF
    DOCUMENTATION_COMMENT=1
    MULTILINE_COMMENT=2
    COMMENT=3
    UNCONDITIONAL_NEWLINE=4
    WS=5
    COMMA=6
    SEMI_COLON=7
    OPEN_PAREN=8
    CLOSE_PAREN=9
    OPEN_BRACE=10
    CLOSE_BRACE=11
    OPEN_BRACK=12
    CLOSE_BRACK=13
    INTERFACE=14
    ENUM=15
    OBJECT=16
    CONCEPT=17
    TYPE=18
    COLON=19
    DOT=20
    EQUALS=21
    IN=22
    OF=23
    NOT=24
    DOLLAR_SIGN=25
    OP0=26
    OP1=27
    OP2=28
    OP3=29
    OP4=30
    OP5=31
    OP6=32
    OP7=33
    OP8=34
    OP9=35
    OP10=36
    VARIABLE=37
    LET=38
    CONST=39
    BIND=40
    PROC=41
    STATIC=42
    METHOD=43
    FUNC=44
    MIXIN=45
    END=46
    EXCEPT=47
    RETURN=48
    TRY=49
    RAISE=50
    FINALLY=51
    OUT=52
    CASE=53
    IF=54
    ELIF=55
    ELSE=56
    DO=57
    WHILE=58
    ITERATOR=59
    FOR=60
    CONTINUE=61
    BREAK=62
    TEMPLATE=63
    TUPLE=64
    USING=65
    WHEN=66
    YIELD=67
    INCLUDE=68
    IMPORT=69
    FROM=70
    AS=71
    EXPORT=72
    REF=73
    PTR=74
    ADDR=75
    ASM=76
    BLOCK=77
    MACRO=78
    NIL=79
    CAST=80
    CONVERTER=81
    DEFER=82
    DISCARD=83
    DISTINCT=84
    SYM_HEADER=85
    IDENTIFIER=86
    INT_LIT=87
    INT8_LIT=88
    INT16_LIT=89
    INT32_LIT=90
    INT64_LIT=91
    UINT_LIT=92
    UINT8_LIT=93
    UINT16_LIT=94
    UINT32_LIT=95
    UINT64_LIT=96
    EXP=97
    FLOAT_LIT=98
    FLOAT32_LIT=99
    FLOAT64_LIT=100
    CHAR_LIT=101
    STR_LIT=102
    TRIPLESTR_LIT=103
    RSTR_LIT=104
    GENERALIZED_STR_LIT=105
    GENERALIZED_TRIPLESTR_LIT=106
    DEDENT=107
    EXIT=108
    USELESS_LINE=109
    USELSSS_INDENTS=110
    INDENT=111
    INDENTS_PASS=112
    ERROR_INDENT=113

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None



    parKeyWList = [DISCARD, IF, WHILE, CASE, FOR, BLOCK, CONST, LET, WHEN, VARIABLE]
    literals = [INT_LIT, INT8_LIT, INT16_LIT , INT32_LIT , INT64_LIT, UINT_LIT , UINT8_LIT , UINT16_LIT , UINT32_LIT , UINT64_LIT, 
    FLOAT_LIT , FLOAT32_LIT , FLOAT64_LIT, STR_LIT , RSTR_LIT , TRIPLESTR_LIT, CHAR_LIT, NIL ]
    primarySuffixList = [SYM_HEADER, IDENTIFIER, TYPE] + literals



    class Op0Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OP0(self):
            return self.getToken(m2_Parser.OP0, 0)

        def getRuleIndex(self):
            return m2_Parser.RULE_op0

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOp0" ):
                listener.enterOp0(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOp0" ):
                listener.exitOp0(self)




    def op0(self):

        localctx = m2_Parser.Op0Context(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_op0)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 222
            self.match(m2_Parser.OP0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Op1Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OP1(self):
            return self.getToken(m2_Parser.OP1, 0)

        def EQUALS(self):
            return self.getToken(m2_Parser.EQUALS, 0)

        def getRuleIndex(self):
            return m2_Parser.RULE_op1

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOp1" ):
                listener.enterOp1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOp1" ):
                listener.exitOp1(self)




    def op1(self):

        localctx = m2_Parser.Op1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_op1)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 224
            _la = self._input.LA(1)
            if not(_la==m2_Parser.EQUALS or _la==m2_Parser.OP1):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Op2Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OP2(self):
            return self.getToken(m2_Parser.OP2, 0)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.COLON)
            else:
                return self.getToken(m2_Parser.COLON, i)

        def getRuleIndex(self):
            return m2_Parser.RULE_op2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOp2" ):
                listener.enterOp2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOp2" ):
                listener.exitOp2(self)




    def op2(self):

        localctx = m2_Parser.Op2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_op2)
        try:
            self.state = 230
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 226
                self.match(m2_Parser.OP2)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 227
                self.match(m2_Parser.COLON)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 228
                self.match(m2_Parser.COLON)
                self.state = 229
                self.match(m2_Parser.COLON)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Op3Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OP3(self):
            return self.getToken(m2_Parser.OP3, 0)

        def getRuleIndex(self):
            return m2_Parser.RULE_op3

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOp3" ):
                listener.enterOp3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOp3" ):
                listener.exitOp3(self)




    def op3(self):

        localctx = m2_Parser.Op3Context(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_op3)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 232
            self.match(m2_Parser.OP3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Op4Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OP4(self):
            return self.getToken(m2_Parser.OP4, 0)

        def getRuleIndex(self):
            return m2_Parser.RULE_op4

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOp4" ):
                listener.enterOp4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOp4" ):
                listener.exitOp4(self)




    def op4(self):

        localctx = m2_Parser.Op4Context(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_op4)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 234
            self.match(m2_Parser.OP4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Op5Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OP5(self):
            return self.getToken(m2_Parser.OP5, 0)

        def IN(self):
            return self.getToken(m2_Parser.IN, 0)

        def OF(self):
            return self.getToken(m2_Parser.OF, 0)

        def NOT(self):
            return self.getToken(m2_Parser.NOT, 0)

        def getRuleIndex(self):
            return m2_Parser.RULE_op5

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOp5" ):
                listener.enterOp5(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOp5" ):
                listener.exitOp5(self)




    def op5(self):

        localctx = m2_Parser.Op5Context(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_op5)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 236
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << m2_Parser.IN) | (1 << m2_Parser.OF) | (1 << m2_Parser.NOT) | (1 << m2_Parser.OP5))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Op6Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OP6(self):
            return self.getToken(m2_Parser.OP6, 0)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.DOT)
            else:
                return self.getToken(m2_Parser.DOT, i)

        def getRuleIndex(self):
            return m2_Parser.RULE_op6

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOp6" ):
                listener.enterOp6(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOp6" ):
                listener.exitOp6(self)




    def op6(self):

        localctx = m2_Parser.Op6Context(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_op6)
        try:
            self.state = 242
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 238
                self.match(m2_Parser.OP6)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 239
                self.match(m2_Parser.DOT)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 240
                self.match(m2_Parser.DOT)
                self.state = 241
                self.match(m2_Parser.DOT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Op7Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OP7(self):
            return self.getToken(m2_Parser.OP7, 0)

        def getRuleIndex(self):
            return m2_Parser.RULE_op7

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOp7" ):
                listener.enterOp7(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOp7" ):
                listener.exitOp7(self)




    def op7(self):

        localctx = m2_Parser.Op7Context(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_op7)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 244
            self.match(m2_Parser.OP7)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Op8Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OP8(self):
            return self.getToken(m2_Parser.OP8, 0)

        def getRuleIndex(self):
            return m2_Parser.RULE_op8

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOp8" ):
                listener.enterOp8(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOp8" ):
                listener.exitOp8(self)




    def op8(self):

        localctx = m2_Parser.Op8Context(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_op8)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 246
            self.match(m2_Parser.OP8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Op9Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OP9(self):
            return self.getToken(m2_Parser.OP9, 0)

        def getRuleIndex(self):
            return m2_Parser.RULE_op9

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOp9" ):
                listener.enterOp9(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOp9" ):
                listener.exitOp9(self)




    def op9(self):

        localctx = m2_Parser.Op9Context(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_op9)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 248
            self.match(m2_Parser.OP9)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Op10Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OP10(self):
            return self.getToken(m2_Parser.OP10, 0)

        def getRuleIndex(self):
            return m2_Parser.RULE_op10

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOp10" ):
                listener.enterOp10(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOp10" ):
                listener.exitOp10(self)




    def op10(self):

        localctx = m2_Parser.Op10Context(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_op10)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 250
            self.match(m2_Parser.OP10)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def op0(self):
            return self.getTypedRuleContext(m2_Parser.Op0Context,0)


        def op1(self):
            return self.getTypedRuleContext(m2_Parser.Op1Context,0)


        def op2(self):
            return self.getTypedRuleContext(m2_Parser.Op2Context,0)


        def op3(self):
            return self.getTypedRuleContext(m2_Parser.Op3Context,0)


        def op4(self):
            return self.getTypedRuleContext(m2_Parser.Op4Context,0)


        def op5(self):
            return self.getTypedRuleContext(m2_Parser.Op5Context,0)


        def op6(self):
            return self.getTypedRuleContext(m2_Parser.Op6Context,0)


        def op7(self):
            return self.getTypedRuleContext(m2_Parser.Op7Context,0)


        def op8(self):
            return self.getTypedRuleContext(m2_Parser.Op8Context,0)


        def op9(self):
            return self.getTypedRuleContext(m2_Parser.Op9Context,0)


        def op10(self):
            return self.getTypedRuleContext(m2_Parser.Op10Context,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperator" ):
                listener.enterOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperator" ):
                listener.exitOperator(self)




    def operator(self):

        localctx = m2_Parser.OperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_operator)
        try:
            self.state = 263
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [m2_Parser.OP0]:
                self.enterOuterAlt(localctx, 1)
                self.state = 252
                self.op0()
                pass
            elif token in [m2_Parser.EQUALS, m2_Parser.OP1]:
                self.enterOuterAlt(localctx, 2)
                self.state = 253
                self.op1()
                pass
            elif token in [m2_Parser.COLON, m2_Parser.OP2]:
                self.enterOuterAlt(localctx, 3)
                self.state = 254
                self.op2()
                pass
            elif token in [m2_Parser.OP3]:
                self.enterOuterAlt(localctx, 4)
                self.state = 255
                self.op3()
                pass
            elif token in [m2_Parser.OP4]:
                self.enterOuterAlt(localctx, 5)
                self.state = 256
                self.op4()
                pass
            elif token in [m2_Parser.IN, m2_Parser.OF, m2_Parser.NOT, m2_Parser.OP5]:
                self.enterOuterAlt(localctx, 6)
                self.state = 257
                self.op5()
                pass
            elif token in [m2_Parser.DOT, m2_Parser.OP6]:
                self.enterOuterAlt(localctx, 7)
                self.state = 258
                self.op6()
                pass
            elif token in [m2_Parser.OP7]:
                self.enterOuterAlt(localctx, 8)
                self.state = 259
                self.op7()
                pass
            elif token in [m2_Parser.OP8]:
                self.enterOuterAlt(localctx, 9)
                self.state = 260
                self.op8()
                pass
            elif token in [m2_Parser.OP9]:
                self.enterOuterAlt(localctx, 10)
                self.state = 261
                self.op9()
                pass
            elif token in [m2_Parser.OP10]:
                self.enterOuterAlt(localctx, 11)
                self.state = 262
                self.op10()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrefixOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def operator(self):
            return self.getTypedRuleContext(m2_Parser.OperatorContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_prefixOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrefixOperator" ):
                listener.enterPrefixOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrefixOperator" ):
                listener.exitPrefixOperator(self)




    def prefixOperator(self):

        localctx = m2_Parser.PrefixOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_prefixOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 265
            self.operator()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INDENT(self):
            return self.getToken(m2_Parser.INDENT, 0)

        def getRuleIndex(self):
            return m2_Parser.RULE_ind

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInd" ):
                listener.enterInd(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInd" ):
                listener.exitInd(self)




    def ind(self):

        localctx = m2_Parser.IndContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_ind)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 267
            self.match(m2_Parser.INDENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptIndContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ind(self):
            return self.getTypedRuleContext(m2_Parser.IndContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_optInd

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptInd" ):
                listener.enterOptInd(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptInd" ):
                listener.exitOptInd(self)




    def optInd(self):

        localctx = m2_Parser.OptIndContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_optInd)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 270
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
            if la_ == 1:
                self.state = 269
                self.ind()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptParContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ind(self):
            return self.getTypedRuleContext(m2_Parser.IndContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_optPar

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptPar" ):
                listener.enterOptPar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptPar" ):
                listener.exitOptPar(self)




    def optPar(self):

        localctx = m2_Parser.OptParContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_optPar)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 273
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==m2_Parser.INDENT:
                self.state = 272
                self.ind()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DedContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEDENT(self):
            return self.getToken(m2_Parser.DEDENT, 0)

        def EOF(self):
            return self.getToken(m2_Parser.EOF, 0)

        def getRuleIndex(self):
            return m2_Parser.RULE_ded

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDed" ):
                listener.enterDed(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDed" ):
                listener.exitDed(self)




    def ded(self):

        localctx = m2_Parser.DedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_ded)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 275
            _la = self._input.LA(1)
            if not(_la==m2_Parser.EOF or _la==m2_Parser.DEDENT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeKeywContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VARIABLE(self):
            return self.getToken(m2_Parser.VARIABLE, 0)

        def REF(self):
            return self.getToken(m2_Parser.REF, 0)

        def TUPLE(self):
            return self.getToken(m2_Parser.TUPLE, 0)

        def PROC(self):
            return self.getToken(m2_Parser.PROC, 0)

        def getRuleIndex(self):
            return m2_Parser.RULE_typeKeyw

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeKeyw" ):
                listener.enterTypeKeyw(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeKeyw" ):
                listener.exitTypeKeyw(self)




    def typeKeyw(self):

        localctx = m2_Parser.TypeKeywContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_typeKeyw)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 277
            _la = self._input.LA(1)
            if not(((((_la - 37)) & ~0x3f) == 0 and ((1 << (_la - 37)) & ((1 << (m2_Parser.VARIABLE - 37)) | (1 << (m2_Parser.PROC - 37)) | (1 << (m2_Parser.TUPLE - 37)) | (1 << (m2_Parser.REF - 37)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParKeywContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DISCARD(self):
            return self.getToken(m2_Parser.DISCARD, 0)

        def IF(self):
            return self.getToken(m2_Parser.IF, 0)

        def WHILE(self):
            return self.getToken(m2_Parser.WHILE, 0)

        def CASE(self):
            return self.getToken(m2_Parser.CASE, 0)

        def FOR(self):
            return self.getToken(m2_Parser.FOR, 0)

        def BLOCK(self):
            return self.getToken(m2_Parser.BLOCK, 0)

        def CONST(self):
            return self.getToken(m2_Parser.CONST, 0)

        def LET(self):
            return self.getToken(m2_Parser.LET, 0)

        def WHEN(self):
            return self.getToken(m2_Parser.WHEN, 0)

        def VARIABLE(self):
            return self.getToken(m2_Parser.VARIABLE, 0)

        def getRuleIndex(self):
            return m2_Parser.RULE_parKeyw

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParKeyw" ):
                listener.enterParKeyw(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParKeyw" ):
                listener.exitParKeyw(self)




    def parKeyw(self):

        localctx = m2_Parser.ParKeywContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_parKeyw)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 279
            _la = self._input.LA(1)
            if not(((((_la - 37)) & ~0x3f) == 0 and ((1 << (_la - 37)) & ((1 << (m2_Parser.VARIABLE - 37)) | (1 << (m2_Parser.LET - 37)) | (1 << (m2_Parser.CONST - 37)) | (1 << (m2_Parser.CASE - 37)) | (1 << (m2_Parser.IF - 37)) | (1 << (m2_Parser.WHILE - 37)) | (1 << (m2_Parser.FOR - 37)) | (1 << (m2_Parser.WHEN - 37)) | (1 << (m2_Parser.BLOCK - 37)) | (1 << (m2_Parser.DISCARD - 37)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeywContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeKeyw(self):
            return self.getTypedRuleContext(m2_Parser.TypeKeywContext,0)


        def parKeyw(self):
            return self.getTypedRuleContext(m2_Parser.ParKeywContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_keyw

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyw" ):
                listener.enterKeyw(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyw" ):
                listener.exitKeyw(self)




    def keyw(self):

        localctx = m2_Parser.KeywContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_keyw)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 283
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.state = 281
                self.typeKeyw()
                pass

            elif la_ == 2:
                self.state = 282
                self.parKeyw()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GeneralizedLitContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GENERALIZED_STR_LIT(self):
            return self.getToken(m2_Parser.GENERALIZED_STR_LIT, 0)

        def GENERALIZED_TRIPLESTR_LIT(self):
            return self.getToken(m2_Parser.GENERALIZED_TRIPLESTR_LIT, 0)

        def getRuleIndex(self):
            return m2_Parser.RULE_generalizedLit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneralizedLit" ):
                listener.enterGeneralizedLit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneralizedLit" ):
                listener.exitGeneralizedLit(self)




    def generalizedLit(self):

        localctx = m2_Parser.GeneralizedLitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_generalizedLit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 285
            _la = self._input.LA(1)
            if not(_la==m2_Parser.GENERALIZED_STR_LIT or _la==m2_Parser.GENERALIZED_TRIPLESTR_LIT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PragmaStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pragma(self):
            return self.getTypedRuleContext(m2_Parser.PragmaContext,0)


        def COLON(self):
            return self.getToken(m2_Parser.COLON, 0)

        def stmt(self):
            return self.getTypedRuleContext(m2_Parser.StmtContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_pragmaStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragmaStmt" ):
                listener.enterPragmaStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragmaStmt" ):
                listener.exitPragmaStmt(self)




    def pragmaStmt(self):

        localctx = m2_Parser.PragmaStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_pragmaStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 287
            self.pragma()
            self.state = 290
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
            if la_ == 1:
                self.state = 288
                self.match(m2_Parser.COLON)
                self.state = 289
                self.stmt()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(m2_Parser.OPEN_PAREN, 0)

        def optInd(self):
            return self.getTypedRuleContext(m2_Parser.OptIndContext,0)


        def optPar(self):
            return self.getTypedRuleContext(m2_Parser.OptParContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(m2_Parser.CLOSE_PAREN, 0)

        def SEMI_COLON(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.SEMI_COLON)
            else:
                return self.getToken(m2_Parser.SEMI_COLON, i)

        def pragmaStmt(self):
            return self.getTypedRuleContext(m2_Parser.PragmaStmtContext,0)


        def simpleExpr(self):
            return self.getTypedRuleContext(m2_Parser.SimpleExprContext,0)


        def complexStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.ComplexStmtContext)
            else:
                return self.getTypedRuleContext(m2_Parser.ComplexStmtContext,i)


        def simpleStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.SimpleStmtContext)
            else:
                return self.getTypedRuleContext(m2_Parser.SimpleStmtContext,i)


        def EQUALS(self):
            return self.getToken(m2_Parser.EQUALS, 0)

        def expr(self):
            return self.getTypedRuleContext(m2_Parser.ExprContext,0)


        def COLON(self):
            return self.getToken(m2_Parser.COLON, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.COMMA)
            else:
                return self.getToken(m2_Parser.COMMA, i)

        def exprColonEqExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.ExprColonEqExprContext)
            else:
                return self.getTypedRuleContext(m2_Parser.ExprColonEqExprContext,i)


        def getRuleIndex(self):
            return m2_Parser.RULE_par

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPar" ):
                listener.enterPar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPar" ):
                listener.exitPar(self)




    def par(self):

        localctx = m2_Parser.ParContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_par)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 292
            self.match(m2_Parser.OPEN_PAREN)
            self.state = 293
            self.optInd()
            self.state = 360
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,20,self._ctx)
            if la_ == 1:
                self.state = 294
                if not self._input.LT(1).type in self.parKeyWList:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self._input.LT(1).type in self.parKeyWList")
                self.state = 297
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
                if la_ == 1:
                    self.state = 295
                    self.complexStmt()
                    pass

                elif la_ == 2:
                    self.state = 296
                    self.simpleStmt()
                    pass


                self.state = 306
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==m2_Parser.SEMI_COLON:
                    self.state = 299
                    self.match(m2_Parser.SEMI_COLON)
                    self.state = 302
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
                    if la_ == 1:
                        self.state = 300
                        self.complexStmt()
                        pass

                    elif la_ == 2:
                        self.state = 301
                        self.simpleStmt()
                        pass


                    self.state = 308
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 309
                self.match(m2_Parser.SEMI_COLON)
                self.state = 312
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
                if la_ == 1:
                    self.state = 310
                    self.complexStmt()
                    pass

                elif la_ == 2:
                    self.state = 311
                    self.simpleStmt()
                    pass


                self.state = 321
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==m2_Parser.SEMI_COLON:
                    self.state = 314
                    self.match(m2_Parser.SEMI_COLON)
                    self.state = 317
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
                    if la_ == 1:
                        self.state = 315
                        self.complexStmt()
                        pass

                    elif la_ == 2:
                        self.state = 316
                        self.simpleStmt()
                        pass


                    self.state = 323
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 324
                self.pragmaStmt()
                pass

            elif la_ == 4:
                self.state = 325
                self.simpleExpr()
                self.state = 358
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [m2_Parser.EQUALS]:
                    self.state = 326
                    self.match(m2_Parser.EQUALS)
                    self.state = 327
                    self.expr()
                    self.state = 343
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==m2_Parser.SEMI_COLON:
                        self.state = 328
                        self.match(m2_Parser.SEMI_COLON)
                        self.state = 331
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
                        if la_ == 1:
                            self.state = 329
                            self.complexStmt()
                            pass

                        elif la_ == 2:
                            self.state = 330
                            self.simpleStmt()
                            pass


                        self.state = 340
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==m2_Parser.SEMI_COLON:
                            self.state = 333
                            self.match(m2_Parser.SEMI_COLON)
                            self.state = 336
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
                            if la_ == 1:
                                self.state = 334
                                self.complexStmt()
                                pass

                            elif la_ == 2:
                                self.state = 335
                                self.simpleStmt()
                                pass


                            self.state = 342
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)



                    pass
                elif token in [m2_Parser.COLON]:
                    self.state = 345
                    self.match(m2_Parser.COLON)
                    self.state = 346
                    self.expr()
                    self.state = 356
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==m2_Parser.COMMA:
                        self.state = 347
                        self.match(m2_Parser.COMMA)
                        self.state = 348
                        self.exprColonEqExpr()
                        self.state = 353
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==m2_Parser.COMMA:
                            self.state = 349
                            self.match(m2_Parser.COMMA)
                            self.state = 350
                            self.exprColonEqExpr()
                            self.state = 355
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)



                    pass
                else:
                    raise NoViableAltException(self)

                pass


            self.state = 362
            self.optPar()
            self.state = 363
            self.match(m2_Parser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TupleConstrContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(m2_Parser.OPEN_PAREN, 0)

        def optInd(self):
            return self.getTypedRuleContext(m2_Parser.OptIndContext,0)


        def optPar(self):
            return self.getTypedRuleContext(m2_Parser.OptParContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(m2_Parser.CLOSE_PAREN, 0)

        def exprColonEqExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.ExprColonEqExprContext)
            else:
                return self.getTypedRuleContext(m2_Parser.ExprColonEqExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.COMMA)
            else:
                return self.getToken(m2_Parser.COMMA, i)

        def getRuleIndex(self):
            return m2_Parser.RULE_tupleConstr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTupleConstr" ):
                listener.enterTupleConstr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTupleConstr" ):
                listener.exitTupleConstr(self)




    def tupleConstr(self):

        localctx = m2_Parser.TupleConstrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_tupleConstr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 365
            self.match(m2_Parser.OPEN_PAREN)
            self.state = 366
            self.optInd()
            self.state = 373
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << m2_Parser.OPEN_PAREN) | (1 << m2_Parser.OPEN_BRACK) | (1 << m2_Parser.COLON) | (1 << m2_Parser.DOT) | (1 << m2_Parser.EQUALS) | (1 << m2_Parser.IN) | (1 << m2_Parser.OF) | (1 << m2_Parser.NOT) | (1 << m2_Parser.OP0) | (1 << m2_Parser.OP1) | (1 << m2_Parser.OP2) | (1 << m2_Parser.OP3) | (1 << m2_Parser.OP4) | (1 << m2_Parser.OP5) | (1 << m2_Parser.OP6) | (1 << m2_Parser.OP7) | (1 << m2_Parser.OP8) | (1 << m2_Parser.OP9) | (1 << m2_Parser.OP10) | (1 << m2_Parser.VARIABLE) | (1 << m2_Parser.LET) | (1 << m2_Parser.CONST) | (1 << m2_Parser.PROC) | (1 << m2_Parser.CASE) | (1 << m2_Parser.IF) | (1 << m2_Parser.WHILE) | (1 << m2_Parser.FOR))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (m2_Parser.TUPLE - 64)) | (1 << (m2_Parser.WHEN - 64)) | (1 << (m2_Parser.REF - 64)) | (1 << (m2_Parser.BLOCK - 64)) | (1 << (m2_Parser.NIL - 64)) | (1 << (m2_Parser.DISCARD - 64)) | (1 << (m2_Parser.SYM_HEADER - 64)) | (1 << (m2_Parser.IDENTIFIER - 64)) | (1 << (m2_Parser.INT_LIT - 64)) | (1 << (m2_Parser.INT8_LIT - 64)) | (1 << (m2_Parser.INT16_LIT - 64)) | (1 << (m2_Parser.INT32_LIT - 64)) | (1 << (m2_Parser.INT64_LIT - 64)) | (1 << (m2_Parser.UINT_LIT - 64)) | (1 << (m2_Parser.UINT8_LIT - 64)) | (1 << (m2_Parser.UINT16_LIT - 64)) | (1 << (m2_Parser.UINT32_LIT - 64)) | (1 << (m2_Parser.UINT64_LIT - 64)) | (1 << (m2_Parser.FLOAT_LIT - 64)) | (1 << (m2_Parser.FLOAT32_LIT - 64)) | (1 << (m2_Parser.FLOAT64_LIT - 64)) | (1 << (m2_Parser.CHAR_LIT - 64)) | (1 << (m2_Parser.STR_LIT - 64)) | (1 << (m2_Parser.TRIPLESTR_LIT - 64)) | (1 << (m2_Parser.RSTR_LIT - 64)) | (1 << (m2_Parser.GENERALIZED_STR_LIT - 64)) | (1 << (m2_Parser.GENERALIZED_TRIPLESTR_LIT - 64)))) != 0):
                self.state = 367
                self.exprColonEqExpr()
                self.state = 369
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==m2_Parser.COMMA:
                    self.state = 368
                    self.match(m2_Parser.COMMA)


                self.state = 375
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 376
            self.optPar()
            self.state = 377
            self.match(m2_Parser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayConstrContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACK(self):
            return self.getToken(m2_Parser.OPEN_BRACK, 0)

        def optInd(self):
            return self.getTypedRuleContext(m2_Parser.OptIndContext,0)


        def optPar(self):
            return self.getTypedRuleContext(m2_Parser.OptParContext,0)


        def CLOSE_BRACK(self):
            return self.getToken(m2_Parser.CLOSE_BRACK, 0)

        def exprColonEqExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.ExprColonEqExprContext)
            else:
                return self.getTypedRuleContext(m2_Parser.ExprColonEqExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.COMMA)
            else:
                return self.getToken(m2_Parser.COMMA, i)

        def getRuleIndex(self):
            return m2_Parser.RULE_arrayConstr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayConstr" ):
                listener.enterArrayConstr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayConstr" ):
                listener.exitArrayConstr(self)




    def arrayConstr(self):

        localctx = m2_Parser.ArrayConstrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_arrayConstr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 379
            self.match(m2_Parser.OPEN_BRACK)
            self.state = 380
            self.optInd()
            self.state = 387
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << m2_Parser.OPEN_PAREN) | (1 << m2_Parser.OPEN_BRACK) | (1 << m2_Parser.COLON) | (1 << m2_Parser.DOT) | (1 << m2_Parser.EQUALS) | (1 << m2_Parser.IN) | (1 << m2_Parser.OF) | (1 << m2_Parser.NOT) | (1 << m2_Parser.OP0) | (1 << m2_Parser.OP1) | (1 << m2_Parser.OP2) | (1 << m2_Parser.OP3) | (1 << m2_Parser.OP4) | (1 << m2_Parser.OP5) | (1 << m2_Parser.OP6) | (1 << m2_Parser.OP7) | (1 << m2_Parser.OP8) | (1 << m2_Parser.OP9) | (1 << m2_Parser.OP10) | (1 << m2_Parser.VARIABLE) | (1 << m2_Parser.LET) | (1 << m2_Parser.CONST) | (1 << m2_Parser.PROC) | (1 << m2_Parser.CASE) | (1 << m2_Parser.IF) | (1 << m2_Parser.WHILE) | (1 << m2_Parser.FOR))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (m2_Parser.TUPLE - 64)) | (1 << (m2_Parser.WHEN - 64)) | (1 << (m2_Parser.REF - 64)) | (1 << (m2_Parser.BLOCK - 64)) | (1 << (m2_Parser.NIL - 64)) | (1 << (m2_Parser.DISCARD - 64)) | (1 << (m2_Parser.SYM_HEADER - 64)) | (1 << (m2_Parser.IDENTIFIER - 64)) | (1 << (m2_Parser.INT_LIT - 64)) | (1 << (m2_Parser.INT8_LIT - 64)) | (1 << (m2_Parser.INT16_LIT - 64)) | (1 << (m2_Parser.INT32_LIT - 64)) | (1 << (m2_Parser.INT64_LIT - 64)) | (1 << (m2_Parser.UINT_LIT - 64)) | (1 << (m2_Parser.UINT8_LIT - 64)) | (1 << (m2_Parser.UINT16_LIT - 64)) | (1 << (m2_Parser.UINT32_LIT - 64)) | (1 << (m2_Parser.UINT64_LIT - 64)) | (1 << (m2_Parser.FLOAT_LIT - 64)) | (1 << (m2_Parser.FLOAT32_LIT - 64)) | (1 << (m2_Parser.FLOAT64_LIT - 64)) | (1 << (m2_Parser.CHAR_LIT - 64)) | (1 << (m2_Parser.STR_LIT - 64)) | (1 << (m2_Parser.TRIPLESTR_LIT - 64)) | (1 << (m2_Parser.RSTR_LIT - 64)) | (1 << (m2_Parser.GENERALIZED_STR_LIT - 64)) | (1 << (m2_Parser.GENERALIZED_TRIPLESTR_LIT - 64)))) != 0):
                self.state = 381
                self.exprColonEqExpr()
                self.state = 383
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==m2_Parser.COMMA:
                    self.state = 382
                    self.match(m2_Parser.COMMA)


                self.state = 389
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 390
            self.optPar()
            self.state = 391
            self.match(m2_Parser.CLOSE_BRACK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeDescContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleExpr(self):
            return self.getTypedRuleContext(m2_Parser.SimpleExprContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_typeDesc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeDesc" ):
                listener.enterTypeDesc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeDesc" ):
                listener.exitTypeDesc(self)




    def typeDesc(self):

        localctx = m2_Parser.TypeDescContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_typeDesc)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 393
            self.simpleExpr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(m2_Parser.ExprContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_indexExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexExpr" ):
                listener.enterIndexExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexExpr" ):
                listener.exitIndexExpr(self)




    def indexExpr(self):

        localctx = m2_Parser.IndexExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_indexExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 395
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexExprListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def indexExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.IndexExprContext)
            else:
                return self.getTypedRuleContext(m2_Parser.IndexExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.COMMA)
            else:
                return self.getToken(m2_Parser.COMMA, i)

        def getRuleIndex(self):
            return m2_Parser.RULE_indexExprList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexExprList" ):
                listener.enterIndexExprList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexExprList" ):
                listener.exitIndexExprList(self)




    def indexExprList(self):

        localctx = m2_Parser.IndexExprListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_indexExprList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 397
            self.indexExpr()
            self.state = 402
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==m2_Parser.COMMA:
                self.state = 398
                self.match(m2_Parser.COMMA)
                self.state = 399
                self.indexExpr()
                self.state = 404
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimarySuffixContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(m2_Parser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(m2_Parser.CLOSE_PAREN, 0)

        def exprColonEqExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.ExprColonEqExprContext)
            else:
                return self.getTypedRuleContext(m2_Parser.ExprColonEqExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.COMMA)
            else:
                return self.getToken(m2_Parser.COMMA, i)

        def DOT(self):
            return self.getToken(m2_Parser.DOT, 0)

        def optInd(self):
            return self.getTypedRuleContext(m2_Parser.OptIndContext,0)


        def symbol(self):
            return self.getTypedRuleContext(m2_Parser.SymbolContext,0)


        def generalizedLit(self):
            return self.getTypedRuleContext(m2_Parser.GeneralizedLitContext,0)


        def OPEN_BRACK(self):
            return self.getToken(m2_Parser.OPEN_BRACK, 0)

        def indexExprList(self):
            return self.getTypedRuleContext(m2_Parser.IndexExprListContext,0)


        def optPar(self):
            return self.getTypedRuleContext(m2_Parser.OptParContext,0)


        def CLOSE_BRACK(self):
            return self.getToken(m2_Parser.CLOSE_BRACK, 0)

        def expr(self):
            return self.getTypedRuleContext(m2_Parser.ExprContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_primarySuffix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimarySuffix" ):
                listener.enterPrimarySuffix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimarySuffix" ):
                listener.exitPrimarySuffix(self)




    def primarySuffix(self):

        localctx = m2_Parser.PrimarySuffixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_primarySuffix)
        self._la = 0 # Token type
        try:
            self.state = 430
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 405
                self.match(m2_Parser.OPEN_PAREN)
                self.state = 412
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << m2_Parser.OPEN_PAREN) | (1 << m2_Parser.OPEN_BRACK) | (1 << m2_Parser.COLON) | (1 << m2_Parser.DOT) | (1 << m2_Parser.EQUALS) | (1 << m2_Parser.IN) | (1 << m2_Parser.OF) | (1 << m2_Parser.NOT) | (1 << m2_Parser.OP0) | (1 << m2_Parser.OP1) | (1 << m2_Parser.OP2) | (1 << m2_Parser.OP3) | (1 << m2_Parser.OP4) | (1 << m2_Parser.OP5) | (1 << m2_Parser.OP6) | (1 << m2_Parser.OP7) | (1 << m2_Parser.OP8) | (1 << m2_Parser.OP9) | (1 << m2_Parser.OP10) | (1 << m2_Parser.VARIABLE) | (1 << m2_Parser.LET) | (1 << m2_Parser.CONST) | (1 << m2_Parser.PROC) | (1 << m2_Parser.CASE) | (1 << m2_Parser.IF) | (1 << m2_Parser.WHILE) | (1 << m2_Parser.FOR))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (m2_Parser.TUPLE - 64)) | (1 << (m2_Parser.WHEN - 64)) | (1 << (m2_Parser.REF - 64)) | (1 << (m2_Parser.BLOCK - 64)) | (1 << (m2_Parser.NIL - 64)) | (1 << (m2_Parser.DISCARD - 64)) | (1 << (m2_Parser.SYM_HEADER - 64)) | (1 << (m2_Parser.IDENTIFIER - 64)) | (1 << (m2_Parser.INT_LIT - 64)) | (1 << (m2_Parser.INT8_LIT - 64)) | (1 << (m2_Parser.INT16_LIT - 64)) | (1 << (m2_Parser.INT32_LIT - 64)) | (1 << (m2_Parser.INT64_LIT - 64)) | (1 << (m2_Parser.UINT_LIT - 64)) | (1 << (m2_Parser.UINT8_LIT - 64)) | (1 << (m2_Parser.UINT16_LIT - 64)) | (1 << (m2_Parser.UINT32_LIT - 64)) | (1 << (m2_Parser.UINT64_LIT - 64)) | (1 << (m2_Parser.FLOAT_LIT - 64)) | (1 << (m2_Parser.FLOAT32_LIT - 64)) | (1 << (m2_Parser.FLOAT64_LIT - 64)) | (1 << (m2_Parser.CHAR_LIT - 64)) | (1 << (m2_Parser.STR_LIT - 64)) | (1 << (m2_Parser.TRIPLESTR_LIT - 64)) | (1 << (m2_Parser.RSTR_LIT - 64)) | (1 << (m2_Parser.GENERALIZED_STR_LIT - 64)) | (1 << (m2_Parser.GENERALIZED_TRIPLESTR_LIT - 64)))) != 0):
                    self.state = 406
                    self.exprColonEqExpr()
                    self.state = 408
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==m2_Parser.COMMA:
                        self.state = 407
                        self.match(m2_Parser.COMMA)


                    self.state = 414
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 415
                self.match(m2_Parser.CLOSE_PAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 416
                self.match(m2_Parser.DOT)
                self.state = 417
                self.optInd()
                self.state = 418
                self.symbol()
                self.state = 420
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
                if la_ == 1:
                    self.state = 419
                    self.generalizedLit()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 422
                self.match(m2_Parser.OPEN_BRACK)
                self.state = 423
                self.optInd()
                self.state = 424
                self.indexExprList()
                self.state = 425
                self.optPar()
                self.state = 426
                self.match(m2_Parser.CLOSE_BRACK)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 428
                if not self._input.LT(1).type in self.primarySuffixList:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self._input.LT(1).type in self.primarySuffixList")
                self.state = 429
                self.expr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentOrLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def generalizedLit(self):
            return self.getTypedRuleContext(m2_Parser.GeneralizedLitContext,0)


        def symbol(self):
            return self.getTypedRuleContext(m2_Parser.SymbolContext,0)


        def literal(self):
            return self.getTypedRuleContext(m2_Parser.LiteralContext,0)


        def par(self):
            return self.getTypedRuleContext(m2_Parser.ParContext,0)


        def arrayConstr(self):
            return self.getTypedRuleContext(m2_Parser.ArrayConstrContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_identOrLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentOrLiteral" ):
                listener.enterIdentOrLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentOrLiteral" ):
                listener.exitIdentOrLiteral(self)




    def identOrLiteral(self):

        localctx = m2_Parser.IdentOrLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_identOrLiteral)
        try:
            self.state = 437
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [m2_Parser.GENERALIZED_STR_LIT, m2_Parser.GENERALIZED_TRIPLESTR_LIT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 432
                self.generalizedLit()
                pass
            elif token in [m2_Parser.VARIABLE, m2_Parser.LET, m2_Parser.CONST, m2_Parser.PROC, m2_Parser.CASE, m2_Parser.IF, m2_Parser.WHILE, m2_Parser.FOR, m2_Parser.TUPLE, m2_Parser.WHEN, m2_Parser.REF, m2_Parser.BLOCK, m2_Parser.DISCARD, m2_Parser.SYM_HEADER, m2_Parser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 433
                self.symbol()
                pass
            elif token in [m2_Parser.NIL, m2_Parser.INT_LIT, m2_Parser.INT8_LIT, m2_Parser.INT16_LIT, m2_Parser.INT32_LIT, m2_Parser.INT64_LIT, m2_Parser.UINT_LIT, m2_Parser.UINT8_LIT, m2_Parser.UINT16_LIT, m2_Parser.UINT32_LIT, m2_Parser.UINT64_LIT, m2_Parser.FLOAT_LIT, m2_Parser.FLOAT32_LIT, m2_Parser.FLOAT64_LIT, m2_Parser.CHAR_LIT, m2_Parser.STR_LIT, m2_Parser.TRIPLESTR_LIT, m2_Parser.RSTR_LIT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 434
                self.literal()
                pass
            elif token in [m2_Parser.OPEN_PAREN]:
                self.enterOuterAlt(localctx, 4)
                self.state = 435
                self.par()
                pass
            elif token in [m2_Parser.OPEN_BRACK]:
                self.enterOuterAlt(localctx, 5)
                self.state = 436
                self.arrayConstr()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentGeneralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def generalizedLit(self):
            return self.getTypedRuleContext(m2_Parser.GeneralizedLitContext,0)


        def symbol(self):
            return self.getTypedRuleContext(m2_Parser.SymbolContext,0)


        def par(self):
            return self.getTypedRuleContext(m2_Parser.ParContext,0)


        def arrayConstr(self):
            return self.getTypedRuleContext(m2_Parser.ArrayConstrContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_identGeneral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentGeneral" ):
                listener.enterIdentGeneral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentGeneral" ):
                listener.exitIdentGeneral(self)




    def identGeneral(self):

        localctx = m2_Parser.IdentGeneralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_identGeneral)
        try:
            self.state = 443
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [m2_Parser.GENERALIZED_STR_LIT, m2_Parser.GENERALIZED_TRIPLESTR_LIT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 439
                self.generalizedLit()
                pass
            elif token in [m2_Parser.VARIABLE, m2_Parser.LET, m2_Parser.CONST, m2_Parser.PROC, m2_Parser.CASE, m2_Parser.IF, m2_Parser.WHILE, m2_Parser.FOR, m2_Parser.TUPLE, m2_Parser.WHEN, m2_Parser.REF, m2_Parser.BLOCK, m2_Parser.DISCARD, m2_Parser.SYM_HEADER, m2_Parser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 440
                self.symbol()
                pass
            elif token in [m2_Parser.OPEN_PAREN]:
                self.enterOuterAlt(localctx, 3)
                self.state = 441
                self.par()
                pass
            elif token in [m2_Parser.OPEN_BRACK]:
                self.enterOuterAlt(localctx, 4)
                self.state = 442
                self.arrayConstr()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeKeyw(self):
            return self.getTypedRuleContext(m2_Parser.TypeKeywContext,0)


        def typeDesc(self):
            return self.getTypedRuleContext(m2_Parser.TypeDescContext,0)


        def identGeneral(self):
            return self.getTypedRuleContext(m2_Parser.IdentGeneralContext,0)


        def identOrLiteral(self):
            return self.getTypedRuleContext(m2_Parser.IdentOrLiteralContext,0)


        def prefixOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.PrefixOperatorContext)
            else:
                return self.getTypedRuleContext(m2_Parser.PrefixOperatorContext,i)


        def primarySuffix(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.PrimarySuffixContext)
            else:
                return self.getTypedRuleContext(m2_Parser.PrimarySuffixContext,i)


        def getRuleIndex(self):
            return m2_Parser.RULE_primary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimary" ):
                listener.enterPrimary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimary" ):
                listener.exitPrimary(self)




    def primary(self):

        localctx = m2_Parser.PrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_primary)
        self._la = 0 # Token type
        try:
            self.state = 464
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 445
                self.typeKeyw()
                self.state = 446
                self.typeDesc()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 451
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << m2_Parser.COLON) | (1 << m2_Parser.DOT) | (1 << m2_Parser.EQUALS) | (1 << m2_Parser.IN) | (1 << m2_Parser.OF) | (1 << m2_Parser.NOT) | (1 << m2_Parser.OP0) | (1 << m2_Parser.OP1) | (1 << m2_Parser.OP2) | (1 << m2_Parser.OP3) | (1 << m2_Parser.OP4) | (1 << m2_Parser.OP5) | (1 << m2_Parser.OP6) | (1 << m2_Parser.OP7) | (1 << m2_Parser.OP8) | (1 << m2_Parser.OP9) | (1 << m2_Parser.OP10))) != 0):
                    self.state = 448
                    self.prefixOperator()
                    self.state = 453
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 462
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
                if la_ == 1:
                    self.state = 454
                    self.identGeneral()
                    self.state = 458
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,33,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 455
                            self.primarySuffix() 
                        self.state = 460
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,33,self._ctx)

                    pass

                elif la_ == 2:
                    self.state = 461
                    self.identOrLiteral()
                    pass


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PragmaContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(m2_Parser.OPEN_BRACE, 0)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.DOT)
            else:
                return self.getToken(m2_Parser.DOT, i)

        def optInd(self):
            return self.getTypedRuleContext(m2_Parser.OptIndContext,0)


        def optPar(self):
            return self.getTypedRuleContext(m2_Parser.OptParContext,0)


        def CLOSE_BRACE(self):
            return self.getToken(m2_Parser.CLOSE_BRACE, 0)

        def exprColonExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.ExprColonExprContext)
            else:
                return self.getTypedRuleContext(m2_Parser.ExprColonExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.COMMA)
            else:
                return self.getToken(m2_Parser.COMMA, i)

        def getRuleIndex(self):
            return m2_Parser.RULE_pragma

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragma" ):
                listener.enterPragma(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragma" ):
                listener.exitPragma(self)




    def pragma(self):

        localctx = m2_Parser.PragmaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_pragma)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 466
            self.match(m2_Parser.OPEN_BRACE)
            self.state = 467
            self.match(m2_Parser.DOT)
            self.state = 468
            self.optInd()
            self.state = 475
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,37,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 469
                    self.exprColonExpr()
                    self.state = 471
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==m2_Parser.COMMA:
                        self.state = 470
                        self.match(m2_Parser.COMMA)

             
                self.state = 477
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,37,self._ctx)

            self.state = 478
            self.optPar()

            self.state = 480
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==m2_Parser.DOT:
                self.state = 479
                self.match(m2_Parser.DOT)


            self.state = 482
            self.match(m2_Parser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arrowExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.ArrowExprContext)
            else:
                return self.getTypedRuleContext(m2_Parser.ArrowExprContext,i)


        def OP0(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.OP0)
            else:
                return self.getToken(m2_Parser.OP0, i)

        def optInd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.OptIndContext)
            else:
                return self.getTypedRuleContext(m2_Parser.OptIndContext,i)


        def getRuleIndex(self):
            return m2_Parser.RULE_simpleExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleExpr" ):
                listener.enterSimpleExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleExpr" ):
                listener.exitSimpleExpr(self)




    def simpleExpr(self):

        localctx = m2_Parser.SimpleExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_simpleExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 484
            self.arrowExpr()
            self.state = 491
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,39,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 485
                    self.match(m2_Parser.OP0)
                    self.state = 486
                    self.optInd()
                    self.state = 487
                    self.arrowExpr() 
                self.state = 493
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,39,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrowExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.AssignExprContext)
            else:
                return self.getTypedRuleContext(m2_Parser.AssignExprContext,i)


        def OP1(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.OP1)
            else:
                return self.getToken(m2_Parser.OP1, i)

        def optInd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.OptIndContext)
            else:
                return self.getTypedRuleContext(m2_Parser.OptIndContext,i)


        def getRuleIndex(self):
            return m2_Parser.RULE_arrowExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrowExpr" ):
                listener.enterArrowExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrowExpr" ):
                listener.exitArrowExpr(self)




    def arrowExpr(self):

        localctx = m2_Parser.ArrowExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_arrowExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 494
            self.assignExpr()
            self.state = 501
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,40,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 495
                    self.match(m2_Parser.OP1)
                    self.state = 496
                    self.optInd()
                    self.state = 497
                    self.assignExpr() 
                self.state = 503
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,40,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def orExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.OrExprContext)
            else:
                return self.getTypedRuleContext(m2_Parser.OrExprContext,i)


        def OP2(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.OP2)
            else:
                return self.getToken(m2_Parser.OP2, i)

        def optInd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.OptIndContext)
            else:
                return self.getTypedRuleContext(m2_Parser.OptIndContext,i)


        def getRuleIndex(self):
            return m2_Parser.RULE_assignExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignExpr" ):
                listener.enterAssignExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignExpr" ):
                listener.exitAssignExpr(self)




    def assignExpr(self):

        localctx = m2_Parser.AssignExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_assignExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 504
            self.orExpr()
            self.state = 511
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,41,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 505
                    self.match(m2_Parser.OP2)
                    self.state = 506
                    self.optInd()
                    self.state = 507
                    self.orExpr() 
                self.state = 513
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,41,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def andExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.AndExprContext)
            else:
                return self.getTypedRuleContext(m2_Parser.AndExprContext,i)


        def OP3(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.OP3)
            else:
                return self.getToken(m2_Parser.OP3, i)

        def optInd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.OptIndContext)
            else:
                return self.getTypedRuleContext(m2_Parser.OptIndContext,i)


        def getRuleIndex(self):
            return m2_Parser.RULE_orExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrExpr" ):
                listener.enterOrExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrExpr" ):
                listener.exitOrExpr(self)




    def orExpr(self):

        localctx = m2_Parser.OrExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_orExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 514
            self.andExpr()
            self.state = 521
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,42,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 515
                    self.match(m2_Parser.OP3)
                    self.state = 516
                    self.optInd()
                    self.state = 517
                    self.andExpr() 
                self.state = 523
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,42,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AndExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def cmpExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.CmpExprContext)
            else:
                return self.getTypedRuleContext(m2_Parser.CmpExprContext,i)


        def OP4(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.OP4)
            else:
                return self.getToken(m2_Parser.OP4, i)

        def optInd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.OptIndContext)
            else:
                return self.getTypedRuleContext(m2_Parser.OptIndContext,i)


        def getRuleIndex(self):
            return m2_Parser.RULE_andExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAndExpr" ):
                listener.enterAndExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAndExpr" ):
                listener.exitAndExpr(self)




    def andExpr(self):

        localctx = m2_Parser.AndExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_andExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 524
            self.cmpExpr()
            self.state = 531
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,43,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 525
                    self.match(m2_Parser.OP4)
                    self.state = 526
                    self.optInd()
                    self.state = 527
                    self.cmpExpr() 
                self.state = 533
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,43,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CmpExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sliceExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.SliceExprContext)
            else:
                return self.getTypedRuleContext(m2_Parser.SliceExprContext,i)


        def OP5(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.OP5)
            else:
                return self.getToken(m2_Parser.OP5, i)

        def optInd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.OptIndContext)
            else:
                return self.getTypedRuleContext(m2_Parser.OptIndContext,i)


        def getRuleIndex(self):
            return m2_Parser.RULE_cmpExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCmpExpr" ):
                listener.enterCmpExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCmpExpr" ):
                listener.exitCmpExpr(self)




    def cmpExpr(self):

        localctx = m2_Parser.CmpExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_cmpExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 534
            self.sliceExpr()
            self.state = 541
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,44,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 535
                    self.match(m2_Parser.OP5)
                    self.state = 536
                    self.optInd()
                    self.state = 537
                    self.sliceExpr() 
                self.state = 543
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,44,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SliceExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ampExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.AmpExprContext)
            else:
                return self.getTypedRuleContext(m2_Parser.AmpExprContext,i)


        def OP6(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.OP6)
            else:
                return self.getToken(m2_Parser.OP6, i)

        def optInd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.OptIndContext)
            else:
                return self.getTypedRuleContext(m2_Parser.OptIndContext,i)


        def getRuleIndex(self):
            return m2_Parser.RULE_sliceExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSliceExpr" ):
                listener.enterSliceExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSliceExpr" ):
                listener.exitSliceExpr(self)




    def sliceExpr(self):

        localctx = m2_Parser.SliceExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_sliceExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 544
            self.ampExpr()
            self.state = 551
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,45,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 545
                    self.match(m2_Parser.OP6)
                    self.state = 546
                    self.optInd()
                    self.state = 547
                    self.ampExpr() 
                self.state = 553
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,45,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AmpExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def plusExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.PlusExprContext)
            else:
                return self.getTypedRuleContext(m2_Parser.PlusExprContext,i)


        def OP7(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.OP7)
            else:
                return self.getToken(m2_Parser.OP7, i)

        def optInd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.OptIndContext)
            else:
                return self.getTypedRuleContext(m2_Parser.OptIndContext,i)


        def getRuleIndex(self):
            return m2_Parser.RULE_ampExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAmpExpr" ):
                listener.enterAmpExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAmpExpr" ):
                listener.exitAmpExpr(self)




    def ampExpr(self):

        localctx = m2_Parser.AmpExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_ampExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 554
            self.plusExpr()
            self.state = 561
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,46,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 555
                    self.match(m2_Parser.OP7)
                    self.state = 556
                    self.optInd()
                    self.state = 557
                    self.plusExpr() 
                self.state = 563
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,46,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PlusExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mulExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.MulExprContext)
            else:
                return self.getTypedRuleContext(m2_Parser.MulExprContext,i)


        def OP8(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.OP8)
            else:
                return self.getToken(m2_Parser.OP8, i)

        def optInd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.OptIndContext)
            else:
                return self.getTypedRuleContext(m2_Parser.OptIndContext,i)


        def getRuleIndex(self):
            return m2_Parser.RULE_plusExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlusExpr" ):
                listener.enterPlusExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlusExpr" ):
                listener.exitPlusExpr(self)




    def plusExpr(self):

        localctx = m2_Parser.PlusExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_plusExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 564
            self.mulExpr()
            self.state = 571
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,47,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 565
                    self.match(m2_Parser.OP8)
                    self.state = 566
                    self.optInd()
                    self.state = 567
                    self.mulExpr() 
                self.state = 573
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,47,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MulExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dollarExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.DollarExprContext)
            else:
                return self.getTypedRuleContext(m2_Parser.DollarExprContext,i)


        def OP9(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.OP9)
            else:
                return self.getToken(m2_Parser.OP9, i)

        def optInd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.OptIndContext)
            else:
                return self.getTypedRuleContext(m2_Parser.OptIndContext,i)


        def getRuleIndex(self):
            return m2_Parser.RULE_mulExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMulExpr" ):
                listener.enterMulExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMulExpr" ):
                listener.exitMulExpr(self)




    def mulExpr(self):

        localctx = m2_Parser.MulExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_mulExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 574
            self.dollarExpr()
            self.state = 581
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,48,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 575
                    self.match(m2_Parser.OP9)
                    self.state = 576
                    self.optInd()
                    self.state = 577
                    self.dollarExpr() 
                self.state = 583
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,48,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DollarExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primary(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.PrimaryContext)
            else:
                return self.getTypedRuleContext(m2_Parser.PrimaryContext,i)


        def OP10(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.OP10)
            else:
                return self.getToken(m2_Parser.OP10, i)

        def optInd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.OptIndContext)
            else:
                return self.getTypedRuleContext(m2_Parser.OptIndContext,i)


        def getRuleIndex(self):
            return m2_Parser.RULE_dollarExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDollarExpr" ):
                listener.enterDollarExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDollarExpr" ):
                listener.exitDollarExpr(self)




    def dollarExpr(self):

        localctx = m2_Parser.DollarExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_dollarExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 584
            self.primary()
            self.state = 591
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,49,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 585
                    self.match(m2_Parser.OP10)
                    self.state = 586
                    self.optInd()
                    self.state = 587
                    self.primary() 
                self.state = 593
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,49,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.ExprContext)
            else:
                return self.getTypedRuleContext(m2_Parser.ExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.COMMA)
            else:
                return self.getToken(m2_Parser.COMMA, i)

        def getRuleIndex(self):
            return m2_Parser.RULE_exprList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprList" ):
                listener.enterExprList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprList" ):
                listener.exitExprList(self)




    def exprList(self):

        localctx = m2_Parser.ExprListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_exprList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 594
            self.expr()
            self.state = 599
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==m2_Parser.COMMA:
                self.state = 595
                self.match(m2_Parser.COMMA)
                self.state = 596
                self.expr()
                self.state = 601
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprColonExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.ExprContext)
            else:
                return self.getTypedRuleContext(m2_Parser.ExprContext,i)


        def COLON(self):
            return self.getToken(m2_Parser.COLON, 0)

        def getRuleIndex(self):
            return m2_Parser.RULE_exprColonExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprColonExpr" ):
                listener.enterExprColonExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprColonExpr" ):
                listener.exitExprColonExpr(self)




    def exprColonExpr(self):

        localctx = m2_Parser.ExprColonExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_exprColonExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 602
            self.expr()
            self.state = 605
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
            if la_ == 1:
                self.state = 603
                self.match(m2_Parser.COLON)
                self.state = 604
                self.expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprColonEqExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.ExprContext)
            else:
                return self.getTypedRuleContext(m2_Parser.ExprContext,i)


        def COLON(self):
            return self.getToken(m2_Parser.COLON, 0)

        def EQUALS(self):
            return self.getToken(m2_Parser.EQUALS, 0)

        def getRuleIndex(self):
            return m2_Parser.RULE_exprColonEqExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprColonEqExpr" ):
                listener.enterExprColonEqExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprColonEqExpr" ):
                listener.exitExprColonEqExpr(self)




    def exprColonEqExpr(self):

        localctx = m2_Parser.ExprColonEqExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_exprColonEqExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 607
            self.expr()
            self.state = 611
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
            if la_ == 1:
                self.state = 608
                self.match(m2_Parser.COLON)

            elif la_ == 2:
                self.state = 609
                self.match(m2_Parser.EQUALS)
                self.state = 610
                self.expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprColonEqExprListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exprColonEqExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.ExprColonEqExprContext)
            else:
                return self.getTypedRuleContext(m2_Parser.ExprColonEqExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.COMMA)
            else:
                return self.getToken(m2_Parser.COMMA, i)

        def getRuleIndex(self):
            return m2_Parser.RULE_exprColonEqExprList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprColonEqExprList" ):
                listener.enterExprColonEqExprList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprColonEqExprList" ):
                listener.exitExprColonEqExprList(self)




    def exprColonEqExprList(self):

        localctx = m2_Parser.ExprColonEqExprListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_exprColonEqExprList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 613
            self.exprColonEqExpr()
            self.state = 618
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,53,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 614
                    self.match(m2_Parser.COMMA)
                    self.state = 615
                    self.exprColonEqExpr() 
                self.state = 620
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,53,self._ctx)

            self.state = 622
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==m2_Parser.COMMA:
                self.state = 621
                self.match(m2_Parser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CondExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.ExprContext)
            else:
                return self.getTypedRuleContext(m2_Parser.ExprContext,i)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.COLON)
            else:
                return self.getToken(m2_Parser.COLON, i)

        def optInd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.OptIndContext)
            else:
                return self.getTypedRuleContext(m2_Parser.OptIndContext,i)


        def ELSE(self):
            return self.getToken(m2_Parser.ELSE, 0)

        def ELIF(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.ELIF)
            else:
                return self.getToken(m2_Parser.ELIF, i)

        def getRuleIndex(self):
            return m2_Parser.RULE_condExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondExpr" ):
                listener.enterCondExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondExpr" ):
                listener.exitCondExpr(self)




    def condExpr(self):

        localctx = m2_Parser.CondExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_condExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 624
            self.expr()
            self.state = 625
            self.match(m2_Parser.COLON)
            self.state = 626
            self.expr()
            self.state = 627
            self.optInd()
            self.state = 636
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==m2_Parser.ELIF:
                self.state = 628
                self.match(m2_Parser.ELIF)
                self.state = 629
                self.expr()
                self.state = 630
                self.match(m2_Parser.COLON)
                self.state = 631
                self.expr()
                self.state = 632
                self.optInd()
                self.state = 638
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 639
            self.match(m2_Parser.ELSE)
            self.state = 640
            self.match(m2_Parser.COLON)
            self.state = 641
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT_LIT(self):
            return self.getToken(m2_Parser.INT_LIT, 0)

        def INT8_LIT(self):
            return self.getToken(m2_Parser.INT8_LIT, 0)

        def INT16_LIT(self):
            return self.getToken(m2_Parser.INT16_LIT, 0)

        def INT32_LIT(self):
            return self.getToken(m2_Parser.INT32_LIT, 0)

        def INT64_LIT(self):
            return self.getToken(m2_Parser.INT64_LIT, 0)

        def UINT_LIT(self):
            return self.getToken(m2_Parser.UINT_LIT, 0)

        def UINT8_LIT(self):
            return self.getToken(m2_Parser.UINT8_LIT, 0)

        def UINT16_LIT(self):
            return self.getToken(m2_Parser.UINT16_LIT, 0)

        def UINT32_LIT(self):
            return self.getToken(m2_Parser.UINT32_LIT, 0)

        def UINT64_LIT(self):
            return self.getToken(m2_Parser.UINT64_LIT, 0)

        def FLOAT_LIT(self):
            return self.getToken(m2_Parser.FLOAT_LIT, 0)

        def FLOAT32_LIT(self):
            return self.getToken(m2_Parser.FLOAT32_LIT, 0)

        def FLOAT64_LIT(self):
            return self.getToken(m2_Parser.FLOAT64_LIT, 0)

        def STR_LIT(self):
            return self.getToken(m2_Parser.STR_LIT, 0)

        def RSTR_LIT(self):
            return self.getToken(m2_Parser.RSTR_LIT, 0)

        def TRIPLESTR_LIT(self):
            return self.getToken(m2_Parser.TRIPLESTR_LIT, 0)

        def CHAR_LIT(self):
            return self.getToken(m2_Parser.CHAR_LIT, 0)

        def NIL(self):
            return self.getToken(m2_Parser.NIL, 0)

        def getRuleIndex(self):
            return m2_Parser.RULE_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral" ):
                listener.enterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral" ):
                listener.exitLiteral(self)




    def literal(self):

        localctx = m2_Parser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 643
            _la = self._input.LA(1)
            if not(((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & ((1 << (m2_Parser.NIL - 79)) | (1 << (m2_Parser.INT_LIT - 79)) | (1 << (m2_Parser.INT8_LIT - 79)) | (1 << (m2_Parser.INT16_LIT - 79)) | (1 << (m2_Parser.INT32_LIT - 79)) | (1 << (m2_Parser.INT64_LIT - 79)) | (1 << (m2_Parser.UINT_LIT - 79)) | (1 << (m2_Parser.UINT8_LIT - 79)) | (1 << (m2_Parser.UINT16_LIT - 79)) | (1 << (m2_Parser.UINT32_LIT - 79)) | (1 << (m2_Parser.UINT64_LIT - 79)) | (1 << (m2_Parser.FLOAT_LIT - 79)) | (1 << (m2_Parser.FLOAT32_LIT - 79)) | (1 << (m2_Parser.FLOAT64_LIT - 79)) | (1 << (m2_Parser.CHAR_LIT - 79)) | (1 << (m2_Parser.STR_LIT - 79)) | (1 << (m2_Parser.TRIPLESTR_LIT - 79)) | (1 << (m2_Parser.RSTR_LIT - 79)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SymbolBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def keyw(self):
            return self.getTypedRuleContext(m2_Parser.KeywContext,0)


        def IDENTIFIER(self):
            return self.getToken(m2_Parser.IDENTIFIER, 0)

        def literal(self):
            return self.getTypedRuleContext(m2_Parser.LiteralContext,0)


        def operator(self):
            return self.getTypedRuleContext(m2_Parser.OperatorContext,0)


        def OPEN_PAREN(self):
            return self.getToken(m2_Parser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(m2_Parser.CLOSE_PAREN, 0)

        def OPEN_BRACK(self):
            return self.getToken(m2_Parser.OPEN_BRACK, 0)

        def CLOSE_BRACK(self):
            return self.getToken(m2_Parser.CLOSE_BRACK, 0)

        def EQUALS(self):
            return self.getToken(m2_Parser.EQUALS, 0)

        def getRuleIndex(self):
            return m2_Parser.RULE_symbolBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSymbolBody" ):
                listener.enterSymbolBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSymbolBody" ):
                listener.exitSymbolBody(self)




    def symbolBody(self):

        localctx = m2_Parser.SymbolBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_symbolBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 656
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [m2_Parser.VARIABLE, m2_Parser.LET, m2_Parser.CONST, m2_Parser.PROC, m2_Parser.CASE, m2_Parser.IF, m2_Parser.WHILE, m2_Parser.FOR, m2_Parser.TUPLE, m2_Parser.WHEN, m2_Parser.REF, m2_Parser.BLOCK, m2_Parser.DISCARD]:
                self.state = 645
                self.keyw()
                pass
            elif token in [m2_Parser.IDENTIFIER]:
                self.state = 646
                self.match(m2_Parser.IDENTIFIER)
                pass
            elif token in [m2_Parser.NIL, m2_Parser.INT_LIT, m2_Parser.INT8_LIT, m2_Parser.INT16_LIT, m2_Parser.INT32_LIT, m2_Parser.INT64_LIT, m2_Parser.UINT_LIT, m2_Parser.UINT8_LIT, m2_Parser.UINT16_LIT, m2_Parser.UINT32_LIT, m2_Parser.UINT64_LIT, m2_Parser.FLOAT_LIT, m2_Parser.FLOAT32_LIT, m2_Parser.FLOAT64_LIT, m2_Parser.CHAR_LIT, m2_Parser.STR_LIT, m2_Parser.TRIPLESTR_LIT, m2_Parser.RSTR_LIT]:
                self.state = 647
                self.literal()
                pass
            elif token in [m2_Parser.OPEN_PAREN, m2_Parser.CLOSE_PAREN, m2_Parser.OPEN_BRACK, m2_Parser.CLOSE_BRACK, m2_Parser.COLON, m2_Parser.DOT, m2_Parser.EQUALS, m2_Parser.IN, m2_Parser.OF, m2_Parser.NOT, m2_Parser.OP0, m2_Parser.OP1, m2_Parser.OP2, m2_Parser.OP3, m2_Parser.OP4, m2_Parser.OP5, m2_Parser.OP6, m2_Parser.OP7, m2_Parser.OP8, m2_Parser.OP9, m2_Parser.OP10]:
                self.state = 654
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,56,self._ctx)
                if la_ == 1:
                    self.state = 648
                    self.operator()
                    pass

                elif la_ == 2:
                    self.state = 649
                    self.match(m2_Parser.OPEN_PAREN)
                    pass

                elif la_ == 3:
                    self.state = 650
                    self.match(m2_Parser.CLOSE_PAREN)
                    pass

                elif la_ == 4:
                    self.state = 651
                    self.match(m2_Parser.OPEN_BRACK)
                    pass

                elif la_ == 5:
                    self.state = 652
                    self.match(m2_Parser.CLOSE_BRACK)
                    pass

                elif la_ == 6:
                    self.state = 653
                    self.match(m2_Parser.EQUALS)
                    pass


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SymbolContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SYM_HEADER(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.SYM_HEADER)
            else:
                return self.getToken(m2_Parser.SYM_HEADER, i)

        def symbolBody(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.SymbolBodyContext)
            else:
                return self.getTypedRuleContext(m2_Parser.SymbolBodyContext,i)


        def keyw(self):
            return self.getTypedRuleContext(m2_Parser.KeywContext,0)


        def IDENTIFIER(self):
            return self.getToken(m2_Parser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return m2_Parser.RULE_symbol

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSymbol" ):
                listener.enterSymbol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSymbol" ):
                listener.exitSymbol(self)




    def symbol(self):

        localctx = m2_Parser.SymbolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_symbol)
        self._la = 0 # Token type
        try:
            self.state = 668
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [m2_Parser.SYM_HEADER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 658
                self.match(m2_Parser.SYM_HEADER)
                self.state = 660 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 659
                    self.symbolBody()
                    self.state = 662 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << m2_Parser.OPEN_PAREN) | (1 << m2_Parser.CLOSE_PAREN) | (1 << m2_Parser.OPEN_BRACK) | (1 << m2_Parser.CLOSE_BRACK) | (1 << m2_Parser.COLON) | (1 << m2_Parser.DOT) | (1 << m2_Parser.EQUALS) | (1 << m2_Parser.IN) | (1 << m2_Parser.OF) | (1 << m2_Parser.NOT) | (1 << m2_Parser.OP0) | (1 << m2_Parser.OP1) | (1 << m2_Parser.OP2) | (1 << m2_Parser.OP3) | (1 << m2_Parser.OP4) | (1 << m2_Parser.OP5) | (1 << m2_Parser.OP6) | (1 << m2_Parser.OP7) | (1 << m2_Parser.OP8) | (1 << m2_Parser.OP9) | (1 << m2_Parser.OP10) | (1 << m2_Parser.VARIABLE) | (1 << m2_Parser.LET) | (1 << m2_Parser.CONST) | (1 << m2_Parser.PROC) | (1 << m2_Parser.CASE) | (1 << m2_Parser.IF) | (1 << m2_Parser.WHILE) | (1 << m2_Parser.FOR))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (m2_Parser.TUPLE - 64)) | (1 << (m2_Parser.WHEN - 64)) | (1 << (m2_Parser.REF - 64)) | (1 << (m2_Parser.BLOCK - 64)) | (1 << (m2_Parser.NIL - 64)) | (1 << (m2_Parser.DISCARD - 64)) | (1 << (m2_Parser.IDENTIFIER - 64)) | (1 << (m2_Parser.INT_LIT - 64)) | (1 << (m2_Parser.INT8_LIT - 64)) | (1 << (m2_Parser.INT16_LIT - 64)) | (1 << (m2_Parser.INT32_LIT - 64)) | (1 << (m2_Parser.INT64_LIT - 64)) | (1 << (m2_Parser.UINT_LIT - 64)) | (1 << (m2_Parser.UINT8_LIT - 64)) | (1 << (m2_Parser.UINT16_LIT - 64)) | (1 << (m2_Parser.UINT32_LIT - 64)) | (1 << (m2_Parser.UINT64_LIT - 64)) | (1 << (m2_Parser.FLOAT_LIT - 64)) | (1 << (m2_Parser.FLOAT32_LIT - 64)) | (1 << (m2_Parser.FLOAT64_LIT - 64)) | (1 << (m2_Parser.CHAR_LIT - 64)) | (1 << (m2_Parser.STR_LIT - 64)) | (1 << (m2_Parser.TRIPLESTR_LIT - 64)) | (1 << (m2_Parser.RSTR_LIT - 64)))) != 0)):
                        break

                self.state = 664
                self.match(m2_Parser.SYM_HEADER)
                pass
            elif token in [m2_Parser.VARIABLE, m2_Parser.LET, m2_Parser.CONST, m2_Parser.PROC, m2_Parser.CASE, m2_Parser.IF, m2_Parser.WHILE, m2_Parser.FOR, m2_Parser.TUPLE, m2_Parser.WHEN, m2_Parser.REF, m2_Parser.BLOCK, m2_Parser.DISCARD]:
                self.enterOuterAlt(localctx, 2)
                self.state = 666
                self.keyw()
                pass
            elif token in [m2_Parser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 3)
                self.state = 667
                self.match(m2_Parser.IDENTIFIER)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BLOCK(self):
            return self.getToken(m2_Parser.BLOCK, 0)

        def COLON(self):
            return self.getToken(m2_Parser.COLON, 0)

        def stmt(self):
            return self.getTypedRuleContext(m2_Parser.StmtContext,0)


        def symbol(self):
            return self.getTypedRuleContext(m2_Parser.SymbolContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_blockExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockExpr" ):
                listener.enterBlockExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockExpr" ):
                listener.exitBlockExpr(self)




    def blockExpr(self):

        localctx = m2_Parser.BlockExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_blockExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 670
            self.match(m2_Parser.BLOCK)
            self.state = 672
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 37)) & ~0x3f) == 0 and ((1 << (_la - 37)) & ((1 << (m2_Parser.VARIABLE - 37)) | (1 << (m2_Parser.LET - 37)) | (1 << (m2_Parser.CONST - 37)) | (1 << (m2_Parser.PROC - 37)) | (1 << (m2_Parser.CASE - 37)) | (1 << (m2_Parser.IF - 37)) | (1 << (m2_Parser.WHILE - 37)) | (1 << (m2_Parser.FOR - 37)) | (1 << (m2_Parser.TUPLE - 37)) | (1 << (m2_Parser.WHEN - 37)) | (1 << (m2_Parser.REF - 37)) | (1 << (m2_Parser.BLOCK - 37)) | (1 << (m2_Parser.DISCARD - 37)) | (1 << (m2_Parser.SYM_HEADER - 37)) | (1 << (m2_Parser.IDENTIFIER - 37)))) != 0):
                self.state = 671
                self.symbol()


            self.state = 674
            self.match(m2_Parser.COLON)
            self.state = 675
            self.stmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(m2_Parser.IF, 0)

        def condExpr(self):
            return self.getTypedRuleContext(m2_Parser.CondExprContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_ifExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfExpr" ):
                listener.enterIfExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfExpr" ):
                listener.exitIfExpr(self)




    def ifExpr(self):

        localctx = m2_Parser.IfExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_ifExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 677
            self.match(m2_Parser.IF)
            self.state = 678
            self.condExpr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhenExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(m2_Parser.WHEN, 0)

        def condExpr(self):
            return self.getTypedRuleContext(m2_Parser.CondExprContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_whenExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhenExpr" ):
                listener.enterWhenExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhenExpr" ):
                listener.exitWhenExpr(self)




    def whenExpr(self):

        localctx = m2_Parser.WhenExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_whenExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 680
            self.match(m2_Parser.WHEN)
            self.state = 681
            self.condExpr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DotExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(m2_Parser.ExprContext,0)


        def DOT(self):
            return self.getToken(m2_Parser.DOT, 0)

        def optInd(self):
            return self.getTypedRuleContext(m2_Parser.OptIndContext,0)


        def symbol(self):
            return self.getTypedRuleContext(m2_Parser.SymbolContext,0)


        def exprList(self):
            return self.getTypedRuleContext(m2_Parser.ExprListContext,0)


        def CLOSE_BRACK(self):
            return self.getToken(m2_Parser.CLOSE_BRACK, 0)

        def OPEN_BRACK(self):
            return self.getToken(m2_Parser.OPEN_BRACK, 0)

        def COLON(self):
            return self.getToken(m2_Parser.COLON, 0)

        def getRuleIndex(self):
            return m2_Parser.RULE_dotExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDotExpr" ):
                listener.enterDotExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDotExpr" ):
                listener.exitDotExpr(self)




    def dotExpr(self):

        localctx = m2_Parser.DotExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_dotExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 683
            self.expr()
            self.state = 684
            self.match(m2_Parser.DOT)
            self.state = 685
            self.optInd()
            self.state = 693
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [m2_Parser.VARIABLE, m2_Parser.LET, m2_Parser.CONST, m2_Parser.PROC, m2_Parser.CASE, m2_Parser.IF, m2_Parser.WHILE, m2_Parser.FOR, m2_Parser.TUPLE, m2_Parser.WHEN, m2_Parser.REF, m2_Parser.BLOCK, m2_Parser.DISCARD, m2_Parser.SYM_HEADER, m2_Parser.IDENTIFIER]:
                self.state = 686
                self.symbol()
                pass
            elif token in [m2_Parser.OPEN_BRACK]:
                self.state = 687
                self.match(m2_Parser.OPEN_BRACK)
                self.state = 688
                self.match(m2_Parser.COLON)
                self.state = 690
                self.exprList()
                self.state = 691
                self.match(m2_Parser.CLOSE_BRACK)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def forStmt(self):
            return self.getTypedRuleContext(m2_Parser.ForStmtContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_forExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForExpr" ):
                listener.enterForExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForExpr" ):
                listener.exitForExpr(self)




    def forExpr(self):

        localctx = m2_Parser.ForExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_forExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 695
            self.forStmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def blockExpr(self):
            return self.getTypedRuleContext(m2_Parser.BlockExprContext,0)


        def forExpr(self):
            return self.getTypedRuleContext(m2_Parser.ForExprContext,0)


        def ifExpr(self):
            return self.getTypedRuleContext(m2_Parser.IfExprContext,0)


        def whenExpr(self):
            return self.getTypedRuleContext(m2_Parser.WhenExprContext,0)


        def caseExpr(self):
            return self.getTypedRuleContext(m2_Parser.CaseExprContext,0)


        def simpleExpr(self):
            return self.getTypedRuleContext(m2_Parser.SimpleExprContext,0)


        def NOT(self):
            return self.getToken(m2_Parser.NOT, 0)

        def getRuleIndex(self):
            return m2_Parser.RULE_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr" ):
                listener.enterExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr" ):
                listener.exitExpr(self)




    def expr(self):

        localctx = m2_Parser.ExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 698
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
            if la_ == 1:
                self.state = 697
                self.match(m2_Parser.NOT)


            self.state = 706
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
            if la_ == 1:
                self.state = 700
                self.blockExpr()
                pass

            elif la_ == 2:
                self.state = 701
                self.forExpr()
                pass

            elif la_ == 3:
                self.state = 702
                self.ifExpr()
                pass

            elif la_ == 4:
                self.state = 703
                self.whenExpr()
                pass

            elif la_ == 5:
                self.state = 704
                self.caseExpr()
                pass

            elif la_ == 6:
                self.state = 705
                self.simpleExpr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModuleNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(m2_Parser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return m2_Parser.RULE_moduleName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleName" ):
                listener.enterModuleName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleName" ):
                listener.exitModuleName(self)




    def moduleName(self):

        localctx = m2_Parser.ModuleNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_moduleName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 708
            self.match(m2_Parser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColonBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(m2_Parser.COLON, 0)

        def stmt(self):
            return self.getTypedRuleContext(m2_Parser.StmtContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_colonBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColonBody" ):
                listener.enterColonBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColonBody" ):
                listener.exitColonBody(self)




    def colonBody(self):

        localctx = m2_Parser.ColonBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_colonBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 710
            self.match(m2_Parser.COLON)
            self.state = 711
            self.stmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(m2_Parser.RETURN, 0)

        def optInd(self):
            return self.getTypedRuleContext(m2_Parser.OptIndContext,0)


        def expr(self):
            return self.getTypedRuleContext(m2_Parser.ExprContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_returnStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnStmt" ):
                listener.enterReturnStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnStmt" ):
                listener.exitReturnStmt(self)




    def returnStmt(self):

        localctx = m2_Parser.ReturnStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_returnStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 713
            self.match(m2_Parser.RETURN)
            self.state = 714
            self.optInd()
            self.state = 716
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
            if la_ == 1:
                self.state = 715
                self.expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiscardStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DISCARD(self):
            return self.getToken(m2_Parser.DISCARD, 0)

        def optInd(self):
            return self.getTypedRuleContext(m2_Parser.OptIndContext,0)


        def expr(self):
            return self.getTypedRuleContext(m2_Parser.ExprContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_discardStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiscardStmt" ):
                listener.enterDiscardStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiscardStmt" ):
                listener.exitDiscardStmt(self)




    def discardStmt(self):

        localctx = m2_Parser.DiscardStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_discardStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 718
            self.match(m2_Parser.DISCARD)
            self.state = 719
            self.optInd()
            self.state = 721
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
            if la_ == 1:
                self.state = 720
                self.expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BreakStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BREAK(self):
            return self.getToken(m2_Parser.BREAK, 0)

        def optInd(self):
            return self.getTypedRuleContext(m2_Parser.OptIndContext,0)


        def expr(self):
            return self.getTypedRuleContext(m2_Parser.ExprContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_breakStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBreakStmt" ):
                listener.enterBreakStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBreakStmt" ):
                listener.exitBreakStmt(self)




    def breakStmt(self):

        localctx = m2_Parser.BreakStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_breakStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 723
            self.match(m2_Parser.BREAK)
            self.state = 724
            self.optInd()
            self.state = 726
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
            if la_ == 1:
                self.state = 725
                self.expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContinueStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTINUE(self):
            return self.getToken(m2_Parser.CONTINUE, 0)

        def optInd(self):
            return self.getTypedRuleContext(m2_Parser.OptIndContext,0)


        def expr(self):
            return self.getTypedRuleContext(m2_Parser.ExprContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_continueStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContinueStmt" ):
                listener.enterContinueStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContinueStmt" ):
                listener.exitContinueStmt(self)




    def continueStmt(self):

        localctx = m2_Parser.ContinueStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_continueStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 728
            self.match(m2_Parser.CONTINUE)
            self.state = 729
            self.optInd()
            self.state = 731
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,67,self._ctx)
            if la_ == 1:
                self.state = 730
                self.expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPORT(self):
            return self.getToken(m2_Parser.IMPORT, 0)

        def optInd(self):
            return self.getTypedRuleContext(m2_Parser.OptIndContext,0)


        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.ExprContext)
            else:
                return self.getTypedRuleContext(m2_Parser.ExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.COMMA)
            else:
                return self.getToken(m2_Parser.COMMA, i)

        def getRuleIndex(self):
            return m2_Parser.RULE_importStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportStmt" ):
                listener.enterImportStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportStmt" ):
                listener.exitImportStmt(self)




    def importStmt(self):

        localctx = m2_Parser.ImportStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_importStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 733
            self.match(m2_Parser.IMPORT)
            self.state = 734
            self.optInd()
            self.state = 735
            self.expr()
            self.state = 740
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,68,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 736
                    self.match(m2_Parser.COMMA)
                    self.state = 737
                    self.expr() 
                self.state = 742
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,68,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FromStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(m2_Parser.FROM, 0)

        def moduleName(self):
            return self.getTypedRuleContext(m2_Parser.ModuleNameContext,0)


        def IMPORT(self):
            return self.getToken(m2_Parser.IMPORT, 0)

        def optInd(self):
            return self.getTypedRuleContext(m2_Parser.OptIndContext,0)


        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.ExprContext)
            else:
                return self.getTypedRuleContext(m2_Parser.ExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.COMMA)
            else:
                return self.getToken(m2_Parser.COMMA, i)

        def getRuleIndex(self):
            return m2_Parser.RULE_fromStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFromStmt" ):
                listener.enterFromStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFromStmt" ):
                listener.exitFromStmt(self)




    def fromStmt(self):

        localctx = m2_Parser.FromStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_fromStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 743
            self.match(m2_Parser.FROM)
            self.state = 744
            self.moduleName()
            self.state = 745
            self.match(m2_Parser.IMPORT)
            self.state = 746
            self.optInd()
            self.state = 747
            self.expr()
            self.state = 752
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,69,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 748
                    self.match(m2_Parser.COMMA)
                    self.state = 749
                    self.expr() 
                self.state = 754
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,69,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CaseExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(m2_Parser.CASE, 0)

        def IDENTIFIER(self):
            return self.getToken(m2_Parser.IDENTIFIER, 0)

        def ofBranches(self):
            return self.getTypedRuleContext(m2_Parser.OfBranchesContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_caseExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseExpr" ):
                listener.enterCaseExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseExpr" ):
                listener.exitCaseExpr(self)




    def caseExpr(self):

        localctx = m2_Parser.CaseExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_caseExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 755
            self.match(m2_Parser.CASE)
            self.state = 756
            self.match(m2_Parser.IDENTIFIER)
            self.state = 757
            self.ofBranches()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CaseStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(m2_Parser.CASE, 0)

        def expr(self):
            return self.getTypedRuleContext(m2_Parser.ExprContext,0)


        def ofBranches(self):
            return self.getTypedRuleContext(m2_Parser.OfBranchesContext,0)


        def COLON(self):
            return self.getToken(m2_Parser.COLON, 0)

        def ind(self):
            return self.getTypedRuleContext(m2_Parser.IndContext,0)


        def ded(self):
            return self.getTypedRuleContext(m2_Parser.DedContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_caseStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseStmt" ):
                listener.enterCaseStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseStmt" ):
                listener.exitCaseStmt(self)




    def caseStmt(self):

        localctx = m2_Parser.CaseStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_caseStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 759
            self.match(m2_Parser.CASE)
            self.state = 760
            self.expr()
            self.state = 762
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==m2_Parser.COLON:
                self.state = 761
                self.match(m2_Parser.COLON)


            self.state = 769
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [m2_Parser.INDENT]:
                self.state = 764
                self.ind()
                self.state = 765
                self.ofBranches()
                self.state = 766
                self.ded()
                pass
            elif token in [m2_Parser.OF]:
                self.state = 768
                self.ofBranches()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OfBranchContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OF(self):
            return self.getToken(m2_Parser.OF, 0)

        def exprList(self):
            return self.getTypedRuleContext(m2_Parser.ExprListContext,0)


        def COLON(self):
            return self.getToken(m2_Parser.COLON, 0)

        def stmt(self):
            return self.getTypedRuleContext(m2_Parser.StmtContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_ofBranch

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOfBranch" ):
                listener.enterOfBranch(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOfBranch" ):
                listener.exitOfBranch(self)




    def ofBranch(self):

        localctx = m2_Parser.OfBranchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_ofBranch)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 771
            self.match(m2_Parser.OF)
            self.state = 772
            self.exprList()
            self.state = 773
            self.match(m2_Parser.COLON)
            self.state = 774
            self.stmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OfBranchesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ofBranch(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.OfBranchContext)
            else:
                return self.getTypedRuleContext(m2_Parser.OfBranchContext,i)


        def ELIF(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.ELIF)
            else:
                return self.getToken(m2_Parser.ELIF, i)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.ExprContext)
            else:
                return self.getTypedRuleContext(m2_Parser.ExprContext,i)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.COLON)
            else:
                return self.getToken(m2_Parser.COLON, i)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.StmtContext)
            else:
                return self.getTypedRuleContext(m2_Parser.StmtContext,i)


        def ELSE(self):
            return self.getToken(m2_Parser.ELSE, 0)

        def getRuleIndex(self):
            return m2_Parser.RULE_ofBranches

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOfBranches" ):
                listener.enterOfBranches(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOfBranches" ):
                listener.exitOfBranches(self)




    def ofBranches(self):

        localctx = m2_Parser.OfBranchesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_ofBranches)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 777 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 776
                    self.ofBranch()

                else:
                    raise NoViableAltException(self)
                self.state = 779 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,72,self._ctx)

            self.state = 788
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,73,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 781
                    self.match(m2_Parser.ELIF)
                    self.state = 782
                    self.expr()
                    self.state = 783
                    self.match(m2_Parser.COLON)
                    self.state = 784
                    self.stmt() 
                self.state = 790
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,73,self._ctx)

            self.state = 794
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
            if la_ == 1:
                self.state = 791
                self.match(m2_Parser.ELSE)
                self.state = 792
                self.match(m2_Parser.COLON)
                self.state = 793
                self.stmt()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleExpr(self):
            return self.getTypedRuleContext(m2_Parser.SimpleExprContext,0)


        def EQUALS(self):
            return self.getToken(m2_Parser.EQUALS, 0)

        def optInd(self):
            return self.getTypedRuleContext(m2_Parser.OptIndContext,0)


        def expr(self):
            return self.getTypedRuleContext(m2_Parser.ExprContext,0)


        def colonBody(self):
            return self.getTypedRuleContext(m2_Parser.ColonBodyContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_exprStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprStmt" ):
                listener.enterExprStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprStmt" ):
                listener.exitExprStmt(self)




    def exprStmt(self):

        localctx = m2_Parser.ExprStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_exprStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 796
            self.simpleExpr()
            self.state = 803
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
            if la_ == 1:
                self.state = 797
                self.match(m2_Parser.EQUALS)
                self.state = 798
                self.optInd()
                self.state = 799
                self.expr()
                self.state = 801
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
                if la_ == 1:
                    self.state = 800
                    self.colonBody()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def returnStmt(self):
            return self.getTypedRuleContext(m2_Parser.ReturnStmtContext,0)


        def discardStmt(self):
            return self.getTypedRuleContext(m2_Parser.DiscardStmtContext,0)


        def breakStmt(self):
            return self.getTypedRuleContext(m2_Parser.BreakStmtContext,0)


        def continueStmt(self):
            return self.getTypedRuleContext(m2_Parser.ContinueStmtContext,0)


        def pragmaStmt(self):
            return self.getTypedRuleContext(m2_Parser.PragmaStmtContext,0)


        def importStmt(self):
            return self.getTypedRuleContext(m2_Parser.ImportStmtContext,0)


        def fromStmt(self):
            return self.getTypedRuleContext(m2_Parser.FromStmtContext,0)


        def exprStmt(self):
            return self.getTypedRuleContext(m2_Parser.ExprStmtContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_simpleStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleStmt" ):
                listener.enterSimpleStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleStmt" ):
                listener.exitSimpleStmt(self)




    def simpleStmt(self):

        localctx = m2_Parser.SimpleStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_simpleStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 813
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
            if la_ == 1:
                self.state = 805
                self.returnStmt()
                pass

            elif la_ == 2:
                self.state = 806
                self.discardStmt()
                pass

            elif la_ == 3:
                self.state = 807
                self.breakStmt()
                pass

            elif la_ == 4:
                self.state = 808
                self.continueStmt()
                pass

            elif la_ == 5:
                self.state = 809
                self.pragmaStmt()
                pass

            elif la_ == 6:
                self.state = 810
                self.importStmt()
                pass

            elif la_ == 7:
                self.state = 811
                self.fromStmt()
                pass

            elif la_ == 8:
                self.state = 812
                self.exprStmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CondStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.ExprContext)
            else:
                return self.getTypedRuleContext(m2_Parser.ExprContext,i)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.COLON)
            else:
                return self.getToken(m2_Parser.COLON, i)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.StmtContext)
            else:
                return self.getTypedRuleContext(m2_Parser.StmtContext,i)


        def ELIF(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.ELIF)
            else:
                return self.getToken(m2_Parser.ELIF, i)

        def ELSE(self):
            return self.getToken(m2_Parser.ELSE, 0)

        def getRuleIndex(self):
            return m2_Parser.RULE_condStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondStmt" ):
                listener.enterCondStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondStmt" ):
                listener.exitCondStmt(self)




    def condStmt(self):

        localctx = m2_Parser.CondStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_condStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 815
            self.expr()
            self.state = 816
            self.match(m2_Parser.COLON)
            self.state = 817
            self.stmt()
            self.state = 825
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,78,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 818
                    self.match(m2_Parser.ELIF)
                    self.state = 819
                    self.expr()
                    self.state = 820
                    self.match(m2_Parser.COLON)
                    self.state = 821
                    self.stmt() 
                self.state = 827
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,78,self._ctx)

            self.state = 831
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,79,self._ctx)
            if la_ == 1:
                self.state = 828
                self.match(m2_Parser.ELSE)
                self.state = 829
                self.match(m2_Parser.COLON)
                self.state = 830
                self.stmt()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentVisContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self):
            return self.getTypedRuleContext(m2_Parser.SymbolContext,0)


        def operator(self):
            return self.getTypedRuleContext(m2_Parser.OperatorContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_identVis

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentVis" ):
                listener.enterIdentVis(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentVis" ):
                listener.exitIdentVis(self)




    def identVis(self):

        localctx = m2_Parser.IdentVisContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_identVis)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 833
            self.symbol()
            self.state = 835
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
            if la_ == 1:
                self.state = 834
                self.operator()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentVisDotContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.SymbolContext)
            else:
                return self.getTypedRuleContext(m2_Parser.SymbolContext,i)


        def DOT(self):
            return self.getToken(m2_Parser.DOT, 0)

        def operator(self):
            return self.getTypedRuleContext(m2_Parser.OperatorContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_identVisDot

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentVisDot" ):
                listener.enterIdentVisDot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentVisDot" ):
                listener.exitIdentVisDot(self)




    def identVisDot(self):

        localctx = m2_Parser.IdentVisDotContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_identVisDot)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 837
            self.symbol()
            self.state = 840
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
            if la_ == 1:
                self.state = 838
                self.match(m2_Parser.DOT)
                self.state = 839
                self.symbol()


            self.state = 843
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
            if la_ == 1:
                self.state = 842
                self.operator()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentWithPragmaContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identVis(self):
            return self.getTypedRuleContext(m2_Parser.IdentVisContext,0)


        def pragma(self):
            return self.getTypedRuleContext(m2_Parser.PragmaContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_identWithPragma

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentWithPragma" ):
                listener.enterIdentWithPragma(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentWithPragma" ):
                listener.exitIdentWithPragma(self)




    def identWithPragma(self):

        localctx = m2_Parser.IdentWithPragmaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_identWithPragma)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 845
            self.identVis()
            self.state = 847
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
            if la_ == 1:
                self.state = 846
                self.pragma()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(m2_Parser.IF, 0)

        def condStmt(self):
            return self.getTypedRuleContext(m2_Parser.CondStmtContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_ifStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfStmt" ):
                listener.enterIfStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfStmt" ):
                listener.exitIfStmt(self)




    def ifStmt(self):

        localctx = m2_Parser.IfStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_ifStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 849
            self.match(m2_Parser.IF)
            self.state = 850
            self.condStmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhenStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(m2_Parser.WHEN, 0)

        def condStmt(self):
            return self.getTypedRuleContext(m2_Parser.CondStmtContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_whenStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhenStmt" ):
                listener.enterWhenStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhenStmt" ):
                listener.exitWhenStmt(self)




    def whenStmt(self):

        localctx = m2_Parser.WhenStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_whenStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 852
            self.match(m2_Parser.WHEN)
            self.state = 853
            self.condStmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(m2_Parser.WHILE, 0)

        def expr(self):
            return self.getTypedRuleContext(m2_Parser.ExprContext,0)


        def COLON(self):
            return self.getToken(m2_Parser.COLON, 0)

        def stmt(self):
            return self.getTypedRuleContext(m2_Parser.StmtContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_whileStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileStmt" ):
                listener.enterWhileStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileStmt" ):
                listener.exitWhileStmt(self)




    def whileStmt(self):

        localctx = m2_Parser.WhileStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_whileStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 855
            self.match(m2_Parser.WHILE)
            self.state = 856
            self.expr()
            self.state = 857
            self.match(m2_Parser.COLON)
            self.state = 858
            self.stmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericParamContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.SymbolContext)
            else:
                return self.getTypedRuleContext(m2_Parser.SymbolContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.COMMA)
            else:
                return self.getToken(m2_Parser.COMMA, i)

        def COLON(self):
            return self.getToken(m2_Parser.COLON, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.ExprContext)
            else:
                return self.getTypedRuleContext(m2_Parser.ExprContext,i)


        def EQUALS(self):
            return self.getToken(m2_Parser.EQUALS, 0)

        def optInd(self):
            return self.getTypedRuleContext(m2_Parser.OptIndContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_genericParam

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericParam" ):
                listener.enterGenericParam(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericParam" ):
                listener.exitGenericParam(self)




    def genericParam(self):

        localctx = m2_Parser.GenericParamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_genericParam)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 860
            self.symbol()
            self.state = 865
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,84,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 861
                    self.match(m2_Parser.COMMA)
                    self.state = 862
                    self.symbol() 
                self.state = 867
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,84,self._ctx)

            self.state = 870
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==m2_Parser.COLON:
                self.state = 868
                self.match(m2_Parser.COLON)
                self.state = 869
                self.expr()


            self.state = 876
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==m2_Parser.EQUALS:
                self.state = 872
                self.match(m2_Parser.EQUALS)
                self.state = 873
                self.optInd()
                self.state = 874
                self.expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericParamListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACK(self):
            return self.getToken(m2_Parser.OPEN_BRACK, 0)

        def optInd(self):
            return self.getTypedRuleContext(m2_Parser.OptIndContext,0)


        def optPar(self):
            return self.getTypedRuleContext(m2_Parser.OptParContext,0)


        def CLOSE_BRACK(self):
            return self.getToken(m2_Parser.CLOSE_BRACK, 0)

        def genericParam(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.GenericParamContext)
            else:
                return self.getTypedRuleContext(m2_Parser.GenericParamContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.COMMA)
            else:
                return self.getToken(m2_Parser.COMMA, i)

        def SEMI_COLON(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.SEMI_COLON)
            else:
                return self.getToken(m2_Parser.SEMI_COLON, i)

        def getRuleIndex(self):
            return m2_Parser.RULE_genericParamList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericParamList" ):
                listener.enterGenericParamList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericParamList" ):
                listener.exitGenericParamList(self)




    def genericParamList(self):

        localctx = m2_Parser.GenericParamListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_genericParamList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 878
            self.match(m2_Parser.OPEN_BRACK)
            self.state = 879
            self.optInd()
            self.state = 888
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 37)) & ~0x3f) == 0 and ((1 << (_la - 37)) & ((1 << (m2_Parser.VARIABLE - 37)) | (1 << (m2_Parser.LET - 37)) | (1 << (m2_Parser.CONST - 37)) | (1 << (m2_Parser.PROC - 37)) | (1 << (m2_Parser.CASE - 37)) | (1 << (m2_Parser.IF - 37)) | (1 << (m2_Parser.WHILE - 37)) | (1 << (m2_Parser.FOR - 37)) | (1 << (m2_Parser.TUPLE - 37)) | (1 << (m2_Parser.WHEN - 37)) | (1 << (m2_Parser.REF - 37)) | (1 << (m2_Parser.BLOCK - 37)) | (1 << (m2_Parser.DISCARD - 37)) | (1 << (m2_Parser.SYM_HEADER - 37)) | (1 << (m2_Parser.IDENTIFIER - 37)))) != 0):
                self.state = 880
                self.genericParam()
                self.state = 885
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==m2_Parser.COMMA or _la==m2_Parser.SEMI_COLON:
                    self.state = 881
                    _la = self._input.LA(1)
                    if not(_la==m2_Parser.COMMA or _la==m2_Parser.SEMI_COLON):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 882
                    self.genericParam()
                    self.state = 887
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 890
            self.optPar()
            self.state = 891
            self.match(m2_Parser.CLOSE_BRACK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentWithPragmaDotContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identVisDot(self):
            return self.getTypedRuleContext(m2_Parser.IdentVisDotContext,0)


        def pragma(self):
            return self.getTypedRuleContext(m2_Parser.PragmaContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_identWithPragmaDot

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentWithPragmaDot" ):
                listener.enterIdentWithPragmaDot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentWithPragmaDot" ):
                listener.exitIdentWithPragmaDot(self)




    def identWithPragmaDot(self):

        localctx = m2_Parser.IdentWithPragmaDotContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_identWithPragmaDot)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 893
            self.identVisDot()
            self.state = 895
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==m2_Parser.OPEN_BRACE:
                self.state = 894
                self.pragma()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeDefAuxContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleExpr(self):
            return self.getTypedRuleContext(m2_Parser.SimpleExprContext,0)


        def objectType(self):
            return self.getTypedRuleContext(m2_Parser.ObjectTypeContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_typeDefAux

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeDefAux" ):
                listener.enterTypeDefAux(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeDefAux" ):
                listener.exitTypeDefAux(self)




    def typeDefAux(self):

        localctx = m2_Parser.TypeDefAuxContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_typeDefAux)
        try:
            self.state = 899
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [m2_Parser.OPEN_PAREN, m2_Parser.OPEN_BRACK, m2_Parser.COLON, m2_Parser.DOT, m2_Parser.EQUALS, m2_Parser.IN, m2_Parser.OF, m2_Parser.NOT, m2_Parser.OP0, m2_Parser.OP1, m2_Parser.OP2, m2_Parser.OP3, m2_Parser.OP4, m2_Parser.OP5, m2_Parser.OP6, m2_Parser.OP7, m2_Parser.OP8, m2_Parser.OP9, m2_Parser.OP10, m2_Parser.VARIABLE, m2_Parser.LET, m2_Parser.CONST, m2_Parser.PROC, m2_Parser.CASE, m2_Parser.IF, m2_Parser.WHILE, m2_Parser.FOR, m2_Parser.TUPLE, m2_Parser.WHEN, m2_Parser.REF, m2_Parser.BLOCK, m2_Parser.NIL, m2_Parser.DISCARD, m2_Parser.SYM_HEADER, m2_Parser.IDENTIFIER, m2_Parser.INT_LIT, m2_Parser.INT8_LIT, m2_Parser.INT16_LIT, m2_Parser.INT32_LIT, m2_Parser.INT64_LIT, m2_Parser.UINT_LIT, m2_Parser.UINT8_LIT, m2_Parser.UINT16_LIT, m2_Parser.UINT32_LIT, m2_Parser.UINT64_LIT, m2_Parser.FLOAT_LIT, m2_Parser.FLOAT32_LIT, m2_Parser.FLOAT64_LIT, m2_Parser.CHAR_LIT, m2_Parser.STR_LIT, m2_Parser.TRIPLESTR_LIT, m2_Parser.RSTR_LIT, m2_Parser.GENERALIZED_STR_LIT, m2_Parser.GENERALIZED_TRIPLESTR_LIT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 897
                self.simpleExpr()
                pass
            elif token in [m2_Parser.OBJECT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 898
                self.objectType()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObjectWhenContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(m2_Parser.WHEN, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.ExprContext)
            else:
                return self.getTypedRuleContext(m2_Parser.ExprContext,i)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.COLON)
            else:
                return self.getToken(m2_Parser.COLON, i)

        def objectPart(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.ObjectPartContext)
            else:
                return self.getTypedRuleContext(m2_Parser.ObjectPartContext,i)


        def ELIF(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.ELIF)
            else:
                return self.getToken(m2_Parser.ELIF, i)

        def ELSE(self):
            return self.getToken(m2_Parser.ELSE, 0)

        def getRuleIndex(self):
            return m2_Parser.RULE_objectWhen

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjectWhen" ):
                listener.enterObjectWhen(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjectWhen" ):
                listener.exitObjectWhen(self)




    def objectWhen(self):

        localctx = m2_Parser.ObjectWhenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_objectWhen)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 901
            self.match(m2_Parser.WHEN)
            self.state = 902
            self.expr()
            self.state = 903
            self.match(m2_Parser.COLON)
            self.state = 904
            self.objectPart()
            self.state = 912
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,91,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 905
                    self.match(m2_Parser.ELIF)
                    self.state = 906
                    self.expr()
                    self.state = 907
                    self.match(m2_Parser.COLON)
                    self.state = 908
                    self.objectPart() 
                self.state = 914
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,91,self._ctx)

            self.state = 918
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
            if la_ == 1:
                self.state = 915
                self.match(m2_Parser.ELSE)
                self.state = 916
                self.match(m2_Parser.COLON)
                self.state = 917
                self.objectPart()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObjectBranchContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OF(self):
            return self.getToken(m2_Parser.OF, 0)

        def exprList(self):
            return self.getTypedRuleContext(m2_Parser.ExprListContext,0)


        def COLON(self):
            return self.getToken(m2_Parser.COLON, 0)

        def objectPart(self):
            return self.getTypedRuleContext(m2_Parser.ObjectPartContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_objectBranch

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjectBranch" ):
                listener.enterObjectBranch(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjectBranch" ):
                listener.exitObjectBranch(self)




    def objectBranch(self):

        localctx = m2_Parser.ObjectBranchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_objectBranch)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 920
            self.match(m2_Parser.OF)
            self.state = 921
            self.exprList()
            self.state = 922
            self.match(m2_Parser.COLON)
            self.state = 923
            self.objectPart()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObjectBranchesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def objectBranch(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.ObjectBranchContext)
            else:
                return self.getTypedRuleContext(m2_Parser.ObjectBranchContext,i)


        def ELIF(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.ELIF)
            else:
                return self.getToken(m2_Parser.ELIF, i)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.ExprContext)
            else:
                return self.getTypedRuleContext(m2_Parser.ExprContext,i)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.COLON)
            else:
                return self.getToken(m2_Parser.COLON, i)

        def objectPart(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.ObjectPartContext)
            else:
                return self.getTypedRuleContext(m2_Parser.ObjectPartContext,i)


        def ELSE(self):
            return self.getToken(m2_Parser.ELSE, 0)

        def getRuleIndex(self):
            return m2_Parser.RULE_objectBranches

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjectBranches" ):
                listener.enterObjectBranches(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjectBranches" ):
                listener.exitObjectBranches(self)




    def objectBranches(self):

        localctx = m2_Parser.ObjectBranchesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_objectBranches)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 925
            self.objectBranch()
            self.state = 929
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,93,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 926
                    self.objectBranch() 
                self.state = 931
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,93,self._ctx)

            self.state = 939
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,94,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 932
                    self.match(m2_Parser.ELIF)
                    self.state = 933
                    self.expr()
                    self.state = 934
                    self.match(m2_Parser.COLON)
                    self.state = 935
                    self.objectPart() 
                self.state = 941
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,94,self._ctx)

            self.state = 945
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
            if la_ == 1:
                self.state = 942
                self.match(m2_Parser.ELSE)
                self.state = 943
                self.match(m2_Parser.COLON)
                self.state = 944
                self.objectPart()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObjectCaseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(m2_Parser.CASE, 0)

        def identWithPragma(self):
            return self.getTypedRuleContext(m2_Parser.IdentWithPragmaContext,0)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.COLON)
            else:
                return self.getToken(m2_Parser.COLON, i)

        def typeDesc(self):
            return self.getTypedRuleContext(m2_Parser.TypeDescContext,0)


        def objectBranches(self):
            return self.getTypedRuleContext(m2_Parser.ObjectBranchesContext,0)


        def ind(self):
            return self.getTypedRuleContext(m2_Parser.IndContext,0)


        def ded(self):
            return self.getTypedRuleContext(m2_Parser.DedContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_objectCase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjectCase" ):
                listener.enterObjectCase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjectCase" ):
                listener.exitObjectCase(self)




    def objectCase(self):

        localctx = m2_Parser.ObjectCaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_objectCase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 947
            self.match(m2_Parser.CASE)
            self.state = 948
            self.identWithPragma()
            self.state = 949
            self.match(m2_Parser.COLON)
            self.state = 950
            self.typeDesc()
            self.state = 952
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==m2_Parser.COLON:
                self.state = 951
                self.match(m2_Parser.COLON)


            self.state = 959
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [m2_Parser.INDENT]:
                self.state = 954
                self.ind()
                self.state = 955
                self.objectBranches()
                self.state = 956
                self.ded()
                pass
            elif token in [m2_Parser.OF]:
                self.state = 958
                self.objectBranches()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObjectPartContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ind(self):
            return self.getTypedRuleContext(m2_Parser.IndContext,0)


        def ded(self):
            return self.getTypedRuleContext(m2_Parser.DedContext,0)


        def objectPart(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.ObjectPartContext)
            else:
                return self.getTypedRuleContext(m2_Parser.ObjectPartContext,i)


        def objectWhen(self):
            return self.getTypedRuleContext(m2_Parser.ObjectWhenContext,0)


        def objectCase(self):
            return self.getTypedRuleContext(m2_Parser.ObjectCaseContext,0)


        def NIL(self):
            return self.getToken(m2_Parser.NIL, 0)

        def DISCARD(self):
            return self.getToken(m2_Parser.DISCARD, 0)

        def declColonEquals(self):
            return self.getTypedRuleContext(m2_Parser.DeclColonEqualsContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_objectPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjectPart" ):
                listener.enterObjectPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjectPart" ):
                listener.exitObjectPart(self)




    def objectPart(self):

        localctx = m2_Parser.ObjectPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_objectPart)
        self._la = 0 # Token type
        try:
            self.state = 974
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,99,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 961
                self.ind()
                self.state = 963 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 962
                    self.objectPart()
                    self.state = 965 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << m2_Parser.VARIABLE) | (1 << m2_Parser.LET) | (1 << m2_Parser.CONST) | (1 << m2_Parser.PROC) | (1 << m2_Parser.CASE) | (1 << m2_Parser.IF) | (1 << m2_Parser.WHILE) | (1 << m2_Parser.FOR))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (m2_Parser.TUPLE - 64)) | (1 << (m2_Parser.WHEN - 64)) | (1 << (m2_Parser.REF - 64)) | (1 << (m2_Parser.BLOCK - 64)) | (1 << (m2_Parser.NIL - 64)) | (1 << (m2_Parser.DISCARD - 64)) | (1 << (m2_Parser.SYM_HEADER - 64)) | (1 << (m2_Parser.IDENTIFIER - 64)) | (1 << (m2_Parser.INDENT - 64)))) != 0)):
                        break

                self.state = 967
                self.ded()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 969
                self.objectWhen()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 970
                self.objectCase()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 971
                self.match(m2_Parser.NIL)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 972
                self.match(m2_Parser.DISCARD)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 973
                self.declColonEquals()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObjectTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT(self):
            return self.getToken(m2_Parser.OBJECT, 0)

        def objectPart(self):
            return self.getTypedRuleContext(m2_Parser.ObjectPartContext,0)


        def pragma(self):
            return self.getTypedRuleContext(m2_Parser.PragmaContext,0)


        def OF(self):
            return self.getToken(m2_Parser.OF, 0)

        def typeDesc(self):
            return self.getTypedRuleContext(m2_Parser.TypeDescContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_objectType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjectType" ):
                listener.enterObjectType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjectType" ):
                listener.exitObjectType(self)




    def objectType(self):

        localctx = m2_Parser.ObjectTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_objectType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 976
            self.match(m2_Parser.OBJECT)
            self.state = 978
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==m2_Parser.OPEN_BRACE:
                self.state = 977
                self.pragma()


            self.state = 982
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==m2_Parser.OF:
                self.state = 980
                self.match(m2_Parser.OF)
                self.state = 981
                self.typeDesc()


            self.state = 984
            self.objectPart()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeClassParamContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self):
            return self.getTypedRuleContext(m2_Parser.SymbolContext,0)


        def VARIABLE(self):
            return self.getToken(m2_Parser.VARIABLE, 0)

        def getRuleIndex(self):
            return m2_Parser.RULE_typeClassParam

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeClassParam" ):
                listener.enterTypeClassParam(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeClassParam" ):
                listener.exitTypeClassParam(self)




    def typeClassParam(self):

        localctx = m2_Parser.TypeClassParamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_typeClassParam)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 987
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,102,self._ctx)
            if la_ == 1:
                self.state = 986
                self.match(m2_Parser.VARIABLE)


            self.state = 989
            self.symbol()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeClassContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stmt(self):
            return self.getTypedRuleContext(m2_Parser.StmtContext,0)


        def typeClassParam(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.TypeClassParamContext)
            else:
                return self.getTypedRuleContext(m2_Parser.TypeClassParamContext,i)


        def pragma(self):
            return self.getTypedRuleContext(m2_Parser.PragmaContext,0)


        def OF(self):
            return self.getToken(m2_Parser.OF, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.COMMA)
            else:
                return self.getToken(m2_Parser.COMMA, i)

        def typeDesc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.TypeDescContext)
            else:
                return self.getTypedRuleContext(m2_Parser.TypeDescContext,i)


        def getRuleIndex(self):
            return m2_Parser.RULE_typeClass

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeClass" ):
                listener.enterTypeClass(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeClass" ):
                listener.exitTypeClass(self)




    def typeClass(self):

        localctx = m2_Parser.TypeClassContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_typeClass)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 999
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,104,self._ctx)
            if la_ == 1:
                self.state = 991
                self.typeClassParam()
                self.state = 996
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,103,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 992
                        self.match(m2_Parser.COMMA)
                        self.state = 993
                        self.typeClassParam() 
                    self.state = 998
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,103,self._ctx)



            self.state = 1002
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
            if la_ == 1:
                self.state = 1001
                self.pragma()


            self.state = 1015
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
            if la_ == 1:
                self.state = 1004
                self.match(m2_Parser.OF)
                self.state = 1013
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
                if la_ == 1:
                    self.state = 1005
                    self.typeDesc()
                    self.state = 1010
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,106,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1006
                            self.match(m2_Parser.COMMA)
                            self.state = 1007
                            self.typeDesc() 
                        self.state = 1012
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,106,self._ctx)





            self.state = 1017
            if not self._input.LT(1).type == self.INDENT:
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "self._input.LT(1).type == self.INDENT")
            self.state = 1018
            self.stmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeDefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identWithPragmaDot(self):
            return self.getTypedRuleContext(m2_Parser.IdentWithPragmaDotContext,0)


        def EQUALS(self):
            return self.getToken(m2_Parser.EQUALS, 0)

        def optInd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.OptIndContext)
            else:
                return self.getTypedRuleContext(m2_Parser.OptIndContext,i)


        def typeDefAux(self):
            return self.getTypedRuleContext(m2_Parser.TypeDefAuxContext,0)


        def genericParamList(self):
            return self.getTypedRuleContext(m2_Parser.GenericParamListContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_typeDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeDef" ):
                listener.enterTypeDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeDef" ):
                listener.exitTypeDef(self)




    def typeDef(self):

        localctx = m2_Parser.TypeDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_typeDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1020
            self.identWithPragmaDot()
            self.state = 1022
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==m2_Parser.OPEN_BRACK:
                self.state = 1021
                self.genericParamList()


            self.state = 1024
            self.match(m2_Parser.EQUALS)
            self.state = 1025
            self.optInd()
            self.state = 1026
            self.typeDefAux()
            self.state = 1027
            self.optInd()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarTupleContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(m2_Parser.OPEN_PAREN, 0)

        def optInd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.OptIndContext)
            else:
                return self.getTypedRuleContext(m2_Parser.OptIndContext,i)


        def identWithPragma(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.IdentWithPragmaContext)
            else:
                return self.getTypedRuleContext(m2_Parser.IdentWithPragmaContext,i)


        def optPar(self):
            return self.getTypedRuleContext(m2_Parser.OptParContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(m2_Parser.CLOSE_PAREN, 0)

        def EQUALS(self):
            return self.getToken(m2_Parser.EQUALS, 0)

        def expr(self):
            return self.getTypedRuleContext(m2_Parser.ExprContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.COMMA)
            else:
                return self.getToken(m2_Parser.COMMA, i)

        def getRuleIndex(self):
            return m2_Parser.RULE_varTuple

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarTuple" ):
                listener.enterVarTuple(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarTuple" ):
                listener.exitVarTuple(self)




    def varTuple(self):

        localctx = m2_Parser.VarTupleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_varTuple)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1029
            self.match(m2_Parser.OPEN_PAREN)
            self.state = 1030
            self.optInd()
            self.state = 1031
            self.identWithPragma()
            self.state = 1036
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==m2_Parser.COMMA:
                self.state = 1032
                self.match(m2_Parser.COMMA)
                self.state = 1033
                self.identWithPragma()
                self.state = 1038
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1039
            self.optPar()
            self.state = 1040
            self.match(m2_Parser.CLOSE_PAREN)
            self.state = 1041
            self.match(m2_Parser.EQUALS)
            self.state = 1042
            self.optInd()
            self.state = 1043
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclColonEqualsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identWithPragma(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.IdentWithPragmaContext)
            else:
                return self.getTypedRuleContext(m2_Parser.IdentWithPragmaContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.COMMA)
            else:
                return self.getToken(m2_Parser.COMMA, i)

        def COLON(self):
            return self.getToken(m2_Parser.COLON, 0)

        def optInd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.OptIndContext)
            else:
                return self.getTypedRuleContext(m2_Parser.OptIndContext,i)


        def typeDesc(self):
            return self.getTypedRuleContext(m2_Parser.TypeDescContext,0)


        def EQUALS(self):
            return self.getToken(m2_Parser.EQUALS, 0)

        def expr(self):
            return self.getTypedRuleContext(m2_Parser.ExprContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_declColonEquals

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclColonEquals" ):
                listener.enterDeclColonEquals(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclColonEquals" ):
                listener.exitDeclColonEquals(self)




    def declColonEquals(self):

        localctx = m2_Parser.DeclColonEqualsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_declColonEquals)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1045
            self.identWithPragma()
            self.state = 1050
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,111,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1046
                    self.match(m2_Parser.COMMA)
                    self.state = 1047
                    self.identWithPragma() 
                self.state = 1052
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,111,self._ctx)

            self.state = 1054
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,112,self._ctx)
            if la_ == 1:
                self.state = 1053
                self.match(m2_Parser.COMMA)


            self.state = 1060
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,113,self._ctx)
            if la_ == 1:
                self.state = 1056
                self.match(m2_Parser.COLON)
                self.state = 1057
                self.optInd()
                self.state = 1058
                self.typeDesc()


            self.state = 1066
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,114,self._ctx)
            if la_ == 1:
                self.state = 1062
                self.match(m2_Parser.EQUALS)
                self.state = 1063
                self.optInd()
                self.state = 1064
                self.expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentColonEqualsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.IDENTIFIER)
            else:
                return self.getToken(m2_Parser.IDENTIFIER, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.COMMA)
            else:
                return self.getToken(m2_Parser.COMMA, i)

        def COLON(self):
            return self.getToken(m2_Parser.COLON, 0)

        def optInd(self):
            return self.getTypedRuleContext(m2_Parser.OptIndContext,0)


        def typeDesc(self):
            return self.getTypedRuleContext(m2_Parser.TypeDescContext,0)


        def EQUALS(self):
            return self.getToken(m2_Parser.EQUALS, 0)

        def expr(self):
            return self.getTypedRuleContext(m2_Parser.ExprContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_identColonEquals

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentColonEquals" ):
                listener.enterIdentColonEquals(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentColonEquals" ):
                listener.exitIdentColonEquals(self)




    def identColonEquals(self):

        localctx = m2_Parser.IdentColonEqualsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_identColonEquals)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1068
            self.match(m2_Parser.IDENTIFIER)
            self.state = 1073
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,115,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1069
                    self.match(m2_Parser.COMMA)
                    self.state = 1070
                    self.match(m2_Parser.IDENTIFIER) 
                self.state = 1075
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,115,self._ctx)

            self.state = 1077
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==m2_Parser.COMMA:
                self.state = 1076
                self.match(m2_Parser.COMMA)


            self.state = 1087
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [m2_Parser.COLON]:
                self.state = 1079
                self.match(m2_Parser.COLON)
                self.state = 1080
                self.optInd()
                self.state = 1081
                self.typeDesc()
                pass
            elif token in [m2_Parser.EQUALS]:
                self.state = 1083
                self.match(m2_Parser.EQUALS)
                self.state = 1084
                self.optInd()
                self.state = 1085
                self.expr()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParamListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(m2_Parser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(m2_Parser.CLOSE_PAREN, 0)

        def declColonEquals(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.DeclColonEqualsContext)
            else:
                return self.getTypedRuleContext(m2_Parser.DeclColonEqualsContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.COMMA)
            else:
                return self.getToken(m2_Parser.COMMA, i)

        def SEMI_COLON(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.SEMI_COLON)
            else:
                return self.getToken(m2_Parser.SEMI_COLON, i)

        def getRuleIndex(self):
            return m2_Parser.RULE_paramList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParamList" ):
                listener.enterParamList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParamList" ):
                listener.exitParamList(self)




    def paramList(self):

        localctx = m2_Parser.ParamListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_paramList)
        self._la = 0 # Token type
        try:
            self.state = 1109
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [m2_Parser.OPEN_PAREN]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1089
                self.match(m2_Parser.OPEN_PAREN)
                self.state = 1098
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 37)) & ~0x3f) == 0 and ((1 << (_la - 37)) & ((1 << (m2_Parser.VARIABLE - 37)) | (1 << (m2_Parser.LET - 37)) | (1 << (m2_Parser.CONST - 37)) | (1 << (m2_Parser.PROC - 37)) | (1 << (m2_Parser.CASE - 37)) | (1 << (m2_Parser.IF - 37)) | (1 << (m2_Parser.WHILE - 37)) | (1 << (m2_Parser.FOR - 37)) | (1 << (m2_Parser.TUPLE - 37)) | (1 << (m2_Parser.WHEN - 37)) | (1 << (m2_Parser.REF - 37)) | (1 << (m2_Parser.BLOCK - 37)) | (1 << (m2_Parser.DISCARD - 37)) | (1 << (m2_Parser.SYM_HEADER - 37)) | (1 << (m2_Parser.IDENTIFIER - 37)))) != 0):
                    self.state = 1090
                    self.declColonEquals()
                    self.state = 1095
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==m2_Parser.COMMA or _la==m2_Parser.SEMI_COLON:
                        self.state = 1091
                        _la = self._input.LA(1)
                        if not(_la==m2_Parser.COMMA or _la==m2_Parser.SEMI_COLON):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1092
                        self.declColonEquals()
                        self.state = 1097
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1100
                self.match(m2_Parser.CLOSE_PAREN)
                pass
            elif token in [m2_Parser.VARIABLE, m2_Parser.LET, m2_Parser.CONST, m2_Parser.PROC, m2_Parser.CASE, m2_Parser.IF, m2_Parser.WHILE, m2_Parser.FOR, m2_Parser.TUPLE, m2_Parser.WHEN, m2_Parser.REF, m2_Parser.BLOCK, m2_Parser.DISCARD, m2_Parser.SYM_HEADER, m2_Parser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1101
                self.declColonEquals()
                self.state = 1106
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,120,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1102
                        _la = self._input.LA(1)
                        if not(_la==m2_Parser.COMMA or _la==m2_Parser.SEMI_COLON):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1103
                        self.declColonEquals() 
                    self.state = 1108
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,120,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParamListColonContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def paramList(self):
            return self.getTypedRuleContext(m2_Parser.ParamListContext,0)


        def COLON(self):
            return self.getToken(m2_Parser.COLON, 0)

        def optInd(self):
            return self.getTypedRuleContext(m2_Parser.OptIndContext,0)


        def typeDesc(self):
            return self.getTypedRuleContext(m2_Parser.TypeDescContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_paramListColon

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParamListColon" ):
                listener.enterParamListColon(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParamListColon" ):
                listener.exitParamListColon(self)




    def paramListColon(self):

        localctx = m2_Parser.ParamListColonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_paramListColon)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1112
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,122,self._ctx)
            if la_ == 1:
                self.state = 1111
                self.paramList()


            self.state = 1118
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,123,self._ctx)
            if la_ == 1:
                self.state = 1114
                self.match(m2_Parser.COLON)
                self.state = 1115
                self.optInd()
                self.state = 1116
                self.typeDesc()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROC(self):
            return self.getToken(m2_Parser.PROC, 0)

        def paramListColon(self):
            return self.getTypedRuleContext(m2_Parser.ParamListColonContext,0)


        def optInd(self):
            return self.getTypedRuleContext(m2_Parser.OptIndContext,0)


        def pragma(self):
            return self.getTypedRuleContext(m2_Parser.PragmaContext,0)


        def EQUALS(self):
            return self.getToken(m2_Parser.EQUALS, 0)

        def stmt(self):
            return self.getTypedRuleContext(m2_Parser.StmtContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_procExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcExpr" ):
                listener.enterProcExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcExpr" ):
                listener.exitProcExpr(self)




    def procExpr(self):

        localctx = m2_Parser.ProcExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_procExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1120
            self.match(m2_Parser.PROC)
            self.state = 1121
            self.paramListColon()
            self.state = 1123
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==m2_Parser.OPEN_BRACE:
                self.state = 1122
                self.pragma()


            self.state = 1127
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==m2_Parser.EQUALS:
                self.state = 1125
                self.match(m2_Parser.EQUALS)
                self.state = 1126
                self.stmt()


            self.state = 1129
            self.optInd()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identWithPragma(self):
            return self.getTypedRuleContext(m2_Parser.IdentWithPragmaContext,0)


        def EQUALS(self):
            return self.getToken(m2_Parser.EQUALS, 0)

        def optInd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.OptIndContext)
            else:
                return self.getTypedRuleContext(m2_Parser.OptIndContext,i)


        def expr(self):
            return self.getTypedRuleContext(m2_Parser.ExprContext,0)


        def COLON(self):
            return self.getToken(m2_Parser.COLON, 0)

        def typeDesc(self):
            return self.getTypedRuleContext(m2_Parser.TypeDescContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_constant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant" ):
                listener.enterConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant" ):
                listener.exitConstant(self)




    def constant(self):

        localctx = m2_Parser.ConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_constant)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1131
            self.identWithPragma()
            self.state = 1134
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==m2_Parser.COLON:
                self.state = 1132
                self.match(m2_Parser.COLON)
                self.state = 1133
                self.typeDesc()


            self.state = 1136
            self.match(m2_Parser.EQUALS)
            self.state = 1137
            self.optInd()
            self.state = 1138
            self.expr()
            self.state = 1139
            self.optInd()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def optInd(self):
            return self.getTypedRuleContext(m2_Parser.OptIndContext,0)


        def varTuple(self):
            return self.getTypedRuleContext(m2_Parser.VarTupleContext,0)


        def identColonEquals(self):
            return self.getTypedRuleContext(m2_Parser.IdentColonEqualsContext,0)


        def colonBody(self):
            return self.getTypedRuleContext(m2_Parser.ColonBodyContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_variable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable" ):
                listener.enterVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable" ):
                listener.exitVariable(self)




    def variable(self):

        localctx = m2_Parser.VariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_variable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1143
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [m2_Parser.OPEN_PAREN]:
                self.state = 1141
                self.varTuple()
                pass
            elif token in [m2_Parser.IDENTIFIER]:
                self.state = 1142
                self.identColonEquals()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1146
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,128,self._ctx)
            if la_ == 1:
                self.state = 1145
                self.colonBody()


            self.state = 1148
            self.optInd()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedIdentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.SymbolContext)
            else:
                return self.getTypedRuleContext(m2_Parser.SymbolContext,i)


        def DOT(self):
            return self.getToken(m2_Parser.DOT, 0)

        def optInd(self):
            return self.getTypedRuleContext(m2_Parser.OptIndContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_qualifiedIdent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedIdent" ):
                listener.enterQualifiedIdent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedIdent" ):
                listener.exitQualifiedIdent(self)




    def qualifiedIdent(self):

        localctx = m2_Parser.QualifiedIdentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_qualifiedIdent)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1150
            self.symbol()
            self.state = 1155
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==m2_Parser.DOT:
                self.state = 1151
                self.match(m2_Parser.DOT)
                self.state = 1152
                self.optInd()
                self.state = 1153
                self.symbol()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(m2_Parser.FOR, 0)

        def IN(self):
            return self.getToken(m2_Parser.IN, 0)

        def expr(self):
            return self.getTypedRuleContext(m2_Parser.ExprContext,0)


        def COLON(self):
            return self.getToken(m2_Parser.COLON, 0)

        def stmt(self):
            return self.getTypedRuleContext(m2_Parser.StmtContext,0)


        def identWithPragma(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.IdentWithPragmaContext)
            else:
                return self.getTypedRuleContext(m2_Parser.IdentWithPragmaContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.COMMA)
            else:
                return self.getToken(m2_Parser.COMMA, i)

        def getRuleIndex(self):
            return m2_Parser.RULE_forStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForStmt" ):
                listener.enterForStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForStmt" ):
                listener.exitForStmt(self)




    def forStmt(self):

        localctx = m2_Parser.ForStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_forStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1157
            self.match(m2_Parser.FOR)

            self.state = 1158
            self.identWithPragma()
            self.state = 1163
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==m2_Parser.COMMA:
                self.state = 1159
                self.match(m2_Parser.COMMA)
                self.state = 1160
                self.identWithPragma()
                self.state = 1165
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1166
            self.match(m2_Parser.IN)
            self.state = 1167
            self.expr()
            self.state = 1168
            self.match(m2_Parser.COLON)
            self.state = 1169
            self.stmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BLOCK(self):
            return self.getToken(m2_Parser.BLOCK, 0)

        def COLON(self):
            return self.getToken(m2_Parser.COLON, 0)

        def stmt(self):
            return self.getTypedRuleContext(m2_Parser.StmtContext,0)


        def symbol(self):
            return self.getTypedRuleContext(m2_Parser.SymbolContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_blockStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockStmt" ):
                listener.enterBlockStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockStmt" ):
                listener.exitBlockStmt(self)




    def blockStmt(self):

        localctx = m2_Parser.BlockStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_blockStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1171
            self.match(m2_Parser.BLOCK)
            self.state = 1173
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 37)) & ~0x3f) == 0 and ((1 << (_la - 37)) & ((1 << (m2_Parser.VARIABLE - 37)) | (1 << (m2_Parser.LET - 37)) | (1 << (m2_Parser.CONST - 37)) | (1 << (m2_Parser.PROC - 37)) | (1 << (m2_Parser.CASE - 37)) | (1 << (m2_Parser.IF - 37)) | (1 << (m2_Parser.WHILE - 37)) | (1 << (m2_Parser.FOR - 37)) | (1 << (m2_Parser.TUPLE - 37)) | (1 << (m2_Parser.WHEN - 37)) | (1 << (m2_Parser.REF - 37)) | (1 << (m2_Parser.BLOCK - 37)) | (1 << (m2_Parser.DISCARD - 37)) | (1 << (m2_Parser.SYM_HEADER - 37)) | (1 << (m2_Parser.IDENTIFIER - 37)))) != 0):
                self.state = 1172
                self.symbol()


            self.state = 1175
            self.match(m2_Parser.COLON)
            self.state = 1176
            self.stmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RoutineContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def optInd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.OptIndContext)
            else:
                return self.getTypedRuleContext(m2_Parser.OptIndContext,i)


        def identVis(self):
            return self.getTypedRuleContext(m2_Parser.IdentVisContext,0)


        def paramListColon(self):
            return self.getTypedRuleContext(m2_Parser.ParamListColonContext,0)


        def genericParamList(self):
            return self.getTypedRuleContext(m2_Parser.GenericParamListContext,0)


        def pragma(self):
            return self.getTypedRuleContext(m2_Parser.PragmaContext,0)


        def EQUALS(self):
            return self.getToken(m2_Parser.EQUALS, 0)

        def stmt(self):
            return self.getTypedRuleContext(m2_Parser.StmtContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_routine

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoutine" ):
                listener.enterRoutine(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoutine" ):
                listener.exitRoutine(self)




    def routine(self):

        localctx = m2_Parser.RoutineContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_routine)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1178
            self.optInd()
            self.state = 1179
            self.identVis()
            self.state = 1181
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,132,self._ctx)
            if la_ == 1:
                self.state = 1180
                self.genericParamList()


            self.state = 1183
            self.paramListColon()
            self.state = 1185
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,133,self._ctx)
            if la_ == 1:
                self.state = 1184
                self.pragma()


            self.state = 1189
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,134,self._ctx)
            if la_ == 1:
                self.state = 1187
                self.match(m2_Parser.EQUALS)
                self.state = 1188
                self.stmt()


            self.state = 1191
            self.optInd()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeDefSectionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeDef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.TypeDefContext)
            else:
                return self.getTypedRuleContext(m2_Parser.TypeDefContext,i)


        def ind(self):
            return self.getTypedRuleContext(m2_Parser.IndContext,0)


        def ded(self):
            return self.getTypedRuleContext(m2_Parser.DedContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_typeDefSection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeDefSection" ):
                listener.enterTypeDefSection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeDefSection" ):
                listener.exitTypeDefSection(self)




    def typeDefSection(self):

        localctx = m2_Parser.TypeDefSectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_typeDefSection)
        self._la = 0 # Token type
        try:
            self.state = 1202
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [m2_Parser.VARIABLE, m2_Parser.LET, m2_Parser.CONST, m2_Parser.PROC, m2_Parser.CASE, m2_Parser.IF, m2_Parser.WHILE, m2_Parser.FOR, m2_Parser.TUPLE, m2_Parser.WHEN, m2_Parser.REF, m2_Parser.BLOCK, m2_Parser.DISCARD, m2_Parser.SYM_HEADER, m2_Parser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1193
                self.typeDef()
                pass
            elif token in [m2_Parser.INDENT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1194
                self.ind()
                self.state = 1196 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1195
                    self.typeDef()
                    self.state = 1198 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (((((_la - 37)) & ~0x3f) == 0 and ((1 << (_la - 37)) & ((1 << (m2_Parser.VARIABLE - 37)) | (1 << (m2_Parser.LET - 37)) | (1 << (m2_Parser.CONST - 37)) | (1 << (m2_Parser.PROC - 37)) | (1 << (m2_Parser.CASE - 37)) | (1 << (m2_Parser.IF - 37)) | (1 << (m2_Parser.WHILE - 37)) | (1 << (m2_Parser.FOR - 37)) | (1 << (m2_Parser.TUPLE - 37)) | (1 << (m2_Parser.WHEN - 37)) | (1 << (m2_Parser.REF - 37)) | (1 << (m2_Parser.BLOCK - 37)) | (1 << (m2_Parser.DISCARD - 37)) | (1 << (m2_Parser.SYM_HEADER - 37)) | (1 << (m2_Parser.IDENTIFIER - 37)))) != 0)):
                        break

                self.state = 1200
                self.ded()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantSectionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constant(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.ConstantContext)
            else:
                return self.getTypedRuleContext(m2_Parser.ConstantContext,i)


        def ind(self):
            return self.getTypedRuleContext(m2_Parser.IndContext,0)


        def ded(self):
            return self.getTypedRuleContext(m2_Parser.DedContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_constantSection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantSection" ):
                listener.enterConstantSection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantSection" ):
                listener.exitConstantSection(self)




    def constantSection(self):

        localctx = m2_Parser.ConstantSectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_constantSection)
        self._la = 0 # Token type
        try:
            self.state = 1213
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [m2_Parser.VARIABLE, m2_Parser.LET, m2_Parser.CONST, m2_Parser.PROC, m2_Parser.CASE, m2_Parser.IF, m2_Parser.WHILE, m2_Parser.FOR, m2_Parser.TUPLE, m2_Parser.WHEN, m2_Parser.REF, m2_Parser.BLOCK, m2_Parser.DISCARD, m2_Parser.SYM_HEADER, m2_Parser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1204
                self.constant()
                pass
            elif token in [m2_Parser.INDENT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1205
                self.ind()
                self.state = 1207 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1206
                    self.constant()
                    self.state = 1209 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (((((_la - 37)) & ~0x3f) == 0 and ((1 << (_la - 37)) & ((1 << (m2_Parser.VARIABLE - 37)) | (1 << (m2_Parser.LET - 37)) | (1 << (m2_Parser.CONST - 37)) | (1 << (m2_Parser.PROC - 37)) | (1 << (m2_Parser.CASE - 37)) | (1 << (m2_Parser.IF - 37)) | (1 << (m2_Parser.WHILE - 37)) | (1 << (m2_Parser.FOR - 37)) | (1 << (m2_Parser.TUPLE - 37)) | (1 << (m2_Parser.WHEN - 37)) | (1 << (m2_Parser.REF - 37)) | (1 << (m2_Parser.BLOCK - 37)) | (1 << (m2_Parser.DISCARD - 37)) | (1 << (m2_Parser.SYM_HEADER - 37)) | (1 << (m2_Parser.IDENTIFIER - 37)))) != 0)):
                        break

                self.state = 1211
                self.ded()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableSectionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.VariableContext)
            else:
                return self.getTypedRuleContext(m2_Parser.VariableContext,i)


        def ind(self):
            return self.getTypedRuleContext(m2_Parser.IndContext,0)


        def ded(self):
            return self.getTypedRuleContext(m2_Parser.DedContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_variableSection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableSection" ):
                listener.enterVariableSection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableSection" ):
                listener.exitVariableSection(self)




    def variableSection(self):

        localctx = m2_Parser.VariableSectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_variableSection)
        self._la = 0 # Token type
        try:
            self.state = 1224
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [m2_Parser.OPEN_PAREN, m2_Parser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1215
                self.variable()
                pass
            elif token in [m2_Parser.INDENT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1216
                self.ind()
                self.state = 1218 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1217
                    self.variable()
                    self.state = 1220 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==m2_Parser.OPEN_PAREN or _la==m2_Parser.IDENTIFIER):
                        break

                self.state = 1222
                self.ded()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComplexStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ifStmt(self):
            return self.getTypedRuleContext(m2_Parser.IfStmtContext,0)


        def whenStmt(self):
            return self.getTypedRuleContext(m2_Parser.WhenStmtContext,0)


        def whileStmt(self):
            return self.getTypedRuleContext(m2_Parser.WhileStmtContext,0)


        def forStmt(self):
            return self.getTypedRuleContext(m2_Parser.ForStmtContext,0)


        def blockStmt(self):
            return self.getTypedRuleContext(m2_Parser.BlockStmtContext,0)


        def PROC(self):
            return self.getToken(m2_Parser.PROC, 0)

        def routine(self):
            return self.getTypedRuleContext(m2_Parser.RoutineContext,0)


        def MACRO(self):
            return self.getToken(m2_Parser.MACRO, 0)

        def TEMPLATE(self):
            return self.getToken(m2_Parser.TEMPLATE, 0)

        def TYPE(self):
            return self.getToken(m2_Parser.TYPE, 0)

        def typeDefSection(self):
            return self.getTypedRuleContext(m2_Parser.TypeDefSectionContext,0)


        def CONST(self):
            return self.getToken(m2_Parser.CONST, 0)

        def constantSection(self):
            return self.getTypedRuleContext(m2_Parser.ConstantSectionContext,0)


        def variableSection(self):
            return self.getTypedRuleContext(m2_Parser.VariableSectionContext,0)


        def LET(self):
            return self.getToken(m2_Parser.LET, 0)

        def VARIABLE(self):
            return self.getToken(m2_Parser.VARIABLE, 0)

        def getRuleIndex(self):
            return m2_Parser.RULE_complexStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComplexStmt" ):
                listener.enterComplexStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComplexStmt" ):
                listener.exitComplexStmt(self)




    def complexStmt(self):

        localctx = m2_Parser.ComplexStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_complexStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1243
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [m2_Parser.IF]:
                self.state = 1226
                self.ifStmt()
                pass
            elif token in [m2_Parser.WHEN]:
                self.state = 1227
                self.whenStmt()
                pass
            elif token in [m2_Parser.WHILE]:
                self.state = 1228
                self.whileStmt()
                pass
            elif token in [m2_Parser.FOR]:
                self.state = 1229
                self.forStmt()
                pass
            elif token in [m2_Parser.BLOCK]:
                self.state = 1230
                self.blockStmt()
                pass
            elif token in [m2_Parser.PROC]:
                self.state = 1231
                self.match(m2_Parser.PROC)
                self.state = 1232
                self.routine()
                pass
            elif token in [m2_Parser.MACRO]:
                self.state = 1233
                self.match(m2_Parser.MACRO)
                self.state = 1234
                self.routine()
                pass
            elif token in [m2_Parser.TEMPLATE]:
                self.state = 1235
                self.match(m2_Parser.TEMPLATE)
                self.state = 1236
                self.routine()
                pass
            elif token in [m2_Parser.TYPE]:
                self.state = 1237
                self.match(m2_Parser.TYPE)
                self.state = 1238
                self.typeDefSection()
                pass
            elif token in [m2_Parser.CONST]:
                self.state = 1239
                self.match(m2_Parser.CONST)
                self.state = 1240
                self.constantSection()
                pass
            elif token in [m2_Parser.VARIABLE, m2_Parser.LET]:
                self.state = 1241
                _la = self._input.LA(1)
                if not(_la==m2_Parser.VARIABLE or _la==m2_Parser.LET):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1242
                self.variableSection()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def complexStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.ComplexStmtContext)
            else:
                return self.getTypedRuleContext(m2_Parser.ComplexStmtContext,i)


        def simpleStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.SimpleStmtContext)
            else:
                return self.getTypedRuleContext(m2_Parser.SimpleStmtContext,i)


        def SEMI_COLON(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.SEMI_COLON)
            else:
                return self.getToken(m2_Parser.SEMI_COLON, i)

        def ind(self):
            return self.getTypedRuleContext(m2_Parser.IndContext,0)


        def ded(self):
            return self.getTypedRuleContext(m2_Parser.DedContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStmt" ):
                listener.enterStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStmt" ):
                listener.exitStmt(self)




    def stmt(self):

        localctx = m2_Parser.StmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_stmt)
        self._la = 0 # Token type
        try:
            self.state = 1290
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,152,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1247
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,142,self._ctx)
                if la_ == 1:
                    self.state = 1245
                    self.complexStmt()
                    pass

                elif la_ == 2:
                    self.state = 1246
                    self.simpleStmt()
                    pass


                self.state = 1258
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,145,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1250
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==m2_Parser.SEMI_COLON:
                            self.state = 1249
                            self.match(m2_Parser.SEMI_COLON)


                        self.state = 1254
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,144,self._ctx)
                        if la_ == 1:
                            self.state = 1252
                            self.complexStmt()
                            pass

                        elif la_ == 2:
                            self.state = 1253
                            self.simpleStmt()
                            pass

                 
                    self.state = 1260
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,145,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1261
                self.ind()
                self.state = 1264
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,146,self._ctx)
                if la_ == 1:
                    self.state = 1262
                    self.complexStmt()
                    pass

                elif la_ == 2:
                    self.state = 1263
                    self.simpleStmt()
                    pass


                self.state = 1275
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << m2_Parser.SEMI_COLON) | (1 << m2_Parser.OPEN_PAREN) | (1 << m2_Parser.OPEN_BRACE) | (1 << m2_Parser.OPEN_BRACK) | (1 << m2_Parser.TYPE) | (1 << m2_Parser.COLON) | (1 << m2_Parser.DOT) | (1 << m2_Parser.EQUALS) | (1 << m2_Parser.IN) | (1 << m2_Parser.OF) | (1 << m2_Parser.NOT) | (1 << m2_Parser.OP0) | (1 << m2_Parser.OP1) | (1 << m2_Parser.OP2) | (1 << m2_Parser.OP3) | (1 << m2_Parser.OP4) | (1 << m2_Parser.OP5) | (1 << m2_Parser.OP6) | (1 << m2_Parser.OP7) | (1 << m2_Parser.OP8) | (1 << m2_Parser.OP9) | (1 << m2_Parser.OP10) | (1 << m2_Parser.VARIABLE) | (1 << m2_Parser.LET) | (1 << m2_Parser.CONST) | (1 << m2_Parser.PROC) | (1 << m2_Parser.RETURN) | (1 << m2_Parser.CASE) | (1 << m2_Parser.IF) | (1 << m2_Parser.WHILE) | (1 << m2_Parser.FOR) | (1 << m2_Parser.CONTINUE) | (1 << m2_Parser.BREAK) | (1 << m2_Parser.TEMPLATE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (m2_Parser.TUPLE - 64)) | (1 << (m2_Parser.WHEN - 64)) | (1 << (m2_Parser.IMPORT - 64)) | (1 << (m2_Parser.FROM - 64)) | (1 << (m2_Parser.REF - 64)) | (1 << (m2_Parser.BLOCK - 64)) | (1 << (m2_Parser.MACRO - 64)) | (1 << (m2_Parser.NIL - 64)) | (1 << (m2_Parser.DISCARD - 64)) | (1 << (m2_Parser.SYM_HEADER - 64)) | (1 << (m2_Parser.IDENTIFIER - 64)) | (1 << (m2_Parser.INT_LIT - 64)) | (1 << (m2_Parser.INT8_LIT - 64)) | (1 << (m2_Parser.INT16_LIT - 64)) | (1 << (m2_Parser.INT32_LIT - 64)) | (1 << (m2_Parser.INT64_LIT - 64)) | (1 << (m2_Parser.UINT_LIT - 64)) | (1 << (m2_Parser.UINT8_LIT - 64)) | (1 << (m2_Parser.UINT16_LIT - 64)) | (1 << (m2_Parser.UINT32_LIT - 64)) | (1 << (m2_Parser.UINT64_LIT - 64)) | (1 << (m2_Parser.FLOAT_LIT - 64)) | (1 << (m2_Parser.FLOAT32_LIT - 64)) | (1 << (m2_Parser.FLOAT64_LIT - 64)) | (1 << (m2_Parser.CHAR_LIT - 64)) | (1 << (m2_Parser.STR_LIT - 64)) | (1 << (m2_Parser.TRIPLESTR_LIT - 64)) | (1 << (m2_Parser.RSTR_LIT - 64)) | (1 << (m2_Parser.GENERALIZED_STR_LIT - 64)) | (1 << (m2_Parser.GENERALIZED_TRIPLESTR_LIT - 64)))) != 0):
                    self.state = 1267
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==m2_Parser.SEMI_COLON:
                        self.state = 1266
                        self.match(m2_Parser.SEMI_COLON)


                    self.state = 1271
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,148,self._ctx)
                    if la_ == 1:
                        self.state = 1269
                        self.complexStmt()
                        pass

                    elif la_ == 2:
                        self.state = 1270
                        self.simpleStmt()
                        pass


                    self.state = 1277
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1278
                self.ded()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1280
                self.simpleStmt()
                self.state = 1287
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,151,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1282
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==m2_Parser.SEMI_COLON:
                            self.state = 1281
                            self.match(m2_Parser.SEMI_COLON)


                        self.state = 1284
                        self.simpleStmt() 
                    self.state = 1289
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,151,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModuleContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.StmtContext)
            else:
                return self.getTypedRuleContext(m2_Parser.StmtContext,i)


        def SEMI_COLON(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.SEMI_COLON)
            else:
                return self.getToken(m2_Parser.SEMI_COLON, i)

        def getRuleIndex(self):
            return m2_Parser.RULE_module

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModule" ):
                listener.enterModule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModule" ):
                listener.exitModule(self)




    def module(self):

        localctx = m2_Parser.ModuleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_module)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1300
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << m2_Parser.OPEN_PAREN) | (1 << m2_Parser.OPEN_BRACE) | (1 << m2_Parser.OPEN_BRACK) | (1 << m2_Parser.TYPE) | (1 << m2_Parser.COLON) | (1 << m2_Parser.DOT) | (1 << m2_Parser.EQUALS) | (1 << m2_Parser.IN) | (1 << m2_Parser.OF) | (1 << m2_Parser.NOT) | (1 << m2_Parser.OP0) | (1 << m2_Parser.OP1) | (1 << m2_Parser.OP2) | (1 << m2_Parser.OP3) | (1 << m2_Parser.OP4) | (1 << m2_Parser.OP5) | (1 << m2_Parser.OP6) | (1 << m2_Parser.OP7) | (1 << m2_Parser.OP8) | (1 << m2_Parser.OP9) | (1 << m2_Parser.OP10) | (1 << m2_Parser.VARIABLE) | (1 << m2_Parser.LET) | (1 << m2_Parser.CONST) | (1 << m2_Parser.PROC) | (1 << m2_Parser.RETURN) | (1 << m2_Parser.CASE) | (1 << m2_Parser.IF) | (1 << m2_Parser.WHILE) | (1 << m2_Parser.FOR) | (1 << m2_Parser.CONTINUE) | (1 << m2_Parser.BREAK) | (1 << m2_Parser.TEMPLATE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (m2_Parser.TUPLE - 64)) | (1 << (m2_Parser.WHEN - 64)) | (1 << (m2_Parser.IMPORT - 64)) | (1 << (m2_Parser.FROM - 64)) | (1 << (m2_Parser.REF - 64)) | (1 << (m2_Parser.BLOCK - 64)) | (1 << (m2_Parser.MACRO - 64)) | (1 << (m2_Parser.NIL - 64)) | (1 << (m2_Parser.DISCARD - 64)) | (1 << (m2_Parser.SYM_HEADER - 64)) | (1 << (m2_Parser.IDENTIFIER - 64)) | (1 << (m2_Parser.INT_LIT - 64)) | (1 << (m2_Parser.INT8_LIT - 64)) | (1 << (m2_Parser.INT16_LIT - 64)) | (1 << (m2_Parser.INT32_LIT - 64)) | (1 << (m2_Parser.INT64_LIT - 64)) | (1 << (m2_Parser.UINT_LIT - 64)) | (1 << (m2_Parser.UINT8_LIT - 64)) | (1 << (m2_Parser.UINT16_LIT - 64)) | (1 << (m2_Parser.UINT32_LIT - 64)) | (1 << (m2_Parser.UINT64_LIT - 64)) | (1 << (m2_Parser.FLOAT_LIT - 64)) | (1 << (m2_Parser.FLOAT32_LIT - 64)) | (1 << (m2_Parser.FLOAT64_LIT - 64)) | (1 << (m2_Parser.CHAR_LIT - 64)) | (1 << (m2_Parser.STR_LIT - 64)) | (1 << (m2_Parser.TRIPLESTR_LIT - 64)) | (1 << (m2_Parser.RSTR_LIT - 64)) | (1 << (m2_Parser.GENERALIZED_STR_LIT - 64)) | (1 << (m2_Parser.GENERALIZED_TRIPLESTR_LIT - 64)) | (1 << (m2_Parser.INDENT - 64)))) != 0):
                self.state = 1292
                self.stmt()
                self.state = 1297
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==m2_Parser.SEMI_COLON:
                    self.state = 1293
                    self.match(m2_Parser.SEMI_COLON)
                    self.state = 1294
                    self.stmt()
                    self.state = 1299
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StartContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def module(self):
            return self.getTypedRuleContext(m2_Parser.ModuleContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_start

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStart" ):
                listener.enterStart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStart" ):
                listener.exitStart(self)




    def start(self):

        localctx = m2_Parser.StartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_start)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1302
            self.module()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[22] = self.par_sempred
        self._predicates[28] = self.primarySuffix_sempred
        self._predicates[90] = self.typeClass_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def par_sempred(self, localctx:ParContext, predIndex:int):
            if predIndex == 0:
                return self._input.LT(1).type in self.parKeyWList
         

    def primarySuffix_sempred(self, localctx:PrimarySuffixContext, predIndex:int):
            if predIndex == 1:
                return self._input.LT(1).type in self.primarySuffixList
         

    def typeClass_sempred(self, localctx:TypeClassContext, predIndex:int):
            if predIndex == 2:
                return self._input.LT(1).type == self.INDENT
         




