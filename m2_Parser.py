# Generated from m2_Parser.g4 by ANTLR 4.7.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3s")
        buf.write("\u05da\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4")
        buf.write("q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4w\tw\4x\tx\4y\ty\4")
        buf.write("z\tz\4{\t{\4|\t|\3\2\3\2\3\3\3\3\3\4\3\4\3\4\3\4\5\4\u0101")
        buf.write("\n\4\3\5\3\5\3\6\3\6\3\7\3\7\3\b\3\b\3\t\3\t\3\n\3\n\3")
        buf.write("\13\3\13\3\f\3\f\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3")
        buf.write("\r\3\r\3\r\5\r\u011f\n\r\3\16\3\16\3\17\3\17\3\20\5\20")
        buf.write("\u0126\n\20\3\21\5\21\u0129\n\21\3\22\3\22\3\23\3\23\3")
        buf.write("\24\3\24\3\25\3\25\5\25\u0133\n\25\3\26\3\26\3\27\3\27")
        buf.write("\3\27\5\27\u013a\n\27\3\30\3\30\3\30\3\30\3\30\5\30\u0141")
        buf.write("\n\30\3\30\3\30\3\30\5\30\u0146\n\30\7\30\u0148\n\30\f")
        buf.write("\30\16\30\u014b\13\30\3\30\3\30\3\30\5\30\u0150\n\30\3")
        buf.write("\30\3\30\3\30\5\30\u0155\n\30\7\30\u0157\n\30\f\30\16")
        buf.write("\30\u015a\13\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\5\30")
        buf.write("\u0163\n\30\3\30\3\30\3\30\5\30\u0168\n\30\7\30\u016a")
        buf.write("\n\30\f\30\16\30\u016d\13\30\5\30\u016f\n\30\3\30\3\30")
        buf.write("\3\30\3\30\3\30\3\30\7\30\u0177\n\30\f\30\16\30\u017a")
        buf.write("\13\30\5\30\u017c\n\30\5\30\u017e\n\30\5\30\u0180\n\30")
        buf.write("\3\30\3\30\3\30\3\31\3\31\3\31\3\31\5\31\u0189\n\31\7")
        buf.write("\31\u018b\n\31\f\31\16\31\u018e\13\31\3\31\3\31\3\31\3")
        buf.write("\32\3\32\3\32\3\32\5\32\u0197\n\32\7\32\u0199\n\32\f\32")
        buf.write("\16\32\u019c\13\32\3\32\3\32\3\32\3\33\3\33\3\34\3\34")
        buf.write("\3\34\3\34\7\34\u01a7\n\34\f\34\16\34\u01aa\13\34\3\34")
        buf.write("\5\34\u01ad\n\34\3\34\3\34\3\35\3\35\3\35\3\35\3\35\3")
        buf.write("\35\3\35\3\35\3\35\3\35\3\35\3\35\3\36\3\36\3\36\3\36")
        buf.write("\3\36\3\36\3\36\5\36\u01c4\n\36\3\37\3\37\3 \3 \3 \7 ")
        buf.write("\u01cb\n \f \16 \u01ce\13 \3!\3!\5!\u01d2\n!\6!\u01d4")
        buf.write("\n!\r!\16!\u01d5\3!\3!\3!\5!\u01db\n!\7!\u01dd\n!\f!\16")
        buf.write("!\u01e0\13!\3!\3!\3!\3!\3!\5!\u01e7\n!\3!\3!\3!\3!\3!")
        buf.write("\3!\3!\3!\3!\3!\3!\3!\3!\3!\5!\u01f7\n!\3\"\3\"\3\"\3")
        buf.write("\"\7\"\u01fd\n\"\f\"\16\"\u0200\13\"\3\"\6\"\u0203\n\"")
        buf.write("\r\"\16\"\u0204\3\"\7\"\u0208\n\"\f\"\16\"\u020b\13\"")
        buf.write("\3\"\3\"\5\"\u020f\n\"\3#\3#\3#\3#\3#\5#\u0216\n#\7#\u0218")
        buf.write("\n#\f#\16#\u021b\13#\3#\3#\5#\u021f\n#\3#\3#\3$\3$\3$")
        buf.write("\3$\3$\7$\u0228\n$\f$\16$\u022b\13$\3%\3%\3%\3%\3%\7%")
        buf.write("\u0232\n%\f%\16%\u0235\13%\3&\3&\3&\3&\3&\7&\u023c\n&")
        buf.write("\f&\16&\u023f\13&\3\'\3\'\3\'\3\'\3\'\7\'\u0246\n\'\f")
        buf.write("\'\16\'\u0249\13\'\3(\3(\3(\3(\3(\7(\u0250\n(\f(\16(\u0253")
        buf.write("\13(\3)\3)\3)\3)\3)\7)\u025a\n)\f)\16)\u025d\13)\3*\3")
        buf.write("*\3*\3*\3*\7*\u0264\n*\f*\16*\u0267\13*\3+\3+\3+\3+\3")
        buf.write("+\7+\u026e\n+\f+\16+\u0271\13+\3,\3,\3,\3,\3,\7,\u0278")
        buf.write("\n,\f,\16,\u027b\13,\3-\3-\3-\3-\3-\7-\u0282\n-\f-\16")
        buf.write("-\u0285\13-\3.\3.\3.\3.\3.\7.\u028c\n.\f.\16.\u028f\13")
        buf.write(".\3/\3/\3/\7/\u0294\n/\f/\16/\u0297\13/\3\60\3\60\3\60")
        buf.write("\5\60\u029c\n\60\3\61\3\61\3\61\3\61\5\61\u02a2\n\61\3")
        buf.write("\62\3\62\3\62\7\62\u02a7\n\62\f\62\16\62\u02aa\13\62\3")
        buf.write("\62\5\62\u02ad\n\62\3\63\3\63\3\63\3\63\3\63\3\63\3\63")
        buf.write("\3\63\3\63\3\63\7\63\u02b9\n\63\f\63\16\63\u02bc\13\63")
        buf.write("\3\63\3\63\3\63\3\63\3\64\3\64\3\65\3\65\3\65\3\65\3\65")
        buf.write("\3\65\3\65\3\65\3\65\3\65\3\65\5\65\u02cf\n\65\5\65\u02d1")
        buf.write("\n\65\3\66\3\66\6\66\u02d5\n\66\r\66\16\66\u02d6\3\66")
        buf.write("\3\66\3\66\3\66\5\66\u02dd\n\66\3\67\3\67\5\67\u02e1\n")
        buf.write("\67\3\67\3\67\3\67\38\38\38\39\39\39\3:\3:\3:\3:\3:\3")
        buf.write(":\3:\3:\3:\3:\5:\u02f6\n:\3;\3;\3<\3<\3<\3<\3<\3<\3<\3")
        buf.write("<\3<\3<\7<\u0304\n<\f<\16<\u0307\13<\3<\3<\3<\3<\3<\5")
        buf.write("<\u030e\n<\3=\5=\u0311\n=\3=\3=\3=\3=\3=\3=\3=\5=\u031a")
        buf.write("\n=\3>\3>\3?\3?\3?\3@\3@\3@\5@\u0324\n@\3A\3A\3A\5A\u0329")
        buf.write("\nA\3B\3B\3B\5B\u032e\nB\3C\3C\3C\5C\u0333\nC\3D\3D\3")
        buf.write("D\5D\u0338\nD\3E\3E\3E\5E\u033d\nE\3F\3F\3F\3F\3F\7F\u0344")
        buf.write("\nF\fF\16F\u0347\13F\3F\3F\3F\3F\3F\7F\u034e\nF\fF\16")
        buf.write("F\u0351\13F\5F\u0353\nF\3G\3G\3G\3G\3G\3G\3G\7G\u035c")
        buf.write("\nG\fG\16G\u035f\13G\3H\3H\3H\3H\3I\3I\3I\5I\u0368\nI")
        buf.write("\3I\3I\3I\3I\3I\5I\u036f\nI\3J\3J\3J\3J\3J\3K\6K\u0377")
        buf.write("\nK\rK\16K\u0378\3K\3K\3K\3K\3K\7K\u0380\nK\fK\16K\u0383")
        buf.write("\13K\3K\3K\3K\5K\u0388\nK\3L\3L\3L\3L\3L\3L\7L\u0390\n")
        buf.write("L\fL\16L\u0393\13L\3M\3M\3M\3M\3M\5M\u039a\nM\5M\u039c")
        buf.write("\nM\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\5N\u03a9\nN\3O\3")
        buf.write("O\3O\3O\3O\3O\3O\3O\7O\u03b3\nO\fO\16O\u03b6\13O\3O\3")
        buf.write("O\3O\5O\u03bb\nO\3P\3P\5P\u03bf\nP\3Q\3Q\5Q\u03c3\nQ\3")
        buf.write("Q\3Q\3Q\5Q\u03c8\nQ\3R\3R\5R\u03cc\nR\3S\3S\3S\3T\3T\3")
        buf.write("T\3U\3U\3U\3U\3U\3V\3V\3V\3V\3V\3V\3V\3V\3V\7V\u03e2\n")
        buf.write("V\fV\16V\u03e5\13V\3V\3V\3V\5V\u03ea\nV\3W\3W\3W\3W\3")
        buf.write("X\3X\3X\7X\u03f3\nX\fX\16X\u03f6\13X\3X\3X\5X\u03fa\n")
        buf.write("X\3X\3X\3X\3X\5X\u0400\nX\3Y\3Y\3Y\3Y\3Y\7Y\u0407\nY\f")
        buf.write("Y\16Y\u040a\13Y\5Y\u040c\nY\3Y\3Y\3Y\3Z\3Z\5Z\u0413\n")
        buf.write("Z\3[\3[\3[\5[\u0418\n[\3\\\3\\\3\\\3\\\3\\\3\\\3\\\3\\")
        buf.write("\3\\\7\\\u0423\n\\\f\\\16\\\u0426\13\\\3\\\3\\\3\\\5\\")
        buf.write("\u042b\n\\\3]\3]\3]\3]\3]\3^\3^\7^\u0434\n^\f^\16^\u0437")
        buf.write("\13^\3^\3^\3^\3^\3^\7^\u043e\n^\f^\16^\u0441\13^\3^\3")
        buf.write("^\3^\5^\u0446\n^\3_\3_\3_\3_\3_\5_\u044d\n_\3_\3_\3_\3")
        buf.write("_\3_\5_\u0454\n_\3`\3`\6`\u0458\n`\r`\16`\u0459\3`\3`")
        buf.write("\3`\3`\3`\3`\3`\5`\u0463\n`\3a\3a\5a\u0467\na\3a\3a\5")
        buf.write("a\u046b\na\3a\3a\3b\5b\u0470\nb\3b\3b\3c\3c\3c\7c\u0477")
        buf.write("\nc\fc\16c\u047a\13c\5c\u047c\nc\3c\5c\u047f\nc\3c\3c")
        buf.write("\3c\3c\7c\u0485\nc\fc\16c\u0488\13c\5c\u048a\nc\5c\u048c")
        buf.write("\nc\3c\3c\3c\3d\3d\5d\u0493\nd\3d\3d\3d\3d\3d\3e\3e\3")
        buf.write("e\5e\u049d\ne\3e\3e\3e\3e\3e\3f\3f\3f\3f\3f\7f\u04a9\n")
        buf.write("f\ff\16f\u04ac\13f\3f\3f\3f\3f\3f\3f\3g\3g\3g\7g\u04b7")
        buf.write("\ng\fg\16g\u04ba\13g\3g\5g\u04bd\ng\3g\3g\3g\3g\5g\u04c3")
        buf.write("\ng\3g\3g\3g\3g\5g\u04c9\ng\3h\3h\3h\7h\u04ce\nh\fh\16")
        buf.write("h\u04d1\13h\3h\5h\u04d4\nh\3h\3h\3h\3h\5h\u04da\nh\3h")
        buf.write("\3h\3h\3h\5h\u04e0\nh\3i\3i\3i\3i\7i\u04e6\ni\fi\16i\u04e9")
        buf.write("\13i\5i\u04eb\ni\3i\3i\3i\3i\7i\u04f1\ni\fi\16i\u04f4")
        buf.write("\13i\5i\u04f6\ni\3j\5j\u04f9\nj\3j\3j\3j\3j\5j\u04ff\n")
        buf.write("j\3k\3k\3k\5k\u0504\nk\3k\3k\5k\u0508\nk\3k\3k\3l\3l\5")
        buf.write("l\u050e\nl\3l\5l\u0511\nl\3l\3l\3m\3m\3m\3m\3m\5m\u051a")
        buf.write("\nm\3n\3n\3n\3n\7n\u0520\nn\fn\16n\u0523\13n\3n\3n\3n")
        buf.write("\3n\3n\3o\3o\5o\u052c\no\3o\3o\3o\3p\3p\3p\3p\3q\3q\3")
        buf.write("q\3q\3r\3r\5r\u053b\nr\3r\3r\3s\3s\3s\5s\u0542\ns\3s\5")
        buf.write("s\u0545\ns\3s\3s\5s\u0549\ns\3s\3s\5s\u054d\ns\3s\3s\3")
        buf.write("t\3t\3t\6t\u0554\nt\rt\16t\u0555\3t\3t\5t\u055a\nt\3u")
        buf.write("\3u\3u\6u\u055f\nu\ru\16u\u0560\3u\3u\5u\u0565\nu\3v\3")
        buf.write("v\3v\6v\u056a\nv\rv\16v\u056b\3v\3v\5v\u0570\nv\3w\3w")
        buf.write("\3w\3w\3w\7w\u0577\nw\fw\16w\u057a\13w\3x\3x\3x\3x\3x")
        buf.write("\7x\u0581\nx\fx\16x\u0584\13x\3y\3y\3y\3y\3y\3y\3y\3y")
        buf.write("\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3")
        buf.write("y\3y\3y\3y\5y\u05a3\ny\3z\3z\5z\u05a7\nz\3z\3z\3z\5z\u05ac")
        buf.write("\nz\7z\u05ae\nz\fz\16z\u05b1\13z\3z\3z\3z\5z\u05b6\nz")
        buf.write("\3z\3z\3z\5z\u05bb\nz\7z\u05bd\nz\fz\16z\u05c0\13z\3z")
        buf.write("\3z\3z\3z\3z\7z\u05c7\nz\fz\16z\u05ca\13z\5z\u05cc\nz")
        buf.write("\3{\3{\3{\7{\u05d1\n{\f{\16{\u05d4\13{\5{\u05d6\n{\3|")
        buf.write("\3|\3|\2\2}\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"")
        buf.write("$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz")
        buf.write("|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090")
        buf.write("\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2")
        buf.write("\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4")
        buf.write("\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6")
        buf.write("\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8")
        buf.write("\u00da\u00dc\u00de\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea")
        buf.write("\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\2\16\4\2\27\27\35")
        buf.write("\35\4\2\30\32!!\4\2\26\26\"\"\3\3mm\n\2\21\22\'\'++\66")
        buf.write("\66==BBKLVV\16\2\')//\61\61\63\63\65\65\678<<>>DDFFOO")
        buf.write("UU\3\2kl\5\2QQYbdj\3\2\b\t\4\2\'\'\66\66\3\2hj\4\2\'(")
        buf.write("CC\2\u064c\2\u00f8\3\2\2\2\4\u00fa\3\2\2\2\6\u0100\3\2")
        buf.write("\2\2\b\u0102\3\2\2\2\n\u0104\3\2\2\2\f\u0106\3\2\2\2\16")
        buf.write("\u0108\3\2\2\2\20\u010a\3\2\2\2\22\u010c\3\2\2\2\24\u010e")
        buf.write("\3\2\2\2\26\u0110\3\2\2\2\30\u011e\3\2\2\2\32\u0120\3")
        buf.write("\2\2\2\34\u0122\3\2\2\2\36\u0125\3\2\2\2 \u0128\3\2\2")
        buf.write("\2\"\u012a\3\2\2\2$\u012c\3\2\2\2&\u012e\3\2\2\2(\u0132")
        buf.write("\3\2\2\2*\u0134\3\2\2\2,\u0136\3\2\2\2.\u013b\3\2\2\2")
        buf.write("\60\u0184\3\2\2\2\62\u0192\3\2\2\2\64\u01a0\3\2\2\2\66")
        buf.write("\u01a2\3\2\2\28\u01b0\3\2\2\2:\u01c3\3\2\2\2<\u01c5\3")
        buf.write("\2\2\2>\u01c7\3\2\2\2@\u01f6\3\2\2\2B\u020e\3\2\2\2D\u0210")
        buf.write("\3\2\2\2F\u0222\3\2\2\2H\u022c\3\2\2\2J\u0236\3\2\2\2")
        buf.write("L\u0240\3\2\2\2N\u024a\3\2\2\2P\u0254\3\2\2\2R\u025e\3")
        buf.write("\2\2\2T\u0268\3\2\2\2V\u0272\3\2\2\2X\u027c\3\2\2\2Z\u0286")
        buf.write("\3\2\2\2\\\u0290\3\2\2\2^\u0298\3\2\2\2`\u029d\3\2\2\2")
        buf.write("b\u02a3\3\2\2\2d\u02ae\3\2\2\2f\u02c1\3\2\2\2h\u02d0\3")
        buf.write("\2\2\2j\u02dc\3\2\2\2l\u02de\3\2\2\2n\u02e5\3\2\2\2p\u02e8")
        buf.write("\3\2\2\2r\u02eb\3\2\2\2t\u02f7\3\2\2\2v\u02f9\3\2\2\2")
        buf.write("x\u0310\3\2\2\2z\u031b\3\2\2\2|\u031d\3\2\2\2~\u0320\3")
        buf.write("\2\2\2\u0080\u0325\3\2\2\2\u0082\u032a\3\2\2\2\u0084\u032f")
        buf.write("\3\2\2\2\u0086\u0334\3\2\2\2\u0088\u0339\3\2\2\2\u008a")
        buf.write("\u033e\3\2\2\2\u008c\u0354\3\2\2\2\u008e\u0360\3\2\2\2")
        buf.write("\u0090\u0364\3\2\2\2\u0092\u0370\3\2\2\2\u0094\u0376\3")
        buf.write("\2\2\2\u0096\u0389\3\2\2\2\u0098\u0394\3\2\2\2\u009a\u03a8")
        buf.write("\3\2\2\2\u009c\u03aa\3\2\2\2\u009e\u03bc\3\2\2\2\u00a0")
        buf.write("\u03c0\3\2\2\2\u00a2\u03c9\3\2\2\2\u00a4\u03cd\3\2\2\2")
        buf.write("\u00a6\u03d0\3\2\2\2\u00a8\u03d3\3\2\2\2\u00aa\u03d8\3")
        buf.write("\2\2\2\u00ac\u03eb\3\2\2\2\u00ae\u03ef\3\2\2\2\u00b0\u0401")
        buf.write("\3\2\2\2\u00b2\u0410\3\2\2\2\u00b4\u0417\3\2\2\2\u00b6")
        buf.write("\u0419\3\2\2\2\u00b8\u042c\3\2\2\2\u00ba\u0431\3\2\2\2")
        buf.write("\u00bc\u0447\3\2\2\2\u00be\u0462\3\2\2\2\u00c0\u0464\3")
        buf.write("\2\2\2\u00c2\u046f\3\2\2\2\u00c4\u047b\3\2\2\2\u00c6\u0490")
        buf.write("\3\2\2\2\u00c8\u0499\3\2\2\2\u00ca\u04a3\3\2\2\2\u00cc")
        buf.write("\u04b3\3\2\2\2\u00ce\u04ca\3\2\2\2\u00d0\u04f5\3\2\2\2")
        buf.write("\u00d2\u04f8\3\2\2\2\u00d4\u0500\3\2\2\2\u00d6\u050d\3")
        buf.write("\2\2\2\u00d8\u0514\3\2\2\2\u00da\u051b\3\2\2\2\u00dc\u0529")
        buf.write("\3\2\2\2\u00de\u0530\3\2\2\2\u00e0\u0534\3\2\2\2\u00e2")
        buf.write("\u0538\3\2\2\2\u00e4\u053e\3\2\2\2\u00e6\u0559\3\2\2\2")
        buf.write("\u00e8\u0564\3\2\2\2\u00ea\u056f\3\2\2\2\u00ec\u0571\3")
        buf.write("\2\2\2\u00ee\u057b\3\2\2\2\u00f0\u05a2\3\2\2\2\u00f2\u05cb")
        buf.write("\3\2\2\2\u00f4\u05d5\3\2\2\2\u00f6\u05d7\3\2\2\2\u00f8")
        buf.write("\u00f9\7\34\2\2\u00f9\3\3\2\2\2\u00fa\u00fb\t\2\2\2\u00fb")
        buf.write("\5\3\2\2\2\u00fc\u0101\7\36\2\2\u00fd\u0101\7\25\2\2\u00fe")
        buf.write("\u00ff\7\25\2\2\u00ff\u0101\7\25\2\2\u0100\u00fc\3\2\2")
        buf.write("\2\u0100\u00fd\3\2\2\2\u0100\u00fe\3\2\2\2\u0101\7\3\2")
        buf.write("\2\2\u0102\u0103\7\37\2\2\u0103\t\3\2\2\2\u0104\u0105")
        buf.write("\7 \2\2\u0105\13\3\2\2\2\u0106\u0107\t\3\2\2\u0107\r\3")
        buf.write("\2\2\2\u0108\u0109\t\4\2\2\u0109\17\3\2\2\2\u010a\u010b")
        buf.write("\7#\2\2\u010b\21\3\2\2\2\u010c\u010d\7$\2\2\u010d\23\3")
        buf.write("\2\2\2\u010e\u010f\7%\2\2\u010f\25\3\2\2\2\u0110\u0111")
        buf.write("\7&\2\2\u0111\27\3\2\2\2\u0112\u011f\5\2\2\2\u0113\u011f")
        buf.write("\5\4\3\2\u0114\u011f\5\6\4\2\u0115\u011f\5\b\5\2\u0116")
        buf.write("\u011f\5\n\6\2\u0117\u011f\5\f\7\2\u0118\u011f\5\16\b")
        buf.write("\2\u0119\u011f\5\20\t\2\u011a\u011f\5\22\n\2\u011b\u011f")
        buf.write("\5\24\13\2\u011c\u011f\5\26\f\2\u011d\u011f\7,\2\2\u011e")
        buf.write("\u0112\3\2\2\2\u011e\u0113\3\2\2\2\u011e\u0114\3\2\2\2")
        buf.write("\u011e\u0115\3\2\2\2\u011e\u0116\3\2\2\2\u011e\u0117\3")
        buf.write("\2\2\2\u011e\u0118\3\2\2\2\u011e\u0119\3\2\2\2\u011e\u011a")
        buf.write("\3\2\2\2\u011e\u011b\3\2\2\2\u011e\u011c\3\2\2\2\u011e")
        buf.write("\u011d\3\2\2\2\u011f\31\3\2\2\2\u0120\u0121\5\30\r\2\u0121")
        buf.write("\33\3\2\2\2\u0122\u0123\7q\2\2\u0123\35\3\2\2\2\u0124")
        buf.write("\u0126\5\34\17\2\u0125\u0124\3\2\2\2\u0125\u0126\3\2\2")
        buf.write("\2\u0126\37\3\2\2\2\u0127\u0129\5\34\17\2\u0128\u0127")
        buf.write("\3\2\2\2\u0128\u0129\3\2\2\2\u0129!\3\2\2\2\u012a\u012b")
        buf.write("\t\5\2\2\u012b#\3\2\2\2\u012c\u012d\t\6\2\2\u012d%\3\2")
        buf.write("\2\2\u012e\u012f\t\7\2\2\u012f\'\3\2\2\2\u0130\u0133\5")
        buf.write("$\23\2\u0131\u0133\5&\24\2\u0132\u0130\3\2\2\2\u0132\u0131")
        buf.write("\3\2\2\2\u0133)\3\2\2\2\u0134\u0135\t\b\2\2\u0135+\3\2")
        buf.write("\2\2\u0136\u0139\5D#\2\u0137\u0138\7\25\2\2\u0138\u013a")
        buf.write("\5\u00f2z\2\u0139\u0137\3\2\2\2\u0139\u013a\3\2\2\2\u013a")
        buf.write("-\3\2\2\2\u013b\u013c\7\n\2\2\u013c\u017f\5\36\20\2\u013d")
        buf.write("\u0140\6\30\2\2\u013e\u0141\5\u00f0y\2\u013f\u0141\5\u009a")
        buf.write("N\2\u0140\u013e\3\2\2\2\u0140\u013f\3\2\2\2\u0141\u0149")
        buf.write("\3\2\2\2\u0142\u0145\7\t\2\2\u0143\u0146\5\u00f0y\2\u0144")
        buf.write("\u0146\5\u009aN\2\u0145\u0143\3\2\2\2\u0145\u0144\3\2")
        buf.write("\2\2\u0146\u0148\3\2\2\2\u0147\u0142\3\2\2\2\u0148\u014b")
        buf.write("\3\2\2\2\u0149\u0147\3\2\2\2\u0149\u014a\3\2\2\2\u014a")
        buf.write("\u0180\3\2\2\2\u014b\u0149\3\2\2\2\u014c\u014f\7\t\2\2")
        buf.write("\u014d\u0150\5\u00f0y\2\u014e\u0150\5\u009aN\2\u014f\u014d")
        buf.write("\3\2\2\2\u014f\u014e\3\2\2\2\u0150\u0158\3\2\2\2\u0151")
        buf.write("\u0154\7\t\2\2\u0152\u0155\5\u00f0y\2\u0153\u0155\5\u009a")
        buf.write("N\2\u0154\u0152\3\2\2\2\u0154\u0153\3\2\2\2\u0155\u0157")
        buf.write("\3\2\2\2\u0156\u0151\3\2\2\2\u0157\u015a\3\2\2\2\u0158")
        buf.write("\u0156\3\2\2\2\u0158\u0159\3\2\2\2\u0159\u0180\3\2\2\2")
        buf.write("\u015a\u0158\3\2\2\2\u015b\u0180\5,\27\2\u015c\u017d\5")
        buf.write("F$\2\u015d\u015e\7\27\2\2\u015e\u016e\5x=\2\u015f\u0162")
        buf.write("\7\t\2\2\u0160\u0163\5\u00f0y\2\u0161\u0163\5\u009aN\2")
        buf.write("\u0162\u0160\3\2\2\2\u0162\u0161\3\2\2\2\u0163\u016b\3")
        buf.write("\2\2\2\u0164\u0167\7\t\2\2\u0165\u0168\5\u00f0y\2\u0166")
        buf.write("\u0168\5\u009aN\2\u0167\u0165\3\2\2\2\u0167\u0166\3\2")
        buf.write("\2\2\u0168\u016a\3\2\2\2\u0169\u0164\3\2\2\2\u016a\u016d")
        buf.write("\3\2\2\2\u016b\u0169\3\2\2\2\u016b\u016c\3\2\2\2\u016c")
        buf.write("\u016f\3\2\2\2\u016d\u016b\3\2\2\2\u016e\u015f\3\2\2\2")
        buf.write("\u016e\u016f\3\2\2\2\u016f\u017e\3\2\2\2\u0170\u0171\7")
        buf.write("\25\2\2\u0171\u017b\5x=\2\u0172\u0173\7\b\2\2\u0173\u0178")
        buf.write("\5`\61\2\u0174\u0175\7\b\2\2\u0175\u0177\5`\61\2\u0176")
        buf.write("\u0174\3\2\2\2\u0177\u017a\3\2\2\2\u0178\u0176\3\2\2\2")
        buf.write("\u0178\u0179\3\2\2\2\u0179\u017c\3\2\2\2\u017a\u0178\3")
        buf.write("\2\2\2\u017b\u0172\3\2\2\2\u017b\u017c\3\2\2\2\u017c\u017e")
        buf.write("\3\2\2\2\u017d\u015d\3\2\2\2\u017d\u0170\3\2\2\2\u017e")
        buf.write("\u0180\3\2\2\2\u017f\u013d\3\2\2\2\u017f\u014c\3\2\2\2")
        buf.write("\u017f\u015b\3\2\2\2\u017f\u015c\3\2\2\2\u0180\u0181\3")
        buf.write("\2\2\2\u0181\u0182\5 \21\2\u0182\u0183\7\13\2\2\u0183")
        buf.write("/\3\2\2\2\u0184\u0185\7\n\2\2\u0185\u018c\5\36\20\2\u0186")
        buf.write("\u0188\5`\61\2\u0187\u0189\7\b\2\2\u0188\u0187\3\2\2\2")
        buf.write("\u0188\u0189\3\2\2\2\u0189\u018b\3\2\2\2\u018a\u0186\3")
        buf.write("\2\2\2\u018b\u018e\3\2\2\2\u018c\u018a\3\2\2\2\u018c\u018d")
        buf.write("\3\2\2\2\u018d\u018f\3\2\2\2\u018e\u018c\3\2\2\2\u018f")
        buf.write("\u0190\5 \21\2\u0190\u0191\7\13\2\2\u0191\61\3\2\2\2\u0192")
        buf.write("\u0193\7\16\2\2\u0193\u019a\5\36\20\2\u0194\u0196\5`\61")
        buf.write("\2\u0195\u0197\7\b\2\2\u0196\u0195\3\2\2\2\u0196\u0197")
        buf.write("\3\2\2\2\u0197\u0199\3\2\2\2\u0198\u0194\3\2\2\2\u0199")
        buf.write("\u019c\3\2\2\2\u019a\u0198\3\2\2\2\u019a\u019b\3\2\2\2")
        buf.write("\u019b\u019d\3\2\2\2\u019c\u019a\3\2\2\2\u019d\u019e\5")
        buf.write(" \21\2\u019e\u019f\7\17\2\2\u019f\63\3\2\2\2\u01a0\u01a1")
        buf.write("\5F$\2\u01a1\65\3\2\2\2\u01a2\u01ac\7\f\2\2\u01a3\u01a4")
        buf.write("\5`\61\2\u01a4\u01a5\7\b\2\2\u01a5\u01a7\3\2\2\2\u01a6")
        buf.write("\u01a3\3\2\2\2\u01a7\u01aa\3\2\2\2\u01a8\u01a6\3\2\2\2")
        buf.write("\u01a8\u01a9\3\2\2\2\u01a9\u01ad\3\2\2\2\u01aa\u01a8\3")
        buf.write("\2\2\2\u01ab\u01ad\7\25\2\2\u01ac\u01a8\3\2\2\2\u01ac")
        buf.write("\u01ab\3\2\2\2\u01ad\u01ae\3\2\2\2\u01ae\u01af\7\r\2\2")
        buf.write("\u01af\67\3\2\2\2\u01b0\u01b1\7R\2\2\u01b1\u01b2\7\16")
        buf.write("\2\2\u01b2\u01b3\5\36\20\2\u01b3\u01b4\5\64\33\2\u01b4")
        buf.write("\u01b5\5 \21\2\u01b5\u01b6\7\17\2\2\u01b6\u01b7\7\n\2")
        buf.write("\2\u01b7\u01b8\5\36\20\2\u01b8\u01b9\5x=\2\u01b9\u01ba")
        buf.write("\5 \21\2\u01ba\u01bb\7\13\2\2\u01bb9\3\2\2\2\u01bc\u01c4")
        buf.write("\5*\26\2\u01bd\u01c4\5j\66\2\u01be\u01c4\5f\64\2\u01bf")
        buf.write("\u01c4\5.\30\2\u01c0\u01c4\5\62\32\2\u01c1\u01c4\5\66")
        buf.write("\34\2\u01c2\u01c4\58\35\2\u01c3\u01bc\3\2\2\2\u01c3\u01bd")
        buf.write("\3\2\2\2\u01c3\u01be\3\2\2\2\u01c3\u01bf\3\2\2\2\u01c3")
        buf.write("\u01c0\3\2\2\2\u01c3\u01c1\3\2\2\2\u01c3\u01c2\3\2\2\2")
        buf.write("\u01c4;\3\2\2\2\u01c5\u01c6\5x=\2\u01c6=\3\2\2\2\u01c7")
        buf.write("\u01cc\5<\37\2\u01c8\u01c9\7\b\2\2\u01c9\u01cb\5<\37\2")
        buf.write("\u01ca\u01c8\3\2\2\2\u01cb\u01ce\3\2\2\2\u01cc\u01ca\3")
        buf.write("\2\2\2\u01cc\u01cd\3\2\2\2\u01cd?\3\2\2\2\u01ce\u01cc")
        buf.write("\3\2\2\2\u01cf\u01d1\5`\61\2\u01d0\u01d2\7\b\2\2\u01d1")
        buf.write("\u01d0\3\2\2\2\u01d1\u01d2\3\2\2\2\u01d2\u01d4\3\2\2\2")
        buf.write("\u01d3\u01cf\3\2\2\2\u01d4\u01d5\3\2\2\2\u01d5\u01d3\3")
        buf.write("\2\2\2\u01d5\u01d6\3\2\2\2\u01d6\u01f7\3\2\2\2\u01d7\u01de")
        buf.write("\7\n\2\2\u01d8\u01da\5`\61\2\u01d9\u01db\7\b\2\2\u01da")
        buf.write("\u01d9\3\2\2\2\u01da\u01db\3\2\2\2\u01db\u01dd\3\2\2\2")
        buf.write("\u01dc\u01d8\3\2\2\2\u01dd\u01e0\3\2\2\2\u01de\u01dc\3")
        buf.write("\2\2\2\u01de\u01df\3\2\2\2\u01df\u01e1\3\2\2\2\u01e0\u01de")
        buf.write("\3\2\2\2\u01e1\u01f7\7\13\2\2\u01e2\u01e3\7\26\2\2\u01e3")
        buf.write("\u01e4\5\36\20\2\u01e4\u01e6\5j\66\2\u01e5\u01e7\5*\26")
        buf.write("\2\u01e6\u01e5\3\2\2\2\u01e6\u01e7\3\2\2\2\u01e7\u01f7")
        buf.write("\3\2\2\2\u01e8\u01e9\7\16\2\2\u01e9\u01ea\5\36\20\2\u01ea")
        buf.write("\u01eb\5> \2\u01eb\u01ec\5 \21\2\u01ec\u01ed\7\17\2\2")
        buf.write("\u01ed\u01f7\3\2\2\2\u01ee\u01ef\7\f\2\2\u01ef\u01f0\5")
        buf.write("\36\20\2\u01f0\u01f1\5> \2\u01f1\u01f2\5 \21\2\u01f2\u01f3")
        buf.write("\7\r\2\2\u01f3\u01f7\3\2\2\2\u01f4\u01f5\6!\3\2\u01f5")
        buf.write("\u01f7\5x=\2\u01f6\u01d3\3\2\2\2\u01f6\u01d7\3\2\2\2\u01f6")
        buf.write("\u01e2\3\2\2\2\u01f6\u01e8\3\2\2\2\u01f6\u01ee\3\2\2\2")
        buf.write("\u01f6\u01f4\3\2\2\2\u01f7A\3\2\2\2\u01f8\u01f9\5$\23")
        buf.write("\2\u01f9\u01fa\5\64\33\2\u01fa\u020f\3\2\2\2\u01fb\u01fd")
        buf.write("\5\32\16\2\u01fc\u01fb\3\2\2\2\u01fd\u0200\3\2\2\2\u01fe")
        buf.write("\u01fc\3\2\2\2\u01fe\u01ff\3\2\2\2\u01ff\u0202\3\2\2\2")
        buf.write("\u0200\u01fe\3\2\2\2\u0201\u0203\5:\36\2\u0202\u0201\3")
        buf.write("\2\2\2\u0203\u0204\3\2\2\2\u0204\u0202\3\2\2\2\u0204\u0205")
        buf.write("\3\2\2\2\u0205\u0209\3\2\2\2\u0206\u0208\5@!\2\u0207\u0206")
        buf.write("\3\2\2\2\u0208\u020b\3\2\2\2\u0209\u0207\3\2\2\2\u0209")
        buf.write("\u020a\3\2\2\2\u020a\u020f\3\2\2\2\u020b\u0209\3\2\2\2")
        buf.write("\u020c\u020d\7*\2\2\u020d\u020f\5B\"\2\u020e\u01f8\3\2")
        buf.write("\2\2\u020e\u01fe\3\2\2\2\u020e\u020c\3\2\2\2\u020fC\3")
        buf.write("\2\2\2\u0210\u0211\7\f\2\2\u0211\u0212\7\26\2\2\u0212")
        buf.write("\u0219\5\36\20\2\u0213\u0215\5^\60\2\u0214\u0216\7\b\2")
        buf.write("\2\u0215\u0214\3\2\2\2\u0215\u0216\3\2\2\2\u0216\u0218")
        buf.write("\3\2\2\2\u0217\u0213\3\2\2\2\u0218\u021b\3\2\2\2\u0219")
        buf.write("\u0217\3\2\2\2\u0219\u021a\3\2\2\2\u021a\u021c\3\2\2\2")
        buf.write("\u021b\u0219\3\2\2\2\u021c\u021e\5 \21\2\u021d\u021f\7")
        buf.write("\26\2\2\u021e\u021d\3\2\2\2\u021e\u021f\3\2\2\2\u021f")
        buf.write("\u0220\3\2\2\2\u0220\u0221\7\r\2\2\u0221E\3\2\2\2\u0222")
        buf.write("\u0229\5H%\2\u0223\u0224\7\34\2\2\u0224\u0225\5\36\20")
        buf.write("\2\u0225\u0226\5H%\2\u0226\u0228\3\2\2\2\u0227\u0223\3")
        buf.write("\2\2\2\u0228\u022b\3\2\2\2\u0229\u0227\3\2\2\2\u0229\u022a")
        buf.write("\3\2\2\2\u022aG\3\2\2\2\u022b\u0229\3\2\2\2\u022c\u0233")
        buf.write("\5J&\2\u022d\u022e\7\35\2\2\u022e\u022f\5\36\20\2\u022f")
        buf.write("\u0230\5J&\2\u0230\u0232\3\2\2\2\u0231\u022d\3\2\2\2\u0232")
        buf.write("\u0235\3\2\2\2\u0233\u0231\3\2\2\2\u0233\u0234\3\2\2\2")
        buf.write("\u0234I\3\2\2\2\u0235\u0233\3\2\2\2\u0236\u023d\5L\'\2")
        buf.write("\u0237\u0238\7\36\2\2\u0238\u0239\5\36\20\2\u0239\u023a")
        buf.write("\5L\'\2\u023a\u023c\3\2\2\2\u023b\u0237\3\2\2\2\u023c")
        buf.write("\u023f\3\2\2\2\u023d\u023b\3\2\2\2\u023d\u023e\3\2\2\2")
        buf.write("\u023eK\3\2\2\2\u023f\u023d\3\2\2\2\u0240\u0247\5N(\2")
        buf.write("\u0241\u0242\7\37\2\2\u0242\u0243\5\36\20\2\u0243\u0244")
        buf.write("\5N(\2\u0244\u0246\3\2\2\2\u0245\u0241\3\2\2\2\u0246\u0249")
        buf.write("\3\2\2\2\u0247\u0245\3\2\2\2\u0247\u0248\3\2\2\2\u0248")
        buf.write("M\3\2\2\2\u0249\u0247\3\2\2\2\u024a\u0251\5P)\2\u024b")
        buf.write("\u024c\7 \2\2\u024c\u024d\5\36\20\2\u024d\u024e\5P)\2")
        buf.write("\u024e\u0250\3\2\2\2\u024f\u024b\3\2\2\2\u0250\u0253\3")
        buf.write("\2\2\2\u0251\u024f\3\2\2\2\u0251\u0252\3\2\2\2\u0252O")
        buf.write("\3\2\2\2\u0253\u0251\3\2\2\2\u0254\u025b\5R*\2\u0255\u0256")
        buf.write("\7!\2\2\u0256\u0257\5\36\20\2\u0257\u0258\5R*\2\u0258")
        buf.write("\u025a\3\2\2\2\u0259\u0255\3\2\2\2\u025a\u025d\3\2\2\2")
        buf.write("\u025b\u0259\3\2\2\2\u025b\u025c\3\2\2\2\u025cQ\3\2\2")
        buf.write("\2\u025d\u025b\3\2\2\2\u025e\u0265\5T+\2\u025f\u0260\7")
        buf.write("\"\2\2\u0260\u0261\5\36\20\2\u0261\u0262\5T+\2\u0262\u0264")
        buf.write("\3\2\2\2\u0263\u025f\3\2\2\2\u0264\u0267\3\2\2\2\u0265")
        buf.write("\u0263\3\2\2\2\u0265\u0266\3\2\2\2\u0266S\3\2\2\2\u0267")
        buf.write("\u0265\3\2\2\2\u0268\u026f\5V,\2\u0269\u026a\7#\2\2\u026a")
        buf.write("\u026b\5\36\20\2\u026b\u026c\5V,\2\u026c\u026e\3\2\2\2")
        buf.write("\u026d\u0269\3\2\2\2\u026e\u0271\3\2\2\2\u026f\u026d\3")
        buf.write("\2\2\2\u026f\u0270\3\2\2\2\u0270U\3\2\2\2\u0271\u026f")
        buf.write("\3\2\2\2\u0272\u0279\5X-\2\u0273\u0274\7$\2\2\u0274\u0275")
        buf.write("\5\36\20\2\u0275\u0276\5X-\2\u0276\u0278\3\2\2\2\u0277")
        buf.write("\u0273\3\2\2\2\u0278\u027b\3\2\2\2\u0279\u0277\3\2\2\2")
        buf.write("\u0279\u027a\3\2\2\2\u027aW\3\2\2\2\u027b\u0279\3\2\2")
        buf.write("\2\u027c\u0283\5Z.\2\u027d\u027e\7%\2\2\u027e\u027f\5")
        buf.write("\36\20\2\u027f\u0280\5Z.\2\u0280\u0282\3\2\2\2\u0281\u027d")
        buf.write("\3\2\2\2\u0282\u0285\3\2\2\2\u0283\u0281\3\2\2\2\u0283")
        buf.write("\u0284\3\2\2\2\u0284Y\3\2\2\2\u0285\u0283\3\2\2\2\u0286")
        buf.write("\u028d\5B\"\2\u0287\u0288\7&\2\2\u0288\u0289\5\36\20\2")
        buf.write("\u0289\u028a\5B\"\2\u028a\u028c\3\2\2\2\u028b\u0287\3")
        buf.write("\2\2\2\u028c\u028f\3\2\2\2\u028d\u028b\3\2\2\2\u028d\u028e")
        buf.write("\3\2\2\2\u028e[\3\2\2\2\u028f\u028d\3\2\2\2\u0290\u0295")
        buf.write("\5x=\2\u0291\u0292\7\b\2\2\u0292\u0294\5x=\2\u0293\u0291")
        buf.write("\3\2\2\2\u0294\u0297\3\2\2\2\u0295\u0293\3\2\2\2\u0295")
        buf.write("\u0296\3\2\2\2\u0296]\3\2\2\2\u0297\u0295\3\2\2\2\u0298")
        buf.write("\u029b\5x=\2\u0299\u029a\7\25\2\2\u029a\u029c\5x=\2\u029b")
        buf.write("\u0299\3\2\2\2\u029b\u029c\3\2\2\2\u029c_\3\2\2\2\u029d")
        buf.write("\u02a1\5x=\2\u029e\u02a2\7\25\2\2\u029f\u02a0\7\27\2\2")
        buf.write("\u02a0\u02a2\5x=\2\u02a1\u029e\3\2\2\2\u02a1\u029f\3\2")
        buf.write("\2\2\u02a1\u02a2\3\2\2\2\u02a2a\3\2\2\2\u02a3\u02a8\5")
        buf.write("`\61\2\u02a4\u02a5\7\b\2\2\u02a5\u02a7\5`\61\2\u02a6\u02a4")
        buf.write("\3\2\2\2\u02a7\u02aa\3\2\2\2\u02a8\u02a6\3\2\2\2\u02a8")
        buf.write("\u02a9\3\2\2\2\u02a9\u02ac\3\2\2\2\u02aa\u02a8\3\2\2\2")
        buf.write("\u02ab\u02ad\7\b\2\2\u02ac\u02ab\3\2\2\2\u02ac\u02ad\3")
        buf.write("\2\2\2\u02adc\3\2\2\2\u02ae\u02af\5x=\2\u02af\u02b0\7")
        buf.write("\25\2\2\u02b0\u02b1\5x=\2\u02b1\u02ba\5\36\20\2\u02b2")
        buf.write("\u02b3\79\2\2\u02b3\u02b4\5x=\2\u02b4\u02b5\7\25\2\2\u02b5")
        buf.write("\u02b6\5x=\2\u02b6\u02b7\5\36\20\2\u02b7\u02b9\3\2\2\2")
        buf.write("\u02b8\u02b2\3\2\2\2\u02b9\u02bc\3\2\2\2\u02ba\u02b8\3")
        buf.write("\2\2\2\u02ba\u02bb\3\2\2\2\u02bb\u02bd\3\2\2\2\u02bc\u02ba")
        buf.write("\3\2\2\2\u02bd\u02be\7:\2\2\u02be\u02bf\7\25\2\2\u02bf")
        buf.write("\u02c0\5x=\2\u02c0e\3\2\2\2\u02c1\u02c2\t\t\2\2\u02c2")
        buf.write("g\3\2\2\2\u02c3\u02d1\5(\25\2\u02c4\u02d1\7X\2\2\u02c5")
        buf.write("\u02d1\5f\64\2\u02c6\u02cf\5\30\r\2\u02c7\u02cf\7\n\2")
        buf.write("\2\u02c8\u02cf\7\13\2\2\u02c9\u02cf\7\16\2\2\u02ca\u02cf")
        buf.write("\7\17\2\2\u02cb\u02cf\7\f\2\2\u02cc\u02cf\7\r\2\2\u02cd")
        buf.write("\u02cf\7\27\2\2\u02ce\u02c6\3\2\2\2\u02ce\u02c7\3\2\2")
        buf.write("\2\u02ce\u02c8\3\2\2\2\u02ce\u02c9\3\2\2\2\u02ce\u02ca")
        buf.write("\3\2\2\2\u02ce\u02cb\3\2\2\2\u02ce\u02cc\3\2\2\2\u02ce")
        buf.write("\u02cd\3\2\2\2\u02cf\u02d1\3\2\2\2\u02d0\u02c3\3\2\2\2")
        buf.write("\u02d0\u02c4\3\2\2\2\u02d0\u02c5\3\2\2\2\u02d0\u02ce\3")
        buf.write("\2\2\2\u02d1i\3\2\2\2\u02d2\u02d4\7W\2\2\u02d3\u02d5\5")
        buf.write("h\65\2\u02d4\u02d3\3\2\2\2\u02d5\u02d6\3\2\2\2\u02d6\u02d4")
        buf.write("\3\2\2\2\u02d6\u02d7\3\2\2\2\u02d7\u02d8\3\2\2\2\u02d8")
        buf.write("\u02d9\7W\2\2\u02d9\u02dd\3\2\2\2\u02da\u02dd\5(\25\2")
        buf.write("\u02db\u02dd\7X\2\2\u02dc\u02d2\3\2\2\2\u02dc\u02da\3")
        buf.write("\2\2\2\u02dc\u02db\3\2\2\2\u02ddk\3\2\2\2\u02de\u02e0")
        buf.write("\7O\2\2\u02df\u02e1\5j\66\2\u02e0\u02df\3\2\2\2\u02e0")
        buf.write("\u02e1\3\2\2\2\u02e1\u02e2\3\2\2\2\u02e2\u02e3\7\25\2")
        buf.write("\2\u02e3\u02e4\5\u00f2z\2\u02e4m\3\2\2\2\u02e5\u02e6\7")
        buf.write("8\2\2\u02e6\u02e7\5d\63\2\u02e7o\3\2\2\2\u02e8\u02e9\7")
        buf.write("D\2\2\u02e9\u02ea\5d\63\2\u02eaq\3\2\2\2\u02eb\u02ec\5")
        buf.write("x=\2\u02ec\u02ed\7\26\2\2\u02ed\u02f5\5\36\20\2\u02ee")
        buf.write("\u02f6\5j\66\2\u02ef\u02f0\7\16\2\2\u02f0\u02f1\7\25\2")
        buf.write("\2\u02f1\u02f2\3\2\2\2\u02f2\u02f3\5\\/\2\u02f3\u02f4")
        buf.write("\7\17\2\2\u02f4\u02f6\3\2\2\2\u02f5\u02ee\3\2\2\2\u02f5")
        buf.write("\u02ef\3\2\2\2\u02f6s\3\2\2\2\u02f7\u02f8\5\u00dan\2\u02f8")
        buf.write("u\3\2\2\2\u02f9\u02fa\7\63\2\2\u02fa\u02fb\7\25\2\2\u02fb")
        buf.write("\u02fc\5\u00f2z\2\u02fc\u0305\6<\4\2\u02fd\u02fe\5\36")
        buf.write("\20\2\u02fe\u02ff\7\61\2\2\u02ff\u0300\5\\/\2\u0300\u0301")
        buf.write("\7\25\2\2\u0301\u0302\5\u00f2z\2\u0302\u0304\3\2\2\2\u0303")
        buf.write("\u02fd\3\2\2\2\u0304\u0307\3\2\2\2\u0305\u0303\3\2\2\2")
        buf.write("\u0305\u0306\3\2\2\2\u0306\u030d\3\2\2\2\u0307\u0305\3")
        buf.write("\2\2\2\u0308\u0309\5\36\20\2\u0309\u030a\7\65\2\2\u030a")
        buf.write("\u030b\7\25\2\2\u030b\u030c\5\u00f2z\2\u030c\u030e\3\2")
        buf.write("\2\2\u030d\u0308\3\2\2\2\u030d\u030e\3\2\2\2\u030ew\3")
        buf.write("\2\2\2\u030f\u0311\7\32\2\2\u0310\u030f\3\2\2\2\u0310")
        buf.write("\u0311\3\2\2\2\u0311\u0319\3\2\2\2\u0312\u031a\5l\67\2")
        buf.write("\u0313\u031a\5t;\2\u0314\u031a\5n8\2\u0315\u031a\5p9\2")
        buf.write("\u0316\u031a\5\u008eH\2\u0317\u031a\5v<\2\u0318\u031a")
        buf.write("\5F$\2\u0319\u0312\3\2\2\2\u0319\u0313\3\2\2\2\u0319\u0314")
        buf.write("\3\2\2\2\u0319\u0315\3\2\2\2\u0319\u0316\3\2\2\2\u0319")
        buf.write("\u0317\3\2\2\2\u0319\u0318\3\2\2\2\u031ay\3\2\2\2\u031b")
        buf.write("\u031c\7X\2\2\u031c{\3\2\2\2\u031d\u031e\7\25\2\2\u031e")
        buf.write("\u031f\5\u00f2z\2\u031f}\3\2\2\2\u0320\u0321\7\62\2\2")
        buf.write("\u0321\u0323\5\36\20\2\u0322\u0324\5x=\2\u0323\u0322\3")
        buf.write("\2\2\2\u0323\u0324\3\2\2\2\u0324\177\3\2\2\2\u0325\u0326")
        buf.write("\7\64\2\2\u0326\u0328\5\36\20\2\u0327\u0329\5x=\2\u0328")
        buf.write("\u0327\3\2\2\2\u0328\u0329\3\2\2\2\u0329\u0081\3\2\2\2")
        buf.write("\u032a\u032b\7E\2\2\u032b\u032d\5\36\20\2\u032c\u032e")
        buf.write("\5x=\2\u032d\u032c\3\2\2\2\u032d\u032e\3\2\2\2\u032e\u0083")
        buf.write("\3\2\2\2\u032f\u0330\7U\2\2\u0330\u0332\5\36\20\2\u0331")
        buf.write("\u0333\5x=\2\u0332\u0331\3\2\2\2\u0332\u0333\3\2\2\2\u0333")
        buf.write("\u0085\3\2\2\2\u0334\u0335\7@\2\2\u0335\u0337\5\36\20")
        buf.write("\2\u0336\u0338\5x=\2\u0337\u0336\3\2\2\2\u0337\u0338\3")
        buf.write("\2\2\2\u0338\u0087\3\2\2\2\u0339\u033a\7?\2\2\u033a\u033c")
        buf.write("\5\36\20\2\u033b\u033d\5x=\2\u033c\u033b\3\2\2\2\u033c")
        buf.write("\u033d\3\2\2\2\u033d\u0089\3\2\2\2\u033e\u033f\7G\2\2")
        buf.write("\u033f\u0340\5\36\20\2\u0340\u0352\5x=\2\u0341\u0342\7")
        buf.write("\b\2\2\u0342\u0344\5x=\2\u0343\u0341\3\2\2\2\u0344\u0347")
        buf.write("\3\2\2\2\u0345\u0343\3\2\2\2\u0345\u0346\3\2\2\2\u0346")
        buf.write("\u0353\3\2\2\2\u0347\u0345\3\2\2\2\u0348\u0349\7\61\2")
        buf.write("\2\u0349\u034a\5\36\20\2\u034a\u034f\5x=\2\u034b\u034c")
        buf.write("\7\b\2\2\u034c\u034e\5x=\2\u034d\u034b\3\2\2\2\u034e\u0351")
        buf.write("\3\2\2\2\u034f\u034d\3\2\2\2\u034f\u0350\3\2\2\2\u0350")
        buf.write("\u0353\3\2\2\2\u0351\u034f\3\2\2\2\u0352\u0345\3\2\2\2")
        buf.write("\u0352\u0348\3\2\2\2\u0353\u008b\3\2\2\2\u0354\u0355\7")
        buf.write("H\2\2\u0355\u0356\5z>\2\u0356\u0357\7G\2\2\u0357\u0358")
        buf.write("\5\36\20\2\u0358\u035d\5x=\2\u0359\u035a\7\b\2\2\u035a")
        buf.write("\u035c\5x=\2\u035b\u0359\3\2\2\2\u035c\u035f\3\2\2\2\u035d")
        buf.write("\u035b\3\2\2\2\u035d\u035e\3\2\2\2\u035e\u008d\3\2\2\2")
        buf.write("\u035f\u035d\3\2\2\2\u0360\u0361\7\67\2\2\u0361\u0362")
        buf.write("\7X\2\2\u0362\u0363\5\u0094K\2\u0363\u008f\3\2\2\2\u0364")
        buf.write("\u0365\7\67\2\2\u0365\u0367\5x=\2\u0366\u0368\7\25\2\2")
        buf.write("\u0367\u0366\3\2\2\2\u0367\u0368\3\2\2\2\u0368\u036e\3")
        buf.write("\2\2\2\u0369\u036a\5\34\17\2\u036a\u036b\5\u0094K\2\u036b")
        buf.write("\u036c\5\"\22\2\u036c\u036f\3\2\2\2\u036d\u036f\5\u0094")
        buf.write("K\2\u036e\u0369\3\2\2\2\u036e\u036d\3\2\2\2\u036f\u0091")
        buf.write("\3\2\2\2\u0370\u0371\7\31\2\2\u0371\u0372\5\\/\2\u0372")
        buf.write("\u0373\7\25\2\2\u0373\u0374\5\u00f2z\2\u0374\u0093\3\2")
        buf.write("\2\2\u0375\u0377\5\u0092J\2\u0376\u0375\3\2\2\2\u0377")
        buf.write("\u0378\3\2\2\2\u0378\u0376\3\2\2\2\u0378\u0379\3\2\2\2")
        buf.write("\u0379\u0381\3\2\2\2\u037a\u037b\79\2\2\u037b\u037c\5")
        buf.write("x=\2\u037c\u037d\7\25\2\2\u037d\u037e\5\u00f2z\2\u037e")
        buf.write("\u0380\3\2\2\2\u037f\u037a\3\2\2\2\u0380\u0383\3\2\2\2")
        buf.write("\u0381\u037f\3\2\2\2\u0381\u0382\3\2\2\2\u0382\u0387\3")
        buf.write("\2\2\2\u0383\u0381\3\2\2\2\u0384\u0385\7:\2\2\u0385\u0386")
        buf.write("\7\25\2\2\u0386\u0388\5\u00f2z\2\u0387\u0384\3\2\2\2\u0387")
        buf.write("\u0388\3\2\2\2\u0388\u0095\3\2\2\2\u0389\u038a\7F\2\2")
        buf.write("\u038a\u038b\5\36\20\2\u038b\u0391\5x=\2\u038c\u038d\5")
        buf.write("x=\2\u038d\u038e\7\b\2\2\u038e\u0390\3\2\2\2\u038f\u038c")
        buf.write("\3\2\2\2\u0390\u0393\3\2\2\2\u0391\u038f\3\2\2\2\u0391")
        buf.write("\u0392\3\2\2\2\u0392\u0097\3\2\2\2\u0393\u0391\3\2\2\2")
        buf.write("\u0394\u039b\5F$\2\u0395\u0396\7\27\2\2\u0396\u0397\5")
        buf.write("\36\20\2\u0397\u0399\5x=\2\u0398\u039a\5|?\2\u0399\u0398")
        buf.write("\3\2\2\2\u0399\u039a\3\2\2\2\u039a\u039c\3\2\2\2\u039b")
        buf.write("\u0395\3\2\2\2\u039b\u039c\3\2\2\2\u039c\u0099\3\2\2\2")
        buf.write("\u039d\u03a9\5~@\2\u039e\u03a9\5\u0080A\2\u039f\u03a9")
        buf.write("\5\u0082B\2\u03a0\u03a9\5\u0084C\2\u03a1\u03a9\5\u0086")
        buf.write("D\2\u03a2\u03a9\5\u0088E\2\u03a3\u03a9\5,\27\2\u03a4\u03a9")
        buf.write("\5\u008aF\2\u03a5\u03a9\5\u008cG\2\u03a6\u03a9\5\u0096")
        buf.write("L\2\u03a7\u03a9\5\u0098M\2\u03a8\u039d\3\2\2\2\u03a8\u039e")
        buf.write("\3\2\2\2\u03a8\u039f\3\2\2\2\u03a8\u03a0\3\2\2\2\u03a8")
        buf.write("\u03a1\3\2\2\2\u03a8\u03a2\3\2\2\2\u03a8\u03a3\3\2\2\2")
        buf.write("\u03a8\u03a4\3\2\2\2\u03a8\u03a5\3\2\2\2\u03a8\u03a6\3")
        buf.write("\2\2\2\u03a8\u03a7\3\2\2\2\u03a9\u009b\3\2\2\2\u03aa\u03ab")
        buf.write("\5x=\2\u03ab\u03ac\7\25\2\2\u03ac\u03b4\5\u00f2z\2\u03ad")
        buf.write("\u03ae\79\2\2\u03ae\u03af\5x=\2\u03af\u03b0\7\25\2\2\u03b0")
        buf.write("\u03b1\5\u00f2z\2\u03b1\u03b3\3\2\2\2\u03b2\u03ad\3\2")
        buf.write("\2\2\u03b3\u03b6\3\2\2\2\u03b4\u03b2\3\2\2\2\u03b4\u03b5")
        buf.write("\3\2\2\2\u03b5\u03ba\3\2\2\2\u03b6\u03b4\3\2\2\2\u03b7")
        buf.write("\u03b8\7:\2\2\u03b8\u03b9\7\25\2\2\u03b9\u03bb\5\u00f2")
        buf.write("z\2\u03ba\u03b7\3\2\2\2\u03ba\u03bb\3\2\2\2\u03bb\u009d")
        buf.write("\3\2\2\2\u03bc\u03be\5j\66\2\u03bd\u03bf\5\30\r\2\u03be")
        buf.write("\u03bd\3\2\2\2\u03be\u03bf\3\2\2\2\u03bf\u009f\3\2\2\2")
        buf.write("\u03c0\u03c2\5j\66\2\u03c1\u03c3\7\26\2\2\u03c2\u03c1")
        buf.write("\3\2\2\2\u03c2\u03c3\3\2\2\2\u03c3\u03c4\3\2\2\2\u03c4")
        buf.write("\u03c5\5\36\20\2\u03c5\u03c7\5j\66\2\u03c6\u03c8\5\30")
        buf.write("\r\2\u03c7\u03c6\3\2\2\2\u03c7\u03c8\3\2\2\2\u03c8\u00a1")
        buf.write("\3\2\2\2\u03c9\u03cb\5\u009eP\2\u03ca\u03cc\5D#\2\u03cb")
        buf.write("\u03ca\3\2\2\2\u03cb\u03cc\3\2\2\2\u03cc\u00a3\3\2\2\2")
        buf.write("\u03cd\u03ce\78\2\2\u03ce\u03cf\5\u009cO\2\u03cf\u00a5")
        buf.write("\3\2\2\2\u03d0\u03d1\7D\2\2\u03d1\u03d2\5\u009cO\2\u03d2")
        buf.write("\u00a7\3\2\2\2\u03d3\u03d4\7<\2\2\u03d4\u03d5\5x=\2\u03d5")
        buf.write("\u03d6\7\25\2\2\u03d6\u03d7\5\u00f2z\2\u03d7\u00a9\3\2")
        buf.write("\2\2\u03d8\u03d9\7\63\2\2\u03d9\u03da\7\25\2\2\u03da\u03db")
        buf.write("\5\u00f2z\2\u03db\u03e3\6V\5\2\u03dc\u03dd\7\61\2\2\u03dd")
        buf.write("\u03de\5\\/\2\u03de\u03df\7\25\2\2\u03df\u03e0\5\u00f2")
        buf.write("z\2\u03e0\u03e2\3\2\2\2\u03e1\u03dc\3\2\2\2\u03e2\u03e5")
        buf.write("\3\2\2\2\u03e3\u03e1\3\2\2\2\u03e3\u03e4\3\2\2\2\u03e4")
        buf.write("\u03e9\3\2\2\2\u03e5\u03e3\3\2\2\2\u03e6\u03e7\7\65\2")
        buf.write("\2\u03e7\u03e8\7\25\2\2\u03e8\u03ea\5\u00f2z\2\u03e9\u03e6")
        buf.write("\3\2\2\2\u03e9\u03ea\3\2\2\2\u03ea\u00ab\3\2\2\2\u03eb")
        buf.write("\u03ec\7\f\2\2\u03ec\u03ed\5\u00f2z\2\u03ed\u03ee\7\r")
        buf.write("\2\2\u03ee\u00ad\3\2\2\2\u03ef\u03f4\5j\66\2\u03f0\u03f1")
        buf.write("\7\b\2\2\u03f1\u03f3\5j\66\2\u03f2\u03f0\3\2\2\2\u03f3")
        buf.write("\u03f6\3\2\2\2\u03f4\u03f2\3\2\2\2\u03f4\u03f5\3\2\2\2")
        buf.write("\u03f5\u03f9\3\2\2\2\u03f6\u03f4\3\2\2\2\u03f7\u03f8\7")
        buf.write("\25\2\2\u03f8\u03fa\5x=\2\u03f9\u03f7\3\2\2\2\u03f9\u03fa")
        buf.write("\3\2\2\2\u03fa\u03ff\3\2\2\2\u03fb\u03fc\7\27\2\2\u03fc")
        buf.write("\u03fd\5\36\20\2\u03fd\u03fe\5x=\2\u03fe\u0400\3\2\2\2")
        buf.write("\u03ff\u03fb\3\2\2\2\u03ff\u0400\3\2\2\2\u0400\u00af\3")
        buf.write("\2\2\2\u0401\u0402\7\16\2\2\u0402\u040b\5\36\20\2\u0403")
        buf.write("\u0408\5\u00aeX\2\u0404\u0405\t\n\2\2\u0405\u0407\5\u00ae")
        buf.write("X\2\u0406\u0404\3\2\2\2\u0407\u040a\3\2\2\2\u0408\u0406")
        buf.write("\3\2\2\2\u0408\u0409\3\2\2\2\u0409\u040c\3\2\2\2\u040a")
        buf.write("\u0408\3\2\2\2\u040b\u0403\3\2\2\2\u040b\u040c\3\2\2\2")
        buf.write("\u040c\u040d\3\2\2\2\u040d\u040e\5 \21\2\u040e\u040f\7")
        buf.write("\17\2\2\u040f\u00b1\3\2\2\2\u0410\u0412\5\u00a0Q\2\u0411")
        buf.write("\u0413\5D#\2\u0412\u0411\3\2\2\2\u0412\u0413\3\2\2\2\u0413")
        buf.write("\u00b3\3\2\2\2\u0414\u0418\5F$\2\u0415\u0416\7\23\2\2")
        buf.write("\u0416\u0418\5\u00c4c\2\u0417\u0414\3\2\2\2\u0417\u0415")
        buf.write("\3\2\2\2\u0418\u00b5\3\2\2\2\u0419\u041a\7D\2\2\u041a")
        buf.write("\u041b\5x=\2\u041b\u041c\7\25\2\2\u041c\u0424\5\u00be")
        buf.write("`\2\u041d\u041e\79\2\2\u041e\u041f\5x=\2\u041f\u0420\7")
        buf.write("\25\2\2\u0420\u0421\5\u00be`\2\u0421\u0423\3\2\2\2\u0422")
        buf.write("\u041d\3\2\2\2\u0423\u0426\3\2\2\2\u0424\u0422\3\2\2\2")
        buf.write("\u0424\u0425\3\2\2\2\u0425\u042a\3\2\2\2\u0426\u0424\3")
        buf.write("\2\2\2\u0427\u0428\7:\2\2\u0428\u0429\7\25\2\2\u0429\u042b")
        buf.write("\5\u00be`\2\u042a\u0427\3\2\2\2\u042a\u042b\3\2\2\2\u042b")
        buf.write("\u00b7\3\2\2\2\u042c\u042d\7\31\2\2\u042d\u042e\5\\/\2")
        buf.write("\u042e\u042f\7\25\2\2\u042f\u0430\5\u00be`\2\u0430\u00b9")
        buf.write("\3\2\2\2\u0431\u0435\5\u00b8]\2\u0432\u0434\5\u00b8]\2")
        buf.write("\u0433\u0432\3\2\2\2\u0434\u0437\3\2\2\2\u0435\u0433\3")
        buf.write("\2\2\2\u0435\u0436\3\2\2\2\u0436\u043f\3\2\2\2\u0437\u0435")
        buf.write("\3\2\2\2\u0438\u0439\79\2\2\u0439\u043a\5x=\2\u043a\u043b")
        buf.write("\7\25\2\2\u043b\u043c\5\u00be`\2\u043c\u043e\3\2\2\2\u043d")
        buf.write("\u0438\3\2\2\2\u043e\u0441\3\2\2\2\u043f\u043d\3\2\2\2")
        buf.write("\u043f\u0440\3\2\2\2\u0440\u0445\3\2\2\2\u0441\u043f\3")
        buf.write("\2\2\2\u0442\u0443\7:\2\2\u0443\u0444\7\25\2\2\u0444\u0446")
        buf.write("\5\u00be`\2\u0445\u0442\3\2\2\2\u0445\u0446\3\2\2\2\u0446")
        buf.write("\u00bb\3\2\2\2\u0447\u0448\7\67\2\2\u0448\u0449\5\u00a2")
        buf.write("R\2\u0449\u044a\7\25\2\2\u044a\u044c\5\64\33\2\u044b\u044d")
        buf.write("\7\25\2\2\u044c\u044b\3\2\2\2\u044c\u044d\3\2\2\2\u044d")
        buf.write("\u0453\3\2\2\2\u044e\u044f\5\34\17\2\u044f\u0450\5\u00ba")
        buf.write("^\2\u0450\u0451\5\"\22\2\u0451\u0454\3\2\2\2\u0452\u0454")
        buf.write("\5\u00ba^\2\u0453\u044e\3\2\2\2\u0453\u0452\3\2\2\2\u0454")
        buf.write("\u00bd\3\2\2\2\u0455\u0457\5\34\17\2\u0456\u0458\5\u00be")
        buf.write("`\2\u0457\u0456\3\2\2\2\u0458\u0459\3\2\2\2\u0459\u0457")
        buf.write("\3\2\2\2\u0459\u045a\3\2\2\2\u045a\u045b\3\2\2\2\u045b")
        buf.write("\u045c\5\"\22\2\u045c\u0463\3\2\2\2\u045d\u0463\5\u00b6")
        buf.write("\\\2\u045e\u0463\5\u00bc_\2\u045f\u0463\7Q\2\2\u0460\u0463")
        buf.write("\7U\2\2\u0461\u0463\5\u00ccg\2\u0462\u0455\3\2\2\2\u0462")
        buf.write("\u045d\3\2\2\2\u0462\u045e\3\2\2\2\u0462\u045f\3\2\2\2")
        buf.write("\u0462\u0460\3\2\2\2\u0462\u0461\3\2\2\2\u0463\u00bf\3")
        buf.write("\2\2\2\u0464\u0466\7\22\2\2\u0465\u0467\5D#\2\u0466\u0465")
        buf.write("\3\2\2\2\u0466\u0467\3\2\2\2\u0467\u046a\3\2\2\2\u0468")
        buf.write("\u0469\7\31\2\2\u0469\u046b\5\64\33\2\u046a\u0468\3\2")
        buf.write("\2\2\u046a\u046b\3\2\2\2\u046b\u046c\3\2\2\2\u046c\u046d")
        buf.write("\5\u00be`\2\u046d\u00c1\3\2\2\2\u046e\u0470\t\13\2\2\u046f")
        buf.write("\u046e\3\2\2\2\u046f\u0470\3\2\2\2\u0470\u0471\3\2\2\2")
        buf.write("\u0471\u0472\5j\66\2\u0472\u00c3\3\2\2\2\u0473\u0478\5")
        buf.write("\u00c2b\2\u0474\u0475\7\b\2\2\u0475\u0477\5\u00c2b\2\u0476")
        buf.write("\u0474\3\2\2\2\u0477\u047a\3\2\2\2\u0478\u0476\3\2\2\2")
        buf.write("\u0478\u0479\3\2\2\2\u0479\u047c\3\2\2\2\u047a\u0478\3")
        buf.write("\2\2\2\u047b\u0473\3\2\2\2\u047b\u047c\3\2\2\2\u047c\u047e")
        buf.write("\3\2\2\2\u047d\u047f\5D#\2\u047e\u047d\3\2\2\2\u047e\u047f")
        buf.write("\3\2\2\2\u047f\u048b\3\2\2\2\u0480\u0489\7\31\2\2\u0481")
        buf.write("\u0486\5\64\33\2\u0482\u0483\7\b\2\2\u0483\u0485\5\64")
        buf.write("\33\2\u0484\u0482\3\2\2\2\u0485\u0488\3\2\2\2\u0486\u0484")
        buf.write("\3\2\2\2\u0486\u0487\3\2\2\2\u0487\u048a\3\2\2\2\u0488")
        buf.write("\u0486\3\2\2\2\u0489\u0481\3\2\2\2\u0489\u048a\3\2\2\2")
        buf.write("\u048a\u048c\3\2\2\2\u048b\u0480\3\2\2\2\u048b\u048c\3")
        buf.write("\2\2\2\u048c\u048d\3\2\2\2\u048d\u048e\6c\6\2\u048e\u048f")
        buf.write("\5\u00f2z\2\u048f\u00c5\3\2\2\2\u0490\u0492\5\u00b2Z\2")
        buf.write("\u0491\u0493\5\u00b0Y\2\u0492\u0491\3\2\2\2\u0492\u0493")
        buf.write("\3\2\2\2\u0493\u0494\3\2\2\2\u0494\u0495\7\27\2\2\u0495")
        buf.write("\u0496\5\36\20\2\u0496\u0497\5\u00b4[\2\u0497\u0498\5")
        buf.write("\36\20\2\u0498\u00c7\3\2\2\2\u0499\u049c\5\u00a2R\2\u049a")
        buf.write("\u049b\7\25\2\2\u049b\u049d\5\64\33\2\u049c\u049a\3\2")
        buf.write("\2\2\u049c\u049d\3\2\2\2\u049d\u049e\3\2\2\2\u049e\u049f")
        buf.write("\7\27\2\2\u049f\u04a0\5\36\20\2\u04a0\u04a1\5x=\2\u04a1")
        buf.write("\u04a2\5\36\20\2\u04a2\u00c9\3\2\2\2\u04a3\u04a4\7\n\2")
        buf.write("\2\u04a4\u04a5\5\36\20\2\u04a5\u04aa\5\u00a2R\2\u04a6")
        buf.write("\u04a7\7\b\2\2\u04a7\u04a9\5\u00a2R\2\u04a8\u04a6\3\2")
        buf.write("\2\2\u04a9\u04ac\3\2\2\2\u04aa\u04a8\3\2\2\2\u04aa\u04ab")
        buf.write("\3\2\2\2\u04ab\u04ad\3\2\2\2\u04ac\u04aa\3\2\2\2\u04ad")
        buf.write("\u04ae\5 \21\2\u04ae\u04af\7\13\2\2\u04af\u04b0\7\27\2")
        buf.write("\2\u04b0\u04b1\5\36\20\2\u04b1\u04b2\5x=\2\u04b2\u00cb")
        buf.write("\3\2\2\2\u04b3\u04b8\5\u00a2R\2\u04b4\u04b5\7\b\2\2\u04b5")
        buf.write("\u04b7\5\u00a2R\2\u04b6\u04b4\3\2\2\2\u04b7\u04ba\3\2")
        buf.write("\2\2\u04b8\u04b6\3\2\2\2\u04b8\u04b9\3\2\2\2\u04b9\u04bc")
        buf.write("\3\2\2\2\u04ba\u04b8\3\2\2\2\u04bb\u04bd\7\b\2\2\u04bc")
        buf.write("\u04bb\3\2\2\2\u04bc\u04bd\3\2\2\2\u04bd\u04c2\3\2\2\2")
        buf.write("\u04be\u04bf\7\25\2\2\u04bf\u04c0\5\36\20\2\u04c0\u04c1")
        buf.write("\5\64\33\2\u04c1\u04c3\3\2\2\2\u04c2\u04be\3\2\2\2\u04c2")
        buf.write("\u04c3\3\2\2\2\u04c3\u04c8\3\2\2\2\u04c4\u04c5\7\27\2")
        buf.write("\2\u04c5\u04c6\5\36\20\2\u04c6\u04c7\5x=\2\u04c7\u04c9")
        buf.write("\3\2\2\2\u04c8\u04c4\3\2\2\2\u04c8\u04c9\3\2\2\2\u04c9")
        buf.write("\u00cd\3\2\2\2\u04ca\u04cf\7X\2\2\u04cb\u04cc\7\b\2\2")
        buf.write("\u04cc\u04ce\7X\2\2\u04cd\u04cb\3\2\2\2\u04ce\u04d1\3")
        buf.write("\2\2\2\u04cf\u04cd\3\2\2\2\u04cf\u04d0\3\2\2\2\u04d0\u04d3")
        buf.write("\3\2\2\2\u04d1\u04cf\3\2\2\2\u04d2\u04d4\7\b\2\2\u04d3")
        buf.write("\u04d2\3\2\2\2\u04d3\u04d4\3\2\2\2\u04d4\u04d9\3\2\2\2")
        buf.write("\u04d5\u04d6\7\25\2\2\u04d6\u04d7\5\36\20\2\u04d7\u04d8")
        buf.write("\5\64\33\2\u04d8\u04da\3\2\2\2\u04d9\u04d5\3\2\2\2\u04d9")
        buf.write("\u04da\3\2\2\2\u04da\u04df\3\2\2\2\u04db\u04dc\7\27\2")
        buf.write("\2\u04dc\u04dd\5\36\20\2\u04dd\u04de\5x=\2\u04de\u04e0")
        buf.write("\3\2\2\2\u04df\u04db\3\2\2\2\u04df\u04e0\3\2\2\2\u04e0")
        buf.write("\u00cf\3\2\2\2\u04e1\u04ea\7\n\2\2\u04e2\u04e7\5\u00cc")
        buf.write("g\2\u04e3\u04e4\t\n\2\2\u04e4\u04e6\5\u00ccg\2\u04e5\u04e3")
        buf.write("\3\2\2\2\u04e6\u04e9\3\2\2\2\u04e7\u04e5\3\2\2\2\u04e7")
        buf.write("\u04e8\3\2\2\2\u04e8\u04eb\3\2\2\2\u04e9\u04e7\3\2\2\2")
        buf.write("\u04ea\u04e2\3\2\2\2\u04ea\u04eb\3\2\2\2\u04eb\u04ec\3")
        buf.write("\2\2\2\u04ec\u04f6\7\13\2\2\u04ed\u04f2\5\u00ccg\2\u04ee")
        buf.write("\u04ef\t\n\2\2\u04ef\u04f1\5\u00ccg\2\u04f0\u04ee\3\2")
        buf.write("\2\2\u04f1\u04f4\3\2\2\2\u04f2\u04f0\3\2\2\2\u04f2\u04f3")
        buf.write("\3\2\2\2\u04f3\u04f6\3\2\2\2\u04f4\u04f2\3\2\2\2\u04f5")
        buf.write("\u04e1\3\2\2\2\u04f5\u04ed\3\2\2\2\u04f6\u00d1\3\2\2\2")
        buf.write("\u04f7\u04f9\5\u00d0i\2\u04f8\u04f7\3\2\2\2\u04f8\u04f9")
        buf.write("\3\2\2\2\u04f9\u04fe\3\2\2\2\u04fa\u04fb\7\25\2\2\u04fb")
        buf.write("\u04fc\5\36\20\2\u04fc\u04fd\5\64\33\2\u04fd\u04ff\3\2")
        buf.write("\2\2\u04fe\u04fa\3\2\2\2\u04fe\u04ff\3\2\2\2\u04ff\u00d3")
        buf.write("\3\2\2\2\u0500\u0501\7+\2\2\u0501\u0503\5\u00d2j\2\u0502")
        buf.write("\u0504\5D#\2\u0503\u0502\3\2\2\2\u0503\u0504\3\2\2\2\u0504")
        buf.write("\u0507\3\2\2\2\u0505\u0506\7\27\2\2\u0506\u0508\5\u00f2")
        buf.write("z\2\u0507\u0505\3\2\2\2\u0507\u0508\3\2\2\2\u0508\u0509")
        buf.write("\3\2\2\2\u0509\u050a\5\36\20\2\u050a\u00d5\3\2\2\2\u050b")
        buf.write("\u050e\5\u00caf\2\u050c\u050e\5\u00ceh\2\u050d\u050b\3")
        buf.write("\2\2\2\u050d\u050c\3\2\2\2\u050e\u0510\3\2\2\2\u050f\u0511")
        buf.write("\5|?\2\u0510\u050f\3\2\2\2\u0510\u0511\3\2\2\2\u0511\u0512")
        buf.write("\3\2\2\2\u0512\u0513\5\36\20\2\u0513\u00d7\3\2\2\2\u0514")
        buf.write("\u0519\5j\66\2\u0515\u0516\7\26\2\2\u0516\u0517\5\36\20")
        buf.write("\2\u0517\u0518\5j\66\2\u0518\u051a\3\2\2\2\u0519\u0515")
        buf.write("\3\2\2\2\u0519\u051a\3\2\2\2\u051a\u00d9\3\2\2\2\u051b")
        buf.write("\u051c\7>\2\2\u051c\u0521\5\u00a2R\2\u051d\u051e\7\b\2")
        buf.write("\2\u051e\u0520\5\u00a2R\2\u051f\u051d\3\2\2\2\u0520\u0523")
        buf.write("\3\2\2\2\u0521\u051f\3\2\2\2\u0521\u0522\3\2\2\2\u0522")
        buf.write("\u0524\3\2\2\2\u0523\u0521\3\2\2\2\u0524\u0525\7\30\2")
        buf.write("\2\u0525\u0526\5x=\2\u0526\u0527\7\25\2\2\u0527\u0528")
        buf.write("\5\u00f2z\2\u0528\u00db\3\2\2\2\u0529\u052b\7O\2\2\u052a")
        buf.write("\u052c\5j\66\2\u052b\u052a\3\2\2\2\u052b\u052c\3\2\2\2")
        buf.write("\u052c\u052d\3\2\2\2\u052d\u052e\7\25\2\2\u052e\u052f")
        buf.write("\5\u00f2z\2\u052f\u00dd\3\2\2\2\u0530\u0531\7,\2\2\u0531")
        buf.write("\u0532\7\25\2\2\u0532\u0533\5\u00f2z\2\u0533\u00df\3\2")
        buf.write("\2\2\u0534\u0535\7T\2\2\u0535\u0536\7\25\2\2\u0536\u0537")
        buf.write("\5\u00f2z\2\u0537\u00e1\3\2\2\2\u0538\u053a\7N\2\2\u0539")
        buf.write("\u053b\5D#\2\u053a\u0539\3\2\2\2\u053a\u053b\3\2\2\2\u053b")
        buf.write("\u053c\3\2\2\2\u053c\u053d\t\f\2\2\u053d\u00e3\3\2\2\2")
        buf.write("\u053e\u053f\5\36\20\2\u053f\u0541\5\u009eP\2\u0540\u0542")
        buf.write("\5\u00acW\2\u0541\u0540\3\2\2\2\u0541\u0542\3\2\2\2\u0542")
        buf.write("\u0544\3\2\2\2\u0543\u0545\5\u00b0Y\2\u0544\u0543\3\2")
        buf.write("\2\2\u0544\u0545\3\2\2\2\u0545\u0546\3\2\2\2\u0546\u0548")
        buf.write("\5\u00d2j\2\u0547\u0549\5D#\2\u0548\u0547\3\2\2\2\u0548")
        buf.write("\u0549\3\2\2\2\u0549\u054c\3\2\2\2\u054a\u054b\7\27\2")
        buf.write("\2\u054b\u054d\5\u00f2z\2\u054c\u054a\3\2\2\2\u054c\u054d")
        buf.write("\3\2\2\2\u054d\u054e\3\2\2\2\u054e\u054f\5\36\20\2\u054f")
        buf.write("\u00e5\3\2\2\2\u0550\u055a\5\u00c6d\2\u0551\u0553\5\34")
        buf.write("\17\2\u0552\u0554\5\u00c6d\2\u0553\u0552\3\2\2\2\u0554")
        buf.write("\u0555\3\2\2\2\u0555\u0553\3\2\2\2\u0555\u0556\3\2\2\2")
        buf.write("\u0556\u0557\3\2\2\2\u0557\u0558\5\"\22\2\u0558\u055a")
        buf.write("\3\2\2\2\u0559\u0550\3\2\2\2\u0559\u0551\3\2\2\2\u055a")
        buf.write("\u00e7\3\2\2\2\u055b\u0565\5\u00c8e\2\u055c\u055e\5\34")
        buf.write("\17\2\u055d\u055f\5\u00c8e\2\u055e\u055d\3\2\2\2\u055f")
        buf.write("\u0560\3\2\2\2\u0560\u055e\3\2\2\2\u0560\u0561\3\2\2\2")
        buf.write("\u0561\u0562\3\2\2\2\u0562\u0563\5\"\22\2\u0563\u0565")
        buf.write("\3\2\2\2\u0564\u055b\3\2\2\2\u0564\u055c\3\2\2\2\u0565")
        buf.write("\u00e9\3\2\2\2\u0566\u0570\5\u00d6l\2\u0567\u0569\5\34")
        buf.write("\17\2\u0568\u056a\5\u00d6l\2\u0569\u0568\3\2\2\2\u056a")
        buf.write("\u056b\3\2\2\2\u056b\u0569\3\2\2\2\u056b\u056c\3\2\2\2")
        buf.write("\u056c\u056d\3\2\2\2\u056d\u056e\5\"\22\2\u056e\u0570")
        buf.write("\3\2\2\2\u056f\u0566\3\2\2\2\u056f\u0567\3\2\2\2\u0570")
        buf.write("\u00eb\3\2\2\2\u0571\u0572\7*\2\2\u0572\u0573\5\36\20")
        buf.write("\2\u0573\u0578\5\u00d8m\2\u0574\u0575\7\b\2\2\u0575\u0577")
        buf.write("\5\u00d8m\2\u0576\u0574\3\2\2\2\u0577\u057a\3\2\2\2\u0578")
        buf.write("\u0576\3\2\2\2\u0578\u0579\3\2\2\2\u0579\u00ed\3\2\2\2")
        buf.write("\u057a\u0578\3\2\2\2\u057b\u057c\7/\2\2\u057c\u057d\5")
        buf.write("\36\20\2\u057d\u0582\5\u00d8m\2\u057e\u057f\7\b\2\2\u057f")
        buf.write("\u0581\5\u00d8m\2\u0580\u057e\3\2\2\2\u0581\u0584\3\2")
        buf.write("\2\2\u0582\u0580\3\2\2\2\u0582\u0583\3\2\2\2\u0583\u00ef")
        buf.write("\3\2\2\2\u0584\u0582\3\2\2\2\u0585\u05a3\5\u00a4S\2\u0586")
        buf.write("\u05a3\5\u00a6T\2\u0587\u05a3\5\u00a8U\2\u0588\u05a3\5")
        buf.write("\u00aaV\2\u0589\u05a3\5\u00dan\2\u058a\u05a3\5\u00dco")
        buf.write("\2\u058b\u05a3\5\u00dep\2\u058c\u05a3\5\u00e0q\2\u058d")
        buf.write("\u05a3\5\u00e2r\2\u058e\u058f\7+\2\2\u058f\u05a3\5\u00e4")
        buf.write("s\2\u0590\u0591\7-\2\2\u0591\u05a3\5\u00e4s\2\u0592\u0593")
        buf.write("\7=\2\2\u0593\u05a3\5\u00e4s\2\u0594\u0595\7P\2\2\u0595")
        buf.write("\u05a3\5\u00e4s\2\u0596\u0597\7A\2\2\u0597\u05a3\5\u00e4")
        buf.write("s\2\u0598\u0599\7S\2\2\u0599\u05a3\5\u00e4s\2\u059a\u059b")
        buf.write("\7\24\2\2\u059b\u05a3\5\u00e6t\2\u059c\u059d\7)\2\2\u059d")
        buf.write("\u05a3\5\u00e8u\2\u059e\u059f\t\r\2\2\u059f\u05a3\5\u00ea")
        buf.write("v\2\u05a0\u05a3\5\u00ecw\2\u05a1\u05a3\5\u00eex\2\u05a2")
        buf.write("\u0585\3\2\2\2\u05a2\u0586\3\2\2\2\u05a2\u0587\3\2\2\2")
        buf.write("\u05a2\u0588\3\2\2\2\u05a2\u0589\3\2\2\2\u05a2\u058a\3")
        buf.write("\2\2\2\u05a2\u058b\3\2\2\2\u05a2\u058c\3\2\2\2\u05a2\u058d")
        buf.write("\3\2\2\2\u05a2\u058e\3\2\2\2\u05a2\u0590\3\2\2\2\u05a2")
        buf.write("\u0592\3\2\2\2\u05a2\u0594\3\2\2\2\u05a2\u0596\3\2\2\2")
        buf.write("\u05a2\u0598\3\2\2\2\u05a2\u059a\3\2\2\2\u05a2\u059c\3")
        buf.write("\2\2\2\u05a2\u059e\3\2\2\2\u05a2\u05a0\3\2\2\2\u05a2\u05a1")
        buf.write("\3\2\2\2\u05a3\u00f1\3\2\2\2\u05a4\u05a7\5\u00f0y\2\u05a5")
        buf.write("\u05a7\5\u009aN\2\u05a6\u05a4\3\2\2\2\u05a6\u05a5\3\2")
        buf.write("\2\2\u05a7\u05af\3\2\2\2\u05a8\u05ab\7\t\2\2\u05a9\u05ac")
        buf.write("\5\u00f0y\2\u05aa\u05ac\5\u009aN\2\u05ab\u05a9\3\2\2\2")
        buf.write("\u05ab\u05aa\3\2\2\2\u05ac\u05ae\3\2\2\2\u05ad\u05a8\3")
        buf.write("\2\2\2\u05ae\u05b1\3\2\2\2\u05af\u05ad\3\2\2\2\u05af\u05b0")
        buf.write("\3\2\2\2\u05b0\u05cc\3\2\2\2\u05b1\u05af\3\2\2\2\u05b2")
        buf.write("\u05b5\5\34\17\2\u05b3\u05b6\5\u00f0y\2\u05b4\u05b6\5")
        buf.write("\u009aN\2\u05b5\u05b3\3\2\2\2\u05b5\u05b4\3\2\2\2\u05b6")
        buf.write("\u05be\3\2\2\2\u05b7\u05ba\7\t\2\2\u05b8\u05bb\5\u00f0")
        buf.write("y\2\u05b9\u05bb\5\u009aN\2\u05ba\u05b8\3\2\2\2\u05ba\u05b9")
        buf.write("\3\2\2\2\u05bb\u05bd\3\2\2\2\u05bc\u05b7\3\2\2\2\u05bd")
        buf.write("\u05c0\3\2\2\2\u05be\u05bc\3\2\2\2\u05be\u05bf\3\2\2\2")
        buf.write("\u05bf\u05c1\3\2\2\2\u05c0\u05be\3\2\2\2\u05c1\u05c2\5")
        buf.write("\"\22\2\u05c2\u05cc\3\2\2\2\u05c3\u05c8\5\u009aN\2\u05c4")
        buf.write("\u05c5\7\t\2\2\u05c5\u05c7\5\u009aN\2\u05c6\u05c4\3\2")
        buf.write("\2\2\u05c7\u05ca\3\2\2\2\u05c8\u05c6\3\2\2\2\u05c8\u05c9")
        buf.write("\3\2\2\2\u05c9\u05cc\3\2\2\2\u05ca\u05c8\3\2\2\2\u05cb")
        buf.write("\u05a6\3\2\2\2\u05cb\u05b2\3\2\2\2\u05cb\u05c3\3\2\2\2")
        buf.write("\u05cc\u00f3\3\2\2\2\u05cd\u05d2\5\u00f2z\2\u05ce\u05cf")
        buf.write("\7\t\2\2\u05cf\u05d1\5\u00f2z\2\u05d0\u05ce\3\2\2\2\u05d1")
        buf.write("\u05d4\3\2\2\2\u05d2\u05d0\3\2\2\2\u05d2\u05d3\3\2\2\2")
        buf.write("\u05d3\u05d6\3\2\2\2\u05d4\u05d2\3\2\2\2\u05d5\u05cd\3")
        buf.write("\2\2\2\u05d5\u05d6\3\2\2\2\u05d6\u00f5\3\2\2\2\u05d7\u05d8")
        buf.write("\5\u00f4{\2\u05d8\u00f7\3\2\2\2\u00aa\u0100\u011e\u0125")
        buf.write("\u0128\u0132\u0139\u0140\u0145\u0149\u014f\u0154\u0158")
        buf.write("\u0162\u0167\u016b\u016e\u0178\u017b\u017d\u017f\u0188")
        buf.write("\u018c\u0196\u019a\u01a8\u01ac\u01c3\u01cc\u01d1\u01d5")
        buf.write("\u01da\u01de\u01e6\u01f6\u01fe\u0204\u0209\u020e\u0215")
        buf.write("\u0219\u021e\u0229\u0233\u023d\u0247\u0251\u025b\u0265")
        buf.write("\u026f\u0279\u0283\u028d\u0295\u029b\u02a1\u02a8\u02ac")
        buf.write("\u02ba\u02ce\u02d0\u02d6\u02dc\u02e0\u02f5\u0305\u030d")
        buf.write("\u0310\u0319\u0323\u0328\u032d\u0332\u0337\u033c\u0345")
        buf.write("\u034f\u0352\u035d\u0367\u036e\u0378\u0381\u0387\u0391")
        buf.write("\u0399\u039b\u03a8\u03b4\u03ba\u03be\u03c2\u03c7\u03cb")
        buf.write("\u03e3\u03e9\u03f4\u03f9\u03ff\u0408\u040b\u0412\u0417")
        buf.write("\u0424\u042a\u0435\u043f\u0445\u044c\u0453\u0459\u0462")
        buf.write("\u0466\u046a\u046f\u0478\u047b\u047e\u0486\u0489\u048b")
        buf.write("\u0492\u049c\u04aa\u04b8\u04bc\u04c2\u04c8\u04cf\u04d3")
        buf.write("\u04d9\u04df\u04e7\u04ea\u04f2\u04f5\u04f8\u04fe\u0503")
        buf.write("\u0507\u050d\u0510\u0519\u0521\u052b\u053a\u0541\u0544")
        buf.write("\u0548\u054c\u0555\u0559\u0560\u0564\u056b\u056f\u0578")
        buf.write("\u0582\u05a2\u05a6\u05ab\u05af\u05b5\u05ba\u05be\u05c8")
        buf.write("\u05cb\u05d2\u05d5")
        return buf.getvalue()


class m2_Parser ( Parser ):

    grammarFileName = "m2_Parser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "' '", "','", "';'", "'('", "')'", "'{'", 
                     "'}'", "'['", "']'", "'interface'", "'enum'", "'object'", 
                     "'concept'", "'type'", "':'", "'.'", "'='", "'in'", 
                     "'of'", "'not'", "'$'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'var'", "'let'", "'const'", "'bind'", "'proc'", "'static'", 
                     "'method'", "'func'", "'mixin'", "'end'", "'except'", 
                     "'return'", "'try'", "'raise'", "'finally'", "'out'", 
                     "'case'", "'if'", "'elif'", "'else'", "'do'", "'while'", 
                     "'iterator'", "'for'", "'continue'", "'break'", "'template'", 
                     "'tuple'", "'using'", "'when'", "'yield'", "'include'", 
                     "'import'", "'from'", "'as'", "'export'", "'ref'", 
                     "'ptr'", "'addr'", "'asm'", "'block'", "'macro'", "'nil'", 
                     "'cast'", "'converter'", "'defer'", "'discard'", "'distinct'", 
                     "'`'" ]

    symbolicNames = [ "<INVALID>", "DOCUMENTATION_COMMENT", "MULTILINE_COMMENT", 
                      "COMMENT", "UNCONDITIONAL_NEWLINE", "WS", "COMMA", 
                      "SEMI_COLON", "OPEN_PAREN", "CLOSE_PAREN", "OPEN_BRACE", 
                      "CLOSE_BRACE", "OPEN_BRACK", "CLOSE_BRACK", "INTERFACE", 
                      "ENUM", "OBJECT", "CONCEPT", "TYPE", "COLON", "DOT", 
                      "EQUALS", "IN", "OF", "NOT", "DOLLAR_SIGN", "OP0", 
                      "OP1", "OP2", "OP3", "OP4", "OP5", "OP6", "OP7", "OP8", 
                      "OP9", "OP10", "VARIABLE", "LET", "CONST", "BIND", 
                      "PROC", "STATIC", "METHOD", "FUNC", "MIXIN", "END", 
                      "EXCEPT", "RETURN", "TRY", "RAISE", "FINALLY", "OUT", 
                      "CASE", "IF", "ELIF", "ELSE", "DO", "WHILE", "ITERATOR", 
                      "FOR", "CONTINUE", "BREAK", "TEMPLATE", "TUPLE", "USING", 
                      "WHEN", "YIELD", "INCLUDE", "IMPORT", "FROM", "AS", 
                      "EXPORT", "REF", "PTR", "ADDR", "ASM", "BLOCK", "MACRO", 
                      "NIL", "CAST", "CONVERTER", "DEFER", "DISCARD", "DISTINCT", 
                      "SYM_HEADER", "IDENTIFIER", "INT_LIT", "INT8_LIT", 
                      "INT16_LIT", "INT32_LIT", "INT64_LIT", "UINT_LIT", 
                      "UINT8_LIT", "UINT16_LIT", "UINT32_LIT", "UINT64_LIT", 
                      "EXP", "FLOAT_LIT", "FLOAT32_LIT", "FLOAT64_LIT", 
                      "CHAR_LIT", "STR_LIT", "TRIPLESTR_LIT", "RSTR_LIT", 
                      "GENERALIZED_STR_LIT", "GENERALIZED_TRIPLESTR_LIT", 
                      "DEDENT", "EXIT", "USELESS_LINE", "USELSSS_INDENTS", 
                      "INDENT", "INDENTS_PASS", "ERROR_INDENT" ]

    RULE_op0 = 0
    RULE_op1 = 1
    RULE_op2 = 2
    RULE_op3 = 3
    RULE_op4 = 4
    RULE_op5 = 5
    RULE_op6 = 6
    RULE_op7 = 7
    RULE_op8 = 8
    RULE_op9 = 9
    RULE_op10 = 10
    RULE_operator = 11
    RULE_prefixOperator = 12
    RULE_ind = 13
    RULE_optInd = 14
    RULE_optPar = 15
    RULE_ded = 16
    RULE_typeKeyw = 17
    RULE_parKeyw = 18
    RULE_keyw = 19
    RULE_generalizedLit = 20
    RULE_pragmaStmt = 21
    RULE_par = 22
    RULE_tupleConstr = 23
    RULE_arrayConstr = 24
    RULE_typeDesc = 25
    RULE_setOrTableConstr = 26
    RULE_castExpr = 27
    RULE_identOrLiteral = 28
    RULE_indexExpr = 29
    RULE_indexExprList = 30
    RULE_primarySuffix = 31
    RULE_primary = 32
    RULE_pragma = 33
    RULE_simpleExpr = 34
    RULE_arrowExpr = 35
    RULE_assignExpr = 36
    RULE_orExpr = 37
    RULE_andExpr = 38
    RULE_cmpExpr = 39
    RULE_sliceExpr = 40
    RULE_ampExpr = 41
    RULE_plusExpr = 42
    RULE_mulExpr = 43
    RULE_dollarExpr = 44
    RULE_exprList = 45
    RULE_exprColonExpr = 46
    RULE_exprColonEqExpr = 47
    RULE_exprColonEqExprList = 48
    RULE_condExpr = 49
    RULE_literal = 50
    RULE_symbolBody = 51
    RULE_symbol = 52
    RULE_blockExpr = 53
    RULE_ifExpr = 54
    RULE_whenExpr = 55
    RULE_dotExpr = 56
    RULE_forExpr = 57
    RULE_tryExpr = 58
    RULE_expr = 59
    RULE_moduleName = 60
    RULE_colonBody = 61
    RULE_returnStmt = 62
    RULE_raiseStmt = 63
    RULE_yieldStmt = 64
    RULE_discardStmt = 65
    RULE_breakStmt = 66
    RULE_continueStmt = 67
    RULE_importStmt = 68
    RULE_fromStmt = 69
    RULE_caseExpr = 70
    RULE_caseStmt = 71
    RULE_ofBranch = 72
    RULE_ofBranches = 73
    RULE_includeStmt = 74
    RULE_exprStmt = 75
    RULE_simpleStmt = 76
    RULE_condStmt = 77
    RULE_identVis = 78
    RULE_identVisDot = 79
    RULE_identWithPragma = 80
    RULE_ifStmt = 81
    RULE_whenStmt = 82
    RULE_whileStmt = 83
    RULE_tryStmt = 84
    RULE_pattern = 85
    RULE_genericParam = 86
    RULE_genericParamList = 87
    RULE_identWithPragmaDot = 88
    RULE_typeDefAux = 89
    RULE_objectWhen = 90
    RULE_objectBranch = 91
    RULE_objectBranches = 92
    RULE_objectCase = 93
    RULE_objectPart = 94
    RULE_objectType = 95
    RULE_typeClassParam = 96
    RULE_typeClass = 97
    RULE_typeDef = 98
    RULE_constant = 99
    RULE_varTuple = 100
    RULE_declColonEquals = 101
    RULE_identColonEquals = 102
    RULE_paramList = 103
    RULE_paramListColon = 104
    RULE_procExpr = 105
    RULE_variable = 106
    RULE_qualifiedIdent = 107
    RULE_forStmt = 108
    RULE_blockStmt = 109
    RULE_staticStmt = 110
    RULE_deferStmt = 111
    RULE_asmStmt = 112
    RULE_routine = 113
    RULE_typeDefSection = 114
    RULE_constantSection = 115
    RULE_variableSection = 116
    RULE_bindStmt = 117
    RULE_mixinStmt = 118
    RULE_complexStmt = 119
    RULE_stmt = 120
    RULE_module = 121
    RULE_start = 122

    ruleNames =  [ "op0", "op1", "op2", "op3", "op4", "op5", "op6", "op7", 
                   "op8", "op9", "op10", "operator", "prefixOperator", "ind", 
                   "optInd", "optPar", "ded", "typeKeyw", "parKeyw", "keyw", 
                   "generalizedLit", "pragmaStmt", "par", "tupleConstr", 
                   "arrayConstr", "typeDesc", "setOrTableConstr", "castExpr", 
                   "identOrLiteral", "indexExpr", "indexExprList", "primarySuffix", 
                   "primary", "pragma", "simpleExpr", "arrowExpr", "assignExpr", 
                   "orExpr", "andExpr", "cmpExpr", "sliceExpr", "ampExpr", 
                   "plusExpr", "mulExpr", "dollarExpr", "exprList", "exprColonExpr", 
                   "exprColonEqExpr", "exprColonEqExprList", "condExpr", 
                   "literal", "symbolBody", "symbol", "blockExpr", "ifExpr", 
                   "whenExpr", "dotExpr", "forExpr", "tryExpr", "expr", 
                   "moduleName", "colonBody", "returnStmt", "raiseStmt", 
                   "yieldStmt", "discardStmt", "breakStmt", "continueStmt", 
                   "importStmt", "fromStmt", "caseExpr", "caseStmt", "ofBranch", 
                   "ofBranches", "includeStmt", "exprStmt", "simpleStmt", 
                   "condStmt", "identVis", "identVisDot", "identWithPragma", 
                   "ifStmt", "whenStmt", "whileStmt", "tryStmt", "pattern", 
                   "genericParam", "genericParamList", "identWithPragmaDot", 
                   "typeDefAux", "objectWhen", "objectBranch", "objectBranches", 
                   "objectCase", "objectPart", "objectType", "typeClassParam", 
                   "typeClass", "typeDef", "constant", "varTuple", "declColonEquals", 
                   "identColonEquals", "paramList", "paramListColon", "procExpr", 
                   "variable", "qualifiedIdent", "forStmt", "blockStmt", 
                   "staticStmt", "deferStmt", "asmStmt", "routine", "typeDefSection", 
                   "constantSection", "variableSection", "bindStmt", "mixinStmt", 
                   "complexStmt", "stmt", "module", "start" ]

    EOF = Token.EOF
    DOCUMENTATION_COMMENT=1
    MULTILINE_COMMENT=2
    COMMENT=3
    UNCONDITIONAL_NEWLINE=4
    WS=5
    COMMA=6
    SEMI_COLON=7
    OPEN_PAREN=8
    CLOSE_PAREN=9
    OPEN_BRACE=10
    CLOSE_BRACE=11
    OPEN_BRACK=12
    CLOSE_BRACK=13
    INTERFACE=14
    ENUM=15
    OBJECT=16
    CONCEPT=17
    TYPE=18
    COLON=19
    DOT=20
    EQUALS=21
    IN=22
    OF=23
    NOT=24
    DOLLAR_SIGN=25
    OP0=26
    OP1=27
    OP2=28
    OP3=29
    OP4=30
    OP5=31
    OP6=32
    OP7=33
    OP8=34
    OP9=35
    OP10=36
    VARIABLE=37
    LET=38
    CONST=39
    BIND=40
    PROC=41
    STATIC=42
    METHOD=43
    FUNC=44
    MIXIN=45
    END=46
    EXCEPT=47
    RETURN=48
    TRY=49
    RAISE=50
    FINALLY=51
    OUT=52
    CASE=53
    IF=54
    ELIF=55
    ELSE=56
    DO=57
    WHILE=58
    ITERATOR=59
    FOR=60
    CONTINUE=61
    BREAK=62
    TEMPLATE=63
    TUPLE=64
    USING=65
    WHEN=66
    YIELD=67
    INCLUDE=68
    IMPORT=69
    FROM=70
    AS=71
    EXPORT=72
    REF=73
    PTR=74
    ADDR=75
    ASM=76
    BLOCK=77
    MACRO=78
    NIL=79
    CAST=80
    CONVERTER=81
    DEFER=82
    DISCARD=83
    DISTINCT=84
    SYM_HEADER=85
    IDENTIFIER=86
    INT_LIT=87
    INT8_LIT=88
    INT16_LIT=89
    INT32_LIT=90
    INT64_LIT=91
    UINT_LIT=92
    UINT8_LIT=93
    UINT16_LIT=94
    UINT32_LIT=95
    UINT64_LIT=96
    EXP=97
    FLOAT_LIT=98
    FLOAT32_LIT=99
    FLOAT64_LIT=100
    CHAR_LIT=101
    STR_LIT=102
    TRIPLESTR_LIT=103
    RSTR_LIT=104
    GENERALIZED_STR_LIT=105
    GENERALIZED_TRIPLESTR_LIT=106
    DEDENT=107
    EXIT=108
    USELESS_LINE=109
    USELSSS_INDENTS=110
    INDENT=111
    INDENTS_PASS=112
    ERROR_INDENT=113

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None



    parKeyWList = [DISCARD, INCLUDE, IF, WHILE, CASE, TRY, FINALLY, EXCEPT, FOR, BLOCK, CONST, LET, WHEN, VARIABLE, MIXIN]
    literals = [INT_LIT, INT8_LIT, INT16_LIT , INT32_LIT , INT64_LIT, UINT_LIT , UINT8_LIT , UINT16_LIT , UINT32_LIT , UINT64_LIT, 
    FLOAT_LIT , FLOAT32_LIT , FLOAT64_LIT, STR_LIT , RSTR_LIT , TRIPLESTR_LIT, CHAR_LIT, NIL ]
    primarySuffixList = [SYM_HEADER, IDENTIFIER, literals, CAST, ADDR, TYPE]
    def tryExprBody():
        return self._input.LT(1).type in [self.EXCEPT, self.FINALLY] or (self._input.LT(1).type == self.INDENT and self._input.LT(2).type in [self.EXCEPT, self.FINALLY])



    class Op0Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OP0(self):
            return self.getToken(m2_Parser.OP0, 0)

        def getRuleIndex(self):
            return m2_Parser.RULE_op0

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOp0" ):
                listener.enterOp0(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOp0" ):
                listener.exitOp0(self)




    def op0(self):

        localctx = m2_Parser.Op0Context(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_op0)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 246
            self.match(m2_Parser.OP0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Op1Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OP1(self):
            return self.getToken(m2_Parser.OP1, 0)

        def EQUALS(self):
            return self.getToken(m2_Parser.EQUALS, 0)

        def getRuleIndex(self):
            return m2_Parser.RULE_op1

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOp1" ):
                listener.enterOp1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOp1" ):
                listener.exitOp1(self)




    def op1(self):

        localctx = m2_Parser.Op1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_op1)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 248
            _la = self._input.LA(1)
            if not(_la==m2_Parser.EQUALS or _la==m2_Parser.OP1):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Op2Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OP2(self):
            return self.getToken(m2_Parser.OP2, 0)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.COLON)
            else:
                return self.getToken(m2_Parser.COLON, i)

        def getRuleIndex(self):
            return m2_Parser.RULE_op2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOp2" ):
                listener.enterOp2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOp2" ):
                listener.exitOp2(self)




    def op2(self):

        localctx = m2_Parser.Op2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_op2)
        try:
            self.state = 254
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 250
                self.match(m2_Parser.OP2)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 251
                self.match(m2_Parser.COLON)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 252
                self.match(m2_Parser.COLON)
                self.state = 253
                self.match(m2_Parser.COLON)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Op3Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OP3(self):
            return self.getToken(m2_Parser.OP3, 0)

        def getRuleIndex(self):
            return m2_Parser.RULE_op3

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOp3" ):
                listener.enterOp3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOp3" ):
                listener.exitOp3(self)




    def op3(self):

        localctx = m2_Parser.Op3Context(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_op3)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 256
            self.match(m2_Parser.OP3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Op4Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OP4(self):
            return self.getToken(m2_Parser.OP4, 0)

        def getRuleIndex(self):
            return m2_Parser.RULE_op4

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOp4" ):
                listener.enterOp4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOp4" ):
                listener.exitOp4(self)




    def op4(self):

        localctx = m2_Parser.Op4Context(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_op4)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 258
            self.match(m2_Parser.OP4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Op5Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OP5(self):
            return self.getToken(m2_Parser.OP5, 0)

        def IN(self):
            return self.getToken(m2_Parser.IN, 0)

        def OF(self):
            return self.getToken(m2_Parser.OF, 0)

        def NOT(self):
            return self.getToken(m2_Parser.NOT, 0)

        def getRuleIndex(self):
            return m2_Parser.RULE_op5

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOp5" ):
                listener.enterOp5(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOp5" ):
                listener.exitOp5(self)




    def op5(self):

        localctx = m2_Parser.Op5Context(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_op5)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 260
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << m2_Parser.IN) | (1 << m2_Parser.OF) | (1 << m2_Parser.NOT) | (1 << m2_Parser.OP5))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Op6Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OP6(self):
            return self.getToken(m2_Parser.OP6, 0)

        def DOT(self):
            return self.getToken(m2_Parser.DOT, 0)

        def getRuleIndex(self):
            return m2_Parser.RULE_op6

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOp6" ):
                listener.enterOp6(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOp6" ):
                listener.exitOp6(self)




    def op6(self):

        localctx = m2_Parser.Op6Context(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_op6)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 262
            _la = self._input.LA(1)
            if not(_la==m2_Parser.DOT or _la==m2_Parser.OP6):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Op7Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OP7(self):
            return self.getToken(m2_Parser.OP7, 0)

        def getRuleIndex(self):
            return m2_Parser.RULE_op7

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOp7" ):
                listener.enterOp7(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOp7" ):
                listener.exitOp7(self)




    def op7(self):

        localctx = m2_Parser.Op7Context(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_op7)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 264
            self.match(m2_Parser.OP7)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Op8Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OP8(self):
            return self.getToken(m2_Parser.OP8, 0)

        def getRuleIndex(self):
            return m2_Parser.RULE_op8

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOp8" ):
                listener.enterOp8(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOp8" ):
                listener.exitOp8(self)




    def op8(self):

        localctx = m2_Parser.Op8Context(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_op8)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 266
            self.match(m2_Parser.OP8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Op9Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OP9(self):
            return self.getToken(m2_Parser.OP9, 0)

        def getRuleIndex(self):
            return m2_Parser.RULE_op9

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOp9" ):
                listener.enterOp9(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOp9" ):
                listener.exitOp9(self)




    def op9(self):

        localctx = m2_Parser.Op9Context(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_op9)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 268
            self.match(m2_Parser.OP9)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Op10Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OP10(self):
            return self.getToken(m2_Parser.OP10, 0)

        def getRuleIndex(self):
            return m2_Parser.RULE_op10

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOp10" ):
                listener.enterOp10(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOp10" ):
                listener.exitOp10(self)




    def op10(self):

        localctx = m2_Parser.Op10Context(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_op10)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 270
            self.match(m2_Parser.OP10)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def op0(self):
            return self.getTypedRuleContext(m2_Parser.Op0Context,0)


        def op1(self):
            return self.getTypedRuleContext(m2_Parser.Op1Context,0)


        def op2(self):
            return self.getTypedRuleContext(m2_Parser.Op2Context,0)


        def op3(self):
            return self.getTypedRuleContext(m2_Parser.Op3Context,0)


        def op4(self):
            return self.getTypedRuleContext(m2_Parser.Op4Context,0)


        def op5(self):
            return self.getTypedRuleContext(m2_Parser.Op5Context,0)


        def op6(self):
            return self.getTypedRuleContext(m2_Parser.Op6Context,0)


        def op7(self):
            return self.getTypedRuleContext(m2_Parser.Op7Context,0)


        def op8(self):
            return self.getTypedRuleContext(m2_Parser.Op8Context,0)


        def op9(self):
            return self.getTypedRuleContext(m2_Parser.Op9Context,0)


        def op10(self):
            return self.getTypedRuleContext(m2_Parser.Op10Context,0)


        def STATIC(self):
            return self.getToken(m2_Parser.STATIC, 0)

        def getRuleIndex(self):
            return m2_Parser.RULE_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperator" ):
                listener.enterOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperator" ):
                listener.exitOperator(self)




    def operator(self):

        localctx = m2_Parser.OperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_operator)
        try:
            self.state = 284
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [m2_Parser.OP0]:
                self.enterOuterAlt(localctx, 1)
                self.state = 272
                self.op0()
                pass
            elif token in [m2_Parser.EQUALS, m2_Parser.OP1]:
                self.enterOuterAlt(localctx, 2)
                self.state = 273
                self.op1()
                pass
            elif token in [m2_Parser.COLON, m2_Parser.OP2]:
                self.enterOuterAlt(localctx, 3)
                self.state = 274
                self.op2()
                pass
            elif token in [m2_Parser.OP3]:
                self.enterOuterAlt(localctx, 4)
                self.state = 275
                self.op3()
                pass
            elif token in [m2_Parser.OP4]:
                self.enterOuterAlt(localctx, 5)
                self.state = 276
                self.op4()
                pass
            elif token in [m2_Parser.IN, m2_Parser.OF, m2_Parser.NOT, m2_Parser.OP5]:
                self.enterOuterAlt(localctx, 6)
                self.state = 277
                self.op5()
                pass
            elif token in [m2_Parser.DOT, m2_Parser.OP6]:
                self.enterOuterAlt(localctx, 7)
                self.state = 278
                self.op6()
                pass
            elif token in [m2_Parser.OP7]:
                self.enterOuterAlt(localctx, 8)
                self.state = 279
                self.op7()
                pass
            elif token in [m2_Parser.OP8]:
                self.enterOuterAlt(localctx, 9)
                self.state = 280
                self.op8()
                pass
            elif token in [m2_Parser.OP9]:
                self.enterOuterAlt(localctx, 10)
                self.state = 281
                self.op9()
                pass
            elif token in [m2_Parser.OP10]:
                self.enterOuterAlt(localctx, 11)
                self.state = 282
                self.op10()
                pass
            elif token in [m2_Parser.STATIC]:
                self.enterOuterAlt(localctx, 12)
                self.state = 283
                self.match(m2_Parser.STATIC)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrefixOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def operator(self):
            return self.getTypedRuleContext(m2_Parser.OperatorContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_prefixOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrefixOperator" ):
                listener.enterPrefixOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrefixOperator" ):
                listener.exitPrefixOperator(self)




    def prefixOperator(self):

        localctx = m2_Parser.PrefixOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_prefixOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 286
            self.operator()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INDENT(self):
            return self.getToken(m2_Parser.INDENT, 0)

        def getRuleIndex(self):
            return m2_Parser.RULE_ind

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInd" ):
                listener.enterInd(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInd" ):
                listener.exitInd(self)




    def ind(self):

        localctx = m2_Parser.IndContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_ind)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 288
            self.match(m2_Parser.INDENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptIndContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ind(self):
            return self.getTypedRuleContext(m2_Parser.IndContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_optInd

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptInd" ):
                listener.enterOptInd(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptInd" ):
                listener.exitOptInd(self)




    def optInd(self):

        localctx = m2_Parser.OptIndContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_optInd)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 291
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.state = 290
                self.ind()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptParContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ind(self):
            return self.getTypedRuleContext(m2_Parser.IndContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_optPar

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptPar" ):
                listener.enterOptPar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptPar" ):
                listener.exitOptPar(self)




    def optPar(self):

        localctx = m2_Parser.OptParContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_optPar)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 294
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==m2_Parser.INDENT:
                self.state = 293
                self.ind()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DedContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEDENT(self):
            return self.getToken(m2_Parser.DEDENT, 0)

        def EOF(self):
            return self.getToken(m2_Parser.EOF, 0)

        def getRuleIndex(self):
            return m2_Parser.RULE_ded

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDed" ):
                listener.enterDed(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDed" ):
                listener.exitDed(self)




    def ded(self):

        localctx = m2_Parser.DedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_ded)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 296
            _la = self._input.LA(1)
            if not(_la==m2_Parser.EOF or _la==m2_Parser.DEDENT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeKeywContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VARIABLE(self):
            return self.getToken(m2_Parser.VARIABLE, 0)

        def OUT(self):
            return self.getToken(m2_Parser.OUT, 0)

        def REF(self):
            return self.getToken(m2_Parser.REF, 0)

        def PTR(self):
            return self.getToken(m2_Parser.PTR, 0)

        def TUPLE(self):
            return self.getToken(m2_Parser.TUPLE, 0)

        def PROC(self):
            return self.getToken(m2_Parser.PROC, 0)

        def ITERATOR(self):
            return self.getToken(m2_Parser.ITERATOR, 0)

        def DISTINCT(self):
            return self.getToken(m2_Parser.DISTINCT, 0)

        def OBJECT(self):
            return self.getToken(m2_Parser.OBJECT, 0)

        def ENUM(self):
            return self.getToken(m2_Parser.ENUM, 0)

        def getRuleIndex(self):
            return m2_Parser.RULE_typeKeyw

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeKeyw" ):
                listener.enterTypeKeyw(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeKeyw" ):
                listener.exitTypeKeyw(self)




    def typeKeyw(self):

        localctx = m2_Parser.TypeKeywContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_typeKeyw)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 298
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << m2_Parser.ENUM) | (1 << m2_Parser.OBJECT) | (1 << m2_Parser.VARIABLE) | (1 << m2_Parser.PROC) | (1 << m2_Parser.OUT) | (1 << m2_Parser.ITERATOR))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (m2_Parser.TUPLE - 64)) | (1 << (m2_Parser.REF - 64)) | (1 << (m2_Parser.PTR - 64)) | (1 << (m2_Parser.DISTINCT - 64)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParKeywContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DISCARD(self):
            return self.getToken(m2_Parser.DISCARD, 0)

        def INCLUDE(self):
            return self.getToken(m2_Parser.INCLUDE, 0)

        def IF(self):
            return self.getToken(m2_Parser.IF, 0)

        def WHILE(self):
            return self.getToken(m2_Parser.WHILE, 0)

        def CASE(self):
            return self.getToken(m2_Parser.CASE, 0)

        def TRY(self):
            return self.getToken(m2_Parser.TRY, 0)

        def FINALLY(self):
            return self.getToken(m2_Parser.FINALLY, 0)

        def EXCEPT(self):
            return self.getToken(m2_Parser.EXCEPT, 0)

        def FOR(self):
            return self.getToken(m2_Parser.FOR, 0)

        def BLOCK(self):
            return self.getToken(m2_Parser.BLOCK, 0)

        def CONST(self):
            return self.getToken(m2_Parser.CONST, 0)

        def LET(self):
            return self.getToken(m2_Parser.LET, 0)

        def WHEN(self):
            return self.getToken(m2_Parser.WHEN, 0)

        def VARIABLE(self):
            return self.getToken(m2_Parser.VARIABLE, 0)

        def MIXIN(self):
            return self.getToken(m2_Parser.MIXIN, 0)

        def getRuleIndex(self):
            return m2_Parser.RULE_parKeyw

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParKeyw" ):
                listener.enterParKeyw(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParKeyw" ):
                listener.exitParKeyw(self)




    def parKeyw(self):

        localctx = m2_Parser.ParKeywContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_parKeyw)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 300
            _la = self._input.LA(1)
            if not(((((_la - 37)) & ~0x3f) == 0 and ((1 << (_la - 37)) & ((1 << (m2_Parser.VARIABLE - 37)) | (1 << (m2_Parser.LET - 37)) | (1 << (m2_Parser.CONST - 37)) | (1 << (m2_Parser.MIXIN - 37)) | (1 << (m2_Parser.EXCEPT - 37)) | (1 << (m2_Parser.TRY - 37)) | (1 << (m2_Parser.FINALLY - 37)) | (1 << (m2_Parser.CASE - 37)) | (1 << (m2_Parser.IF - 37)) | (1 << (m2_Parser.WHILE - 37)) | (1 << (m2_Parser.FOR - 37)) | (1 << (m2_Parser.WHEN - 37)) | (1 << (m2_Parser.INCLUDE - 37)) | (1 << (m2_Parser.BLOCK - 37)) | (1 << (m2_Parser.DISCARD - 37)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeywContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeKeyw(self):
            return self.getTypedRuleContext(m2_Parser.TypeKeywContext,0)


        def parKeyw(self):
            return self.getTypedRuleContext(m2_Parser.ParKeywContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_keyw

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyw" ):
                listener.enterKeyw(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyw" ):
                listener.exitKeyw(self)




    def keyw(self):

        localctx = m2_Parser.KeywContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_keyw)
        try:
            self.state = 304
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 302
                self.typeKeyw()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 303
                self.parKeyw()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GeneralizedLitContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GENERALIZED_STR_LIT(self):
            return self.getToken(m2_Parser.GENERALIZED_STR_LIT, 0)

        def GENERALIZED_TRIPLESTR_LIT(self):
            return self.getToken(m2_Parser.GENERALIZED_TRIPLESTR_LIT, 0)

        def getRuleIndex(self):
            return m2_Parser.RULE_generalizedLit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneralizedLit" ):
                listener.enterGeneralizedLit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneralizedLit" ):
                listener.exitGeneralizedLit(self)




    def generalizedLit(self):

        localctx = m2_Parser.GeneralizedLitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_generalizedLit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 306
            _la = self._input.LA(1)
            if not(_la==m2_Parser.GENERALIZED_STR_LIT or _la==m2_Parser.GENERALIZED_TRIPLESTR_LIT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PragmaStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pragma(self):
            return self.getTypedRuleContext(m2_Parser.PragmaContext,0)


        def COLON(self):
            return self.getToken(m2_Parser.COLON, 0)

        def stmt(self):
            return self.getTypedRuleContext(m2_Parser.StmtContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_pragmaStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragmaStmt" ):
                listener.enterPragmaStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragmaStmt" ):
                listener.exitPragmaStmt(self)




    def pragmaStmt(self):

        localctx = m2_Parser.PragmaStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_pragmaStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 308
            self.pragma()
            self.state = 311
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.state = 309
                self.match(m2_Parser.COLON)
                self.state = 310
                self.stmt()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(m2_Parser.OPEN_PAREN, 0)

        def optInd(self):
            return self.getTypedRuleContext(m2_Parser.OptIndContext,0)


        def optPar(self):
            return self.getTypedRuleContext(m2_Parser.OptParContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(m2_Parser.CLOSE_PAREN, 0)

        def SEMI_COLON(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.SEMI_COLON)
            else:
                return self.getToken(m2_Parser.SEMI_COLON, i)

        def pragmaStmt(self):
            return self.getTypedRuleContext(m2_Parser.PragmaStmtContext,0)


        def simpleExpr(self):
            return self.getTypedRuleContext(m2_Parser.SimpleExprContext,0)


        def complexStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.ComplexStmtContext)
            else:
                return self.getTypedRuleContext(m2_Parser.ComplexStmtContext,i)


        def simpleStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.SimpleStmtContext)
            else:
                return self.getTypedRuleContext(m2_Parser.SimpleStmtContext,i)


        def EQUALS(self):
            return self.getToken(m2_Parser.EQUALS, 0)

        def expr(self):
            return self.getTypedRuleContext(m2_Parser.ExprContext,0)


        def COLON(self):
            return self.getToken(m2_Parser.COLON, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.COMMA)
            else:
                return self.getToken(m2_Parser.COMMA, i)

        def exprColonEqExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.ExprColonEqExprContext)
            else:
                return self.getTypedRuleContext(m2_Parser.ExprColonEqExprContext,i)


        def getRuleIndex(self):
            return m2_Parser.RULE_par

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPar" ):
                listener.enterPar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPar" ):
                listener.exitPar(self)




    def par(self):

        localctx = m2_Parser.ParContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_par)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 313
            self.match(m2_Parser.OPEN_PAREN)
            self.state = 314
            self.optInd()
            self.state = 381
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,19,self._ctx)
            if la_ == 1:
                self.state = 315
                if not self._input.LT(1).type in self.parKeyWList:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self._input.LT(1).type in self.parKeyWList")
                self.state = 318
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
                if la_ == 1:
                    self.state = 316
                    self.complexStmt()
                    pass

                elif la_ == 2:
                    self.state = 317
                    self.simpleStmt()
                    pass


                self.state = 327
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==m2_Parser.SEMI_COLON:
                    self.state = 320
                    self.match(m2_Parser.SEMI_COLON)
                    self.state = 323
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
                    if la_ == 1:
                        self.state = 321
                        self.complexStmt()
                        pass

                    elif la_ == 2:
                        self.state = 322
                        self.simpleStmt()
                        pass


                    self.state = 329
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 330
                self.match(m2_Parser.SEMI_COLON)
                self.state = 333
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
                if la_ == 1:
                    self.state = 331
                    self.complexStmt()
                    pass

                elif la_ == 2:
                    self.state = 332
                    self.simpleStmt()
                    pass


                self.state = 342
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==m2_Parser.SEMI_COLON:
                    self.state = 335
                    self.match(m2_Parser.SEMI_COLON)
                    self.state = 338
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
                    if la_ == 1:
                        self.state = 336
                        self.complexStmt()
                        pass

                    elif la_ == 2:
                        self.state = 337
                        self.simpleStmt()
                        pass


                    self.state = 344
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 345
                self.pragmaStmt()
                pass

            elif la_ == 4:
                self.state = 346
                self.simpleExpr()
                self.state = 379
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [m2_Parser.EQUALS]:
                    self.state = 347
                    self.match(m2_Parser.EQUALS)
                    self.state = 348
                    self.expr()
                    self.state = 364
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==m2_Parser.SEMI_COLON:
                        self.state = 349
                        self.match(m2_Parser.SEMI_COLON)
                        self.state = 352
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
                        if la_ == 1:
                            self.state = 350
                            self.complexStmt()
                            pass

                        elif la_ == 2:
                            self.state = 351
                            self.simpleStmt()
                            pass


                        self.state = 361
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==m2_Parser.SEMI_COLON:
                            self.state = 354
                            self.match(m2_Parser.SEMI_COLON)
                            self.state = 357
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
                            if la_ == 1:
                                self.state = 355
                                self.complexStmt()
                                pass

                            elif la_ == 2:
                                self.state = 356
                                self.simpleStmt()
                                pass


                            self.state = 363
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)



                    pass
                elif token in [m2_Parser.COLON]:
                    self.state = 366
                    self.match(m2_Parser.COLON)
                    self.state = 367
                    self.expr()
                    self.state = 377
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==m2_Parser.COMMA:
                        self.state = 368
                        self.match(m2_Parser.COMMA)
                        self.state = 369
                        self.exprColonEqExpr()
                        self.state = 374
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==m2_Parser.COMMA:
                            self.state = 370
                            self.match(m2_Parser.COMMA)
                            self.state = 371
                            self.exprColonEqExpr()
                            self.state = 376
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)



                    pass
                else:
                    raise NoViableAltException(self)

                pass


            self.state = 383
            self.optPar()
            self.state = 384
            self.match(m2_Parser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TupleConstrContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(m2_Parser.OPEN_PAREN, 0)

        def optInd(self):
            return self.getTypedRuleContext(m2_Parser.OptIndContext,0)


        def optPar(self):
            return self.getTypedRuleContext(m2_Parser.OptParContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(m2_Parser.CLOSE_PAREN, 0)

        def exprColonEqExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.ExprColonEqExprContext)
            else:
                return self.getTypedRuleContext(m2_Parser.ExprColonEqExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.COMMA)
            else:
                return self.getToken(m2_Parser.COMMA, i)

        def getRuleIndex(self):
            return m2_Parser.RULE_tupleConstr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTupleConstr" ):
                listener.enterTupleConstr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTupleConstr" ):
                listener.exitTupleConstr(self)




    def tupleConstr(self):

        localctx = m2_Parser.TupleConstrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_tupleConstr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 386
            self.match(m2_Parser.OPEN_PAREN)
            self.state = 387
            self.optInd()
            self.state = 394
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << m2_Parser.OPEN_PAREN) | (1 << m2_Parser.OPEN_BRACE) | (1 << m2_Parser.OPEN_BRACK) | (1 << m2_Parser.ENUM) | (1 << m2_Parser.OBJECT) | (1 << m2_Parser.COLON) | (1 << m2_Parser.DOT) | (1 << m2_Parser.EQUALS) | (1 << m2_Parser.IN) | (1 << m2_Parser.OF) | (1 << m2_Parser.NOT) | (1 << m2_Parser.OP0) | (1 << m2_Parser.OP1) | (1 << m2_Parser.OP2) | (1 << m2_Parser.OP3) | (1 << m2_Parser.OP4) | (1 << m2_Parser.OP5) | (1 << m2_Parser.OP6) | (1 << m2_Parser.OP7) | (1 << m2_Parser.OP8) | (1 << m2_Parser.OP9) | (1 << m2_Parser.OP10) | (1 << m2_Parser.VARIABLE) | (1 << m2_Parser.LET) | (1 << m2_Parser.CONST) | (1 << m2_Parser.BIND) | (1 << m2_Parser.PROC) | (1 << m2_Parser.STATIC) | (1 << m2_Parser.MIXIN) | (1 << m2_Parser.EXCEPT) | (1 << m2_Parser.TRY) | (1 << m2_Parser.FINALLY) | (1 << m2_Parser.OUT) | (1 << m2_Parser.CASE) | (1 << m2_Parser.IF) | (1 << m2_Parser.WHILE) | (1 << m2_Parser.ITERATOR) | (1 << m2_Parser.FOR))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (m2_Parser.TUPLE - 64)) | (1 << (m2_Parser.WHEN - 64)) | (1 << (m2_Parser.INCLUDE - 64)) | (1 << (m2_Parser.REF - 64)) | (1 << (m2_Parser.PTR - 64)) | (1 << (m2_Parser.BLOCK - 64)) | (1 << (m2_Parser.NIL - 64)) | (1 << (m2_Parser.CAST - 64)) | (1 << (m2_Parser.DISCARD - 64)) | (1 << (m2_Parser.DISTINCT - 64)) | (1 << (m2_Parser.SYM_HEADER - 64)) | (1 << (m2_Parser.IDENTIFIER - 64)) | (1 << (m2_Parser.INT_LIT - 64)) | (1 << (m2_Parser.INT8_LIT - 64)) | (1 << (m2_Parser.INT16_LIT - 64)) | (1 << (m2_Parser.INT32_LIT - 64)) | (1 << (m2_Parser.INT64_LIT - 64)) | (1 << (m2_Parser.UINT_LIT - 64)) | (1 << (m2_Parser.UINT8_LIT - 64)) | (1 << (m2_Parser.UINT16_LIT - 64)) | (1 << (m2_Parser.UINT32_LIT - 64)) | (1 << (m2_Parser.UINT64_LIT - 64)) | (1 << (m2_Parser.FLOAT_LIT - 64)) | (1 << (m2_Parser.FLOAT32_LIT - 64)) | (1 << (m2_Parser.FLOAT64_LIT - 64)) | (1 << (m2_Parser.CHAR_LIT - 64)) | (1 << (m2_Parser.STR_LIT - 64)) | (1 << (m2_Parser.TRIPLESTR_LIT - 64)) | (1 << (m2_Parser.RSTR_LIT - 64)) | (1 << (m2_Parser.GENERALIZED_STR_LIT - 64)) | (1 << (m2_Parser.GENERALIZED_TRIPLESTR_LIT - 64)))) != 0):
                self.state = 388
                self.exprColonEqExpr()
                self.state = 390
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==m2_Parser.COMMA:
                    self.state = 389
                    self.match(m2_Parser.COMMA)


                self.state = 396
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 397
            self.optPar()
            self.state = 398
            self.match(m2_Parser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayConstrContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACK(self):
            return self.getToken(m2_Parser.OPEN_BRACK, 0)

        def optInd(self):
            return self.getTypedRuleContext(m2_Parser.OptIndContext,0)


        def optPar(self):
            return self.getTypedRuleContext(m2_Parser.OptParContext,0)


        def CLOSE_BRACK(self):
            return self.getToken(m2_Parser.CLOSE_BRACK, 0)

        def exprColonEqExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.ExprColonEqExprContext)
            else:
                return self.getTypedRuleContext(m2_Parser.ExprColonEqExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.COMMA)
            else:
                return self.getToken(m2_Parser.COMMA, i)

        def getRuleIndex(self):
            return m2_Parser.RULE_arrayConstr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayConstr" ):
                listener.enterArrayConstr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayConstr" ):
                listener.exitArrayConstr(self)




    def arrayConstr(self):

        localctx = m2_Parser.ArrayConstrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_arrayConstr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 400
            self.match(m2_Parser.OPEN_BRACK)
            self.state = 401
            self.optInd()
            self.state = 408
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << m2_Parser.OPEN_PAREN) | (1 << m2_Parser.OPEN_BRACE) | (1 << m2_Parser.OPEN_BRACK) | (1 << m2_Parser.ENUM) | (1 << m2_Parser.OBJECT) | (1 << m2_Parser.COLON) | (1 << m2_Parser.DOT) | (1 << m2_Parser.EQUALS) | (1 << m2_Parser.IN) | (1 << m2_Parser.OF) | (1 << m2_Parser.NOT) | (1 << m2_Parser.OP0) | (1 << m2_Parser.OP1) | (1 << m2_Parser.OP2) | (1 << m2_Parser.OP3) | (1 << m2_Parser.OP4) | (1 << m2_Parser.OP5) | (1 << m2_Parser.OP6) | (1 << m2_Parser.OP7) | (1 << m2_Parser.OP8) | (1 << m2_Parser.OP9) | (1 << m2_Parser.OP10) | (1 << m2_Parser.VARIABLE) | (1 << m2_Parser.LET) | (1 << m2_Parser.CONST) | (1 << m2_Parser.BIND) | (1 << m2_Parser.PROC) | (1 << m2_Parser.STATIC) | (1 << m2_Parser.MIXIN) | (1 << m2_Parser.EXCEPT) | (1 << m2_Parser.TRY) | (1 << m2_Parser.FINALLY) | (1 << m2_Parser.OUT) | (1 << m2_Parser.CASE) | (1 << m2_Parser.IF) | (1 << m2_Parser.WHILE) | (1 << m2_Parser.ITERATOR) | (1 << m2_Parser.FOR))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (m2_Parser.TUPLE - 64)) | (1 << (m2_Parser.WHEN - 64)) | (1 << (m2_Parser.INCLUDE - 64)) | (1 << (m2_Parser.REF - 64)) | (1 << (m2_Parser.PTR - 64)) | (1 << (m2_Parser.BLOCK - 64)) | (1 << (m2_Parser.NIL - 64)) | (1 << (m2_Parser.CAST - 64)) | (1 << (m2_Parser.DISCARD - 64)) | (1 << (m2_Parser.DISTINCT - 64)) | (1 << (m2_Parser.SYM_HEADER - 64)) | (1 << (m2_Parser.IDENTIFIER - 64)) | (1 << (m2_Parser.INT_LIT - 64)) | (1 << (m2_Parser.INT8_LIT - 64)) | (1 << (m2_Parser.INT16_LIT - 64)) | (1 << (m2_Parser.INT32_LIT - 64)) | (1 << (m2_Parser.INT64_LIT - 64)) | (1 << (m2_Parser.UINT_LIT - 64)) | (1 << (m2_Parser.UINT8_LIT - 64)) | (1 << (m2_Parser.UINT16_LIT - 64)) | (1 << (m2_Parser.UINT32_LIT - 64)) | (1 << (m2_Parser.UINT64_LIT - 64)) | (1 << (m2_Parser.FLOAT_LIT - 64)) | (1 << (m2_Parser.FLOAT32_LIT - 64)) | (1 << (m2_Parser.FLOAT64_LIT - 64)) | (1 << (m2_Parser.CHAR_LIT - 64)) | (1 << (m2_Parser.STR_LIT - 64)) | (1 << (m2_Parser.TRIPLESTR_LIT - 64)) | (1 << (m2_Parser.RSTR_LIT - 64)) | (1 << (m2_Parser.GENERALIZED_STR_LIT - 64)) | (1 << (m2_Parser.GENERALIZED_TRIPLESTR_LIT - 64)))) != 0):
                self.state = 402
                self.exprColonEqExpr()
                self.state = 404
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==m2_Parser.COMMA:
                    self.state = 403
                    self.match(m2_Parser.COMMA)


                self.state = 410
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 411
            self.optPar()
            self.state = 412
            self.match(m2_Parser.CLOSE_BRACK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeDescContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleExpr(self):
            return self.getTypedRuleContext(m2_Parser.SimpleExprContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_typeDesc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeDesc" ):
                listener.enterTypeDesc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeDesc" ):
                listener.exitTypeDesc(self)




    def typeDesc(self):

        localctx = m2_Parser.TypeDescContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_typeDesc)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 414
            self.simpleExpr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetOrTableConstrContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(m2_Parser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(m2_Parser.CLOSE_BRACE, 0)

        def COLON(self):
            return self.getToken(m2_Parser.COLON, 0)

        def exprColonEqExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.ExprColonEqExprContext)
            else:
                return self.getTypedRuleContext(m2_Parser.ExprColonEqExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.COMMA)
            else:
                return self.getToken(m2_Parser.COMMA, i)

        def getRuleIndex(self):
            return m2_Parser.RULE_setOrTableConstr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetOrTableConstr" ):
                listener.enterSetOrTableConstr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetOrTableConstr" ):
                listener.exitSetOrTableConstr(self)




    def setOrTableConstr(self):

        localctx = m2_Parser.SetOrTableConstrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_setOrTableConstr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 416
            self.match(m2_Parser.OPEN_BRACE)
            self.state = 426
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,25,self._ctx)
            if la_ == 1:
                self.state = 422
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << m2_Parser.OPEN_PAREN) | (1 << m2_Parser.OPEN_BRACE) | (1 << m2_Parser.OPEN_BRACK) | (1 << m2_Parser.ENUM) | (1 << m2_Parser.OBJECT) | (1 << m2_Parser.COLON) | (1 << m2_Parser.DOT) | (1 << m2_Parser.EQUALS) | (1 << m2_Parser.IN) | (1 << m2_Parser.OF) | (1 << m2_Parser.NOT) | (1 << m2_Parser.OP0) | (1 << m2_Parser.OP1) | (1 << m2_Parser.OP2) | (1 << m2_Parser.OP3) | (1 << m2_Parser.OP4) | (1 << m2_Parser.OP5) | (1 << m2_Parser.OP6) | (1 << m2_Parser.OP7) | (1 << m2_Parser.OP8) | (1 << m2_Parser.OP9) | (1 << m2_Parser.OP10) | (1 << m2_Parser.VARIABLE) | (1 << m2_Parser.LET) | (1 << m2_Parser.CONST) | (1 << m2_Parser.BIND) | (1 << m2_Parser.PROC) | (1 << m2_Parser.STATIC) | (1 << m2_Parser.MIXIN) | (1 << m2_Parser.EXCEPT) | (1 << m2_Parser.TRY) | (1 << m2_Parser.FINALLY) | (1 << m2_Parser.OUT) | (1 << m2_Parser.CASE) | (1 << m2_Parser.IF) | (1 << m2_Parser.WHILE) | (1 << m2_Parser.ITERATOR) | (1 << m2_Parser.FOR))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (m2_Parser.TUPLE - 64)) | (1 << (m2_Parser.WHEN - 64)) | (1 << (m2_Parser.INCLUDE - 64)) | (1 << (m2_Parser.REF - 64)) | (1 << (m2_Parser.PTR - 64)) | (1 << (m2_Parser.BLOCK - 64)) | (1 << (m2_Parser.NIL - 64)) | (1 << (m2_Parser.CAST - 64)) | (1 << (m2_Parser.DISCARD - 64)) | (1 << (m2_Parser.DISTINCT - 64)) | (1 << (m2_Parser.SYM_HEADER - 64)) | (1 << (m2_Parser.IDENTIFIER - 64)) | (1 << (m2_Parser.INT_LIT - 64)) | (1 << (m2_Parser.INT8_LIT - 64)) | (1 << (m2_Parser.INT16_LIT - 64)) | (1 << (m2_Parser.INT32_LIT - 64)) | (1 << (m2_Parser.INT64_LIT - 64)) | (1 << (m2_Parser.UINT_LIT - 64)) | (1 << (m2_Parser.UINT8_LIT - 64)) | (1 << (m2_Parser.UINT16_LIT - 64)) | (1 << (m2_Parser.UINT32_LIT - 64)) | (1 << (m2_Parser.UINT64_LIT - 64)) | (1 << (m2_Parser.FLOAT_LIT - 64)) | (1 << (m2_Parser.FLOAT32_LIT - 64)) | (1 << (m2_Parser.FLOAT64_LIT - 64)) | (1 << (m2_Parser.CHAR_LIT - 64)) | (1 << (m2_Parser.STR_LIT - 64)) | (1 << (m2_Parser.TRIPLESTR_LIT - 64)) | (1 << (m2_Parser.RSTR_LIT - 64)) | (1 << (m2_Parser.GENERALIZED_STR_LIT - 64)) | (1 << (m2_Parser.GENERALIZED_TRIPLESTR_LIT - 64)))) != 0):
                    self.state = 417
                    self.exprColonEqExpr()
                    self.state = 418
                    self.match(m2_Parser.COMMA)
                    self.state = 424
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 425
                self.match(m2_Parser.COLON)
                pass


            self.state = 428
            self.match(m2_Parser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CastExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CAST(self):
            return self.getToken(m2_Parser.CAST, 0)

        def OPEN_BRACK(self):
            return self.getToken(m2_Parser.OPEN_BRACK, 0)

        def optInd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.OptIndContext)
            else:
                return self.getTypedRuleContext(m2_Parser.OptIndContext,i)


        def typeDesc(self):
            return self.getTypedRuleContext(m2_Parser.TypeDescContext,0)


        def optPar(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.OptParContext)
            else:
                return self.getTypedRuleContext(m2_Parser.OptParContext,i)


        def CLOSE_BRACK(self):
            return self.getToken(m2_Parser.CLOSE_BRACK, 0)

        def OPEN_PAREN(self):
            return self.getToken(m2_Parser.OPEN_PAREN, 0)

        def expr(self):
            return self.getTypedRuleContext(m2_Parser.ExprContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(m2_Parser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return m2_Parser.RULE_castExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCastExpr" ):
                listener.enterCastExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCastExpr" ):
                listener.exitCastExpr(self)




    def castExpr(self):

        localctx = m2_Parser.CastExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_castExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 430
            self.match(m2_Parser.CAST)
            self.state = 431
            self.match(m2_Parser.OPEN_BRACK)
            self.state = 432
            self.optInd()
            self.state = 433
            self.typeDesc()
            self.state = 434
            self.optPar()
            self.state = 435
            self.match(m2_Parser.CLOSE_BRACK)
            self.state = 436
            self.match(m2_Parser.OPEN_PAREN)
            self.state = 437
            self.optInd()
            self.state = 438
            self.expr()
            self.state = 439
            self.optPar()
            self.state = 440
            self.match(m2_Parser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentOrLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def generalizedLit(self):
            return self.getTypedRuleContext(m2_Parser.GeneralizedLitContext,0)


        def symbol(self):
            return self.getTypedRuleContext(m2_Parser.SymbolContext,0)


        def literal(self):
            return self.getTypedRuleContext(m2_Parser.LiteralContext,0)


        def par(self):
            return self.getTypedRuleContext(m2_Parser.ParContext,0)


        def arrayConstr(self):
            return self.getTypedRuleContext(m2_Parser.ArrayConstrContext,0)


        def setOrTableConstr(self):
            return self.getTypedRuleContext(m2_Parser.SetOrTableConstrContext,0)


        def castExpr(self):
            return self.getTypedRuleContext(m2_Parser.CastExprContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_identOrLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentOrLiteral" ):
                listener.enterIdentOrLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentOrLiteral" ):
                listener.exitIdentOrLiteral(self)




    def identOrLiteral(self):

        localctx = m2_Parser.IdentOrLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_identOrLiteral)
        try:
            self.state = 449
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [m2_Parser.GENERALIZED_STR_LIT, m2_Parser.GENERALIZED_TRIPLESTR_LIT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 442
                self.generalizedLit()
                pass
            elif token in [m2_Parser.ENUM, m2_Parser.OBJECT, m2_Parser.VARIABLE, m2_Parser.LET, m2_Parser.CONST, m2_Parser.PROC, m2_Parser.MIXIN, m2_Parser.EXCEPT, m2_Parser.TRY, m2_Parser.FINALLY, m2_Parser.OUT, m2_Parser.CASE, m2_Parser.IF, m2_Parser.WHILE, m2_Parser.ITERATOR, m2_Parser.FOR, m2_Parser.TUPLE, m2_Parser.WHEN, m2_Parser.INCLUDE, m2_Parser.REF, m2_Parser.PTR, m2_Parser.BLOCK, m2_Parser.DISCARD, m2_Parser.DISTINCT, m2_Parser.SYM_HEADER, m2_Parser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 443
                self.symbol()
                pass
            elif token in [m2_Parser.NIL, m2_Parser.INT_LIT, m2_Parser.INT8_LIT, m2_Parser.INT16_LIT, m2_Parser.INT32_LIT, m2_Parser.INT64_LIT, m2_Parser.UINT_LIT, m2_Parser.UINT8_LIT, m2_Parser.UINT16_LIT, m2_Parser.UINT32_LIT, m2_Parser.UINT64_LIT, m2_Parser.FLOAT_LIT, m2_Parser.FLOAT32_LIT, m2_Parser.FLOAT64_LIT, m2_Parser.CHAR_LIT, m2_Parser.STR_LIT, m2_Parser.TRIPLESTR_LIT, m2_Parser.RSTR_LIT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 444
                self.literal()
                pass
            elif token in [m2_Parser.OPEN_PAREN]:
                self.enterOuterAlt(localctx, 4)
                self.state = 445
                self.par()
                pass
            elif token in [m2_Parser.OPEN_BRACK]:
                self.enterOuterAlt(localctx, 5)
                self.state = 446
                self.arrayConstr()
                pass
            elif token in [m2_Parser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 447
                self.setOrTableConstr()
                pass
            elif token in [m2_Parser.CAST]:
                self.enterOuterAlt(localctx, 7)
                self.state = 448
                self.castExpr()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(m2_Parser.ExprContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_indexExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexExpr" ):
                listener.enterIndexExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexExpr" ):
                listener.exitIndexExpr(self)




    def indexExpr(self):

        localctx = m2_Parser.IndexExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_indexExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 451
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexExprListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def indexExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.IndexExprContext)
            else:
                return self.getTypedRuleContext(m2_Parser.IndexExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.COMMA)
            else:
                return self.getToken(m2_Parser.COMMA, i)

        def getRuleIndex(self):
            return m2_Parser.RULE_indexExprList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexExprList" ):
                listener.enterIndexExprList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexExprList" ):
                listener.exitIndexExprList(self)




    def indexExprList(self):

        localctx = m2_Parser.IndexExprListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_indexExprList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 453
            self.indexExpr()
            self.state = 458
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==m2_Parser.COMMA:
                self.state = 454
                self.match(m2_Parser.COMMA)
                self.state = 455
                self.indexExpr()
                self.state = 460
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimarySuffixContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exprColonEqExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.ExprColonEqExprContext)
            else:
                return self.getTypedRuleContext(m2_Parser.ExprColonEqExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.COMMA)
            else:
                return self.getToken(m2_Parser.COMMA, i)

        def OPEN_PAREN(self):
            return self.getToken(m2_Parser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(m2_Parser.CLOSE_PAREN, 0)

        def DOT(self):
            return self.getToken(m2_Parser.DOT, 0)

        def optInd(self):
            return self.getTypedRuleContext(m2_Parser.OptIndContext,0)


        def symbol(self):
            return self.getTypedRuleContext(m2_Parser.SymbolContext,0)


        def generalizedLit(self):
            return self.getTypedRuleContext(m2_Parser.GeneralizedLitContext,0)


        def OPEN_BRACK(self):
            return self.getToken(m2_Parser.OPEN_BRACK, 0)

        def indexExprList(self):
            return self.getTypedRuleContext(m2_Parser.IndexExprListContext,0)


        def optPar(self):
            return self.getTypedRuleContext(m2_Parser.OptParContext,0)


        def CLOSE_BRACK(self):
            return self.getToken(m2_Parser.CLOSE_BRACK, 0)

        def OPEN_BRACE(self):
            return self.getToken(m2_Parser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(m2_Parser.CLOSE_BRACE, 0)

        def expr(self):
            return self.getTypedRuleContext(m2_Parser.ExprContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_primarySuffix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimarySuffix" ):
                listener.enterPrimarySuffix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimarySuffix" ):
                listener.exitPrimarySuffix(self)




    def primarySuffix(self):

        localctx = m2_Parser.PrimarySuffixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_primarySuffix)
        self._la = 0 # Token type
        try:
            self.state = 500
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 465 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 461
                        self.exprColonEqExpr()
                        self.state = 463
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
                        if la_ == 1:
                            self.state = 462
                            self.match(m2_Parser.COMMA)



                    else:
                        raise NoViableAltException(self)
                    self.state = 467 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,29,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 469
                self.match(m2_Parser.OPEN_PAREN)
                self.state = 476
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << m2_Parser.OPEN_PAREN) | (1 << m2_Parser.OPEN_BRACE) | (1 << m2_Parser.OPEN_BRACK) | (1 << m2_Parser.ENUM) | (1 << m2_Parser.OBJECT) | (1 << m2_Parser.COLON) | (1 << m2_Parser.DOT) | (1 << m2_Parser.EQUALS) | (1 << m2_Parser.IN) | (1 << m2_Parser.OF) | (1 << m2_Parser.NOT) | (1 << m2_Parser.OP0) | (1 << m2_Parser.OP1) | (1 << m2_Parser.OP2) | (1 << m2_Parser.OP3) | (1 << m2_Parser.OP4) | (1 << m2_Parser.OP5) | (1 << m2_Parser.OP6) | (1 << m2_Parser.OP7) | (1 << m2_Parser.OP8) | (1 << m2_Parser.OP9) | (1 << m2_Parser.OP10) | (1 << m2_Parser.VARIABLE) | (1 << m2_Parser.LET) | (1 << m2_Parser.CONST) | (1 << m2_Parser.BIND) | (1 << m2_Parser.PROC) | (1 << m2_Parser.STATIC) | (1 << m2_Parser.MIXIN) | (1 << m2_Parser.EXCEPT) | (1 << m2_Parser.TRY) | (1 << m2_Parser.FINALLY) | (1 << m2_Parser.OUT) | (1 << m2_Parser.CASE) | (1 << m2_Parser.IF) | (1 << m2_Parser.WHILE) | (1 << m2_Parser.ITERATOR) | (1 << m2_Parser.FOR))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (m2_Parser.TUPLE - 64)) | (1 << (m2_Parser.WHEN - 64)) | (1 << (m2_Parser.INCLUDE - 64)) | (1 << (m2_Parser.REF - 64)) | (1 << (m2_Parser.PTR - 64)) | (1 << (m2_Parser.BLOCK - 64)) | (1 << (m2_Parser.NIL - 64)) | (1 << (m2_Parser.CAST - 64)) | (1 << (m2_Parser.DISCARD - 64)) | (1 << (m2_Parser.DISTINCT - 64)) | (1 << (m2_Parser.SYM_HEADER - 64)) | (1 << (m2_Parser.IDENTIFIER - 64)) | (1 << (m2_Parser.INT_LIT - 64)) | (1 << (m2_Parser.INT8_LIT - 64)) | (1 << (m2_Parser.INT16_LIT - 64)) | (1 << (m2_Parser.INT32_LIT - 64)) | (1 << (m2_Parser.INT64_LIT - 64)) | (1 << (m2_Parser.UINT_LIT - 64)) | (1 << (m2_Parser.UINT8_LIT - 64)) | (1 << (m2_Parser.UINT16_LIT - 64)) | (1 << (m2_Parser.UINT32_LIT - 64)) | (1 << (m2_Parser.UINT64_LIT - 64)) | (1 << (m2_Parser.FLOAT_LIT - 64)) | (1 << (m2_Parser.FLOAT32_LIT - 64)) | (1 << (m2_Parser.FLOAT64_LIT - 64)) | (1 << (m2_Parser.CHAR_LIT - 64)) | (1 << (m2_Parser.STR_LIT - 64)) | (1 << (m2_Parser.TRIPLESTR_LIT - 64)) | (1 << (m2_Parser.RSTR_LIT - 64)) | (1 << (m2_Parser.GENERALIZED_STR_LIT - 64)) | (1 << (m2_Parser.GENERALIZED_TRIPLESTR_LIT - 64)))) != 0):
                    self.state = 470
                    self.exprColonEqExpr()
                    self.state = 472
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==m2_Parser.COMMA:
                        self.state = 471
                        self.match(m2_Parser.COMMA)


                    self.state = 478
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 479
                self.match(m2_Parser.CLOSE_PAREN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 480
                self.match(m2_Parser.DOT)
                self.state = 481
                self.optInd()
                self.state = 482
                self.symbol()
                self.state = 484
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,32,self._ctx)
                if la_ == 1:
                    self.state = 483
                    self.generalizedLit()


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 486
                self.match(m2_Parser.OPEN_BRACK)
                self.state = 487
                self.optInd()
                self.state = 488
                self.indexExprList()
                self.state = 489
                self.optPar()
                self.state = 490
                self.match(m2_Parser.CLOSE_BRACK)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 492
                self.match(m2_Parser.OPEN_BRACE)
                self.state = 493
                self.optInd()
                self.state = 494
                self.indexExprList()
                self.state = 495
                self.optPar()
                self.state = 496
                self.match(m2_Parser.CLOSE_BRACE)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 498
                if not self._input.LT(1).type in self.primarySuffixList:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self._input.LT(1).type in self.primarySuffixList")
                self.state = 499
                self.expr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeKeyw(self):
            return self.getTypedRuleContext(m2_Parser.TypeKeywContext,0)


        def typeDesc(self):
            return self.getTypedRuleContext(m2_Parser.TypeDescContext,0)


        def prefixOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.PrefixOperatorContext)
            else:
                return self.getTypedRuleContext(m2_Parser.PrefixOperatorContext,i)


        def identOrLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.IdentOrLiteralContext)
            else:
                return self.getTypedRuleContext(m2_Parser.IdentOrLiteralContext,i)


        def primarySuffix(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.PrimarySuffixContext)
            else:
                return self.getTypedRuleContext(m2_Parser.PrimarySuffixContext,i)


        def BIND(self):
            return self.getToken(m2_Parser.BIND, 0)

        def primary(self):
            return self.getTypedRuleContext(m2_Parser.PrimaryContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_primary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimary" ):
                listener.enterPrimary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimary" ):
                listener.exitPrimary(self)




    def primary(self):

        localctx = m2_Parser.PrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_primary)
        self._la = 0 # Token type
        try:
            self.state = 524
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,37,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 502
                self.typeKeyw()
                self.state = 503
                self.typeDesc()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 508
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << m2_Parser.COLON) | (1 << m2_Parser.DOT) | (1 << m2_Parser.EQUALS) | (1 << m2_Parser.IN) | (1 << m2_Parser.OF) | (1 << m2_Parser.NOT) | (1 << m2_Parser.OP0) | (1 << m2_Parser.OP1) | (1 << m2_Parser.OP2) | (1 << m2_Parser.OP3) | (1 << m2_Parser.OP4) | (1 << m2_Parser.OP5) | (1 << m2_Parser.OP6) | (1 << m2_Parser.OP7) | (1 << m2_Parser.OP8) | (1 << m2_Parser.OP9) | (1 << m2_Parser.OP10) | (1 << m2_Parser.STATIC))) != 0):
                    self.state = 505
                    self.prefixOperator()
                    self.state = 510
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 512 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 511
                        self.identOrLiteral()

                    else:
                        raise NoViableAltException(self)
                    self.state = 514 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,35,self._ctx)

                self.state = 519
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,36,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 516
                        self.primarySuffix() 
                    self.state = 521
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,36,self._ctx)

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 522
                self.match(m2_Parser.BIND)
                self.state = 523
                self.primary()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PragmaContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(m2_Parser.OPEN_BRACE, 0)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.DOT)
            else:
                return self.getToken(m2_Parser.DOT, i)

        def optInd(self):
            return self.getTypedRuleContext(m2_Parser.OptIndContext,0)


        def optPar(self):
            return self.getTypedRuleContext(m2_Parser.OptParContext,0)


        def CLOSE_BRACE(self):
            return self.getToken(m2_Parser.CLOSE_BRACE, 0)

        def exprColonExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.ExprColonExprContext)
            else:
                return self.getTypedRuleContext(m2_Parser.ExprColonExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.COMMA)
            else:
                return self.getToken(m2_Parser.COMMA, i)

        def getRuleIndex(self):
            return m2_Parser.RULE_pragma

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragma" ):
                listener.enterPragma(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragma" ):
                listener.exitPragma(self)




    def pragma(self):

        localctx = m2_Parser.PragmaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_pragma)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 526
            self.match(m2_Parser.OPEN_BRACE)
            self.state = 527
            self.match(m2_Parser.DOT)
            self.state = 528
            self.optInd()
            self.state = 535
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,39,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 529
                    self.exprColonExpr()
                    self.state = 531
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==m2_Parser.COMMA:
                        self.state = 530
                        self.match(m2_Parser.COMMA)

             
                self.state = 537
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,39,self._ctx)

            self.state = 538
            self.optPar()

            self.state = 540
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==m2_Parser.DOT:
                self.state = 539
                self.match(m2_Parser.DOT)


            self.state = 542
            self.match(m2_Parser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arrowExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.ArrowExprContext)
            else:
                return self.getTypedRuleContext(m2_Parser.ArrowExprContext,i)


        def OP0(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.OP0)
            else:
                return self.getToken(m2_Parser.OP0, i)

        def optInd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.OptIndContext)
            else:
                return self.getTypedRuleContext(m2_Parser.OptIndContext,i)


        def getRuleIndex(self):
            return m2_Parser.RULE_simpleExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleExpr" ):
                listener.enterSimpleExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleExpr" ):
                listener.exitSimpleExpr(self)




    def simpleExpr(self):

        localctx = m2_Parser.SimpleExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_simpleExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 544
            self.arrowExpr()
            self.state = 551
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,41,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 545
                    self.match(m2_Parser.OP0)
                    self.state = 546
                    self.optInd()
                    self.state = 547
                    self.arrowExpr() 
                self.state = 553
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,41,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrowExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.AssignExprContext)
            else:
                return self.getTypedRuleContext(m2_Parser.AssignExprContext,i)


        def OP1(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.OP1)
            else:
                return self.getToken(m2_Parser.OP1, i)

        def optInd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.OptIndContext)
            else:
                return self.getTypedRuleContext(m2_Parser.OptIndContext,i)


        def getRuleIndex(self):
            return m2_Parser.RULE_arrowExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrowExpr" ):
                listener.enterArrowExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrowExpr" ):
                listener.exitArrowExpr(self)




    def arrowExpr(self):

        localctx = m2_Parser.ArrowExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_arrowExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 554
            self.assignExpr()
            self.state = 561
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,42,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 555
                    self.match(m2_Parser.OP1)
                    self.state = 556
                    self.optInd()
                    self.state = 557
                    self.assignExpr() 
                self.state = 563
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,42,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def orExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.OrExprContext)
            else:
                return self.getTypedRuleContext(m2_Parser.OrExprContext,i)


        def OP2(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.OP2)
            else:
                return self.getToken(m2_Parser.OP2, i)

        def optInd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.OptIndContext)
            else:
                return self.getTypedRuleContext(m2_Parser.OptIndContext,i)


        def getRuleIndex(self):
            return m2_Parser.RULE_assignExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignExpr" ):
                listener.enterAssignExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignExpr" ):
                listener.exitAssignExpr(self)




    def assignExpr(self):

        localctx = m2_Parser.AssignExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_assignExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 564
            self.orExpr()
            self.state = 571
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,43,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 565
                    self.match(m2_Parser.OP2)
                    self.state = 566
                    self.optInd()
                    self.state = 567
                    self.orExpr() 
                self.state = 573
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,43,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def andExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.AndExprContext)
            else:
                return self.getTypedRuleContext(m2_Parser.AndExprContext,i)


        def OP3(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.OP3)
            else:
                return self.getToken(m2_Parser.OP3, i)

        def optInd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.OptIndContext)
            else:
                return self.getTypedRuleContext(m2_Parser.OptIndContext,i)


        def getRuleIndex(self):
            return m2_Parser.RULE_orExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrExpr" ):
                listener.enterOrExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrExpr" ):
                listener.exitOrExpr(self)




    def orExpr(self):

        localctx = m2_Parser.OrExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_orExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 574
            self.andExpr()
            self.state = 581
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,44,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 575
                    self.match(m2_Parser.OP3)
                    self.state = 576
                    self.optInd()
                    self.state = 577
                    self.andExpr() 
                self.state = 583
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,44,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AndExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def cmpExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.CmpExprContext)
            else:
                return self.getTypedRuleContext(m2_Parser.CmpExprContext,i)


        def OP4(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.OP4)
            else:
                return self.getToken(m2_Parser.OP4, i)

        def optInd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.OptIndContext)
            else:
                return self.getTypedRuleContext(m2_Parser.OptIndContext,i)


        def getRuleIndex(self):
            return m2_Parser.RULE_andExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAndExpr" ):
                listener.enterAndExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAndExpr" ):
                listener.exitAndExpr(self)




    def andExpr(self):

        localctx = m2_Parser.AndExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_andExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 584
            self.cmpExpr()
            self.state = 591
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,45,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 585
                    self.match(m2_Parser.OP4)
                    self.state = 586
                    self.optInd()
                    self.state = 587
                    self.cmpExpr() 
                self.state = 593
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,45,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CmpExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sliceExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.SliceExprContext)
            else:
                return self.getTypedRuleContext(m2_Parser.SliceExprContext,i)


        def OP5(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.OP5)
            else:
                return self.getToken(m2_Parser.OP5, i)

        def optInd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.OptIndContext)
            else:
                return self.getTypedRuleContext(m2_Parser.OptIndContext,i)


        def getRuleIndex(self):
            return m2_Parser.RULE_cmpExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCmpExpr" ):
                listener.enterCmpExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCmpExpr" ):
                listener.exitCmpExpr(self)




    def cmpExpr(self):

        localctx = m2_Parser.CmpExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_cmpExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 594
            self.sliceExpr()
            self.state = 601
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,46,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 595
                    self.match(m2_Parser.OP5)
                    self.state = 596
                    self.optInd()
                    self.state = 597
                    self.sliceExpr() 
                self.state = 603
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,46,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SliceExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ampExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.AmpExprContext)
            else:
                return self.getTypedRuleContext(m2_Parser.AmpExprContext,i)


        def OP6(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.OP6)
            else:
                return self.getToken(m2_Parser.OP6, i)

        def optInd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.OptIndContext)
            else:
                return self.getTypedRuleContext(m2_Parser.OptIndContext,i)


        def getRuleIndex(self):
            return m2_Parser.RULE_sliceExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSliceExpr" ):
                listener.enterSliceExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSliceExpr" ):
                listener.exitSliceExpr(self)




    def sliceExpr(self):

        localctx = m2_Parser.SliceExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_sliceExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 604
            self.ampExpr()
            self.state = 611
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,47,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 605
                    self.match(m2_Parser.OP6)
                    self.state = 606
                    self.optInd()
                    self.state = 607
                    self.ampExpr() 
                self.state = 613
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,47,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AmpExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def plusExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.PlusExprContext)
            else:
                return self.getTypedRuleContext(m2_Parser.PlusExprContext,i)


        def OP7(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.OP7)
            else:
                return self.getToken(m2_Parser.OP7, i)

        def optInd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.OptIndContext)
            else:
                return self.getTypedRuleContext(m2_Parser.OptIndContext,i)


        def getRuleIndex(self):
            return m2_Parser.RULE_ampExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAmpExpr" ):
                listener.enterAmpExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAmpExpr" ):
                listener.exitAmpExpr(self)




    def ampExpr(self):

        localctx = m2_Parser.AmpExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_ampExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 614
            self.plusExpr()
            self.state = 621
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,48,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 615
                    self.match(m2_Parser.OP7)
                    self.state = 616
                    self.optInd()
                    self.state = 617
                    self.plusExpr() 
                self.state = 623
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,48,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PlusExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mulExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.MulExprContext)
            else:
                return self.getTypedRuleContext(m2_Parser.MulExprContext,i)


        def OP8(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.OP8)
            else:
                return self.getToken(m2_Parser.OP8, i)

        def optInd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.OptIndContext)
            else:
                return self.getTypedRuleContext(m2_Parser.OptIndContext,i)


        def getRuleIndex(self):
            return m2_Parser.RULE_plusExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlusExpr" ):
                listener.enterPlusExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlusExpr" ):
                listener.exitPlusExpr(self)




    def plusExpr(self):

        localctx = m2_Parser.PlusExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_plusExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 624
            self.mulExpr()
            self.state = 631
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,49,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 625
                    self.match(m2_Parser.OP8)
                    self.state = 626
                    self.optInd()
                    self.state = 627
                    self.mulExpr() 
                self.state = 633
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,49,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MulExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dollarExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.DollarExprContext)
            else:
                return self.getTypedRuleContext(m2_Parser.DollarExprContext,i)


        def OP9(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.OP9)
            else:
                return self.getToken(m2_Parser.OP9, i)

        def optInd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.OptIndContext)
            else:
                return self.getTypedRuleContext(m2_Parser.OptIndContext,i)


        def getRuleIndex(self):
            return m2_Parser.RULE_mulExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMulExpr" ):
                listener.enterMulExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMulExpr" ):
                listener.exitMulExpr(self)




    def mulExpr(self):

        localctx = m2_Parser.MulExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_mulExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 634
            self.dollarExpr()
            self.state = 641
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,50,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 635
                    self.match(m2_Parser.OP9)
                    self.state = 636
                    self.optInd()
                    self.state = 637
                    self.dollarExpr() 
                self.state = 643
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,50,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DollarExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primary(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.PrimaryContext)
            else:
                return self.getTypedRuleContext(m2_Parser.PrimaryContext,i)


        def OP10(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.OP10)
            else:
                return self.getToken(m2_Parser.OP10, i)

        def optInd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.OptIndContext)
            else:
                return self.getTypedRuleContext(m2_Parser.OptIndContext,i)


        def getRuleIndex(self):
            return m2_Parser.RULE_dollarExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDollarExpr" ):
                listener.enterDollarExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDollarExpr" ):
                listener.exitDollarExpr(self)




    def dollarExpr(self):

        localctx = m2_Parser.DollarExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_dollarExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 644
            self.primary()
            self.state = 651
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,51,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 645
                    self.match(m2_Parser.OP10)
                    self.state = 646
                    self.optInd()
                    self.state = 647
                    self.primary() 
                self.state = 653
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,51,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.ExprContext)
            else:
                return self.getTypedRuleContext(m2_Parser.ExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.COMMA)
            else:
                return self.getToken(m2_Parser.COMMA, i)

        def getRuleIndex(self):
            return m2_Parser.RULE_exprList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprList" ):
                listener.enterExprList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprList" ):
                listener.exitExprList(self)




    def exprList(self):

        localctx = m2_Parser.ExprListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_exprList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 654
            self.expr()
            self.state = 659
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==m2_Parser.COMMA:
                self.state = 655
                self.match(m2_Parser.COMMA)
                self.state = 656
                self.expr()
                self.state = 661
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprColonExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.ExprContext)
            else:
                return self.getTypedRuleContext(m2_Parser.ExprContext,i)


        def COLON(self):
            return self.getToken(m2_Parser.COLON, 0)

        def getRuleIndex(self):
            return m2_Parser.RULE_exprColonExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprColonExpr" ):
                listener.enterExprColonExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprColonExpr" ):
                listener.exitExprColonExpr(self)




    def exprColonExpr(self):

        localctx = m2_Parser.ExprColonExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_exprColonExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 662
            self.expr()
            self.state = 665
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,53,self._ctx)
            if la_ == 1:
                self.state = 663
                self.match(m2_Parser.COLON)
                self.state = 664
                self.expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprColonEqExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.ExprContext)
            else:
                return self.getTypedRuleContext(m2_Parser.ExprContext,i)


        def COLON(self):
            return self.getToken(m2_Parser.COLON, 0)

        def EQUALS(self):
            return self.getToken(m2_Parser.EQUALS, 0)

        def getRuleIndex(self):
            return m2_Parser.RULE_exprColonEqExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprColonEqExpr" ):
                listener.enterExprColonEqExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprColonEqExpr" ):
                listener.exitExprColonEqExpr(self)




    def exprColonEqExpr(self):

        localctx = m2_Parser.ExprColonEqExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_exprColonEqExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 667
            self.expr()
            self.state = 671
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
            if la_ == 1:
                self.state = 668
                self.match(m2_Parser.COLON)

            elif la_ == 2:
                self.state = 669
                self.match(m2_Parser.EQUALS)
                self.state = 670
                self.expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprColonEqExprListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exprColonEqExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.ExprColonEqExprContext)
            else:
                return self.getTypedRuleContext(m2_Parser.ExprColonEqExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.COMMA)
            else:
                return self.getToken(m2_Parser.COMMA, i)

        def getRuleIndex(self):
            return m2_Parser.RULE_exprColonEqExprList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprColonEqExprList" ):
                listener.enterExprColonEqExprList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprColonEqExprList" ):
                listener.exitExprColonEqExprList(self)




    def exprColonEqExprList(self):

        localctx = m2_Parser.ExprColonEqExprListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_exprColonEqExprList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 673
            self.exprColonEqExpr()
            self.state = 678
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,55,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 674
                    self.match(m2_Parser.COMMA)
                    self.state = 675
                    self.exprColonEqExpr() 
                self.state = 680
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,55,self._ctx)

            self.state = 682
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==m2_Parser.COMMA:
                self.state = 681
                self.match(m2_Parser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CondExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.ExprContext)
            else:
                return self.getTypedRuleContext(m2_Parser.ExprContext,i)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.COLON)
            else:
                return self.getToken(m2_Parser.COLON, i)

        def optInd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.OptIndContext)
            else:
                return self.getTypedRuleContext(m2_Parser.OptIndContext,i)


        def ELSE(self):
            return self.getToken(m2_Parser.ELSE, 0)

        def ELIF(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.ELIF)
            else:
                return self.getToken(m2_Parser.ELIF, i)

        def getRuleIndex(self):
            return m2_Parser.RULE_condExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondExpr" ):
                listener.enterCondExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondExpr" ):
                listener.exitCondExpr(self)




    def condExpr(self):

        localctx = m2_Parser.CondExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_condExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 684
            self.expr()
            self.state = 685
            self.match(m2_Parser.COLON)
            self.state = 686
            self.expr()
            self.state = 687
            self.optInd()
            self.state = 696
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==m2_Parser.ELIF:
                self.state = 688
                self.match(m2_Parser.ELIF)
                self.state = 689
                self.expr()
                self.state = 690
                self.match(m2_Parser.COLON)
                self.state = 691
                self.expr()
                self.state = 692
                self.optInd()
                self.state = 698
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 699
            self.match(m2_Parser.ELSE)
            self.state = 700
            self.match(m2_Parser.COLON)
            self.state = 701
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT_LIT(self):
            return self.getToken(m2_Parser.INT_LIT, 0)

        def INT8_LIT(self):
            return self.getToken(m2_Parser.INT8_LIT, 0)

        def INT16_LIT(self):
            return self.getToken(m2_Parser.INT16_LIT, 0)

        def INT32_LIT(self):
            return self.getToken(m2_Parser.INT32_LIT, 0)

        def INT64_LIT(self):
            return self.getToken(m2_Parser.INT64_LIT, 0)

        def UINT_LIT(self):
            return self.getToken(m2_Parser.UINT_LIT, 0)

        def UINT8_LIT(self):
            return self.getToken(m2_Parser.UINT8_LIT, 0)

        def UINT16_LIT(self):
            return self.getToken(m2_Parser.UINT16_LIT, 0)

        def UINT32_LIT(self):
            return self.getToken(m2_Parser.UINT32_LIT, 0)

        def UINT64_LIT(self):
            return self.getToken(m2_Parser.UINT64_LIT, 0)

        def FLOAT_LIT(self):
            return self.getToken(m2_Parser.FLOAT_LIT, 0)

        def FLOAT32_LIT(self):
            return self.getToken(m2_Parser.FLOAT32_LIT, 0)

        def FLOAT64_LIT(self):
            return self.getToken(m2_Parser.FLOAT64_LIT, 0)

        def STR_LIT(self):
            return self.getToken(m2_Parser.STR_LIT, 0)

        def RSTR_LIT(self):
            return self.getToken(m2_Parser.RSTR_LIT, 0)

        def TRIPLESTR_LIT(self):
            return self.getToken(m2_Parser.TRIPLESTR_LIT, 0)

        def CHAR_LIT(self):
            return self.getToken(m2_Parser.CHAR_LIT, 0)

        def NIL(self):
            return self.getToken(m2_Parser.NIL, 0)

        def getRuleIndex(self):
            return m2_Parser.RULE_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral" ):
                listener.enterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral" ):
                listener.exitLiteral(self)




    def literal(self):

        localctx = m2_Parser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 703
            _la = self._input.LA(1)
            if not(((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & ((1 << (m2_Parser.NIL - 79)) | (1 << (m2_Parser.INT_LIT - 79)) | (1 << (m2_Parser.INT8_LIT - 79)) | (1 << (m2_Parser.INT16_LIT - 79)) | (1 << (m2_Parser.INT32_LIT - 79)) | (1 << (m2_Parser.INT64_LIT - 79)) | (1 << (m2_Parser.UINT_LIT - 79)) | (1 << (m2_Parser.UINT8_LIT - 79)) | (1 << (m2_Parser.UINT16_LIT - 79)) | (1 << (m2_Parser.UINT32_LIT - 79)) | (1 << (m2_Parser.UINT64_LIT - 79)) | (1 << (m2_Parser.FLOAT_LIT - 79)) | (1 << (m2_Parser.FLOAT32_LIT - 79)) | (1 << (m2_Parser.FLOAT64_LIT - 79)) | (1 << (m2_Parser.CHAR_LIT - 79)) | (1 << (m2_Parser.STR_LIT - 79)) | (1 << (m2_Parser.TRIPLESTR_LIT - 79)) | (1 << (m2_Parser.RSTR_LIT - 79)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SymbolBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def keyw(self):
            return self.getTypedRuleContext(m2_Parser.KeywContext,0)


        def IDENTIFIER(self):
            return self.getToken(m2_Parser.IDENTIFIER, 0)

        def literal(self):
            return self.getTypedRuleContext(m2_Parser.LiteralContext,0)


        def operator(self):
            return self.getTypedRuleContext(m2_Parser.OperatorContext,0)


        def OPEN_PAREN(self):
            return self.getToken(m2_Parser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(m2_Parser.CLOSE_PAREN, 0)

        def OPEN_BRACK(self):
            return self.getToken(m2_Parser.OPEN_BRACK, 0)

        def CLOSE_BRACK(self):
            return self.getToken(m2_Parser.CLOSE_BRACK, 0)

        def OPEN_BRACE(self):
            return self.getToken(m2_Parser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(m2_Parser.CLOSE_BRACE, 0)

        def EQUALS(self):
            return self.getToken(m2_Parser.EQUALS, 0)

        def getRuleIndex(self):
            return m2_Parser.RULE_symbolBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSymbolBody" ):
                listener.enterSymbolBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSymbolBody" ):
                listener.exitSymbolBody(self)




    def symbolBody(self):

        localctx = m2_Parser.SymbolBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_symbolBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 718
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [m2_Parser.ENUM, m2_Parser.OBJECT, m2_Parser.VARIABLE, m2_Parser.LET, m2_Parser.CONST, m2_Parser.PROC, m2_Parser.MIXIN, m2_Parser.EXCEPT, m2_Parser.TRY, m2_Parser.FINALLY, m2_Parser.OUT, m2_Parser.CASE, m2_Parser.IF, m2_Parser.WHILE, m2_Parser.ITERATOR, m2_Parser.FOR, m2_Parser.TUPLE, m2_Parser.WHEN, m2_Parser.INCLUDE, m2_Parser.REF, m2_Parser.PTR, m2_Parser.BLOCK, m2_Parser.DISCARD, m2_Parser.DISTINCT]:
                self.state = 705
                self.keyw()
                pass
            elif token in [m2_Parser.IDENTIFIER]:
                self.state = 706
                self.match(m2_Parser.IDENTIFIER)
                pass
            elif token in [m2_Parser.NIL, m2_Parser.INT_LIT, m2_Parser.INT8_LIT, m2_Parser.INT16_LIT, m2_Parser.INT32_LIT, m2_Parser.INT64_LIT, m2_Parser.UINT_LIT, m2_Parser.UINT8_LIT, m2_Parser.UINT16_LIT, m2_Parser.UINT32_LIT, m2_Parser.UINT64_LIT, m2_Parser.FLOAT_LIT, m2_Parser.FLOAT32_LIT, m2_Parser.FLOAT64_LIT, m2_Parser.CHAR_LIT, m2_Parser.STR_LIT, m2_Parser.TRIPLESTR_LIT, m2_Parser.RSTR_LIT]:
                self.state = 707
                self.literal()
                pass
            elif token in [m2_Parser.OPEN_PAREN, m2_Parser.CLOSE_PAREN, m2_Parser.OPEN_BRACE, m2_Parser.CLOSE_BRACE, m2_Parser.OPEN_BRACK, m2_Parser.CLOSE_BRACK, m2_Parser.COLON, m2_Parser.DOT, m2_Parser.EQUALS, m2_Parser.IN, m2_Parser.OF, m2_Parser.NOT, m2_Parser.OP0, m2_Parser.OP1, m2_Parser.OP2, m2_Parser.OP3, m2_Parser.OP4, m2_Parser.OP5, m2_Parser.OP6, m2_Parser.OP7, m2_Parser.OP8, m2_Parser.OP9, m2_Parser.OP10, m2_Parser.STATIC]:
                self.state = 716
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
                if la_ == 1:
                    self.state = 708
                    self.operator()
                    pass

                elif la_ == 2:
                    self.state = 709
                    self.match(m2_Parser.OPEN_PAREN)
                    pass

                elif la_ == 3:
                    self.state = 710
                    self.match(m2_Parser.CLOSE_PAREN)
                    pass

                elif la_ == 4:
                    self.state = 711
                    self.match(m2_Parser.OPEN_BRACK)
                    pass

                elif la_ == 5:
                    self.state = 712
                    self.match(m2_Parser.CLOSE_BRACK)
                    pass

                elif la_ == 6:
                    self.state = 713
                    self.match(m2_Parser.OPEN_BRACE)
                    pass

                elif la_ == 7:
                    self.state = 714
                    self.match(m2_Parser.CLOSE_BRACE)
                    pass

                elif la_ == 8:
                    self.state = 715
                    self.match(m2_Parser.EQUALS)
                    pass


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SymbolContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SYM_HEADER(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.SYM_HEADER)
            else:
                return self.getToken(m2_Parser.SYM_HEADER, i)

        def symbolBody(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.SymbolBodyContext)
            else:
                return self.getTypedRuleContext(m2_Parser.SymbolBodyContext,i)


        def keyw(self):
            return self.getTypedRuleContext(m2_Parser.KeywContext,0)


        def IDENTIFIER(self):
            return self.getToken(m2_Parser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return m2_Parser.RULE_symbol

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSymbol" ):
                listener.enterSymbol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSymbol" ):
                listener.exitSymbol(self)




    def symbol(self):

        localctx = m2_Parser.SymbolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_symbol)
        self._la = 0 # Token type
        try:
            self.state = 730
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [m2_Parser.SYM_HEADER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 720
                self.match(m2_Parser.SYM_HEADER)
                self.state = 722 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 721
                    self.symbolBody()
                    self.state = 724 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << m2_Parser.OPEN_PAREN) | (1 << m2_Parser.CLOSE_PAREN) | (1 << m2_Parser.OPEN_BRACE) | (1 << m2_Parser.CLOSE_BRACE) | (1 << m2_Parser.OPEN_BRACK) | (1 << m2_Parser.CLOSE_BRACK) | (1 << m2_Parser.ENUM) | (1 << m2_Parser.OBJECT) | (1 << m2_Parser.COLON) | (1 << m2_Parser.DOT) | (1 << m2_Parser.EQUALS) | (1 << m2_Parser.IN) | (1 << m2_Parser.OF) | (1 << m2_Parser.NOT) | (1 << m2_Parser.OP0) | (1 << m2_Parser.OP1) | (1 << m2_Parser.OP2) | (1 << m2_Parser.OP3) | (1 << m2_Parser.OP4) | (1 << m2_Parser.OP5) | (1 << m2_Parser.OP6) | (1 << m2_Parser.OP7) | (1 << m2_Parser.OP8) | (1 << m2_Parser.OP9) | (1 << m2_Parser.OP10) | (1 << m2_Parser.VARIABLE) | (1 << m2_Parser.LET) | (1 << m2_Parser.CONST) | (1 << m2_Parser.PROC) | (1 << m2_Parser.STATIC) | (1 << m2_Parser.MIXIN) | (1 << m2_Parser.EXCEPT) | (1 << m2_Parser.TRY) | (1 << m2_Parser.FINALLY) | (1 << m2_Parser.OUT) | (1 << m2_Parser.CASE) | (1 << m2_Parser.IF) | (1 << m2_Parser.WHILE) | (1 << m2_Parser.ITERATOR) | (1 << m2_Parser.FOR))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (m2_Parser.TUPLE - 64)) | (1 << (m2_Parser.WHEN - 64)) | (1 << (m2_Parser.INCLUDE - 64)) | (1 << (m2_Parser.REF - 64)) | (1 << (m2_Parser.PTR - 64)) | (1 << (m2_Parser.BLOCK - 64)) | (1 << (m2_Parser.NIL - 64)) | (1 << (m2_Parser.DISCARD - 64)) | (1 << (m2_Parser.DISTINCT - 64)) | (1 << (m2_Parser.IDENTIFIER - 64)) | (1 << (m2_Parser.INT_LIT - 64)) | (1 << (m2_Parser.INT8_LIT - 64)) | (1 << (m2_Parser.INT16_LIT - 64)) | (1 << (m2_Parser.INT32_LIT - 64)) | (1 << (m2_Parser.INT64_LIT - 64)) | (1 << (m2_Parser.UINT_LIT - 64)) | (1 << (m2_Parser.UINT8_LIT - 64)) | (1 << (m2_Parser.UINT16_LIT - 64)) | (1 << (m2_Parser.UINT32_LIT - 64)) | (1 << (m2_Parser.UINT64_LIT - 64)) | (1 << (m2_Parser.FLOAT_LIT - 64)) | (1 << (m2_Parser.FLOAT32_LIT - 64)) | (1 << (m2_Parser.FLOAT64_LIT - 64)) | (1 << (m2_Parser.CHAR_LIT - 64)) | (1 << (m2_Parser.STR_LIT - 64)) | (1 << (m2_Parser.TRIPLESTR_LIT - 64)) | (1 << (m2_Parser.RSTR_LIT - 64)))) != 0)):
                        break

                self.state = 726
                self.match(m2_Parser.SYM_HEADER)
                pass
            elif token in [m2_Parser.ENUM, m2_Parser.OBJECT, m2_Parser.VARIABLE, m2_Parser.LET, m2_Parser.CONST, m2_Parser.PROC, m2_Parser.MIXIN, m2_Parser.EXCEPT, m2_Parser.TRY, m2_Parser.FINALLY, m2_Parser.OUT, m2_Parser.CASE, m2_Parser.IF, m2_Parser.WHILE, m2_Parser.ITERATOR, m2_Parser.FOR, m2_Parser.TUPLE, m2_Parser.WHEN, m2_Parser.INCLUDE, m2_Parser.REF, m2_Parser.PTR, m2_Parser.BLOCK, m2_Parser.DISCARD, m2_Parser.DISTINCT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 728
                self.keyw()
                pass
            elif token in [m2_Parser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 3)
                self.state = 729
                self.match(m2_Parser.IDENTIFIER)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BLOCK(self):
            return self.getToken(m2_Parser.BLOCK, 0)

        def COLON(self):
            return self.getToken(m2_Parser.COLON, 0)

        def stmt(self):
            return self.getTypedRuleContext(m2_Parser.StmtContext,0)


        def symbol(self):
            return self.getTypedRuleContext(m2_Parser.SymbolContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_blockExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockExpr" ):
                listener.enterBlockExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockExpr" ):
                listener.exitBlockExpr(self)




    def blockExpr(self):

        localctx = m2_Parser.BlockExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_blockExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 732
            self.match(m2_Parser.BLOCK)
            self.state = 734
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << m2_Parser.ENUM) | (1 << m2_Parser.OBJECT) | (1 << m2_Parser.VARIABLE) | (1 << m2_Parser.LET) | (1 << m2_Parser.CONST) | (1 << m2_Parser.PROC) | (1 << m2_Parser.MIXIN) | (1 << m2_Parser.EXCEPT) | (1 << m2_Parser.TRY) | (1 << m2_Parser.FINALLY) | (1 << m2_Parser.OUT) | (1 << m2_Parser.CASE) | (1 << m2_Parser.IF) | (1 << m2_Parser.WHILE) | (1 << m2_Parser.ITERATOR) | (1 << m2_Parser.FOR))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (m2_Parser.TUPLE - 64)) | (1 << (m2_Parser.WHEN - 64)) | (1 << (m2_Parser.INCLUDE - 64)) | (1 << (m2_Parser.REF - 64)) | (1 << (m2_Parser.PTR - 64)) | (1 << (m2_Parser.BLOCK - 64)) | (1 << (m2_Parser.DISCARD - 64)) | (1 << (m2_Parser.DISTINCT - 64)) | (1 << (m2_Parser.SYM_HEADER - 64)) | (1 << (m2_Parser.IDENTIFIER - 64)))) != 0):
                self.state = 733
                self.symbol()


            self.state = 736
            self.match(m2_Parser.COLON)
            self.state = 737
            self.stmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(m2_Parser.IF, 0)

        def condExpr(self):
            return self.getTypedRuleContext(m2_Parser.CondExprContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_ifExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfExpr" ):
                listener.enterIfExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfExpr" ):
                listener.exitIfExpr(self)




    def ifExpr(self):

        localctx = m2_Parser.IfExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_ifExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 739
            self.match(m2_Parser.IF)
            self.state = 740
            self.condExpr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhenExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(m2_Parser.WHEN, 0)

        def condExpr(self):
            return self.getTypedRuleContext(m2_Parser.CondExprContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_whenExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhenExpr" ):
                listener.enterWhenExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhenExpr" ):
                listener.exitWhenExpr(self)




    def whenExpr(self):

        localctx = m2_Parser.WhenExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_whenExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 742
            self.match(m2_Parser.WHEN)
            self.state = 743
            self.condExpr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DotExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(m2_Parser.ExprContext,0)


        def DOT(self):
            return self.getToken(m2_Parser.DOT, 0)

        def optInd(self):
            return self.getTypedRuleContext(m2_Parser.OptIndContext,0)


        def symbol(self):
            return self.getTypedRuleContext(m2_Parser.SymbolContext,0)


        def exprList(self):
            return self.getTypedRuleContext(m2_Parser.ExprListContext,0)


        def CLOSE_BRACK(self):
            return self.getToken(m2_Parser.CLOSE_BRACK, 0)

        def OPEN_BRACK(self):
            return self.getToken(m2_Parser.OPEN_BRACK, 0)

        def COLON(self):
            return self.getToken(m2_Parser.COLON, 0)

        def getRuleIndex(self):
            return m2_Parser.RULE_dotExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDotExpr" ):
                listener.enterDotExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDotExpr" ):
                listener.exitDotExpr(self)




    def dotExpr(self):

        localctx = m2_Parser.DotExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_dotExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 745
            self.expr()
            self.state = 746
            self.match(m2_Parser.DOT)
            self.state = 747
            self.optInd()
            self.state = 755
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [m2_Parser.ENUM, m2_Parser.OBJECT, m2_Parser.VARIABLE, m2_Parser.LET, m2_Parser.CONST, m2_Parser.PROC, m2_Parser.MIXIN, m2_Parser.EXCEPT, m2_Parser.TRY, m2_Parser.FINALLY, m2_Parser.OUT, m2_Parser.CASE, m2_Parser.IF, m2_Parser.WHILE, m2_Parser.ITERATOR, m2_Parser.FOR, m2_Parser.TUPLE, m2_Parser.WHEN, m2_Parser.INCLUDE, m2_Parser.REF, m2_Parser.PTR, m2_Parser.BLOCK, m2_Parser.DISCARD, m2_Parser.DISTINCT, m2_Parser.SYM_HEADER, m2_Parser.IDENTIFIER]:
                self.state = 748
                self.symbol()
                pass
            elif token in [m2_Parser.OPEN_BRACK]:
                self.state = 749
                self.match(m2_Parser.OPEN_BRACK)
                self.state = 750
                self.match(m2_Parser.COLON)
                self.state = 752
                self.exprList()
                self.state = 753
                self.match(m2_Parser.CLOSE_BRACK)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def forStmt(self):
            return self.getTypedRuleContext(m2_Parser.ForStmtContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_forExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForExpr" ):
                listener.enterForExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForExpr" ):
                listener.exitForExpr(self)




    def forExpr(self):

        localctx = m2_Parser.ForExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_forExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 757
            self.forStmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TryExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRY(self):
            return self.getToken(m2_Parser.TRY, 0)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.COLON)
            else:
                return self.getToken(m2_Parser.COLON, i)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.StmtContext)
            else:
                return self.getTypedRuleContext(m2_Parser.StmtContext,i)


        def optInd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.OptIndContext)
            else:
                return self.getTypedRuleContext(m2_Parser.OptIndContext,i)


        def EXCEPT(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.EXCEPT)
            else:
                return self.getToken(m2_Parser.EXCEPT, i)

        def exprList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.ExprListContext)
            else:
                return self.getTypedRuleContext(m2_Parser.ExprListContext,i)


        def FINALLY(self):
            return self.getToken(m2_Parser.FINALLY, 0)

        def getRuleIndex(self):
            return m2_Parser.RULE_tryExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTryExpr" ):
                listener.enterTryExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTryExpr" ):
                listener.exitTryExpr(self)




    def tryExpr(self):

        localctx = m2_Parser.TryExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_tryExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 759
            self.match(m2_Parser.TRY)
            self.state = 760
            self.match(m2_Parser.COLON)
            self.state = 761
            self.stmt()
            self.state = 762
            if not  tryExprBody():
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, " tryExprBody()")
            self.state = 771
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,64,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 763
                    self.optInd()
                    self.state = 764
                    self.match(m2_Parser.EXCEPT)
                    self.state = 765
                    self.exprList()
                    self.state = 766
                    self.match(m2_Parser.COLON)
                    self.state = 767
                    self.stmt() 
                self.state = 773
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,64,self._ctx)

            self.state = 779
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
            if la_ == 1:
                self.state = 774
                self.optInd()
                self.state = 775
                self.match(m2_Parser.FINALLY)
                self.state = 776
                self.match(m2_Parser.COLON)
                self.state = 777
                self.stmt()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def blockExpr(self):
            return self.getTypedRuleContext(m2_Parser.BlockExprContext,0)


        def forExpr(self):
            return self.getTypedRuleContext(m2_Parser.ForExprContext,0)


        def ifExpr(self):
            return self.getTypedRuleContext(m2_Parser.IfExprContext,0)


        def whenExpr(self):
            return self.getTypedRuleContext(m2_Parser.WhenExprContext,0)


        def caseExpr(self):
            return self.getTypedRuleContext(m2_Parser.CaseExprContext,0)


        def tryExpr(self):
            return self.getTypedRuleContext(m2_Parser.TryExprContext,0)


        def simpleExpr(self):
            return self.getTypedRuleContext(m2_Parser.SimpleExprContext,0)


        def NOT(self):
            return self.getToken(m2_Parser.NOT, 0)

        def getRuleIndex(self):
            return m2_Parser.RULE_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr" ):
                listener.enterExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr" ):
                listener.exitExpr(self)




    def expr(self):

        localctx = m2_Parser.ExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 782
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
            if la_ == 1:
                self.state = 781
                self.match(m2_Parser.NOT)


            self.state = 791
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,67,self._ctx)
            if la_ == 1:
                self.state = 784
                self.blockExpr()
                pass

            elif la_ == 2:
                self.state = 785
                self.forExpr()
                pass

            elif la_ == 3:
                self.state = 786
                self.ifExpr()
                pass

            elif la_ == 4:
                self.state = 787
                self.whenExpr()
                pass

            elif la_ == 5:
                self.state = 788
                self.caseExpr()
                pass

            elif la_ == 6:
                self.state = 789
                self.tryExpr()
                pass

            elif la_ == 7:
                self.state = 790
                self.simpleExpr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModuleNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(m2_Parser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return m2_Parser.RULE_moduleName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleName" ):
                listener.enterModuleName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleName" ):
                listener.exitModuleName(self)




    def moduleName(self):

        localctx = m2_Parser.ModuleNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_moduleName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 793
            self.match(m2_Parser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColonBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(m2_Parser.COLON, 0)

        def stmt(self):
            return self.getTypedRuleContext(m2_Parser.StmtContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_colonBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColonBody" ):
                listener.enterColonBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColonBody" ):
                listener.exitColonBody(self)




    def colonBody(self):

        localctx = m2_Parser.ColonBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_colonBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 795
            self.match(m2_Parser.COLON)
            self.state = 796
            self.stmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(m2_Parser.RETURN, 0)

        def optInd(self):
            return self.getTypedRuleContext(m2_Parser.OptIndContext,0)


        def expr(self):
            return self.getTypedRuleContext(m2_Parser.ExprContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_returnStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnStmt" ):
                listener.enterReturnStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnStmt" ):
                listener.exitReturnStmt(self)




    def returnStmt(self):

        localctx = m2_Parser.ReturnStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_returnStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 798
            self.match(m2_Parser.RETURN)
            self.state = 799
            self.optInd()
            self.state = 801
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
            if la_ == 1:
                self.state = 800
                self.expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RaiseStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RAISE(self):
            return self.getToken(m2_Parser.RAISE, 0)

        def optInd(self):
            return self.getTypedRuleContext(m2_Parser.OptIndContext,0)


        def expr(self):
            return self.getTypedRuleContext(m2_Parser.ExprContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_raiseStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRaiseStmt" ):
                listener.enterRaiseStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRaiseStmt" ):
                listener.exitRaiseStmt(self)




    def raiseStmt(self):

        localctx = m2_Parser.RaiseStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_raiseStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 803
            self.match(m2_Parser.RAISE)
            self.state = 804
            self.optInd()
            self.state = 806
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,69,self._ctx)
            if la_ == 1:
                self.state = 805
                self.expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class YieldStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def YIELD(self):
            return self.getToken(m2_Parser.YIELD, 0)

        def optInd(self):
            return self.getTypedRuleContext(m2_Parser.OptIndContext,0)


        def expr(self):
            return self.getTypedRuleContext(m2_Parser.ExprContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_yieldStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYieldStmt" ):
                listener.enterYieldStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYieldStmt" ):
                listener.exitYieldStmt(self)




    def yieldStmt(self):

        localctx = m2_Parser.YieldStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_yieldStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 808
            self.match(m2_Parser.YIELD)
            self.state = 809
            self.optInd()
            self.state = 811
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
            if la_ == 1:
                self.state = 810
                self.expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiscardStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DISCARD(self):
            return self.getToken(m2_Parser.DISCARD, 0)

        def optInd(self):
            return self.getTypedRuleContext(m2_Parser.OptIndContext,0)


        def expr(self):
            return self.getTypedRuleContext(m2_Parser.ExprContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_discardStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiscardStmt" ):
                listener.enterDiscardStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiscardStmt" ):
                listener.exitDiscardStmt(self)




    def discardStmt(self):

        localctx = m2_Parser.DiscardStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_discardStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 813
            self.match(m2_Parser.DISCARD)
            self.state = 814
            self.optInd()
            self.state = 816
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
            if la_ == 1:
                self.state = 815
                self.expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BreakStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BREAK(self):
            return self.getToken(m2_Parser.BREAK, 0)

        def optInd(self):
            return self.getTypedRuleContext(m2_Parser.OptIndContext,0)


        def expr(self):
            return self.getTypedRuleContext(m2_Parser.ExprContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_breakStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBreakStmt" ):
                listener.enterBreakStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBreakStmt" ):
                listener.exitBreakStmt(self)




    def breakStmt(self):

        localctx = m2_Parser.BreakStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_breakStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 818
            self.match(m2_Parser.BREAK)
            self.state = 819
            self.optInd()
            self.state = 821
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,72,self._ctx)
            if la_ == 1:
                self.state = 820
                self.expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContinueStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTINUE(self):
            return self.getToken(m2_Parser.CONTINUE, 0)

        def optInd(self):
            return self.getTypedRuleContext(m2_Parser.OptIndContext,0)


        def expr(self):
            return self.getTypedRuleContext(m2_Parser.ExprContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_continueStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContinueStmt" ):
                listener.enterContinueStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContinueStmt" ):
                listener.exitContinueStmt(self)




    def continueStmt(self):

        localctx = m2_Parser.ContinueStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_continueStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 823
            self.match(m2_Parser.CONTINUE)
            self.state = 824
            self.optInd()
            self.state = 826
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
            if la_ == 1:
                self.state = 825
                self.expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPORT(self):
            return self.getToken(m2_Parser.IMPORT, 0)

        def optInd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.OptIndContext)
            else:
                return self.getTypedRuleContext(m2_Parser.OptIndContext,i)


        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.ExprContext)
            else:
                return self.getTypedRuleContext(m2_Parser.ExprContext,i)


        def EXCEPT(self):
            return self.getToken(m2_Parser.EXCEPT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.COMMA)
            else:
                return self.getToken(m2_Parser.COMMA, i)

        def getRuleIndex(self):
            return m2_Parser.RULE_importStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportStmt" ):
                listener.enterImportStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportStmt" ):
                listener.exitImportStmt(self)




    def importStmt(self):

        localctx = m2_Parser.ImportStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_importStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 828
            self.match(m2_Parser.IMPORT)
            self.state = 829
            self.optInd()
            self.state = 830
            self.expr()
            self.state = 848
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
            if la_ == 1:
                self.state = 835
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,74,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 831
                        self.match(m2_Parser.COMMA)
                        self.state = 832
                        self.expr() 
                    self.state = 837
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,74,self._ctx)

                pass

            elif la_ == 2:
                self.state = 838
                self.match(m2_Parser.EXCEPT)
                self.state = 839
                self.optInd()

                self.state = 840
                self.expr()
                self.state = 845
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,75,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 841
                        self.match(m2_Parser.COMMA)
                        self.state = 842
                        self.expr() 
                    self.state = 847
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,75,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FromStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(m2_Parser.FROM, 0)

        def moduleName(self):
            return self.getTypedRuleContext(m2_Parser.ModuleNameContext,0)


        def IMPORT(self):
            return self.getToken(m2_Parser.IMPORT, 0)

        def optInd(self):
            return self.getTypedRuleContext(m2_Parser.OptIndContext,0)


        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.ExprContext)
            else:
                return self.getTypedRuleContext(m2_Parser.ExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.COMMA)
            else:
                return self.getToken(m2_Parser.COMMA, i)

        def getRuleIndex(self):
            return m2_Parser.RULE_fromStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFromStmt" ):
                listener.enterFromStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFromStmt" ):
                listener.exitFromStmt(self)




    def fromStmt(self):

        localctx = m2_Parser.FromStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_fromStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 850
            self.match(m2_Parser.FROM)
            self.state = 851
            self.moduleName()
            self.state = 852
            self.match(m2_Parser.IMPORT)
            self.state = 853
            self.optInd()
            self.state = 854
            self.expr()
            self.state = 859
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,77,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 855
                    self.match(m2_Parser.COMMA)
                    self.state = 856
                    self.expr() 
                self.state = 861
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,77,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CaseExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(m2_Parser.CASE, 0)

        def IDENTIFIER(self):
            return self.getToken(m2_Parser.IDENTIFIER, 0)

        def ofBranches(self):
            return self.getTypedRuleContext(m2_Parser.OfBranchesContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_caseExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseExpr" ):
                listener.enterCaseExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseExpr" ):
                listener.exitCaseExpr(self)




    def caseExpr(self):

        localctx = m2_Parser.CaseExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_caseExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 862
            self.match(m2_Parser.CASE)
            self.state = 863
            self.match(m2_Parser.IDENTIFIER)
            self.state = 864
            self.ofBranches()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CaseStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(m2_Parser.CASE, 0)

        def expr(self):
            return self.getTypedRuleContext(m2_Parser.ExprContext,0)


        def ofBranches(self):
            return self.getTypedRuleContext(m2_Parser.OfBranchesContext,0)


        def COLON(self):
            return self.getToken(m2_Parser.COLON, 0)

        def ind(self):
            return self.getTypedRuleContext(m2_Parser.IndContext,0)


        def ded(self):
            return self.getTypedRuleContext(m2_Parser.DedContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_caseStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseStmt" ):
                listener.enterCaseStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseStmt" ):
                listener.exitCaseStmt(self)




    def caseStmt(self):

        localctx = m2_Parser.CaseStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_caseStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 866
            self.match(m2_Parser.CASE)
            self.state = 867
            self.expr()
            self.state = 869
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==m2_Parser.COLON:
                self.state = 868
                self.match(m2_Parser.COLON)


            self.state = 876
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [m2_Parser.INDENT]:
                self.state = 871
                self.ind()
                self.state = 872
                self.ofBranches()
                self.state = 873
                self.ded()
                pass
            elif token in [m2_Parser.OF]:
                self.state = 875
                self.ofBranches()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OfBranchContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OF(self):
            return self.getToken(m2_Parser.OF, 0)

        def exprList(self):
            return self.getTypedRuleContext(m2_Parser.ExprListContext,0)


        def COLON(self):
            return self.getToken(m2_Parser.COLON, 0)

        def stmt(self):
            return self.getTypedRuleContext(m2_Parser.StmtContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_ofBranch

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOfBranch" ):
                listener.enterOfBranch(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOfBranch" ):
                listener.exitOfBranch(self)




    def ofBranch(self):

        localctx = m2_Parser.OfBranchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_ofBranch)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 878
            self.match(m2_Parser.OF)
            self.state = 879
            self.exprList()
            self.state = 880
            self.match(m2_Parser.COLON)
            self.state = 881
            self.stmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OfBranchesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ofBranch(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.OfBranchContext)
            else:
                return self.getTypedRuleContext(m2_Parser.OfBranchContext,i)


        def ELIF(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.ELIF)
            else:
                return self.getToken(m2_Parser.ELIF, i)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.ExprContext)
            else:
                return self.getTypedRuleContext(m2_Parser.ExprContext,i)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.COLON)
            else:
                return self.getToken(m2_Parser.COLON, i)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.StmtContext)
            else:
                return self.getTypedRuleContext(m2_Parser.StmtContext,i)


        def ELSE(self):
            return self.getToken(m2_Parser.ELSE, 0)

        def getRuleIndex(self):
            return m2_Parser.RULE_ofBranches

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOfBranches" ):
                listener.enterOfBranches(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOfBranches" ):
                listener.exitOfBranches(self)




    def ofBranches(self):

        localctx = m2_Parser.OfBranchesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_ofBranches)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 884 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 883
                    self.ofBranch()

                else:
                    raise NoViableAltException(self)
                self.state = 886 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,80,self._ctx)

            self.state = 895
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,81,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 888
                    self.match(m2_Parser.ELIF)
                    self.state = 889
                    self.expr()
                    self.state = 890
                    self.match(m2_Parser.COLON)
                    self.state = 891
                    self.stmt() 
                self.state = 897
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,81,self._ctx)

            self.state = 901
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
            if la_ == 1:
                self.state = 898
                self.match(m2_Parser.ELSE)
                self.state = 899
                self.match(m2_Parser.COLON)
                self.state = 900
                self.stmt()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IncludeStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INCLUDE(self):
            return self.getToken(m2_Parser.INCLUDE, 0)

        def optInd(self):
            return self.getTypedRuleContext(m2_Parser.OptIndContext,0)


        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.ExprContext)
            else:
                return self.getTypedRuleContext(m2_Parser.ExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.COMMA)
            else:
                return self.getToken(m2_Parser.COMMA, i)

        def getRuleIndex(self):
            return m2_Parser.RULE_includeStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIncludeStmt" ):
                listener.enterIncludeStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIncludeStmt" ):
                listener.exitIncludeStmt(self)




    def includeStmt(self):

        localctx = m2_Parser.IncludeStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_includeStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 903
            self.match(m2_Parser.INCLUDE)
            self.state = 904
            self.optInd()
            self.state = 905
            self.expr()
            self.state = 911
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,83,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 906
                    self.expr()
                    self.state = 907
                    self.match(m2_Parser.COMMA) 
                self.state = 913
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,83,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleExpr(self):
            return self.getTypedRuleContext(m2_Parser.SimpleExprContext,0)


        def EQUALS(self):
            return self.getToken(m2_Parser.EQUALS, 0)

        def optInd(self):
            return self.getTypedRuleContext(m2_Parser.OptIndContext,0)


        def expr(self):
            return self.getTypedRuleContext(m2_Parser.ExprContext,0)


        def colonBody(self):
            return self.getTypedRuleContext(m2_Parser.ColonBodyContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_exprStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprStmt" ):
                listener.enterExprStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprStmt" ):
                listener.exitExprStmt(self)




    def exprStmt(self):

        localctx = m2_Parser.ExprStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_exprStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 914
            self.simpleExpr()
            self.state = 921
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
            if la_ == 1:
                self.state = 915
                self.match(m2_Parser.EQUALS)
                self.state = 916
                self.optInd()
                self.state = 917
                self.expr()
                self.state = 919
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
                if la_ == 1:
                    self.state = 918
                    self.colonBody()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def returnStmt(self):
            return self.getTypedRuleContext(m2_Parser.ReturnStmtContext,0)


        def raiseStmt(self):
            return self.getTypedRuleContext(m2_Parser.RaiseStmtContext,0)


        def yieldStmt(self):
            return self.getTypedRuleContext(m2_Parser.YieldStmtContext,0)


        def discardStmt(self):
            return self.getTypedRuleContext(m2_Parser.DiscardStmtContext,0)


        def breakStmt(self):
            return self.getTypedRuleContext(m2_Parser.BreakStmtContext,0)


        def continueStmt(self):
            return self.getTypedRuleContext(m2_Parser.ContinueStmtContext,0)


        def pragmaStmt(self):
            return self.getTypedRuleContext(m2_Parser.PragmaStmtContext,0)


        def importStmt(self):
            return self.getTypedRuleContext(m2_Parser.ImportStmtContext,0)


        def fromStmt(self):
            return self.getTypedRuleContext(m2_Parser.FromStmtContext,0)


        def includeStmt(self):
            return self.getTypedRuleContext(m2_Parser.IncludeStmtContext,0)


        def exprStmt(self):
            return self.getTypedRuleContext(m2_Parser.ExprStmtContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_simpleStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleStmt" ):
                listener.enterSimpleStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleStmt" ):
                listener.exitSimpleStmt(self)




    def simpleStmt(self):

        localctx = m2_Parser.SimpleStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_simpleStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 934
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,86,self._ctx)
            if la_ == 1:
                self.state = 923
                self.returnStmt()
                pass

            elif la_ == 2:
                self.state = 924
                self.raiseStmt()
                pass

            elif la_ == 3:
                self.state = 925
                self.yieldStmt()
                pass

            elif la_ == 4:
                self.state = 926
                self.discardStmt()
                pass

            elif la_ == 5:
                self.state = 927
                self.breakStmt()
                pass

            elif la_ == 6:
                self.state = 928
                self.continueStmt()
                pass

            elif la_ == 7:
                self.state = 929
                self.pragmaStmt()
                pass

            elif la_ == 8:
                self.state = 930
                self.importStmt()
                pass

            elif la_ == 9:
                self.state = 931
                self.fromStmt()
                pass

            elif la_ == 10:
                self.state = 932
                self.includeStmt()
                pass

            elif la_ == 11:
                self.state = 933
                self.exprStmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CondStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.ExprContext)
            else:
                return self.getTypedRuleContext(m2_Parser.ExprContext,i)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.COLON)
            else:
                return self.getToken(m2_Parser.COLON, i)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.StmtContext)
            else:
                return self.getTypedRuleContext(m2_Parser.StmtContext,i)


        def ELIF(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.ELIF)
            else:
                return self.getToken(m2_Parser.ELIF, i)

        def ELSE(self):
            return self.getToken(m2_Parser.ELSE, 0)

        def getRuleIndex(self):
            return m2_Parser.RULE_condStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondStmt" ):
                listener.enterCondStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondStmt" ):
                listener.exitCondStmt(self)




    def condStmt(self):

        localctx = m2_Parser.CondStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_condStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 936
            self.expr()
            self.state = 937
            self.match(m2_Parser.COLON)
            self.state = 938
            self.stmt()
            self.state = 946
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,87,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 939
                    self.match(m2_Parser.ELIF)
                    self.state = 940
                    self.expr()
                    self.state = 941
                    self.match(m2_Parser.COLON)
                    self.state = 942
                    self.stmt() 
                self.state = 948
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,87,self._ctx)

            self.state = 952
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
            if la_ == 1:
                self.state = 949
                self.match(m2_Parser.ELSE)
                self.state = 950
                self.match(m2_Parser.COLON)
                self.state = 951
                self.stmt()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentVisContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self):
            return self.getTypedRuleContext(m2_Parser.SymbolContext,0)


        def operator(self):
            return self.getTypedRuleContext(m2_Parser.OperatorContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_identVis

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentVis" ):
                listener.enterIdentVis(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentVis" ):
                listener.exitIdentVis(self)




    def identVis(self):

        localctx = m2_Parser.IdentVisContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_identVis)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 954
            self.symbol()
            self.state = 956
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,89,self._ctx)
            if la_ == 1:
                self.state = 955
                self.operator()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentVisDotContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.SymbolContext)
            else:
                return self.getTypedRuleContext(m2_Parser.SymbolContext,i)


        def optInd(self):
            return self.getTypedRuleContext(m2_Parser.OptIndContext,0)


        def DOT(self):
            return self.getToken(m2_Parser.DOT, 0)

        def operator(self):
            return self.getTypedRuleContext(m2_Parser.OperatorContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_identVisDot

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentVisDot" ):
                listener.enterIdentVisDot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentVisDot" ):
                listener.exitIdentVisDot(self)




    def identVisDot(self):

        localctx = m2_Parser.IdentVisDotContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_identVisDot)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 958
            self.symbol()
            self.state = 960
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==m2_Parser.DOT:
                self.state = 959
                self.match(m2_Parser.DOT)


            self.state = 962
            self.optInd()
            self.state = 963
            self.symbol()
            self.state = 965
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,91,self._ctx)
            if la_ == 1:
                self.state = 964
                self.operator()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentWithPragmaContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identVis(self):
            return self.getTypedRuleContext(m2_Parser.IdentVisContext,0)


        def pragma(self):
            return self.getTypedRuleContext(m2_Parser.PragmaContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_identWithPragma

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentWithPragma" ):
                listener.enterIdentWithPragma(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentWithPragma" ):
                listener.exitIdentWithPragma(self)




    def identWithPragma(self):

        localctx = m2_Parser.IdentWithPragmaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_identWithPragma)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 967
            self.identVis()
            self.state = 969
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
            if la_ == 1:
                self.state = 968
                self.pragma()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(m2_Parser.IF, 0)

        def condStmt(self):
            return self.getTypedRuleContext(m2_Parser.CondStmtContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_ifStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfStmt" ):
                listener.enterIfStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfStmt" ):
                listener.exitIfStmt(self)




    def ifStmt(self):

        localctx = m2_Parser.IfStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_ifStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 971
            self.match(m2_Parser.IF)
            self.state = 972
            self.condStmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhenStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(m2_Parser.WHEN, 0)

        def condStmt(self):
            return self.getTypedRuleContext(m2_Parser.CondStmtContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_whenStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhenStmt" ):
                listener.enterWhenStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhenStmt" ):
                listener.exitWhenStmt(self)




    def whenStmt(self):

        localctx = m2_Parser.WhenStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_whenStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 974
            self.match(m2_Parser.WHEN)
            self.state = 975
            self.condStmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(m2_Parser.WHILE, 0)

        def expr(self):
            return self.getTypedRuleContext(m2_Parser.ExprContext,0)


        def COLON(self):
            return self.getToken(m2_Parser.COLON, 0)

        def stmt(self):
            return self.getTypedRuleContext(m2_Parser.StmtContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_whileStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileStmt" ):
                listener.enterWhileStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileStmt" ):
                listener.exitWhileStmt(self)




    def whileStmt(self):

        localctx = m2_Parser.WhileStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_whileStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 977
            self.match(m2_Parser.WHILE)
            self.state = 978
            self.expr()
            self.state = 979
            self.match(m2_Parser.COLON)
            self.state = 980
            self.stmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TryStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRY(self):
            return self.getToken(m2_Parser.TRY, 0)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.COLON)
            else:
                return self.getToken(m2_Parser.COLON, i)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.StmtContext)
            else:
                return self.getTypedRuleContext(m2_Parser.StmtContext,i)


        def EXCEPT(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.EXCEPT)
            else:
                return self.getToken(m2_Parser.EXCEPT, i)

        def exprList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.ExprListContext)
            else:
                return self.getTypedRuleContext(m2_Parser.ExprListContext,i)


        def FINALLY(self):
            return self.getToken(m2_Parser.FINALLY, 0)

        def getRuleIndex(self):
            return m2_Parser.RULE_tryStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTryStmt" ):
                listener.enterTryStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTryStmt" ):
                listener.exitTryStmt(self)




    def tryStmt(self):

        localctx = m2_Parser.TryStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_tryStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 982
            self.match(m2_Parser.TRY)
            self.state = 983
            self.match(m2_Parser.COLON)
            self.state = 984
            self.stmt()
            self.state = 985
            if not self._input.LT(1).type in [self.EXCEPT, self.FINALLY]:
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "self._input.LT(1).type in [self.EXCEPT, self.FINALLY]")
            self.state = 993
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,93,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 986
                    self.match(m2_Parser.EXCEPT)
                    self.state = 987
                    self.exprList()
                    self.state = 988
                    self.match(m2_Parser.COLON)
                    self.state = 989
                    self.stmt() 
                self.state = 995
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,93,self._ctx)

            self.state = 999
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,94,self._ctx)
            if la_ == 1:
                self.state = 996
                self.match(m2_Parser.FINALLY)
                self.state = 997
                self.match(m2_Parser.COLON)
                self.state = 998
                self.stmt()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatternContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(m2_Parser.OPEN_BRACE, 0)

        def stmt(self):
            return self.getTypedRuleContext(m2_Parser.StmtContext,0)


        def CLOSE_BRACE(self):
            return self.getToken(m2_Parser.CLOSE_BRACE, 0)

        def getRuleIndex(self):
            return m2_Parser.RULE_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPattern" ):
                listener.enterPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPattern" ):
                listener.exitPattern(self)




    def pattern(self):

        localctx = m2_Parser.PatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1001
            self.match(m2_Parser.OPEN_BRACE)
            self.state = 1002
            self.stmt()
            self.state = 1003
            self.match(m2_Parser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericParamContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.SymbolContext)
            else:
                return self.getTypedRuleContext(m2_Parser.SymbolContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.COMMA)
            else:
                return self.getToken(m2_Parser.COMMA, i)

        def COLON(self):
            return self.getToken(m2_Parser.COLON, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.ExprContext)
            else:
                return self.getTypedRuleContext(m2_Parser.ExprContext,i)


        def EQUALS(self):
            return self.getToken(m2_Parser.EQUALS, 0)

        def optInd(self):
            return self.getTypedRuleContext(m2_Parser.OptIndContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_genericParam

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericParam" ):
                listener.enterGenericParam(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericParam" ):
                listener.exitGenericParam(self)




    def genericParam(self):

        localctx = m2_Parser.GenericParamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_genericParam)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1005
            self.symbol()
            self.state = 1010
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,95,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1006
                    self.match(m2_Parser.COMMA)
                    self.state = 1007
                    self.symbol() 
                self.state = 1012
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,95,self._ctx)

            self.state = 1015
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==m2_Parser.COLON:
                self.state = 1013
                self.match(m2_Parser.COLON)
                self.state = 1014
                self.expr()


            self.state = 1021
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==m2_Parser.EQUALS:
                self.state = 1017
                self.match(m2_Parser.EQUALS)
                self.state = 1018
                self.optInd()
                self.state = 1019
                self.expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericParamListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACK(self):
            return self.getToken(m2_Parser.OPEN_BRACK, 0)

        def optInd(self):
            return self.getTypedRuleContext(m2_Parser.OptIndContext,0)


        def optPar(self):
            return self.getTypedRuleContext(m2_Parser.OptParContext,0)


        def CLOSE_BRACK(self):
            return self.getToken(m2_Parser.CLOSE_BRACK, 0)

        def genericParam(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.GenericParamContext)
            else:
                return self.getTypedRuleContext(m2_Parser.GenericParamContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.COMMA)
            else:
                return self.getToken(m2_Parser.COMMA, i)

        def SEMI_COLON(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.SEMI_COLON)
            else:
                return self.getToken(m2_Parser.SEMI_COLON, i)

        def getRuleIndex(self):
            return m2_Parser.RULE_genericParamList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericParamList" ):
                listener.enterGenericParamList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericParamList" ):
                listener.exitGenericParamList(self)




    def genericParamList(self):

        localctx = m2_Parser.GenericParamListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_genericParamList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1023
            self.match(m2_Parser.OPEN_BRACK)
            self.state = 1024
            self.optInd()
            self.state = 1033
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << m2_Parser.ENUM) | (1 << m2_Parser.OBJECT) | (1 << m2_Parser.VARIABLE) | (1 << m2_Parser.LET) | (1 << m2_Parser.CONST) | (1 << m2_Parser.PROC) | (1 << m2_Parser.MIXIN) | (1 << m2_Parser.EXCEPT) | (1 << m2_Parser.TRY) | (1 << m2_Parser.FINALLY) | (1 << m2_Parser.OUT) | (1 << m2_Parser.CASE) | (1 << m2_Parser.IF) | (1 << m2_Parser.WHILE) | (1 << m2_Parser.ITERATOR) | (1 << m2_Parser.FOR))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (m2_Parser.TUPLE - 64)) | (1 << (m2_Parser.WHEN - 64)) | (1 << (m2_Parser.INCLUDE - 64)) | (1 << (m2_Parser.REF - 64)) | (1 << (m2_Parser.PTR - 64)) | (1 << (m2_Parser.BLOCK - 64)) | (1 << (m2_Parser.DISCARD - 64)) | (1 << (m2_Parser.DISTINCT - 64)) | (1 << (m2_Parser.SYM_HEADER - 64)) | (1 << (m2_Parser.IDENTIFIER - 64)))) != 0):
                self.state = 1025
                self.genericParam()
                self.state = 1030
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==m2_Parser.COMMA or _la==m2_Parser.SEMI_COLON:
                    self.state = 1026
                    _la = self._input.LA(1)
                    if not(_la==m2_Parser.COMMA or _la==m2_Parser.SEMI_COLON):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1027
                    self.genericParam()
                    self.state = 1032
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1035
            self.optPar()
            self.state = 1036
            self.match(m2_Parser.CLOSE_BRACK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentWithPragmaDotContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identVisDot(self):
            return self.getTypedRuleContext(m2_Parser.IdentVisDotContext,0)


        def pragma(self):
            return self.getTypedRuleContext(m2_Parser.PragmaContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_identWithPragmaDot

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentWithPragmaDot" ):
                listener.enterIdentWithPragmaDot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentWithPragmaDot" ):
                listener.exitIdentWithPragmaDot(self)




    def identWithPragmaDot(self):

        localctx = m2_Parser.IdentWithPragmaDotContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_identWithPragmaDot)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1038
            self.identVisDot()
            self.state = 1040
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==m2_Parser.OPEN_BRACE:
                self.state = 1039
                self.pragma()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeDefAuxContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleExpr(self):
            return self.getTypedRuleContext(m2_Parser.SimpleExprContext,0)


        def CONCEPT(self):
            return self.getToken(m2_Parser.CONCEPT, 0)

        def typeClass(self):
            return self.getTypedRuleContext(m2_Parser.TypeClassContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_typeDefAux

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeDefAux" ):
                listener.enterTypeDefAux(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeDefAux" ):
                listener.exitTypeDefAux(self)




    def typeDefAux(self):

        localctx = m2_Parser.TypeDefAuxContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_typeDefAux)
        try:
            self.state = 1045
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [m2_Parser.OPEN_PAREN, m2_Parser.OPEN_BRACE, m2_Parser.OPEN_BRACK, m2_Parser.ENUM, m2_Parser.OBJECT, m2_Parser.COLON, m2_Parser.DOT, m2_Parser.EQUALS, m2_Parser.IN, m2_Parser.OF, m2_Parser.NOT, m2_Parser.OP0, m2_Parser.OP1, m2_Parser.OP2, m2_Parser.OP3, m2_Parser.OP4, m2_Parser.OP5, m2_Parser.OP6, m2_Parser.OP7, m2_Parser.OP8, m2_Parser.OP9, m2_Parser.OP10, m2_Parser.VARIABLE, m2_Parser.LET, m2_Parser.CONST, m2_Parser.BIND, m2_Parser.PROC, m2_Parser.STATIC, m2_Parser.MIXIN, m2_Parser.EXCEPT, m2_Parser.TRY, m2_Parser.FINALLY, m2_Parser.OUT, m2_Parser.CASE, m2_Parser.IF, m2_Parser.WHILE, m2_Parser.ITERATOR, m2_Parser.FOR, m2_Parser.TUPLE, m2_Parser.WHEN, m2_Parser.INCLUDE, m2_Parser.REF, m2_Parser.PTR, m2_Parser.BLOCK, m2_Parser.NIL, m2_Parser.CAST, m2_Parser.DISCARD, m2_Parser.DISTINCT, m2_Parser.SYM_HEADER, m2_Parser.IDENTIFIER, m2_Parser.INT_LIT, m2_Parser.INT8_LIT, m2_Parser.INT16_LIT, m2_Parser.INT32_LIT, m2_Parser.INT64_LIT, m2_Parser.UINT_LIT, m2_Parser.UINT8_LIT, m2_Parser.UINT16_LIT, m2_Parser.UINT32_LIT, m2_Parser.UINT64_LIT, m2_Parser.FLOAT_LIT, m2_Parser.FLOAT32_LIT, m2_Parser.FLOAT64_LIT, m2_Parser.CHAR_LIT, m2_Parser.STR_LIT, m2_Parser.TRIPLESTR_LIT, m2_Parser.RSTR_LIT, m2_Parser.GENERALIZED_STR_LIT, m2_Parser.GENERALIZED_TRIPLESTR_LIT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1042
                self.simpleExpr()
                pass
            elif token in [m2_Parser.CONCEPT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1043
                self.match(m2_Parser.CONCEPT)
                self.state = 1044
                self.typeClass()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObjectWhenContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(m2_Parser.WHEN, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.ExprContext)
            else:
                return self.getTypedRuleContext(m2_Parser.ExprContext,i)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.COLON)
            else:
                return self.getToken(m2_Parser.COLON, i)

        def objectPart(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.ObjectPartContext)
            else:
                return self.getTypedRuleContext(m2_Parser.ObjectPartContext,i)


        def ELIF(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.ELIF)
            else:
                return self.getToken(m2_Parser.ELIF, i)

        def ELSE(self):
            return self.getToken(m2_Parser.ELSE, 0)

        def getRuleIndex(self):
            return m2_Parser.RULE_objectWhen

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjectWhen" ):
                listener.enterObjectWhen(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjectWhen" ):
                listener.exitObjectWhen(self)




    def objectWhen(self):

        localctx = m2_Parser.ObjectWhenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_objectWhen)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1047
            self.match(m2_Parser.WHEN)
            self.state = 1048
            self.expr()
            self.state = 1049
            self.match(m2_Parser.COLON)
            self.state = 1050
            self.objectPart()
            self.state = 1058
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,102,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1051
                    self.match(m2_Parser.ELIF)
                    self.state = 1052
                    self.expr()
                    self.state = 1053
                    self.match(m2_Parser.COLON)
                    self.state = 1054
                    self.objectPart() 
                self.state = 1060
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,102,self._ctx)

            self.state = 1064
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
            if la_ == 1:
                self.state = 1061
                self.match(m2_Parser.ELSE)
                self.state = 1062
                self.match(m2_Parser.COLON)
                self.state = 1063
                self.objectPart()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObjectBranchContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OF(self):
            return self.getToken(m2_Parser.OF, 0)

        def exprList(self):
            return self.getTypedRuleContext(m2_Parser.ExprListContext,0)


        def COLON(self):
            return self.getToken(m2_Parser.COLON, 0)

        def objectPart(self):
            return self.getTypedRuleContext(m2_Parser.ObjectPartContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_objectBranch

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjectBranch" ):
                listener.enterObjectBranch(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjectBranch" ):
                listener.exitObjectBranch(self)




    def objectBranch(self):

        localctx = m2_Parser.ObjectBranchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_objectBranch)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1066
            self.match(m2_Parser.OF)
            self.state = 1067
            self.exprList()
            self.state = 1068
            self.match(m2_Parser.COLON)
            self.state = 1069
            self.objectPart()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObjectBranchesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def objectBranch(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.ObjectBranchContext)
            else:
                return self.getTypedRuleContext(m2_Parser.ObjectBranchContext,i)


        def ELIF(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.ELIF)
            else:
                return self.getToken(m2_Parser.ELIF, i)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.ExprContext)
            else:
                return self.getTypedRuleContext(m2_Parser.ExprContext,i)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.COLON)
            else:
                return self.getToken(m2_Parser.COLON, i)

        def objectPart(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.ObjectPartContext)
            else:
                return self.getTypedRuleContext(m2_Parser.ObjectPartContext,i)


        def ELSE(self):
            return self.getToken(m2_Parser.ELSE, 0)

        def getRuleIndex(self):
            return m2_Parser.RULE_objectBranches

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjectBranches" ):
                listener.enterObjectBranches(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjectBranches" ):
                listener.exitObjectBranches(self)




    def objectBranches(self):

        localctx = m2_Parser.ObjectBranchesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_objectBranches)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1071
            self.objectBranch()
            self.state = 1075
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,104,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1072
                    self.objectBranch() 
                self.state = 1077
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,104,self._ctx)

            self.state = 1085
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,105,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1078
                    self.match(m2_Parser.ELIF)
                    self.state = 1079
                    self.expr()
                    self.state = 1080
                    self.match(m2_Parser.COLON)
                    self.state = 1081
                    self.objectPart() 
                self.state = 1087
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,105,self._ctx)

            self.state = 1091
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
            if la_ == 1:
                self.state = 1088
                self.match(m2_Parser.ELSE)
                self.state = 1089
                self.match(m2_Parser.COLON)
                self.state = 1090
                self.objectPart()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObjectCaseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(m2_Parser.CASE, 0)

        def identWithPragma(self):
            return self.getTypedRuleContext(m2_Parser.IdentWithPragmaContext,0)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.COLON)
            else:
                return self.getToken(m2_Parser.COLON, i)

        def typeDesc(self):
            return self.getTypedRuleContext(m2_Parser.TypeDescContext,0)


        def objectBranches(self):
            return self.getTypedRuleContext(m2_Parser.ObjectBranchesContext,0)


        def ind(self):
            return self.getTypedRuleContext(m2_Parser.IndContext,0)


        def ded(self):
            return self.getTypedRuleContext(m2_Parser.DedContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_objectCase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjectCase" ):
                listener.enterObjectCase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjectCase" ):
                listener.exitObjectCase(self)




    def objectCase(self):

        localctx = m2_Parser.ObjectCaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_objectCase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1093
            self.match(m2_Parser.CASE)
            self.state = 1094
            self.identWithPragma()
            self.state = 1095
            self.match(m2_Parser.COLON)
            self.state = 1096
            self.typeDesc()
            self.state = 1098
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==m2_Parser.COLON:
                self.state = 1097
                self.match(m2_Parser.COLON)


            self.state = 1105
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [m2_Parser.INDENT]:
                self.state = 1100
                self.ind()
                self.state = 1101
                self.objectBranches()
                self.state = 1102
                self.ded()
                pass
            elif token in [m2_Parser.OF]:
                self.state = 1104
                self.objectBranches()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObjectPartContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ind(self):
            return self.getTypedRuleContext(m2_Parser.IndContext,0)


        def ded(self):
            return self.getTypedRuleContext(m2_Parser.DedContext,0)


        def objectPart(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.ObjectPartContext)
            else:
                return self.getTypedRuleContext(m2_Parser.ObjectPartContext,i)


        def objectWhen(self):
            return self.getTypedRuleContext(m2_Parser.ObjectWhenContext,0)


        def objectCase(self):
            return self.getTypedRuleContext(m2_Parser.ObjectCaseContext,0)


        def NIL(self):
            return self.getToken(m2_Parser.NIL, 0)

        def DISCARD(self):
            return self.getToken(m2_Parser.DISCARD, 0)

        def declColonEquals(self):
            return self.getTypedRuleContext(m2_Parser.DeclColonEqualsContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_objectPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjectPart" ):
                listener.enterObjectPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjectPart" ):
                listener.exitObjectPart(self)




    def objectPart(self):

        localctx = m2_Parser.ObjectPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_objectPart)
        self._la = 0 # Token type
        try:
            self.state = 1120
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,110,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1107
                self.ind()
                self.state = 1109 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1108
                    self.objectPart()
                    self.state = 1111 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << m2_Parser.ENUM) | (1 << m2_Parser.OBJECT) | (1 << m2_Parser.VARIABLE) | (1 << m2_Parser.LET) | (1 << m2_Parser.CONST) | (1 << m2_Parser.PROC) | (1 << m2_Parser.MIXIN) | (1 << m2_Parser.EXCEPT) | (1 << m2_Parser.TRY) | (1 << m2_Parser.FINALLY) | (1 << m2_Parser.OUT) | (1 << m2_Parser.CASE) | (1 << m2_Parser.IF) | (1 << m2_Parser.WHILE) | (1 << m2_Parser.ITERATOR) | (1 << m2_Parser.FOR))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (m2_Parser.TUPLE - 64)) | (1 << (m2_Parser.WHEN - 64)) | (1 << (m2_Parser.INCLUDE - 64)) | (1 << (m2_Parser.REF - 64)) | (1 << (m2_Parser.PTR - 64)) | (1 << (m2_Parser.BLOCK - 64)) | (1 << (m2_Parser.NIL - 64)) | (1 << (m2_Parser.DISCARD - 64)) | (1 << (m2_Parser.DISTINCT - 64)) | (1 << (m2_Parser.SYM_HEADER - 64)) | (1 << (m2_Parser.IDENTIFIER - 64)) | (1 << (m2_Parser.INDENT - 64)))) != 0)):
                        break

                self.state = 1113
                self.ded()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1115
                self.objectWhen()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1116
                self.objectCase()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1117
                self.match(m2_Parser.NIL)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1118
                self.match(m2_Parser.DISCARD)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1119
                self.declColonEquals()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObjectTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT(self):
            return self.getToken(m2_Parser.OBJECT, 0)

        def objectPart(self):
            return self.getTypedRuleContext(m2_Parser.ObjectPartContext,0)


        def pragma(self):
            return self.getTypedRuleContext(m2_Parser.PragmaContext,0)


        def OF(self):
            return self.getToken(m2_Parser.OF, 0)

        def typeDesc(self):
            return self.getTypedRuleContext(m2_Parser.TypeDescContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_objectType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjectType" ):
                listener.enterObjectType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjectType" ):
                listener.exitObjectType(self)




    def objectType(self):

        localctx = m2_Parser.ObjectTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_objectType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1122
            self.match(m2_Parser.OBJECT)
            self.state = 1124
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==m2_Parser.OPEN_BRACE:
                self.state = 1123
                self.pragma()


            self.state = 1128
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==m2_Parser.OF:
                self.state = 1126
                self.match(m2_Parser.OF)
                self.state = 1127
                self.typeDesc()


            self.state = 1130
            self.objectPart()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeClassParamContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self):
            return self.getTypedRuleContext(m2_Parser.SymbolContext,0)


        def VARIABLE(self):
            return self.getToken(m2_Parser.VARIABLE, 0)

        def OUT(self):
            return self.getToken(m2_Parser.OUT, 0)

        def getRuleIndex(self):
            return m2_Parser.RULE_typeClassParam

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeClassParam" ):
                listener.enterTypeClassParam(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeClassParam" ):
                listener.exitTypeClassParam(self)




    def typeClassParam(self):

        localctx = m2_Parser.TypeClassParamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_typeClassParam)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1133
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,113,self._ctx)
            if la_ == 1:
                self.state = 1132
                _la = self._input.LA(1)
                if not(_la==m2_Parser.VARIABLE or _la==m2_Parser.OUT):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1135
            self.symbol()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeClassContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stmt(self):
            return self.getTypedRuleContext(m2_Parser.StmtContext,0)


        def typeClassParam(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.TypeClassParamContext)
            else:
                return self.getTypedRuleContext(m2_Parser.TypeClassParamContext,i)


        def pragma(self):
            return self.getTypedRuleContext(m2_Parser.PragmaContext,0)


        def OF(self):
            return self.getToken(m2_Parser.OF, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.COMMA)
            else:
                return self.getToken(m2_Parser.COMMA, i)

        def typeDesc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.TypeDescContext)
            else:
                return self.getTypedRuleContext(m2_Parser.TypeDescContext,i)


        def getRuleIndex(self):
            return m2_Parser.RULE_typeClass

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeClass" ):
                listener.enterTypeClass(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeClass" ):
                listener.exitTypeClass(self)




    def typeClass(self):

        localctx = m2_Parser.TypeClassContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_typeClass)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1145
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,115,self._ctx)
            if la_ == 1:
                self.state = 1137
                self.typeClassParam()
                self.state = 1142
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,114,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1138
                        self.match(m2_Parser.COMMA)
                        self.state = 1139
                        self.typeClassParam() 
                    self.state = 1144
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,114,self._ctx)



            self.state = 1148
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,116,self._ctx)
            if la_ == 1:
                self.state = 1147
                self.pragma()


            self.state = 1161
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
            if la_ == 1:
                self.state = 1150
                self.match(m2_Parser.OF)
                self.state = 1159
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,118,self._ctx)
                if la_ == 1:
                    self.state = 1151
                    self.typeDesc()
                    self.state = 1156
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,117,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1152
                            self.match(m2_Parser.COMMA)
                            self.state = 1153
                            self.typeDesc() 
                        self.state = 1158
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,117,self._ctx)





            self.state = 1163
            if not self._input.LT(1).type == self.INDENT:
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "self._input.LT(1).type == self.INDENT")
            self.state = 1164
            self.stmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeDefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identWithPragmaDot(self):
            return self.getTypedRuleContext(m2_Parser.IdentWithPragmaDotContext,0)


        def EQUALS(self):
            return self.getToken(m2_Parser.EQUALS, 0)

        def optInd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.OptIndContext)
            else:
                return self.getTypedRuleContext(m2_Parser.OptIndContext,i)


        def typeDefAux(self):
            return self.getTypedRuleContext(m2_Parser.TypeDefAuxContext,0)


        def genericParamList(self):
            return self.getTypedRuleContext(m2_Parser.GenericParamListContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_typeDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeDef" ):
                listener.enterTypeDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeDef" ):
                listener.exitTypeDef(self)




    def typeDef(self):

        localctx = m2_Parser.TypeDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_typeDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1166
            self.identWithPragmaDot()
            self.state = 1168
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==m2_Parser.OPEN_BRACK:
                self.state = 1167
                self.genericParamList()


            self.state = 1170
            self.match(m2_Parser.EQUALS)
            self.state = 1171
            self.optInd()
            self.state = 1172
            self.typeDefAux()
            self.state = 1173
            self.optInd()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identWithPragma(self):
            return self.getTypedRuleContext(m2_Parser.IdentWithPragmaContext,0)


        def EQUALS(self):
            return self.getToken(m2_Parser.EQUALS, 0)

        def optInd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.OptIndContext)
            else:
                return self.getTypedRuleContext(m2_Parser.OptIndContext,i)


        def expr(self):
            return self.getTypedRuleContext(m2_Parser.ExprContext,0)


        def COLON(self):
            return self.getToken(m2_Parser.COLON, 0)

        def typeDesc(self):
            return self.getTypedRuleContext(m2_Parser.TypeDescContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_constant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant" ):
                listener.enterConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant" ):
                listener.exitConstant(self)




    def constant(self):

        localctx = m2_Parser.ConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_constant)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1175
            self.identWithPragma()
            self.state = 1178
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==m2_Parser.COLON:
                self.state = 1176
                self.match(m2_Parser.COLON)
                self.state = 1177
                self.typeDesc()


            self.state = 1180
            self.match(m2_Parser.EQUALS)
            self.state = 1181
            self.optInd()
            self.state = 1182
            self.expr()
            self.state = 1183
            self.optInd()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarTupleContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(m2_Parser.OPEN_PAREN, 0)

        def optInd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.OptIndContext)
            else:
                return self.getTypedRuleContext(m2_Parser.OptIndContext,i)


        def identWithPragma(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.IdentWithPragmaContext)
            else:
                return self.getTypedRuleContext(m2_Parser.IdentWithPragmaContext,i)


        def optPar(self):
            return self.getTypedRuleContext(m2_Parser.OptParContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(m2_Parser.CLOSE_PAREN, 0)

        def EQUALS(self):
            return self.getToken(m2_Parser.EQUALS, 0)

        def expr(self):
            return self.getTypedRuleContext(m2_Parser.ExprContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.COMMA)
            else:
                return self.getToken(m2_Parser.COMMA, i)

        def getRuleIndex(self):
            return m2_Parser.RULE_varTuple

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarTuple" ):
                listener.enterVarTuple(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarTuple" ):
                listener.exitVarTuple(self)




    def varTuple(self):

        localctx = m2_Parser.VarTupleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_varTuple)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1185
            self.match(m2_Parser.OPEN_PAREN)
            self.state = 1186
            self.optInd()
            self.state = 1187
            self.identWithPragma()
            self.state = 1192
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==m2_Parser.COMMA:
                self.state = 1188
                self.match(m2_Parser.COMMA)
                self.state = 1189
                self.identWithPragma()
                self.state = 1194
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1195
            self.optPar()
            self.state = 1196
            self.match(m2_Parser.CLOSE_PAREN)
            self.state = 1197
            self.match(m2_Parser.EQUALS)
            self.state = 1198
            self.optInd()
            self.state = 1199
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclColonEqualsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identWithPragma(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.IdentWithPragmaContext)
            else:
                return self.getTypedRuleContext(m2_Parser.IdentWithPragmaContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.COMMA)
            else:
                return self.getToken(m2_Parser.COMMA, i)

        def COLON(self):
            return self.getToken(m2_Parser.COLON, 0)

        def optInd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.OptIndContext)
            else:
                return self.getTypedRuleContext(m2_Parser.OptIndContext,i)


        def typeDesc(self):
            return self.getTypedRuleContext(m2_Parser.TypeDescContext,0)


        def EQUALS(self):
            return self.getToken(m2_Parser.EQUALS, 0)

        def expr(self):
            return self.getTypedRuleContext(m2_Parser.ExprContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_declColonEquals

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclColonEquals" ):
                listener.enterDeclColonEquals(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclColonEquals" ):
                listener.exitDeclColonEquals(self)




    def declColonEquals(self):

        localctx = m2_Parser.DeclColonEqualsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_declColonEquals)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1201
            self.identWithPragma()
            self.state = 1206
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,123,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1202
                    self.match(m2_Parser.COMMA)
                    self.state = 1203
                    self.identWithPragma() 
                self.state = 1208
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,123,self._ctx)

            self.state = 1210
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,124,self._ctx)
            if la_ == 1:
                self.state = 1209
                self.match(m2_Parser.COMMA)


            self.state = 1216
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,125,self._ctx)
            if la_ == 1:
                self.state = 1212
                self.match(m2_Parser.COLON)
                self.state = 1213
                self.optInd()
                self.state = 1214
                self.typeDesc()


            self.state = 1222
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,126,self._ctx)
            if la_ == 1:
                self.state = 1218
                self.match(m2_Parser.EQUALS)
                self.state = 1219
                self.optInd()
                self.state = 1220
                self.expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentColonEqualsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.IDENTIFIER)
            else:
                return self.getToken(m2_Parser.IDENTIFIER, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.COMMA)
            else:
                return self.getToken(m2_Parser.COMMA, i)

        def COLON(self):
            return self.getToken(m2_Parser.COLON, 0)

        def optInd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.OptIndContext)
            else:
                return self.getTypedRuleContext(m2_Parser.OptIndContext,i)


        def typeDesc(self):
            return self.getTypedRuleContext(m2_Parser.TypeDescContext,0)


        def EQUALS(self):
            return self.getToken(m2_Parser.EQUALS, 0)

        def expr(self):
            return self.getTypedRuleContext(m2_Parser.ExprContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_identColonEquals

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentColonEquals" ):
                listener.enterIdentColonEquals(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentColonEquals" ):
                listener.exitIdentColonEquals(self)




    def identColonEquals(self):

        localctx = m2_Parser.IdentColonEqualsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_identColonEquals)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1224
            self.match(m2_Parser.IDENTIFIER)
            self.state = 1229
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,127,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1225
                    self.match(m2_Parser.COMMA)
                    self.state = 1226
                    self.match(m2_Parser.IDENTIFIER) 
                self.state = 1231
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,127,self._ctx)

            self.state = 1233
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,128,self._ctx)
            if la_ == 1:
                self.state = 1232
                self.match(m2_Parser.COMMA)


            self.state = 1239
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,129,self._ctx)
            if la_ == 1:
                self.state = 1235
                self.match(m2_Parser.COLON)
                self.state = 1236
                self.optInd()
                self.state = 1237
                self.typeDesc()


            self.state = 1245
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,130,self._ctx)
            if la_ == 1:
                self.state = 1241
                self.match(m2_Parser.EQUALS)
                self.state = 1242
                self.optInd()
                self.state = 1243
                self.expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParamListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(m2_Parser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(m2_Parser.CLOSE_PAREN, 0)

        def declColonEquals(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.DeclColonEqualsContext)
            else:
                return self.getTypedRuleContext(m2_Parser.DeclColonEqualsContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.COMMA)
            else:
                return self.getToken(m2_Parser.COMMA, i)

        def SEMI_COLON(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.SEMI_COLON)
            else:
                return self.getToken(m2_Parser.SEMI_COLON, i)

        def getRuleIndex(self):
            return m2_Parser.RULE_paramList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParamList" ):
                listener.enterParamList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParamList" ):
                listener.exitParamList(self)




    def paramList(self):

        localctx = m2_Parser.ParamListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_paramList)
        self._la = 0 # Token type
        try:
            self.state = 1267
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [m2_Parser.OPEN_PAREN]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1247
                self.match(m2_Parser.OPEN_PAREN)
                self.state = 1256
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << m2_Parser.ENUM) | (1 << m2_Parser.OBJECT) | (1 << m2_Parser.VARIABLE) | (1 << m2_Parser.LET) | (1 << m2_Parser.CONST) | (1 << m2_Parser.PROC) | (1 << m2_Parser.MIXIN) | (1 << m2_Parser.EXCEPT) | (1 << m2_Parser.TRY) | (1 << m2_Parser.FINALLY) | (1 << m2_Parser.OUT) | (1 << m2_Parser.CASE) | (1 << m2_Parser.IF) | (1 << m2_Parser.WHILE) | (1 << m2_Parser.ITERATOR) | (1 << m2_Parser.FOR))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (m2_Parser.TUPLE - 64)) | (1 << (m2_Parser.WHEN - 64)) | (1 << (m2_Parser.INCLUDE - 64)) | (1 << (m2_Parser.REF - 64)) | (1 << (m2_Parser.PTR - 64)) | (1 << (m2_Parser.BLOCK - 64)) | (1 << (m2_Parser.DISCARD - 64)) | (1 << (m2_Parser.DISTINCT - 64)) | (1 << (m2_Parser.SYM_HEADER - 64)) | (1 << (m2_Parser.IDENTIFIER - 64)))) != 0):
                    self.state = 1248
                    self.declColonEquals()
                    self.state = 1253
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==m2_Parser.COMMA or _la==m2_Parser.SEMI_COLON:
                        self.state = 1249
                        _la = self._input.LA(1)
                        if not(_la==m2_Parser.COMMA or _la==m2_Parser.SEMI_COLON):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1250
                        self.declColonEquals()
                        self.state = 1255
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1258
                self.match(m2_Parser.CLOSE_PAREN)
                pass
            elif token in [m2_Parser.ENUM, m2_Parser.OBJECT, m2_Parser.VARIABLE, m2_Parser.LET, m2_Parser.CONST, m2_Parser.PROC, m2_Parser.MIXIN, m2_Parser.EXCEPT, m2_Parser.TRY, m2_Parser.FINALLY, m2_Parser.OUT, m2_Parser.CASE, m2_Parser.IF, m2_Parser.WHILE, m2_Parser.ITERATOR, m2_Parser.FOR, m2_Parser.TUPLE, m2_Parser.WHEN, m2_Parser.INCLUDE, m2_Parser.REF, m2_Parser.PTR, m2_Parser.BLOCK, m2_Parser.DISCARD, m2_Parser.DISTINCT, m2_Parser.SYM_HEADER, m2_Parser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1259
                self.declColonEquals()
                self.state = 1264
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,133,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1260
                        _la = self._input.LA(1)
                        if not(_la==m2_Parser.COMMA or _la==m2_Parser.SEMI_COLON):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1261
                        self.declColonEquals() 
                    self.state = 1266
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,133,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParamListColonContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def paramList(self):
            return self.getTypedRuleContext(m2_Parser.ParamListContext,0)


        def COLON(self):
            return self.getToken(m2_Parser.COLON, 0)

        def optInd(self):
            return self.getTypedRuleContext(m2_Parser.OptIndContext,0)


        def typeDesc(self):
            return self.getTypedRuleContext(m2_Parser.TypeDescContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_paramListColon

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParamListColon" ):
                listener.enterParamListColon(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParamListColon" ):
                listener.exitParamListColon(self)




    def paramListColon(self):

        localctx = m2_Parser.ParamListColonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_paramListColon)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1270
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,135,self._ctx)
            if la_ == 1:
                self.state = 1269
                self.paramList()


            self.state = 1276
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,136,self._ctx)
            if la_ == 1:
                self.state = 1272
                self.match(m2_Parser.COLON)
                self.state = 1273
                self.optInd()
                self.state = 1274
                self.typeDesc()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROC(self):
            return self.getToken(m2_Parser.PROC, 0)

        def paramListColon(self):
            return self.getTypedRuleContext(m2_Parser.ParamListColonContext,0)


        def optInd(self):
            return self.getTypedRuleContext(m2_Parser.OptIndContext,0)


        def pragma(self):
            return self.getTypedRuleContext(m2_Parser.PragmaContext,0)


        def EQUALS(self):
            return self.getToken(m2_Parser.EQUALS, 0)

        def stmt(self):
            return self.getTypedRuleContext(m2_Parser.StmtContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_procExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcExpr" ):
                listener.enterProcExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcExpr" ):
                listener.exitProcExpr(self)




    def procExpr(self):

        localctx = m2_Parser.ProcExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_procExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1278
            self.match(m2_Parser.PROC)
            self.state = 1279
            self.paramListColon()
            self.state = 1281
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==m2_Parser.OPEN_BRACE:
                self.state = 1280
                self.pragma()


            self.state = 1285
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==m2_Parser.EQUALS:
                self.state = 1283
                self.match(m2_Parser.EQUALS)
                self.state = 1284
                self.stmt()


            self.state = 1287
            self.optInd()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def optInd(self):
            return self.getTypedRuleContext(m2_Parser.OptIndContext,0)


        def varTuple(self):
            return self.getTypedRuleContext(m2_Parser.VarTupleContext,0)


        def identColonEquals(self):
            return self.getTypedRuleContext(m2_Parser.IdentColonEqualsContext,0)


        def colonBody(self):
            return self.getTypedRuleContext(m2_Parser.ColonBodyContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_variable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable" ):
                listener.enterVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable" ):
                listener.exitVariable(self)




    def variable(self):

        localctx = m2_Parser.VariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_variable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1291
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [m2_Parser.OPEN_PAREN]:
                self.state = 1289
                self.varTuple()
                pass
            elif token in [m2_Parser.IDENTIFIER]:
                self.state = 1290
                self.identColonEquals()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1294
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,140,self._ctx)
            if la_ == 1:
                self.state = 1293
                self.colonBody()


            self.state = 1296
            self.optInd()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedIdentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.SymbolContext)
            else:
                return self.getTypedRuleContext(m2_Parser.SymbolContext,i)


        def DOT(self):
            return self.getToken(m2_Parser.DOT, 0)

        def optInd(self):
            return self.getTypedRuleContext(m2_Parser.OptIndContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_qualifiedIdent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedIdent" ):
                listener.enterQualifiedIdent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedIdent" ):
                listener.exitQualifiedIdent(self)




    def qualifiedIdent(self):

        localctx = m2_Parser.QualifiedIdentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_qualifiedIdent)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1298
            self.symbol()
            self.state = 1303
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,141,self._ctx)
            if la_ == 1:
                self.state = 1299
                self.match(m2_Parser.DOT)
                self.state = 1300
                self.optInd()
                self.state = 1301
                self.symbol()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(m2_Parser.FOR, 0)

        def IN(self):
            return self.getToken(m2_Parser.IN, 0)

        def expr(self):
            return self.getTypedRuleContext(m2_Parser.ExprContext,0)


        def COLON(self):
            return self.getToken(m2_Parser.COLON, 0)

        def stmt(self):
            return self.getTypedRuleContext(m2_Parser.StmtContext,0)


        def identWithPragma(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.IdentWithPragmaContext)
            else:
                return self.getTypedRuleContext(m2_Parser.IdentWithPragmaContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.COMMA)
            else:
                return self.getToken(m2_Parser.COMMA, i)

        def getRuleIndex(self):
            return m2_Parser.RULE_forStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForStmt" ):
                listener.enterForStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForStmt" ):
                listener.exitForStmt(self)




    def forStmt(self):

        localctx = m2_Parser.ForStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_forStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1305
            self.match(m2_Parser.FOR)

            self.state = 1306
            self.identWithPragma()
            self.state = 1311
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==m2_Parser.COMMA:
                self.state = 1307
                self.match(m2_Parser.COMMA)
                self.state = 1308
                self.identWithPragma()
                self.state = 1313
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1314
            self.match(m2_Parser.IN)
            self.state = 1315
            self.expr()
            self.state = 1316
            self.match(m2_Parser.COLON)
            self.state = 1317
            self.stmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BLOCK(self):
            return self.getToken(m2_Parser.BLOCK, 0)

        def COLON(self):
            return self.getToken(m2_Parser.COLON, 0)

        def stmt(self):
            return self.getTypedRuleContext(m2_Parser.StmtContext,0)


        def symbol(self):
            return self.getTypedRuleContext(m2_Parser.SymbolContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_blockStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockStmt" ):
                listener.enterBlockStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockStmt" ):
                listener.exitBlockStmt(self)




    def blockStmt(self):

        localctx = m2_Parser.BlockStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_blockStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1319
            self.match(m2_Parser.BLOCK)
            self.state = 1321
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << m2_Parser.ENUM) | (1 << m2_Parser.OBJECT) | (1 << m2_Parser.VARIABLE) | (1 << m2_Parser.LET) | (1 << m2_Parser.CONST) | (1 << m2_Parser.PROC) | (1 << m2_Parser.MIXIN) | (1 << m2_Parser.EXCEPT) | (1 << m2_Parser.TRY) | (1 << m2_Parser.FINALLY) | (1 << m2_Parser.OUT) | (1 << m2_Parser.CASE) | (1 << m2_Parser.IF) | (1 << m2_Parser.WHILE) | (1 << m2_Parser.ITERATOR) | (1 << m2_Parser.FOR))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (m2_Parser.TUPLE - 64)) | (1 << (m2_Parser.WHEN - 64)) | (1 << (m2_Parser.INCLUDE - 64)) | (1 << (m2_Parser.REF - 64)) | (1 << (m2_Parser.PTR - 64)) | (1 << (m2_Parser.BLOCK - 64)) | (1 << (m2_Parser.DISCARD - 64)) | (1 << (m2_Parser.DISTINCT - 64)) | (1 << (m2_Parser.SYM_HEADER - 64)) | (1 << (m2_Parser.IDENTIFIER - 64)))) != 0):
                self.state = 1320
                self.symbol()


            self.state = 1323
            self.match(m2_Parser.COLON)
            self.state = 1324
            self.stmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StaticStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STATIC(self):
            return self.getToken(m2_Parser.STATIC, 0)

        def COLON(self):
            return self.getToken(m2_Parser.COLON, 0)

        def stmt(self):
            return self.getTypedRuleContext(m2_Parser.StmtContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_staticStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStaticStmt" ):
                listener.enterStaticStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStaticStmt" ):
                listener.exitStaticStmt(self)




    def staticStmt(self):

        localctx = m2_Parser.StaticStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_staticStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1326
            self.match(m2_Parser.STATIC)
            self.state = 1327
            self.match(m2_Parser.COLON)
            self.state = 1328
            self.stmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeferStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFER(self):
            return self.getToken(m2_Parser.DEFER, 0)

        def COLON(self):
            return self.getToken(m2_Parser.COLON, 0)

        def stmt(self):
            return self.getTypedRuleContext(m2_Parser.StmtContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_deferStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeferStmt" ):
                listener.enterDeferStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeferStmt" ):
                listener.exitDeferStmt(self)




    def deferStmt(self):

        localctx = m2_Parser.DeferStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_deferStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1330
            self.match(m2_Parser.DEFER)
            self.state = 1331
            self.match(m2_Parser.COLON)
            self.state = 1332
            self.stmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AsmStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASM(self):
            return self.getToken(m2_Parser.ASM, 0)

        def STR_LIT(self):
            return self.getToken(m2_Parser.STR_LIT, 0)

        def RSTR_LIT(self):
            return self.getToken(m2_Parser.RSTR_LIT, 0)

        def TRIPLESTR_LIT(self):
            return self.getToken(m2_Parser.TRIPLESTR_LIT, 0)

        def pragma(self):
            return self.getTypedRuleContext(m2_Parser.PragmaContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_asmStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAsmStmt" ):
                listener.enterAsmStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAsmStmt" ):
                listener.exitAsmStmt(self)




    def asmStmt(self):

        localctx = m2_Parser.AsmStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_asmStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1334
            self.match(m2_Parser.ASM)
            self.state = 1336
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==m2_Parser.OPEN_BRACE:
                self.state = 1335
                self.pragma()


            self.state = 1338
            _la = self._input.LA(1)
            if not(((((_la - 102)) & ~0x3f) == 0 and ((1 << (_la - 102)) & ((1 << (m2_Parser.STR_LIT - 102)) | (1 << (m2_Parser.TRIPLESTR_LIT - 102)) | (1 << (m2_Parser.RSTR_LIT - 102)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RoutineContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def optInd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.OptIndContext)
            else:
                return self.getTypedRuleContext(m2_Parser.OptIndContext,i)


        def identVis(self):
            return self.getTypedRuleContext(m2_Parser.IdentVisContext,0)


        def paramListColon(self):
            return self.getTypedRuleContext(m2_Parser.ParamListColonContext,0)


        def pattern(self):
            return self.getTypedRuleContext(m2_Parser.PatternContext,0)


        def genericParamList(self):
            return self.getTypedRuleContext(m2_Parser.GenericParamListContext,0)


        def pragma(self):
            return self.getTypedRuleContext(m2_Parser.PragmaContext,0)


        def EQUALS(self):
            return self.getToken(m2_Parser.EQUALS, 0)

        def stmt(self):
            return self.getTypedRuleContext(m2_Parser.StmtContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_routine

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoutine" ):
                listener.enterRoutine(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoutine" ):
                listener.exitRoutine(self)




    def routine(self):

        localctx = m2_Parser.RoutineContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_routine)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1340
            self.optInd()
            self.state = 1341
            self.identVis()
            self.state = 1343
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,145,self._ctx)
            if la_ == 1:
                self.state = 1342
                self.pattern()


            self.state = 1346
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,146,self._ctx)
            if la_ == 1:
                self.state = 1345
                self.genericParamList()


            self.state = 1348
            self.paramListColon()
            self.state = 1350
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,147,self._ctx)
            if la_ == 1:
                self.state = 1349
                self.pragma()


            self.state = 1354
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,148,self._ctx)
            if la_ == 1:
                self.state = 1352
                self.match(m2_Parser.EQUALS)
                self.state = 1353
                self.stmt()


            self.state = 1356
            self.optInd()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeDefSectionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeDef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.TypeDefContext)
            else:
                return self.getTypedRuleContext(m2_Parser.TypeDefContext,i)


        def ind(self):
            return self.getTypedRuleContext(m2_Parser.IndContext,0)


        def ded(self):
            return self.getTypedRuleContext(m2_Parser.DedContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_typeDefSection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeDefSection" ):
                listener.enterTypeDefSection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeDefSection" ):
                listener.exitTypeDefSection(self)




    def typeDefSection(self):

        localctx = m2_Parser.TypeDefSectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_typeDefSection)
        self._la = 0 # Token type
        try:
            self.state = 1367
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [m2_Parser.ENUM, m2_Parser.OBJECT, m2_Parser.VARIABLE, m2_Parser.LET, m2_Parser.CONST, m2_Parser.PROC, m2_Parser.MIXIN, m2_Parser.EXCEPT, m2_Parser.TRY, m2_Parser.FINALLY, m2_Parser.OUT, m2_Parser.CASE, m2_Parser.IF, m2_Parser.WHILE, m2_Parser.ITERATOR, m2_Parser.FOR, m2_Parser.TUPLE, m2_Parser.WHEN, m2_Parser.INCLUDE, m2_Parser.REF, m2_Parser.PTR, m2_Parser.BLOCK, m2_Parser.DISCARD, m2_Parser.DISTINCT, m2_Parser.SYM_HEADER, m2_Parser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1358
                self.typeDef()
                pass
            elif token in [m2_Parser.INDENT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1359
                self.ind()
                self.state = 1361 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1360
                    self.typeDef()
                    self.state = 1363 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << m2_Parser.ENUM) | (1 << m2_Parser.OBJECT) | (1 << m2_Parser.VARIABLE) | (1 << m2_Parser.LET) | (1 << m2_Parser.CONST) | (1 << m2_Parser.PROC) | (1 << m2_Parser.MIXIN) | (1 << m2_Parser.EXCEPT) | (1 << m2_Parser.TRY) | (1 << m2_Parser.FINALLY) | (1 << m2_Parser.OUT) | (1 << m2_Parser.CASE) | (1 << m2_Parser.IF) | (1 << m2_Parser.WHILE) | (1 << m2_Parser.ITERATOR) | (1 << m2_Parser.FOR))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (m2_Parser.TUPLE - 64)) | (1 << (m2_Parser.WHEN - 64)) | (1 << (m2_Parser.INCLUDE - 64)) | (1 << (m2_Parser.REF - 64)) | (1 << (m2_Parser.PTR - 64)) | (1 << (m2_Parser.BLOCK - 64)) | (1 << (m2_Parser.DISCARD - 64)) | (1 << (m2_Parser.DISTINCT - 64)) | (1 << (m2_Parser.SYM_HEADER - 64)) | (1 << (m2_Parser.IDENTIFIER - 64)))) != 0)):
                        break

                self.state = 1365
                self.ded()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantSectionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constant(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.ConstantContext)
            else:
                return self.getTypedRuleContext(m2_Parser.ConstantContext,i)


        def ind(self):
            return self.getTypedRuleContext(m2_Parser.IndContext,0)


        def ded(self):
            return self.getTypedRuleContext(m2_Parser.DedContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_constantSection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantSection" ):
                listener.enterConstantSection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantSection" ):
                listener.exitConstantSection(self)




    def constantSection(self):

        localctx = m2_Parser.ConstantSectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_constantSection)
        self._la = 0 # Token type
        try:
            self.state = 1378
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [m2_Parser.ENUM, m2_Parser.OBJECT, m2_Parser.VARIABLE, m2_Parser.LET, m2_Parser.CONST, m2_Parser.PROC, m2_Parser.MIXIN, m2_Parser.EXCEPT, m2_Parser.TRY, m2_Parser.FINALLY, m2_Parser.OUT, m2_Parser.CASE, m2_Parser.IF, m2_Parser.WHILE, m2_Parser.ITERATOR, m2_Parser.FOR, m2_Parser.TUPLE, m2_Parser.WHEN, m2_Parser.INCLUDE, m2_Parser.REF, m2_Parser.PTR, m2_Parser.BLOCK, m2_Parser.DISCARD, m2_Parser.DISTINCT, m2_Parser.SYM_HEADER, m2_Parser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1369
                self.constant()
                pass
            elif token in [m2_Parser.INDENT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1370
                self.ind()
                self.state = 1372 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1371
                    self.constant()
                    self.state = 1374 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << m2_Parser.ENUM) | (1 << m2_Parser.OBJECT) | (1 << m2_Parser.VARIABLE) | (1 << m2_Parser.LET) | (1 << m2_Parser.CONST) | (1 << m2_Parser.PROC) | (1 << m2_Parser.MIXIN) | (1 << m2_Parser.EXCEPT) | (1 << m2_Parser.TRY) | (1 << m2_Parser.FINALLY) | (1 << m2_Parser.OUT) | (1 << m2_Parser.CASE) | (1 << m2_Parser.IF) | (1 << m2_Parser.WHILE) | (1 << m2_Parser.ITERATOR) | (1 << m2_Parser.FOR))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (m2_Parser.TUPLE - 64)) | (1 << (m2_Parser.WHEN - 64)) | (1 << (m2_Parser.INCLUDE - 64)) | (1 << (m2_Parser.REF - 64)) | (1 << (m2_Parser.PTR - 64)) | (1 << (m2_Parser.BLOCK - 64)) | (1 << (m2_Parser.DISCARD - 64)) | (1 << (m2_Parser.DISTINCT - 64)) | (1 << (m2_Parser.SYM_HEADER - 64)) | (1 << (m2_Parser.IDENTIFIER - 64)))) != 0)):
                        break

                self.state = 1376
                self.ded()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableSectionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.VariableContext)
            else:
                return self.getTypedRuleContext(m2_Parser.VariableContext,i)


        def ind(self):
            return self.getTypedRuleContext(m2_Parser.IndContext,0)


        def ded(self):
            return self.getTypedRuleContext(m2_Parser.DedContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_variableSection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableSection" ):
                listener.enterVariableSection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableSection" ):
                listener.exitVariableSection(self)




    def variableSection(self):

        localctx = m2_Parser.VariableSectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_variableSection)
        self._la = 0 # Token type
        try:
            self.state = 1389
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [m2_Parser.OPEN_PAREN, m2_Parser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1380
                self.variable()
                pass
            elif token in [m2_Parser.INDENT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1381
                self.ind()
                self.state = 1383 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1382
                    self.variable()
                    self.state = 1385 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==m2_Parser.OPEN_PAREN or _la==m2_Parser.IDENTIFIER):
                        break

                self.state = 1387
                self.ded()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BindStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BIND(self):
            return self.getToken(m2_Parser.BIND, 0)

        def optInd(self):
            return self.getTypedRuleContext(m2_Parser.OptIndContext,0)


        def qualifiedIdent(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.QualifiedIdentContext)
            else:
                return self.getTypedRuleContext(m2_Parser.QualifiedIdentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.COMMA)
            else:
                return self.getToken(m2_Parser.COMMA, i)

        def getRuleIndex(self):
            return m2_Parser.RULE_bindStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBindStmt" ):
                listener.enterBindStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBindStmt" ):
                listener.exitBindStmt(self)




    def bindStmt(self):

        localctx = m2_Parser.BindStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_bindStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1391
            self.match(m2_Parser.BIND)
            self.state = 1392
            self.optInd()
            self.state = 1393
            self.qualifiedIdent()
            self.state = 1398
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,155,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1394
                    self.match(m2_Parser.COMMA)
                    self.state = 1395
                    self.qualifiedIdent() 
                self.state = 1400
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,155,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MixinStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MIXIN(self):
            return self.getToken(m2_Parser.MIXIN, 0)

        def optInd(self):
            return self.getTypedRuleContext(m2_Parser.OptIndContext,0)


        def qualifiedIdent(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.QualifiedIdentContext)
            else:
                return self.getTypedRuleContext(m2_Parser.QualifiedIdentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.COMMA)
            else:
                return self.getToken(m2_Parser.COMMA, i)

        def getRuleIndex(self):
            return m2_Parser.RULE_mixinStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMixinStmt" ):
                listener.enterMixinStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMixinStmt" ):
                listener.exitMixinStmt(self)




    def mixinStmt(self):

        localctx = m2_Parser.MixinStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_mixinStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1401
            self.match(m2_Parser.MIXIN)
            self.state = 1402
            self.optInd()
            self.state = 1403
            self.qualifiedIdent()
            self.state = 1408
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,156,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1404
                    self.match(m2_Parser.COMMA)
                    self.state = 1405
                    self.qualifiedIdent() 
                self.state = 1410
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,156,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComplexStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ifStmt(self):
            return self.getTypedRuleContext(m2_Parser.IfStmtContext,0)


        def whenStmt(self):
            return self.getTypedRuleContext(m2_Parser.WhenStmtContext,0)


        def whileStmt(self):
            return self.getTypedRuleContext(m2_Parser.WhileStmtContext,0)


        def tryStmt(self):
            return self.getTypedRuleContext(m2_Parser.TryStmtContext,0)


        def forStmt(self):
            return self.getTypedRuleContext(m2_Parser.ForStmtContext,0)


        def blockStmt(self):
            return self.getTypedRuleContext(m2_Parser.BlockStmtContext,0)


        def staticStmt(self):
            return self.getTypedRuleContext(m2_Parser.StaticStmtContext,0)


        def deferStmt(self):
            return self.getTypedRuleContext(m2_Parser.DeferStmtContext,0)


        def asmStmt(self):
            return self.getTypedRuleContext(m2_Parser.AsmStmtContext,0)


        def PROC(self):
            return self.getToken(m2_Parser.PROC, 0)

        def routine(self):
            return self.getTypedRuleContext(m2_Parser.RoutineContext,0)


        def METHOD(self):
            return self.getToken(m2_Parser.METHOD, 0)

        def ITERATOR(self):
            return self.getToken(m2_Parser.ITERATOR, 0)

        def MACRO(self):
            return self.getToken(m2_Parser.MACRO, 0)

        def TEMPLATE(self):
            return self.getToken(m2_Parser.TEMPLATE, 0)

        def CONVERTER(self):
            return self.getToken(m2_Parser.CONVERTER, 0)

        def TYPE(self):
            return self.getToken(m2_Parser.TYPE, 0)

        def typeDefSection(self):
            return self.getTypedRuleContext(m2_Parser.TypeDefSectionContext,0)


        def CONST(self):
            return self.getToken(m2_Parser.CONST, 0)

        def constantSection(self):
            return self.getTypedRuleContext(m2_Parser.ConstantSectionContext,0)


        def variableSection(self):
            return self.getTypedRuleContext(m2_Parser.VariableSectionContext,0)


        def bindStmt(self):
            return self.getTypedRuleContext(m2_Parser.BindStmtContext,0)


        def mixinStmt(self):
            return self.getTypedRuleContext(m2_Parser.MixinStmtContext,0)


        def LET(self):
            return self.getToken(m2_Parser.LET, 0)

        def VARIABLE(self):
            return self.getToken(m2_Parser.VARIABLE, 0)

        def USING(self):
            return self.getToken(m2_Parser.USING, 0)

        def getRuleIndex(self):
            return m2_Parser.RULE_complexStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComplexStmt" ):
                listener.enterComplexStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComplexStmt" ):
                listener.exitComplexStmt(self)




    def complexStmt(self):

        localctx = m2_Parser.ComplexStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_complexStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1440
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [m2_Parser.IF]:
                self.state = 1411
                self.ifStmt()
                pass
            elif token in [m2_Parser.WHEN]:
                self.state = 1412
                self.whenStmt()
                pass
            elif token in [m2_Parser.WHILE]:
                self.state = 1413
                self.whileStmt()
                pass
            elif token in [m2_Parser.TRY]:
                self.state = 1414
                self.tryStmt()
                pass
            elif token in [m2_Parser.FOR]:
                self.state = 1415
                self.forStmt()
                pass
            elif token in [m2_Parser.BLOCK]:
                self.state = 1416
                self.blockStmt()
                pass
            elif token in [m2_Parser.STATIC]:
                self.state = 1417
                self.staticStmt()
                pass
            elif token in [m2_Parser.DEFER]:
                self.state = 1418
                self.deferStmt()
                pass
            elif token in [m2_Parser.ASM]:
                self.state = 1419
                self.asmStmt()
                pass
            elif token in [m2_Parser.PROC]:
                self.state = 1420
                self.match(m2_Parser.PROC)
                self.state = 1421
                self.routine()
                pass
            elif token in [m2_Parser.METHOD]:
                self.state = 1422
                self.match(m2_Parser.METHOD)
                self.state = 1423
                self.routine()
                pass
            elif token in [m2_Parser.ITERATOR]:
                self.state = 1424
                self.match(m2_Parser.ITERATOR)
                self.state = 1425
                self.routine()
                pass
            elif token in [m2_Parser.MACRO]:
                self.state = 1426
                self.match(m2_Parser.MACRO)
                self.state = 1427
                self.routine()
                pass
            elif token in [m2_Parser.TEMPLATE]:
                self.state = 1428
                self.match(m2_Parser.TEMPLATE)
                self.state = 1429
                self.routine()
                pass
            elif token in [m2_Parser.CONVERTER]:
                self.state = 1430
                self.match(m2_Parser.CONVERTER)
                self.state = 1431
                self.routine()
                pass
            elif token in [m2_Parser.TYPE]:
                self.state = 1432
                self.match(m2_Parser.TYPE)
                self.state = 1433
                self.typeDefSection()
                pass
            elif token in [m2_Parser.CONST]:
                self.state = 1434
                self.match(m2_Parser.CONST)
                self.state = 1435
                self.constantSection()
                pass
            elif token in [m2_Parser.VARIABLE, m2_Parser.LET, m2_Parser.USING]:
                self.state = 1436
                _la = self._input.LA(1)
                if not(((((_la - 37)) & ~0x3f) == 0 and ((1 << (_la - 37)) & ((1 << (m2_Parser.VARIABLE - 37)) | (1 << (m2_Parser.LET - 37)) | (1 << (m2_Parser.USING - 37)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1437
                self.variableSection()
                pass
            elif token in [m2_Parser.BIND]:
                self.state = 1438
                self.bindStmt()
                pass
            elif token in [m2_Parser.MIXIN]:
                self.state = 1439
                self.mixinStmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def complexStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.ComplexStmtContext)
            else:
                return self.getTypedRuleContext(m2_Parser.ComplexStmtContext,i)


        def simpleStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.SimpleStmtContext)
            else:
                return self.getTypedRuleContext(m2_Parser.SimpleStmtContext,i)


        def SEMI_COLON(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.SEMI_COLON)
            else:
                return self.getToken(m2_Parser.SEMI_COLON, i)

        def ind(self):
            return self.getTypedRuleContext(m2_Parser.IndContext,0)


        def ded(self):
            return self.getTypedRuleContext(m2_Parser.DedContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStmt" ):
                listener.enterStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStmt" ):
                listener.exitStmt(self)




    def stmt(self):

        localctx = m2_Parser.StmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_stmt)
        self._la = 0 # Token type
        try:
            self.state = 1481
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,165,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1444
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,158,self._ctx)
                if la_ == 1:
                    self.state = 1442
                    self.complexStmt()
                    pass

                elif la_ == 2:
                    self.state = 1443
                    self.simpleStmt()
                    pass


                self.state = 1453
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,160,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1446
                        self.match(m2_Parser.SEMI_COLON)
                        self.state = 1449
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,159,self._ctx)
                        if la_ == 1:
                            self.state = 1447
                            self.complexStmt()
                            pass

                        elif la_ == 2:
                            self.state = 1448
                            self.simpleStmt()
                            pass

                 
                    self.state = 1455
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,160,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1456
                self.ind()
                self.state = 1459
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,161,self._ctx)
                if la_ == 1:
                    self.state = 1457
                    self.complexStmt()
                    pass

                elif la_ == 2:
                    self.state = 1458
                    self.simpleStmt()
                    pass


                self.state = 1468
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==m2_Parser.SEMI_COLON:
                    self.state = 1461
                    self.match(m2_Parser.SEMI_COLON)
                    self.state = 1464
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,162,self._ctx)
                    if la_ == 1:
                        self.state = 1462
                        self.complexStmt()
                        pass

                    elif la_ == 2:
                        self.state = 1463
                        self.simpleStmt()
                        pass


                    self.state = 1470
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1471
                self.ded()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1473
                self.simpleStmt()
                self.state = 1478
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,164,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1474
                        self.match(m2_Parser.SEMI_COLON)
                        self.state = 1475
                        self.simpleStmt() 
                    self.state = 1480
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,164,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModuleContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(m2_Parser.StmtContext)
            else:
                return self.getTypedRuleContext(m2_Parser.StmtContext,i)


        def SEMI_COLON(self, i:int=None):
            if i is None:
                return self.getTokens(m2_Parser.SEMI_COLON)
            else:
                return self.getToken(m2_Parser.SEMI_COLON, i)

        def getRuleIndex(self):
            return m2_Parser.RULE_module

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModule" ):
                listener.enterModule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModule" ):
                listener.exitModule(self)




    def module(self):

        localctx = m2_Parser.ModuleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_module)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1491
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << m2_Parser.OPEN_PAREN) | (1 << m2_Parser.OPEN_BRACE) | (1 << m2_Parser.OPEN_BRACK) | (1 << m2_Parser.ENUM) | (1 << m2_Parser.OBJECT) | (1 << m2_Parser.TYPE) | (1 << m2_Parser.COLON) | (1 << m2_Parser.DOT) | (1 << m2_Parser.EQUALS) | (1 << m2_Parser.IN) | (1 << m2_Parser.OF) | (1 << m2_Parser.NOT) | (1 << m2_Parser.OP0) | (1 << m2_Parser.OP1) | (1 << m2_Parser.OP2) | (1 << m2_Parser.OP3) | (1 << m2_Parser.OP4) | (1 << m2_Parser.OP5) | (1 << m2_Parser.OP6) | (1 << m2_Parser.OP7) | (1 << m2_Parser.OP8) | (1 << m2_Parser.OP9) | (1 << m2_Parser.OP10) | (1 << m2_Parser.VARIABLE) | (1 << m2_Parser.LET) | (1 << m2_Parser.CONST) | (1 << m2_Parser.BIND) | (1 << m2_Parser.PROC) | (1 << m2_Parser.STATIC) | (1 << m2_Parser.METHOD) | (1 << m2_Parser.MIXIN) | (1 << m2_Parser.EXCEPT) | (1 << m2_Parser.RETURN) | (1 << m2_Parser.TRY) | (1 << m2_Parser.RAISE) | (1 << m2_Parser.FINALLY) | (1 << m2_Parser.OUT) | (1 << m2_Parser.CASE) | (1 << m2_Parser.IF) | (1 << m2_Parser.WHILE) | (1 << m2_Parser.ITERATOR) | (1 << m2_Parser.FOR) | (1 << m2_Parser.CONTINUE) | (1 << m2_Parser.BREAK) | (1 << m2_Parser.TEMPLATE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (m2_Parser.TUPLE - 64)) | (1 << (m2_Parser.USING - 64)) | (1 << (m2_Parser.WHEN - 64)) | (1 << (m2_Parser.YIELD - 64)) | (1 << (m2_Parser.INCLUDE - 64)) | (1 << (m2_Parser.IMPORT - 64)) | (1 << (m2_Parser.FROM - 64)) | (1 << (m2_Parser.REF - 64)) | (1 << (m2_Parser.PTR - 64)) | (1 << (m2_Parser.ASM - 64)) | (1 << (m2_Parser.BLOCK - 64)) | (1 << (m2_Parser.MACRO - 64)) | (1 << (m2_Parser.NIL - 64)) | (1 << (m2_Parser.CAST - 64)) | (1 << (m2_Parser.CONVERTER - 64)) | (1 << (m2_Parser.DEFER - 64)) | (1 << (m2_Parser.DISCARD - 64)) | (1 << (m2_Parser.DISTINCT - 64)) | (1 << (m2_Parser.SYM_HEADER - 64)) | (1 << (m2_Parser.IDENTIFIER - 64)) | (1 << (m2_Parser.INT_LIT - 64)) | (1 << (m2_Parser.INT8_LIT - 64)) | (1 << (m2_Parser.INT16_LIT - 64)) | (1 << (m2_Parser.INT32_LIT - 64)) | (1 << (m2_Parser.INT64_LIT - 64)) | (1 << (m2_Parser.UINT_LIT - 64)) | (1 << (m2_Parser.UINT8_LIT - 64)) | (1 << (m2_Parser.UINT16_LIT - 64)) | (1 << (m2_Parser.UINT32_LIT - 64)) | (1 << (m2_Parser.UINT64_LIT - 64)) | (1 << (m2_Parser.FLOAT_LIT - 64)) | (1 << (m2_Parser.FLOAT32_LIT - 64)) | (1 << (m2_Parser.FLOAT64_LIT - 64)) | (1 << (m2_Parser.CHAR_LIT - 64)) | (1 << (m2_Parser.STR_LIT - 64)) | (1 << (m2_Parser.TRIPLESTR_LIT - 64)) | (1 << (m2_Parser.RSTR_LIT - 64)) | (1 << (m2_Parser.GENERALIZED_STR_LIT - 64)) | (1 << (m2_Parser.GENERALIZED_TRIPLESTR_LIT - 64)) | (1 << (m2_Parser.INDENT - 64)))) != 0):
                self.state = 1483
                self.stmt()
                self.state = 1488
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==m2_Parser.SEMI_COLON:
                    self.state = 1484
                    self.match(m2_Parser.SEMI_COLON)
                    self.state = 1485
                    self.stmt()
                    self.state = 1490
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StartContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def module(self):
            return self.getTypedRuleContext(m2_Parser.ModuleContext,0)


        def getRuleIndex(self):
            return m2_Parser.RULE_start

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStart" ):
                listener.enterStart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStart" ):
                listener.exitStart(self)




    def start(self):

        localctx = m2_Parser.StartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_start)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1493
            self.module()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[22] = self.par_sempred
        self._predicates[31] = self.primarySuffix_sempred
        self._predicates[58] = self.tryExpr_sempred
        self._predicates[84] = self.tryStmt_sempred
        self._predicates[97] = self.typeClass_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def par_sempred(self, localctx:ParContext, predIndex:int):
            if predIndex == 0:
                return self._input.LT(1).type in self.parKeyWList
         

    def primarySuffix_sempred(self, localctx:PrimarySuffixContext, predIndex:int):
            if predIndex == 1:
                return self._input.LT(1).type in self.primarySuffixList
         

    def tryExpr_sempred(self, localctx:TryExprContext, predIndex:int):
            if predIndex == 2:
                return  tryExprBody()
         

    def tryStmt_sempred(self, localctx:TryStmtContext, predIndex:int):
            if predIndex == 3:
                return self._input.LT(1).type in [self.EXCEPT, self.FINALLY]
         

    def typeClass_sempred(self, localctx:TypeClassContext, predIndex:int):
            if predIndex == 4:
                return self._input.LT(1).type == self.INDENT
         




